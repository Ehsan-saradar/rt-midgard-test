// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"
)

type Interval string

const (
	IntervalDay   Interval = "DAY"
	IntervalWeek  Interval = "WEEK"
	IntervalMonth Interval = "MONTH"
)

var AllInterval = []Interval{
	IntervalDay,
	IntervalWeek,
	IntervalMonth,
}

func (e Interval) IsValid() bool {
	switch e {
	case IntervalDay, IntervalWeek, IntervalMonth:
		return true
	}
	return false
}

func (e Interval) String() string {
	return string(e)
}

func (e *Interval) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Interval(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Interval", str)
	}
	return nil
}

func (e Interval) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PoolOrderAttribute string

const (
	PoolOrderAttributeDepth  PoolOrderAttribute = "DEPTH"
	PoolOrderAttributeVolume PoolOrderAttribute = "VOLUME"
)

var AllPoolOrderAttribute = []PoolOrderAttribute{
	PoolOrderAttributeDepth,
	PoolOrderAttributeVolume,
}

func (e PoolOrderAttribute) IsValid() bool {
	switch e {
	case PoolOrderAttributeDepth, PoolOrderAttributeVolume:
		return true
	}
	return false
}

func (e PoolOrderAttribute) String() string {
	return string(e)
}

func (e *PoolOrderAttribute) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PoolOrderAttribute(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PoolOrderAttribute", str)
	}
	return nil
}

func (e PoolOrderAttribute) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
