// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

// The current state of a pool.
// To get historical data or averages use the history queries.
type Pool struct {
	// Asset name in the format "CHAIN.TICKER-SYMBOL" e.g. "BNB.BTCB-101
	Asset string `json:"asset"`
	// Pool Status (bootstrapped, enabled, disabled)
	Status string `json:"status"`
	// Current price of the asset in RUNE
	Price float64 `json:"price"`
	// Total stake units (LP shares) in that pool
	Units int64 `json:"units"`
	// Pool's Stakes
	Stakes *PoolStakes `json:"stakes"`
	// Pool's Depth
	Depth *PoolDepth `json:"depth"`
	// Pool's ROI
	Roi *Roi `json:"roi"`
}

type PoolDepth struct {
	// Current asset balance in ASSET
	AssetDepth int64 `json:"assetDepth"`
	// Current balance in RUNE
	RuneDepth int64 `json:"runeDepth"`
	// Combined total balance: 2 * runeDepth
	PoolDepth int64 `json:"poolDepth"`
}

type PoolStakeHistory struct {
	// Overall Stake History Stats for given time interval
	Meta *PoolStakeHistoryBucket `json:"meta"`
	// Stake History Stats by time interval
	Intervals []*PoolStakeHistoryBucket `json:"intervals"`
}

type PoolStakeHistoryBucket struct {
	// The first timestamp found in this period
	First *int64 `json:"first"`
	// The last timestamp found in this period
	Last *int64 `json:"last"`
	// Total number of stakes in this period (TxCount)
	Count *int64 `json:"count"`
	// Total volume of stakes in RUNE (RuneE8Total)
	VolumeInRune *int64 `json:"volumeInRune"`
	// Total volume of stakes in Asset (AssetE8Total)
	VolumeInAsset *int64 `json:"volumeInAsset"`
	// Total stake units (StakeUnitsTotal)
	Units *int64 `json:"units"`
}

type PoolStakes struct {
	// Sum of all ASSET stakes for all time since pool creation denominated in ASSET
	AssetStaked int64 `json:"assetStaked"`
	// Sum of all RUNE stakes for all time since pool creation denominated in RUNE
	RuneStaked int64 `json:"runeStaked"`
	// RUNE value staked total: runeStakedTotal + (assetStakedTotal * assetPrice)
	PoolStaked int64 `json:"poolStaked"`
}

type PoolSwapHistory struct {
	// Overall Swap History Stats for given time interval
	Meta *PoolSwapHistoryBucket `json:"meta"`
	// Swaps History Stats by time interval
	Intervals []*PoolSwapHistoryBucket `json:"intervals"`
}

type PoolSwapHistoryBucket struct {
	// The first timestamp found in this period
	First *int64 `json:"first"`
	// The last timestamp found in this period
	Last *int64 `json:"last"`
	// Combined stats for swaps from asset to rune and from rune to asset
	Combined *SwapStats `json:"combined"`
	// Just stats for swaps from asset to rune
	ToRune *SwapStats `json:"toRune"`
	// Just stats for swaps from rune to asset
	ToAsset *SwapStats `json:"toAsset"`
}

type Roi struct {
	// Current ASSET ROI
	AssetRoi float64 `json:"assetROI"`
	// Current RUNE ROI
	RuneRoi float64 `json:"runeROI"`
}

// Stats about swaps in any given interval
// This can represent swaps from or to RUNE and also combined stats.
type SwapStats struct {
	// Total number of swaps in this period (TxCount)
	Count *int64 `json:"count"`
	// Total volume of swaps in RUNE (RuneE8Total) in this period
	VolumeInRune *int64 `json:"volumeInRune"`
	// Total fees in RUNE (LiqFeeInRuneE8Total) in this period
	FeesInRune *int64 `json:"feesInRune"`
}

// Time Interval used for querying histories
type Interval string

const (
	// 24 hour period
	IntervalDay Interval = "DAY"
	// 7 day period
	IntervalWeek Interval = "WEEK"
	// Month period
	IntervalMonth Interval = "MONTH"
)

var AllInterval = []Interval{
	IntervalDay,
	IntervalWeek,
	IntervalMonth,
}

func (e Interval) IsValid() bool {
	switch e {
	case IntervalDay, IntervalWeek, IntervalMonth:
		return true
	}
	return false
}

func (e Interval) String() string {
	return string(e)
}

func (e *Interval) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Interval(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Interval", str)
	}
	return nil
}

func (e Interval) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PoolOrderAttribute string

const (
	PoolOrderAttributeDepth  PoolOrderAttribute = "DEPTH"
	PoolOrderAttributeVolume PoolOrderAttribute = "VOLUME"
)

var AllPoolOrderAttribute = []PoolOrderAttribute{
	PoolOrderAttributeDepth,
	PoolOrderAttributeVolume,
}

func (e PoolOrderAttribute) IsValid() bool {
	switch e {
	case PoolOrderAttributeDepth, PoolOrderAttributeVolume:
		return true
	}
	return false
}

func (e PoolOrderAttribute) String() string {
	return string(e)
}

func (e *PoolOrderAttribute) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PoolOrderAttribute(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PoolOrderAttribute", str)
	}
	return nil
}

func (e PoolOrderAttribute) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
