// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Asset struct {
	// Asset name
	Asset string `json:"asset"`
	// Date this asset was created
	Created string `json:"created"`
	// Current price of the asset in RUNE
	Price *float64 `json:"price"`
}

type BondMetrics struct {
	// Bond Metrics for active nodes
	Active *BondMetricsStat `json:"active"`
	// Bond Metrics for standby nodes
	Standby *BondMetricsStat `json:"standby"`
}

type BondMetricsStat struct {
	// Average bond of nodes
	AverageBond float64 `json:"averageBond"`
	// Maximum bond of nodes
	MaximumBond int64 `json:"maximumBond"`
	// Median bond of nodes
	MedianBond int64 `json:"medianBond"`
	// Minimum bond of nodes
	MinimumBond int64 `json:"minimumBond"`
	// Total bond of nodes
	TotalBond int64 `json:"totalBond"`
}

type Health struct {
	Database      bool  `json:"database"`
	ScannerHeight int64 `json:"scannerHeight"`
	CatchingUp    bool  `json:"catchingUp"`
}

type JailInfo struct {
	NodeAddr      string `json:"nodeAddr"`
	ReleaseHeight int64  `json:"releaseHeight"`
	Reason        string `json:"reason"`
}

type Network struct {
	// List of active bonds
	ActiveBonds []*int64 `json:"activeBonds"`
	// Number of active bonds
	ActiveNodeCount int64        `json:"activeNodeCount"`
	BondMetrics     *BondMetrics `json:"bondMetrics"`
	// List of standby bonds
	StandbyBonds []*int64 `json:"standbyBonds"`
	// Number of standby bonds
	StandbyNodeCount int64 `json:"standbyNodeCount"`
	// Total Rune Staked in Pools
	TotalStaked int64 `json:"totalStaked"`
}

type Node struct {
	// Public keys of node
	PublicKeys *PublicKeys `json:"publicKeys"`
	// Node address
	Address string `json:"address"`
	// Node status
	Status string `json:"status"`
	// Amount bonded
	Bond int64 `json:"bond"`
	// Whether not was requested to leave
	RequestedToLeave bool `json:"requestedToLeave"`
	// Whether not was forced to leave
	ForcedToLeave bool `json:"forcedToLeave"`
	// The leave height
	LeaveHeight int64 `json:"leaveHeight"`
	// Node IP address
	IPAddress string `json:"ipAddress"`
	// Node version
	Version string `json:"version"`
	// Node slash points
	SlashPoints int64 `json:"slashPoints"`
	// Node jail info
	Jail *JailInfo `json:"jail"`
	// Node current award
	CurrentAward *int64 `json:"currentAward"`
}

// The current state of a pool.
// To get historical data or averages use the history queries.
type Pool struct {
	// Asset name in the format "CHAIN.TICKER-SYMBOL" e.g. "BNB.BTCB-101
	Asset string `json:"asset"`
	// Pool Status (bootstrapped, enabled, disabled)
	Status string `json:"status"`
	// Current price of the asset in RUNE
	Price float64 `json:"price"`
	// Total stake units (LP shares) in that pool
	Units int64 `json:"units"`
	// Pool's Stakes
	Stakes *PoolStakes `json:"stakes"`
	// Pool's Depth
	Depth *PoolDepth `json:"depth"`
	// Pool's ROI
	Roi *Roi `json:"roi"`
}

type PoolDepth struct {
	// Current asset balance in ASSET
	AssetDepth int64 `json:"assetDepth"`
	// Current balance in RUNE
	RuneDepth int64 `json:"runeDepth"`
	// Combined total balance: 2 * runeDepth
	PoolDepth int64 `json:"poolDepth"`
}

type PoolDepthHistory struct {
	// Overall Depth History Stats for given time interval
	Meta *PoolDepthHistoryBucket `json:"meta"`
	// Depth History Stats by time interval
	Intervals []*PoolDepthHistoryBucket `json:"intervals"`
}

type PoolDepthHistoryBucket struct {
	// The first timestamp found in this period
	First *int64 `json:"first"`
	// The last timestamp found in this period
	Last *int64 `json:"last"`
	// The first rune found in this period
	RuneFirst *int64 `json:"runeFirst"`
	// The last rune found in this period
	RuneLast *int64 `json:"runeLast"`
	// The first asset found in this period
	AssetFirst *int64 `json:"assetFirst"`
	// The last asset found in this period
	AssetLast *int64 `json:"assetLast"`
	// The first price found in this period
	PriceFirst *float64 `json:"priceFirst"`
	// The last price found in this period
	PriceLast *float64 `json:"priceLast"`
}

type PoolPriceHistory struct {
	// Overall Price History Stats for given time interval
	Meta *PoolPriceHistoryBucket `json:"meta"`
	// Price History Stats by time interval
	Intervals []*PoolPriceHistoryBucket `json:"intervals"`
}

type PoolPriceHistoryBucket struct {
	// The first timestamp found in this period
	First *int64 `json:"first"`
	// The last timestamp found in this period
	Last *int64 `json:"last"`
	// The first price found in this period
	PriceFirst *float64 `json:"priceFirst"`
	// The last price found in this period
	PriceLast *float64 `json:"priceLast"`
}

type PoolStakeHistory struct {
	// Overall Stake History Stats for given time interval
	Meta *PoolStakeHistoryBucket `json:"meta"`
	// Stake History Stats by time interval
	Intervals []*PoolStakeHistoryBucket `json:"intervals"`
}

type PoolStakeHistoryBucket struct {
	// The first timestamp found in this period
	First *int64 `json:"first"`
	// The last timestamp found in this period
	Last *int64 `json:"last"`
	// Total number of stakes in this period (TxCount)
	Count *int64 `json:"count"`
	// Total volume of stakes in RUNE (RuneE8Total)
	VolumeInRune *int64 `json:"volumeInRune"`
	// Total volume of stakes in Asset (AssetE8Total)
	VolumeInAsset *int64 `json:"volumeInAsset"`
	// Total stake units (StakeUnitsTotal)
	Units *int64 `json:"units"`
}

type PoolStakes struct {
	// Sum of all ASSET stakes for all time since pool creation denominated in ASSET
	AssetStaked int64 `json:"assetStaked"`
	// Sum of all RUNE stakes for all time since pool creation denominated in RUNE
	RuneStaked int64 `json:"runeStaked"`
	// RUNE value staked total: runeStakedTotal + (assetStakedTotal * assetPrice)
	PoolStaked int64 `json:"poolStaked"`
}

type PoolSwapHistory struct {
	// Overall Swap History Stats for given time interval
	Meta *PoolSwapHistoryBucket `json:"meta"`
	// Swaps History Stats by time interval
	Intervals []*PoolSwapHistoryBucket `json:"intervals"`
}

type PoolSwapHistoryBucket struct {
	// The first timestamp found in this period
	First *int64 `json:"first"`
	// The last timestamp found in this period
	Last *int64 `json:"last"`
	// Combined stats for swaps from asset to rune and from rune to asset
	Combined *SwapStats `json:"combined"`
	// Just stats for swaps from asset to rune
	ToRune *SwapStats `json:"toRune"`
	// Just stats for swaps from rune to asset
	ToAsset *SwapStats `json:"toAsset"`
}

type PublicKeys struct {
	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
	// ed25519 public key
	Ed25519 string `json:"ed25519"`
}

type Roi struct {
	// Current ASSET ROI
	AssetRoi float64 `json:"assetROI"`
	// Current RUNE ROI
	RuneRoi float64 `json:"runeROI"`
}

type Staker struct {
	// Unique staker address
	Address string `json:"address"`
	// List of staked pools
	PoolsArray []*string `json:"poolsArray"`
	// Total staked (in RUNE) across all pools.
	TotalStaked *int64 `json:"totalStaked"`
}

type Stats struct {
	// Daily active users (unique addresses interacting)
	DailyActiveUsers int64 `json:"dailyActiveUsers"`
	// Daily transactions
	DailyTx int64 `json:"dailyTx"`
	// Monthly active users
	MonthlyActiveUsers int64 `json:"monthlyActiveUsers"`
	// Monthly transactions
	MonthlyTx int64 `json:"monthlyTx"`
	// Total buying transactions
	TotalAssetBuys int64 `json:"totalAssetBuys"`
	// Total selling transactions
	TotalAssetSells int64 `json:"totalAssetSells"`
	// Total RUNE balances
	TotalDepth int64 `json:"totalDepth"`
	// Total staking transactions
	TotalStakeTx int64 `json:"totalStakeTx"`
	// Total staked (in RUNE Value).
	TotalStaked int64 `json:"totalStaked"`
	// Total transactions
	TotalTx int64 `json:"totalTx"`
	// Total unique swappers \u0026 stakers
	TotalUsers int64 `json:"totalUsers"`
	// Total (in RUNE Value) of all assets swapped since start.
	TotalVolume int64 `json:"totalVolume"`
	// Total withdrawing transactions
	TotalWithdrawTx int64 `json:"totalWithdrawTx"`
}

// Stats about swaps in any given interval
// This can represent swaps from or to RUNE and also combined stats.
type SwapStats struct {
	// Total number of swaps in this period (TxCount)
	Count *int64 `json:"count"`
	// Total volume of swaps in RUNE (RuneE8Total) in this period
	VolumeInRune *int64 `json:"volumeInRune"`
	// Total fees in RUNE (LiqFeeInRuneE8Total) in this period
	FeesInRune *int64 `json:"feesInRune"`
}

// Time Interval used for querying histories
type Interval string

const (
	// 24 hour period
	IntervalDay Interval = "DAY"
	// 7 day period
	IntervalWeek Interval = "WEEK"
	// Month period
	IntervalMonth Interval = "MONTH"
)

var AllInterval = []Interval{
	IntervalDay,
	IntervalWeek,
	IntervalMonth,
}

func (e Interval) IsValid() bool {
	switch e {
	case IntervalDay, IntervalWeek, IntervalMonth:
		return true
	}
	return false
}

func (e Interval) String() string {
	return string(e)
}

func (e *Interval) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Interval(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Interval", str)
	}
	return nil
}

func (e Interval) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PoolOrderAttribute string

const (
	PoolOrderAttributeDepth  PoolOrderAttribute = "DEPTH"
	PoolOrderAttributeVolume PoolOrderAttribute = "VOLUME"
)

var AllPoolOrderAttribute = []PoolOrderAttribute{
	PoolOrderAttributeDepth,
	PoolOrderAttributeVolume,
}

func (e PoolOrderAttribute) IsValid() bool {
	switch e {
	case PoolOrderAttributeDepth, PoolOrderAttributeVolume:
		return true
	}
	return false
}

func (e PoolOrderAttribute) String() string {
	return string(e)
}

func (e *PoolOrderAttribute) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PoolOrderAttribute(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PoolOrderAttribute", str)
	}
	return nil
}

func (e PoolOrderAttribute) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
