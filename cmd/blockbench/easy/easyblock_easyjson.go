// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package easy

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	types "github.com/tendermint/tendermint/abci/types"
	types1 "github.com/tendermint/tendermint/proto/tendermint/types"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson8fa5cbbfDecodeGitlabComThorchainMidgardCmdBlockbenchEasy(in *jlexer.Lexer, out *EasyResults) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "height":
			out.Height = int64(in.Int64())
		case "txs_results":
			if in.IsNull() {
				in.Skip()
				out.TxsResults = nil
			} else {
				in.Delim('[')
				if out.TxsResults == nil {
					if !in.IsDelim(']') {
						out.TxsResults = make([]*types.ResponseDeliverTx, 0, 8)
					} else {
						out.TxsResults = []*types.ResponseDeliverTx{}
					}
				} else {
					out.TxsResults = (out.TxsResults)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *types.ResponseDeliverTx
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(types.ResponseDeliverTx)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v1).UnmarshalJSON(data))
						}
					}
					out.TxsResults = append(out.TxsResults, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "begin_block_events":
			if in.IsNull() {
				in.Skip()
				out.BeginBlockEvents = nil
			} else {
				in.Delim('[')
				if out.BeginBlockEvents == nil {
					if !in.IsDelim(']') {
						out.BeginBlockEvents = make([]types.Event, 0, 1)
					} else {
						out.BeginBlockEvents = []types.Event{}
					}
				} else {
					out.BeginBlockEvents = (out.BeginBlockEvents)[:0]
				}
				for !in.IsDelim(']') {
					var v2 types.Event
					easyjson8fa5cbbfDecodeGithubComTendermintTendermintAbciTypes(in, &v2)
					out.BeginBlockEvents = append(out.BeginBlockEvents, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "end_block_events":
			if in.IsNull() {
				in.Skip()
				out.EndBlockEvents = nil
			} else {
				in.Delim('[')
				if out.EndBlockEvents == nil {
					if !in.IsDelim(']') {
						out.EndBlockEvents = make([]types.Event, 0, 1)
					} else {
						out.EndBlockEvents = []types.Event{}
					}
				} else {
					out.EndBlockEvents = (out.EndBlockEvents)[:0]
				}
				for !in.IsDelim(']') {
					var v3 types.Event
					easyjson8fa5cbbfDecodeGithubComTendermintTendermintAbciTypes(in, &v3)
					out.EndBlockEvents = append(out.EndBlockEvents, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "consensus_param_updates":
			if in.IsNull() {
				in.Skip()
				out.ConsensusParamUpdates = nil
			} else {
				if out.ConsensusParamUpdates == nil {
					out.ConsensusParamUpdates = new(types.ConsensusParams)
				}
				easyjson8fa5cbbfDecodeGithubComTendermintTendermintAbciTypes1(in, out.ConsensusParamUpdates)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8fa5cbbfEncodeGitlabComThorchainMidgardCmdBlockbenchEasy(out *jwriter.Writer, in EasyResults) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"height\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Height))
	}
	{
		const prefix string = ",\"txs_results\":"
		out.RawString(prefix)
		if in.TxsResults == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v4, v5 := range in.TxsResults {
				if v4 > 0 {
					out.RawByte(',')
				}
				if v5 == nil {
					out.RawString("null")
				} else {
					out.Raw((*v5).MarshalJSON())
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"begin_block_events\":"
		out.RawString(prefix)
		if in.BeginBlockEvents == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.BeginBlockEvents {
				if v6 > 0 {
					out.RawByte(',')
				}
				easyjson8fa5cbbfEncodeGithubComTendermintTendermintAbciTypes(out, v7)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"end_block_events\":"
		out.RawString(prefix)
		if in.EndBlockEvents == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.EndBlockEvents {
				if v8 > 0 {
					out.RawByte(',')
				}
				easyjson8fa5cbbfEncodeGithubComTendermintTendermintAbciTypes(out, v9)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"consensus_param_updates\":"
		out.RawString(prefix)
		if in.ConsensusParamUpdates == nil {
			out.RawString("null")
		} else {
			easyjson8fa5cbbfEncodeGithubComTendermintTendermintAbciTypes1(out, *in.ConsensusParamUpdates)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EasyResults) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8fa5cbbfEncodeGitlabComThorchainMidgardCmdBlockbenchEasy(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EasyResults) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8fa5cbbfEncodeGitlabComThorchainMidgardCmdBlockbenchEasy(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EasyResults) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8fa5cbbfDecodeGitlabComThorchainMidgardCmdBlockbenchEasy(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EasyResults) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8fa5cbbfDecodeGitlabComThorchainMidgardCmdBlockbenchEasy(l, v)
}
func easyjson8fa5cbbfDecodeGithubComTendermintTendermintAbciTypes1(in *jlexer.Lexer, out *types.ConsensusParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "block":
			if in.IsNull() {
				in.Skip()
				out.Block = nil
			} else {
				if out.Block == nil {
					out.Block = new(types.BlockParams)
				}
				easyjson8fa5cbbfDecodeGithubComTendermintTendermintAbciTypes2(in, out.Block)
			}
		case "evidence":
			if in.IsNull() {
				in.Skip()
				out.Evidence = nil
			} else {
				if out.Evidence == nil {
					out.Evidence = new(types1.EvidenceParams)
				}
				easyjson8fa5cbbfDecodeGithubComTendermintTendermintProtoTendermintTypes(in, out.Evidence)
			}
		case "validator":
			if in.IsNull() {
				in.Skip()
				out.Validator = nil
			} else {
				if out.Validator == nil {
					out.Validator = new(types1.ValidatorParams)
				}
				easyjson8fa5cbbfDecodeGithubComTendermintTendermintProtoTendermintTypes1(in, out.Validator)
			}
		case "version":
			if in.IsNull() {
				in.Skip()
				out.Version = nil
			} else {
				if out.Version == nil {
					out.Version = new(types1.VersionParams)
				}
				easyjson8fa5cbbfDecodeGithubComTendermintTendermintProtoTendermintTypes2(in, out.Version)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8fa5cbbfEncodeGithubComTendermintTendermintAbciTypes1(out *jwriter.Writer, in types.ConsensusParams) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Block != nil {
		const prefix string = ",\"block\":"
		first = false
		out.RawString(prefix[1:])
		easyjson8fa5cbbfEncodeGithubComTendermintTendermintAbciTypes2(out, *in.Block)
	}
	if in.Evidence != nil {
		const prefix string = ",\"evidence\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson8fa5cbbfEncodeGithubComTendermintTendermintProtoTendermintTypes(out, *in.Evidence)
	}
	if in.Validator != nil {
		const prefix string = ",\"validator\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson8fa5cbbfEncodeGithubComTendermintTendermintProtoTendermintTypes1(out, *in.Validator)
	}
	if in.Version != nil {
		const prefix string = ",\"version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson8fa5cbbfEncodeGithubComTendermintTendermintProtoTendermintTypes2(out, *in.Version)
	}
	out.RawByte('}')
}
func easyjson8fa5cbbfDecodeGithubComTendermintTendermintProtoTendermintTypes2(in *jlexer.Lexer, out *types1.VersionParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "app_version":
			out.AppVersion = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8fa5cbbfEncodeGithubComTendermintTendermintProtoTendermintTypes2(out *jwriter.Writer, in types1.VersionParams) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AppVersion != 0 {
		const prefix string = ",\"app_version\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.AppVersion))
	}
	out.RawByte('}')
}
func easyjson8fa5cbbfDecodeGithubComTendermintTendermintProtoTendermintTypes1(in *jlexer.Lexer, out *types1.ValidatorParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "pub_key_types":
			if in.IsNull() {
				in.Skip()
				out.PubKeyTypes = nil
			} else {
				in.Delim('[')
				if out.PubKeyTypes == nil {
					if !in.IsDelim(']') {
						out.PubKeyTypes = make([]string, 0, 4)
					} else {
						out.PubKeyTypes = []string{}
					}
				} else {
					out.PubKeyTypes = (out.PubKeyTypes)[:0]
				}
				for !in.IsDelim(']') {
					var v10 string
					v10 = string(in.String())
					out.PubKeyTypes = append(out.PubKeyTypes, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8fa5cbbfEncodeGithubComTendermintTendermintProtoTendermintTypes1(out *jwriter.Writer, in types1.ValidatorParams) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.PubKeyTypes) != 0 {
		const prefix string = ",\"pub_key_types\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v11, v12 := range in.PubKeyTypes {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.String(string(v12))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson8fa5cbbfDecodeGithubComTendermintTendermintProtoTendermintTypes(in *jlexer.Lexer, out *types1.EvidenceParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "max_age_num_blocks":
			out.MaxAgeNumBlocks = int64(in.Int64())
		case "max_age_duration":
			out.MaxAgeDuration = time.Duration(in.Int64())
		case "max_bytes":
			out.MaxBytes = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8fa5cbbfEncodeGithubComTendermintTendermintProtoTendermintTypes(out *jwriter.Writer, in types1.EvidenceParams) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MaxAgeNumBlocks != 0 {
		const prefix string = ",\"max_age_num_blocks\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.MaxAgeNumBlocks))
	}
	{
		const prefix string = ",\"max_age_duration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.MaxAgeDuration))
	}
	if in.MaxBytes != 0 {
		const prefix string = ",\"max_bytes\":"
		out.RawString(prefix)
		out.Int64(int64(in.MaxBytes))
	}
	out.RawByte('}')
}
func easyjson8fa5cbbfDecodeGithubComTendermintTendermintAbciTypes2(in *jlexer.Lexer, out *types.BlockParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "max_bytes":
			out.MaxBytes = int64(in.Int64())
		case "max_gas":
			out.MaxGas = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8fa5cbbfEncodeGithubComTendermintTendermintAbciTypes2(out *jwriter.Writer, in types.BlockParams) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MaxBytes != 0 {
		const prefix string = ",\"max_bytes\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.MaxBytes))
	}
	if in.MaxGas != 0 {
		const prefix string = ",\"max_gas\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.MaxGas))
	}
	out.RawByte('}')
}
func easyjson8fa5cbbfDecodeGithubComTendermintTendermintAbciTypes(in *jlexer.Lexer, out *types.Event) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "attributes":
			if in.IsNull() {
				in.Skip()
				out.Attributes = nil
			} else {
				in.Delim('[')
				if out.Attributes == nil {
					if !in.IsDelim(']') {
						out.Attributes = make([]types.EventAttribute, 0, 1)
					} else {
						out.Attributes = []types.EventAttribute{}
					}
				} else {
					out.Attributes = (out.Attributes)[:0]
				}
				for !in.IsDelim(']') {
					var v13 types.EventAttribute
					if data := in.Raw(); in.Ok() {
						in.AddError((v13).UnmarshalJSON(data))
					}
					out.Attributes = append(out.Attributes, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8fa5cbbfEncodeGithubComTendermintTendermintAbciTypes(out *jwriter.Writer, in types.Event) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Type != "" {
		const prefix string = ",\"type\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	if len(in.Attributes) != 0 {
		const prefix string = ",\"attributes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v14, v15 := range in.Attributes {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.Raw((v15).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson8fa5cbbfDecodeGitlabComThorchainMidgardCmdBlockbenchEasy1(in *jlexer.Lexer, out *EasyBlock) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "height":
			out.Height = int64(in.Int64())
		case "time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Time).UnmarshalJSON(data))
			}
		case "hash":
			if in.IsNull() {
				in.Skip()
				out.Hash = nil
			} else {
				out.Hash = in.Bytes()
			}
		case "results":
			if in.IsNull() {
				in.Skip()
				out.Results = nil
			} else {
				if out.Results == nil {
					out.Results = new(EasyResults)
				}
				(*out.Results).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8fa5cbbfEncodeGitlabComThorchainMidgardCmdBlockbenchEasy1(out *jwriter.Writer, in EasyBlock) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"height\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Height))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.Raw((in.Time).MarshalJSON())
	}
	{
		const prefix string = ",\"hash\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Hash)
	}
	{
		const prefix string = ",\"results\":"
		out.RawString(prefix)
		if in.Results == nil {
			out.RawString("null")
		} else {
			(*in.Results).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EasyBlock) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8fa5cbbfEncodeGitlabComThorchainMidgardCmdBlockbenchEasy1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EasyBlock) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8fa5cbbfEncodeGitlabComThorchainMidgardCmdBlockbenchEasy1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EasyBlock) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8fa5cbbfDecodeGitlabComThorchainMidgardCmdBlockbenchEasy1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EasyBlock) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8fa5cbbfDecodeGitlabComThorchainMidgardCmdBlockbenchEasy1(l, v)
}
