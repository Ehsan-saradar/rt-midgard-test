// Package http provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package http

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/pascaldekloe/metrics"
	"github.com/pascaldekloe/metrics/gostat"
)

// AssetDetail defines model for AssetDetail.
type AssetDetail struct {
	Asset       *Asset  `json:"asset,omitempty"`
	DateCreated *int64  `json:"dateCreated,omitempty"`
	PriceRune   *string `json:"priceRune,omitempty"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward *string `json:"blockReward,omitempty"`
	BondReward  *string `json:"bondReward,omitempty"`
	StakeReward *string `json:"stakeReward,omitempty"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {
	AverageActiveBond  *string `json:"averageActiveBond,omitempty"`
	AverageStandbyBond *string `json:"averageStandbyBond,omitempty"`
	MaximumActiveBond  *string `json:"maximumActiveBond,omitempty"`
	MaximumStandbyBond *string `json:"maximumStandbyBond,omitempty"`
	MedianActiveBond   *string `json:"medianActiveBond,omitempty"`
	MedianStandbyBond  *string `json:"medianStandbyBond,omitempty"`
	MinimumActiveBond  *string `json:"minimumActiveBond,omitempty"`
	MinimumStandbyBond *string `json:"minimumStandbyBond,omitempty"`
	TotalActiveBond    *string `json:"totalActiveBond,omitempty"`
	TotalStandbyBond   *string `json:"totalStandbyBond,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Error string `json:"error"`
}

// NetworkInfo defines model for NetworkInfo.
type NetworkInfo struct {
	ActiveBonds             *[]string     `json:"activeBonds,omitempty"`
	ActiveNodeCount         *int          `json:"activeNodeCount,omitempty"`
	BlockRewards            *BlockRewards `json:"blockRewards,omitempty"`
	BondMetrics             *BondMetrics  `json:"bondMetrics,omitempty"`
	BondingROI              *string       `json:"bondingROI,omitempty"`
	NextChurnHeight         *string       `json:"nextChurnHeight,omitempty"`
	PoolActivationCountdown *int64        `json:"poolActivationCountdown,omitempty"`
	PoolShareFactor         *string       `json:"poolShareFactor,omitempty"`
	StakingROI              *string       `json:"stakingROI,omitempty"`
	StandbyBonds            *[]string     `json:"standbyBonds,omitempty"`
	StandbyNodeCount        *int          `json:"standbyNodeCount,omitempty"`
	TotalReserve            *string       `json:"totalReserve,omitempty"`
	TotalStaked             *string       `json:"totalStaked,omitempty"`
}

// NodeKey defines model for NodeKey.
type NodeKey struct {
	Ed25519   *string `json:"ed25519,omitempty"`
	Secp256k1 *string `json:"secp256k1,omitempty"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset            *Asset  `json:"asset,omitempty"`
	AssetDepth       *string `json:"assetDepth,omitempty"`
	AssetROI         *string `json:"assetROI,omitempty"`
	AssetStakedTotal *string `json:"assetStakedTotal,omitempty"`
	BuyAssetCount    *string `json:"buyAssetCount,omitempty"`
	BuyFeeAverage    *string `json:"buyFeeAverage,omitempty"`
	BuyFeesTotal     *string `json:"buyFeesTotal,omitempty"`
	BuySlipAverage   *string `json:"buySlipAverage,omitempty"`
	BuyTxAverage     *string `json:"buyTxAverage,omitempty"`
	BuyVolume        *string `json:"buyVolume,omitempty"`
	PoolDepth        *string `json:"poolDepth,omitempty"`
	PoolFeeAverage   *string `json:"poolFeeAverage,omitempty"`
	PoolFeesTotal    *string `json:"poolFeesTotal,omitempty"`
	PoolROI          *string `json:"poolROI,omitempty"`
	PoolROI12        *string `json:"poolROI12,omitempty"`
	PoolSlipAverage  *string `json:"poolSlipAverage,omitempty"`
	PoolStakedTotal  *string `json:"poolStakedTotal,omitempty"`
	PoolTxAverage    *string `json:"poolTxAverage,omitempty"`
	PoolUnits        *string `json:"poolUnits,omitempty"`
	PoolVolume       *string `json:"poolVolume,omitempty"`
	PoolVolume24hr   *string `json:"poolVolume24hr,omitempty"`
	Price            *string `json:"price,omitempty"`
	RuneDepth        *string `json:"runeDepth,omitempty"`
	RuneROI          *string `json:"runeROI,omitempty"`
	RuneStakedTotal  *string `json:"runeStakedTotal,omitempty"`
	SellAssetCount   *string `json:"sellAssetCount,omitempty"`
	SellFeeAverage   *string `json:"sellFeeAverage,omitempty"`
	SellFeesTotal    *string `json:"sellFeesTotal,omitempty"`
	SellSlipAverage  *string `json:"sellSlipAverage,omitempty"`
	SellTxAverage    *string `json:"sellTxAverage,omitempty"`
	SellVolume       *string `json:"sellVolume,omitempty"`
	StakeTxCount     *string `json:"stakeTxCount,omitempty"`
	StakersCount     *string `json:"stakersCount,omitempty"`
	StakingTxCount   *string `json:"stakingTxCount,omitempty"`
	Status           *string `json:"status,omitempty"`
	SwappersCount    *string `json:"swappersCount,omitempty"`
	SwappingTxCount  *string `json:"swappingTxCount,omitempty"`
	WithdrawTxCount  *string `json:"withdrawTxCount,omitempty"`
}

// Stakers defines model for Stakers.
type Stakers string

// StakersAddressData defines model for StakersAddressData.
type StakersAddressData struct {
	PoolsArray  *[]Asset `json:"poolsArray,omitempty"`
	TotalEarned *string  `json:"totalEarned,omitempty"`
	TotalROI    *string  `json:"totalROI,omitempty"`
	TotalStaked *string  `json:"totalStaked,omitempty"`
}

// StakersAssetData defines model for StakersAssetData.
type StakersAssetData struct {
	Asset            *Asset  `json:"asset,omitempty"`
	DateFirstStaked  *int64  `json:"dateFirstStaked,omitempty"`
	HeightLastStaked *int64  `json:"heightLastStaked,omitempty"`
	StakeUnits       *string `json:"stakeUnits,omitempty"`
}

// StatsData defines model for StatsData.
type StatsData struct {
	DailyActiveUsers   *string `json:"dailyActiveUsers,omitempty"`
	DailyTx            *string `json:"dailyTx,omitempty"`
	MonthlyActiveUsers *string `json:"monthlyActiveUsers,omitempty"`
	MonthlyTx          *string `json:"monthlyTx,omitempty"`
	PoolCount          *string `json:"poolCount,omitempty"`
	TotalAssetBuys     *string `json:"totalAssetBuys,omitempty"`
	TotalAssetSells    *string `json:"totalAssetSells,omitempty"`
	TotalDepth         *string `json:"totalDepth,omitempty"`
	TotalEarned        *string `json:"totalEarned,omitempty"`
	TotalStakeTx       *string `json:"totalStakeTx,omitempty"`
	TotalStaked        *string `json:"totalStaked,omitempty"`
	TotalTx            *string `json:"totalTx,omitempty"`
	TotalUsers         *string `json:"totalUsers,omitempty"`
	TotalVolume        *string `json:"totalVolume,omitempty"`
	TotalVolume24hr    *string `json:"totalVolume24hr,omitempty"`
	TotalWithdrawTx    *string `json:"totalWithdrawTx,omitempty"`
}

// ThorchainBooleanConstants defines model for ThorchainBooleanConstants.
type ThorchainBooleanConstants struct {
	StrictBondStakeRatio *bool `json:"StrictBondStakeRatio,omitempty"`
}

// ThorchainConstants defines model for ThorchainConstants.
type ThorchainConstants struct {
	BoolValues   *ThorchainBooleanConstants `json:"bool_values,omitempty"`
	Int64Values  *ThorchainInt64Constants   `json:"int_64_values,omitempty"`
	StringValues *ThorchainStringConstants  `json:"string_values,omitempty"`
}

// ThorchainEndpoint defines model for ThorchainEndpoint.
type ThorchainEndpoint struct {
	Address *string `json:"address,omitempty"`
	Chain   *string `json:"chain,omitempty"`
	PubKey  *string `json:"pub_key,omitempty"`
}

// ThorchainEndpoints defines model for ThorchainEndpoints.
type ThorchainEndpoints struct {
	Current *[]ThorchainEndpoint `json:"current,omitempty"`
}

// ThorchainInt64Constants defines model for ThorchainInt64Constants.
type ThorchainInt64Constants struct {
	BadValidatorRate                *int64 `json:"BadValidatorRate,omitempty"`
	BlocksPerYear                   *int64 `json:"BlocksPerYear,omitempty"`
	DesireValidatorSet              *int64 `json:"DesireValidatorSet,omitempty"`
	DoubleSignMaxAge                *int64 `json:"DoubleSignMaxAge,omitempty"`
	EmissionCurve                   *int64 `json:"EmissionCurve,omitempty"`
	FailKeySignSlashPoints          *int64 `json:"FailKeySignSlashPoints,omitempty"`
	FailKeygenSlashPoints           *int64 `json:"FailKeygenSlashPoints,omitempty"`
	FundMigrationInterval           *int64 `json:"FundMigrationInterval,omitempty"`
	JailTimeKeygen                  *int64 `json:"JailTimeKeygen,omitempty"`
	JailTimeKeysign                 *int64 `json:"JailTimeKeysign,omitempty"`
	LackOfObservationPenalty        *int64 `json:"LackOfObservationPenalty,omitempty"`
	MinimumBondInRune               *int64 `json:"MinimumBondInRune,omitempty"`
	MinimumNodesForBFT              *int64 `json:"MinimumNodesForBFT,omitempty"`
	MinimumNodesForYggdrasil        *int64 `json:"MinimumNodesForYggdrasil,omitempty"`
	NewPoolCycle                    *int64 `json:"NewPoolCycle,omitempty"`
	ObserveSlashPoints              *int64 `json:"ObserveSlashPoints,omitempty"`
	OldValidatorRate                *int64 `json:"OldValidatorRate,omitempty"`
	RotatePerBlockHeight            *int64 `json:"RotatePerBlockHeight,omitempty"`
	RotateRetryBlocks               *int64 `json:"RotateRetryBlocks,omitempty"`
	SigningTransactionPeriod        *int64 `json:"SigningTransactionPeriod,omitempty"`
	StakeLockUpBlocks               *int64 `json:"StakeLockUpBlocks,omitempty"`
	TransactionFee                  *int64 `json:"TransactionFee,omitempty"`
	ValidatorRotateInNumBeforeFull  *int64 `json:"ValidatorRotateInNumBeforeFull,omitempty"`
	ValidatorRotateNumAfterFull     *int64 `json:"ValidatorRotateNumAfterFull,omitempty"`
	ValidatorRotateOutNumBeforeFull *int64 `json:"ValidatorRotateOutNumBeforeFull,omitempty"`
	WhiteListGasAsset               *int64 `json:"WhiteListGasAsset,omitempty"`
	YggFundLimit                    *int64 `json:"YggFundLimit,omitempty"`
}

// ThorchainLastblock defines model for ThorchainLastblock.
type ThorchainLastblock struct {
	Chain          *string `json:"chain,omitempty"`
	Lastobservedin *int64  `json:"lastobservedin,omitempty"`
	Lastsignedout  *int64  `json:"lastsignedout,omitempty"`
	Thorchain      *int64  `json:"thorchain,omitempty"`
}

// ThorchainStringConstants defines model for ThorchainStringConstants.
type ThorchainStringConstants struct {
	DefaultPoolStatus *string `json:"DefaultPoolStatus,omitempty"`
}

// TxDetails defines model for TxDetails.
type TxDetails struct {
	Date    *int64  `json:"date,omitempty"`
	Events  *Event  `json:"events,omitempty"`
	Gas     *Gas    `json:"gas,omitempty"`
	Height  *string `json:"height,omitempty"`
	In      *Tx     `json:"in,omitempty"`
	Options *Option `json:"options,omitempty"`
	Out     *[]Tx   `json:"out,omitempty"`
	Pool    *Asset  `json:"pool,omitempty"`
	Status  *string `json:"status,omitempty"`
	Type    *string `json:"type,omitempty"`
}

// Asset defines model for asset.
type Asset string

// Coin defines model for coin.
type Coin struct {
	Amount *string `json:"amount,omitempty"`
	Asset  *Asset  `json:"asset,omitempty"`
}

// Coins defines model for coins.
type Coins []Coin

// Event defines model for event.
type Event struct {
	Fee        *string `json:"fee,omitempty"`
	Slip       *string `json:"slip,omitempty"`
	StakeUnits *string `json:"stakeUnits,omitempty"`
}

// Gas defines model for gas.
type Gas struct {
	Amount *string `json:"amount,omitempty"`
	Asset  *Asset  `json:"asset,omitempty"`
}

// Option defines model for option.
type Option struct {
	Asymmetry           *string `json:"asymmetry,omitempty"`
	PriceTarget         *string `json:"priceTarget,omitempty"`
	WithdrawBasisPoints *string `json:"withdrawBasisPoints,omitempty"`
}

// Tx defines model for tx.
type Tx struct {
	Address *string `json:"address,omitempty"`
	Coins   *Coins  `json:"coins,omitempty"`
	Memo    *string `json:"memo,omitempty"`
	TxID    *string `json:"txID,omitempty"`
}

// AssetsDetailedResponse defines model for AssetsDetailedResponse.
type AssetsDetailedResponse []AssetDetail

// GeneralErrorResponse defines model for GeneralErrorResponse.
type GeneralErrorResponse Error

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {
	CatchingUp    *bool  `json:"catching_up,omitempty"`
	Database      *bool  `json:"database,omitempty"`
	ScannerHeight *int64 `json:"scannerHeight,omitempty"`
}

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse NetworkInfo

// NodeKeyResponse defines model for NodeKeyResponse.
type NodeKeyResponse []NodeKey

// PoolsDetailedResponse defines model for PoolsDetailedResponse.
type PoolsDetailedResponse []PoolDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse []Asset

// StakersAddressDataResponse defines model for StakersAddressDataResponse.
type StakersAddressDataResponse StakersAddressData

// StakersAssetDataResponse defines model for StakersAssetDataResponse.
type StakersAssetDataResponse []StakersAssetData

// StakersResponse defines model for StakersResponse.
type StakersResponse []Stakers

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// ThorchainConstantsResponse defines model for ThorchainConstantsResponse.
type ThorchainConstantsResponse ThorchainConstants

// ThorchainEndpointsResponse defines model for ThorchainEndpointsResponse.
type ThorchainEndpointsResponse ThorchainEndpoints

// ThorchainLastblockResponse defines model for ThorchainLastblockResponse.
type ThorchainLastblockResponse ThorchainLastblock

// TxsResponse defines model for TxsResponse.
type TxsResponse struct {
	Count *int64       `json:"count,omitempty"`
	Txs   *[]TxDetails `json:"txs,omitempty"`
}

// GetAssetInfoParams defines parameters for GetAssetInfo.
type GetAssetInfoParams struct {

	// One or more comma separated unique asset (CHAIN.SYMBOL)
	Asset string `json:"asset"`
}

// GetPoolsDataParams defines parameters for GetPoolsData.
type GetPoolsDataParams struct {

	// One or more comma separated unique asset (CHAIN.SYMBOL)
	Asset string `json:"asset"`
}

// GetStakersAddressAndAssetDataParams defines parameters for GetStakersAddressAndAssetData.
type GetStakersAddressAndAssetDataParams struct {

	// One or more comma separated unique asset (CHAIN.SYMBOL)
	Asset string `json:"asset"`
}

// GetTxDetailsParams defines parameters for GetTxDetails.
type GetTxDetailsParams struct {

	// Address of sender or recipient of any in/out tx in event
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx in event
	Txid *string `json:"txid,omitempty"`

	// Any asset used in event (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of event
	Type *string `json:"type,omitempty"`

	// pagination offset
	Offset int64 `json:"offset"`

	// pagination limit
	Limit int64 `json:"limit"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Asset Information// (GET /v1/assets)
	GetAssetInfo(ctx echo.Context, params GetAssetInfoParams) error
	// Get Documents// (GET /v1/doc)
	GetDocs(ctx echo.Context) error
	// Get Health// (GET /v1/health)
	GetHealth(ctx echo.Context) error
	// Get Network Data// (GET /v1/network)
	GetNetworkData(ctx echo.Context) error
	// Get Node public keys// (GET /v1/nodes)
	GetNodes(ctx echo.Context) error
	// Get Asset Pools// (GET /v1/pools)
	GetPools(ctx echo.Context) error
	// Get Pools Data// (GET /v1/pools/detail)
	GetPoolsData(ctx echo.Context, params GetPoolsDataParams) error
	// Get Stakers// (GET /v1/stakers)
	GetStakersData(ctx echo.Context) error
	// Get Staker Data// (GET /v1/stakers/{address})
	GetStakersAddressData(ctx echo.Context, address string) error
	// Get Staker Pool Data// (GET /v1/stakers/{address}/pools)
	GetStakersAddressAndAssetData(ctx echo.Context, address string, params GetStakersAddressAndAssetDataParams) error
	// Get Global Stats// (GET /v1/stats)
	GetStats(ctx echo.Context) error
	// Get Swagger// (GET /v1/swagger.json)
	GetSwagger(ctx echo.Context) error
	// Get the Proxied THORChain Constants// (GET /v1/thorchain/constants)
	GetThorchainProxiedConstants(ctx echo.Context) error
	// Get the Proxied THORChain Lastblock// (GET /v1/thorchain/lastblock)
	GetThorchainProxiedLastblock(ctx echo.Context) error
	// Get the Proxied Pool Addresses// (GET /v1/thorchain/pool_addresses)
	GetThorchainProxiedEndpoints(ctx echo.Context) error
	// Get details of a tx by address, asset or tx-id// (GET /v1/txs)
	GetTxDetails(ctx echo.Context, params GetTxDetailsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAssetInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetInfo(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAssetInfoParams
	// ------------- Required query parameter "asset" -------------
	if paramValue := ctx.QueryParam("asset"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument asset is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetInfo(ctx, params)
	return err
}

// GetDocs converts echo context to params.
func (w *ServerInterfaceWrapper) GetDocs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDocs(ctx)
	return err
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// GetNetworkData converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworkData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNetworkData(ctx)
	return err
}

// GetNodes converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodes(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodes(ctx)
	return err
}

// GetPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetPools(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPools(ctx)
	return err
}

// GetPoolsData converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolsData(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolsDataParams
	// ------------- Required query parameter "asset" -------------
	if paramValue := ctx.QueryParam("asset"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument asset is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolsData(ctx, params)
	return err
}

// GetStakersData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersData(ctx)
	return err
}

// GetStakersAddressData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressData(ctx, address)
	return err
}

// GetStakersAddressAndAssetData converts echo context to params.
func (w *ServerInterfaceWrapper) GetStakersAddressAndAssetData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetStakersAddressAndAssetDataParams
	// ------------- Required query parameter "asset" -------------
	if paramValue := ctx.QueryParam("asset"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument asset is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStakersAddressAndAssetData(ctx, address, params)
	return err
}

// GetStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetStats(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStats(ctx)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetThorchainProxiedConstants converts echo context to params.
func (w *ServerInterfaceWrapper) GetThorchainProxiedConstants(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetThorchainProxiedConstants(ctx)
	return err
}

// GetThorchainProxiedLastblock converts echo context to params.
func (w *ServerInterfaceWrapper) GetThorchainProxiedLastblock(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetThorchainProxiedLastblock(ctx)
	return err
}

// GetThorchainProxiedEndpoints converts echo context to params.
func (w *ServerInterfaceWrapper) GetThorchainProxiedEndpoints(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetThorchainProxiedEndpoints(ctx)
	return err
}

// GetTxDetails converts echo context to params.
func (w *ServerInterfaceWrapper) GetTxDetails(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTxDetailsParams
	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "asset" -------------
	if paramValue := ctx.QueryParam("asset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset", ctx.QueryParams(), &params.Asset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset: %s", err))
	}

	// ------------- Optional query parameter "type" -------------
	if paramValue := ctx.QueryParam("type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "type", ctx.QueryParams(), &params.Type)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter type: %s", err))
	}

	// ------------- Required query parameter "offset" -------------
	if paramValue := ctx.QueryParam("offset"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument offset is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Required query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument limit is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTxDetails(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v1/assets", wrapper.GetAssetInfo)
	router.GET("/v1/doc", wrapper.GetDocs)
	router.GET("/v1/health", wrapper.GetHealth)
	router.GET("/v1/network", wrapper.GetNetworkData)
	router.GET("/v1/nodes", wrapper.GetNodes)
	router.GET("/v1/pools", wrapper.GetPools)
	router.GET("/v1/pools/detail", wrapper.GetPoolsData)
	router.GET("/v1/stakers", wrapper.GetStakersData)
	router.GET("/v1/stakers/:address", wrapper.GetStakersAddressData)
	router.GET("/v1/stakers/:address/pools", wrapper.GetStakersAddressAndAssetData)
	router.GET("/v1/stats", wrapper.GetStats)
	router.GET("/v1/swagger.json", wrapper.GetSwagger)
	router.GET("/v1/thorchain/constants", wrapper.GetThorchainProxiedConstants)
	router.GET("/v1/thorchain/lastblock", wrapper.GetThorchainProxiedLastblock)
	router.GET("/v1/thorchain/pool_addresses", wrapper.GetThorchainProxiedEndpoints)
	router.GET("/v1/txs", wrapper.GetTxDetails)

	// TODO(pascaldekloe): Configure the HTTP server in main (and main only).
	// This Echo framework is so viral we need to add in here.
	router.GET("/metrics", echo.WrapHandler(http.HandlerFunc(metrics.ServeHTTP)))
	gostat.CaptureEvery(10*time.Second)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

