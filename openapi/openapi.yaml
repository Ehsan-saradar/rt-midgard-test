openapi: 3.0.0
info:
  title: Midgard Public API
  version: 0.6.0
  contact:
    email: devs@thorchain.org
  description: >-
    The Midgard Public API queries THORChain and any chains linked via the BifrÃ¶st
    and prepares information about the network to be readily available for public users.
    The API parses transaction event data from THORChain and stores them
    in a time-series database to make time-dependent queries easy.
    Midgard does not hold critical information.
    To interact with BEPSwap and Asgardex, users should query THORChain directly.
paths:
  /v2/doc:
    get:
      operationId: GetDocs
      summary: Get Documentation
      description: Swagger/OpenAPI 3.0 specification generated documents.
      responses:
        "200":
          description: swagger/OpenAPI 3.0 spec generated docs
      tags:
        - Documentation

  "/v2/health":
    get:
      operationId: GetHealth
      summary: Get Health
      description: Returns an object containing the health response of the API.
      responses:
        "200":
          $ref: '#/components/responses/HealthResponse'
  # TODO(acsaba): change the pools endpoints.
  # Current state:
  #   /v2/pools -> returns all pools only names
  #   /v2/assets?asset=BNB.BNB,BTC.BTC -> return summary of selected pools (name, date, price)
  #   /v2/pools/BNB.BNB -> details for a single pool
  #
  # Proposed future state:
  #   /v2/pools -> all pools, gives back summary like v2/assets now.
  #   /v2/pools/BNB.BNB -> details for a single one
  "/v2/pools":
    get:
      operationId: GetPools
      summary: Get Asset Pools
      description: Returns an array containing all the assets supported.
      responses:
        "200":
          $ref: '#/components/responses/PoolsResponse'
  # TODO(acsaba): remove, make part of pools.
  "/v2/assets":
    get:
      operationId: GetAssetInfo
      summary: Get Asset Information
      description: >-
        Detailed information about a specific assets. Returns enough information to display a
        set of asset in various user interfaces, including latest price.
      parameters:
        - name: asset
          in: query
          description: One or more comma separated unique asset (CHAIN.SYMBOL)
          required: true
          schema:
            type: string
          example: [BNB.TOMOB-1E1, BNB.TCAN-014]
      responses:
        "200":
          $ref: '#/components/responses/AssetsSummaryResponse'
  "/v2/pools/{asset}":
    get:
      operationId: GetPoolDetail
      summary: Get detailed information about a pool
      description: 'Returns details of the pool: depths, price, 24h volume, APY. '
      parameters:
        - in: path
          name: asset
          description: pool name.
          required: true
          schema:
            type: string
          example: 'BNB.TOMOB-1E1'
      responses:
        "200":
          $ref: '#/components/responses/PoolDetailResponse'

components:
  responses:
    HealthResponse:
      description: Returns an health status of Midgard
      content:
        application/json:
          schema:
            type: object
            required:
            - database
            - scannerHeight
            - inSync
            properties:
              database:
                type: boolean
                description: True means healthy, connected to database.
              scannerHeight:
                type: string
                description: Int64, the current block count.
              inSync:
                type: boolean
                description: True means healthy. False means Midgard is still catching up to the chain.
    PoolsResponse:
      description: Array of assets.
      content:
        application/json:
          schema:
            type: array
            items:
              type: string
    AssetsSummaryResponse:
      description: Array containing limited details for pools.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/AssetSummary'
    PoolDetailResponse:
      description: Object containing details for one pool
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PoolDetail'
  schemas:
    AssetSummary:
      type: object
      required:
        - asset
        - dateCreated
        - priceRune
      properties:
        asset:
          type: string
        dateCreated:
          type: string
          description: Int64, unix timestamp (second).
        # TODO(acsaba): change it to price (or priceAsset).
        priceRune:
          # TODO(acsaba): consider changing all such to floats instead of string.
          type: string
          # TODO(acsaba): check if this formulation is correct.
          description: Float, price of asset in rune. I.e. rune amount / asset amount.
    PoolDetail:
      type: object
      required:
        - asset
        - two4HVolume
        - assetDepth
        - runeDepth
        - price
        - poolAPY
        - status
        - units
      properties:
        asset:
          type: string
        # TODO(acsaba): rename to volume24h:
        two4HVolume:
          type: string
          description: Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
        assetDepth:
          type: string
          description: Int64, the amount of Asset in the pool.
        runeDepth:
          type: string
          description: Int64, the amount of Rune in the pool.
        price:
          type: string
          # TODO(acsaba): check if this formulation is correct. copy from up
          description: Float, price of asset in rune. I.e. rune amount / asset amount.
        poolAPY:
          type: string
          description: 'Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.'
        status:
          type: string
          description: The state of the pool, e.g. Enabled, Bootstrap.
        units:
          type: string
          description: Int64, Liquidity Units in the pool.



