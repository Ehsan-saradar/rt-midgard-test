openapi: 3.0.0
info:
  title: Midgard Public API
  version: 2.0.0-alpha.2
  contact:
    email: devs@thorchain.org
  description: >-
    The Midgard Public API queries THORChain and any chains linked via the Bifr√∂st
    and prepares information about the network to be readily available for public users.
    The API parses transaction event data from THORChain and stores them
    in a time-series database to make time-dependent queries easy.
    Midgard does not hold critical information.
    To interact with BEPSwap and Asgardex, users should query THORChain directly.

paths:
  # TODO(acsaba): remove remaining mentions of stake from documentation.
  /v2/doc:
    get:
      operationId: GetDocs
      summary: Get Documentation
      description: Swagger/OpenAPI 3.0 specification generated documents.
      responses:
        "200":
          description: swagger/OpenAPI 3.0 spec generated docs
      tags:
        - Documentation

  "/v2/swagger.json":
    get:
      operationId: GetSwagger
      summary: Get Swagger
      description: Returns human and machine readable swagger/openapi specification
      responses:
        "200":
          description: human and machine readable swagger/openapi specification
      tags:
        - Specification

  "/v2/health":
    get:
      operationId: GetHealth
      summary: Get Health
      description: Returns an object containing the health response of the API
      responses:
        "200":
          $ref: '#/components/responses/HealthResponse'

  "/v2/pools":
    get:
      operationId: GetPools
      summary: Get Asset Pools
      description: Returns an array containing details for a set of pools
      parameters:
        - name: status
          in: query
          description: Filter for only pools with this status
          required: false
          schema:
            type: string
            enum: ["available", "staged", "suspended"]
      responses:
        "200":
          $ref: '#/components/responses/PoolsResponse'

  "/v2/pool/{asset}":
    get:
      operationId: GetPool
      summary: Get details for a specific pool
      description: 'Returns details of the pool: depths, price, 24h volume, APY. '
      parameters:
        - in: path
          name: asset
          description: pool name
          required: true
          schema:
            type: string
          example: 'BNB.TOMOB-1E1'
      responses:
        "200":
          $ref: '#/components/responses/PoolResponse'

  "/v2/pool-legacy/{asset}":
    get:
      operationId: GetPoolLegacy
      summary: Get details for a specific pool
      description: 'Returns details of the pool: depths, price, 24h volume, APY. '
      parameters:
        - in: path
          name: asset
          description: pool name
          required: true
          schema:
            type: string
          example: 'BNB.TOMOB-1E1'
      responses:
        "200":
          $ref: '#/components/responses/PoolLegacyResponse'

  "/v2/history/depths/{pool}":
    get:
      operationId: GetDepthHistory
      summary: Depth and price history
      description: |
        Returns the asset and rune depths and price.
        The values report the state at the end of each interval.

        History endpoint has two modes:
        * With Interval parameter it returns a series of time buckets. From and To dates will
          be rounded to the Interval boundaries.
        * Without Interval parameter a single From..To search is performed with exact timestamps.


        * Interval: possible values: 5min, hour, day, week, month, quarter, year.
        * count: [1..100]. Defines number of intervals. Don't provide if Interval is missing.
        * from/to: optional int, unix second.

        Possible usages with interval.
        * last 10 days: `?interval=day&count=10`
        * last 10 days before to: `?interval=day&count=10&to=1608825600`
        * next 10 days after from: `?interval=day&count=10&from=1606780800`
        * Days between from and to. It will fail if more than 100 intervals are requested:
          `interval=day&from=1606780800&to=1608825600`

        Pagination is possible with from&count and then using the returned meta.endTime as the
        From parameter of the next query.

        Possible configurations without interval:
        * exact search for one time frame: `?from=1606780899&to=1608825600`
        * one time frame until now: `?from=1606780899`
        * from chain start until now: no query parameters
      parameters:
        - name: pool
          in: path
          description: Return stats for this single pool.
          required: true
          schema:
            type: string
        - name: interval
          in: query
          description: Interval of calculations
          required: false
          example: "day"
          schema:
            type: string
            enum: ["5min", "hour", "day", "week", "month", "quarter", "year"]
        - name: count
          in: query
          description: Number of intervals to return. Should be between [1..100].
          required: false
          example: 30
          schema:
            type: integer
        - name: to
          in: query
          description: End time of the query as unix timestamp. If only count is given, defaults to now.
          required: false
          example: 1608825600
          schema:
            type: integer
            format: int64
        - name: from
          in: query
          description: Start time of the query as unix timestamp
          required: false
          example: 1606780800
          schema:
            type: integer
            format: int64
      responses:
        "200":
          $ref: '#/components/responses/DepthHistoryResponse'

  "/v2/history/earnings":
    get:
      operationId: GetEarningsHistory
      summary: Earnings related history
      description: |
        Returns earnings data for the specified interval.

        History endpoint has two modes:
        * With Interval parameter it returns a series of time buckets. From and To dates will
          be rounded to the Interval boundaries.
        * Without Interval parameter a single From..To search is performed with exact timestamps.


        * Interval: possible values: 5min, hour, day, week, month, quarter, year.
        * count: [1..100]. Defines number of intervals. Don't provide if Interval is missing.
        * from/to: optional int, unix second.

        Possible usages with interval.
        * last 10 days: `?interval=day&count=10`
        * last 10 days before to: `?interval=day&count=10&to=1608825600`
        * next 10 days after from: `?interval=day&count=10&from=1606780800`
        * Days between from and to. It will fail if more than 100 intervals are requested:
          `interval=day&from=1606780800&to=1608825600`

        Pagination is possible with from&count and then using the returned meta.endTime as the
        From parameter of the next query.

        Possible configurations without interval:
        * exact search for one time frame: `?from=1606780899&to=1608825600`
        * one time frame until now: `?from=1606780899`
        * from chain start until now: no query parameters
      parameters:
        - name: interval
          in: query
          description: Interval of calculations
          required: false
          example: "day"
          schema:
            type: string
            enum: ["5min", "hour", "day", "week", "month", "quarter", "year"]
        - name: count
          in: query
          description: Number of intervals to return. Should be between [1..100].
          required: false
          example: 30
          schema:
            type: integer
        - name: to
          in: query
          description: End time of the query as unix timestamp. If only count is given, defaults to now.
          required: false
          example: 1608825600
          schema:
            type: integer
            format: int64
        - name: from
          in: query
          description: Start time of the query as unix timestamp
          required: false
          example: 1606780800
          schema:
            type: integer
            format: int64
      responses:
        "200":
          $ref: '#/components/responses/EarningsHistoryResponse'

  "/v2/history/swaps":
    get:
      operationId: GetSwapHistory
      summary: Swaps related history
      description: |
        Returns swap count, volume, fees, slip in specified interval.
        If pool is not specified returns for all pools

        History endpoint has two modes:
        * With Interval parameter it returns a series of time buckets. From and To dates will
          be rounded to the Interval boundaries.
        * Without Interval parameter a single From..To search is performed with exact timestamps.


        * Interval: possible values: 5min, hour, day, week, month, quarter, year.
        * count: [1..100]. Defines number of intervals. Don't provide if Interval is missing.
        * from/to: optional int, unix second.

        Possible usages with interval.
        * last 10 days: `?interval=day&count=10`
        * last 10 days before to: `?interval=day&count=10&to=1608825600`
        * next 10 days after from: `?interval=day&count=10&from=1606780800`
        * Days between from and to. It will fail if more than 100 intervals are requested:
          `interval=day&from=1606780800&to=1608825600`

        Pagination is possible with from&count and then using the returned meta.endTime as the
        From parameter of the next query.

        Possible configurations without interval:
        * exact search for one time frame: `?from=1606780899&to=1608825600`
        * one time frame until now: `?from=1606780899`
        * from chain start until now: no query parameters
      parameters:
        - name: pool
          in: query
          description: Return history given pool. Returns sum of all pools if missing.
          required: false
          schema:
            type: string
        - name: interval
          in: query
          description: Interval of calculations
          required: false
          example: "day"
          schema:
            type: string
            enum: ["5min", "hour", "day", "week", "month", "quarter", "year"]
        - name: count
          in: query
          description: Number of intervals to return. Should be between [1..100].
          required: false
          example: 30
          schema:
            type: integer
        - name: to
          in: query
          description: End time of the query as unix timestamp. If only count is given, defaults to now.
          required: false
          example: 1608825600
          schema:
            type: integer
            format: int64
        - name: from
          in: query
          description: Start time of the query as unix timestamp
          required: false
          example: 1606780800
          schema:
            type: integer
            format: int64
      responses:
        "200":
          $ref: '#/components/responses/SwapHistoryResponse'

  "/v2/history/liquidity_changes":
    get:
      operationId: GetLiquidityHistory
      summary: Liquidity changes related history
      description: |
        Returns withdrawals and deposits for given time interval.
        If pool is not specified returns for all pools

        History endpoint has two modes:
        * With Interval parameter it returns a series of time buckets. From and To dates will
          be rounded to the Interval boundaries.
        * Without Interval parameter a single From..To search is performed with exact timestamps.


        * Interval: possible values: 5min, hour, day, week, month, quarter, year.
        * count: [1..100]. Defines number of intervals. Don't provide if Interval is missing.
        * from/to: optional int, unix second.

        Possible usages with interval.
        * last 10 days: `?interval=day&count=10`
        * last 10 days before to: `?interval=day&count=10&to=1608825600`
        * next 10 days after from: `?interval=day&count=10&from=1606780800`
        * Days between from and to. It will fail if more than 100 intervals are requested:
          `interval=day&from=1606780800&to=1608825600`

        Pagination is possible with from&count and then using the returned meta.endTime as the
        From parameter of the next query.

        Possible configurations without interval:
        * exact search for one time frame: `?from=1606780899&to=1608825600`
        * one time frame until now: `?from=1606780899`
        * from chain start until now: no query parameters
      parameters:
        - name: pool
          in: query
          description: Return stats for given pool. Returns sum of all pools if missing
          required: false
          schema:
            type: string
        - name: interval
          in: query
          description: Interval of calculations
          required: false
          example: "day"
          schema:
            type: string
            enum: ["5min", "hour", "day", "week", "month", "quarter", "year"]
        - name: count
          in: query
          description: Number of intervals to return. Should be between [1..100]
          required: false
          example: 30
          schema:
            type: integer
        - name: to
          in: query
          description: End time of the query as unix timestamp. If only count is given, defaults to now
          required: false
          example: 1608825600
          schema:
            type: integer
            format: int64
        - name: from
          in: query
          description: Start time of the query as unix timestamp
          required: false
          example: 1606780800
          schema:
            type: integer
            format: int64
      responses:
        "200":
          $ref: '#/components/responses/LiquidityHistoryResponse'

  "/v2/nodes":
    get:
      operationId: GetNodes
      summary: Get Node public keys
      description: Returns a list of Node public keys
      responses:
        "200":
          "$ref": "#/components/responses/NodeKeyResponse"

  "/v2/network":
    get:
      operationId: GetNetworkData
      summary: Get Network Data
      description: Returns an object containing Network data
      responses:
        "200":
          "$ref": "#/components/responses/NetworkResponse"

  "/v2/tx":
    get:
      operationId: GetTxDetails
      summary: List transactions or get details for specific transactions
      # TODO(acsaba): add better description
      description: Return an array containing the event details
      parameters:
        - name: address
          in: query
          description: Address of sender or recipient of any in/out tx in event
          required: false
          schema:
            type: string
          example: tbnb1fj2lqj8dvr5pumfchc7ntlfqd2v6zdxqwjewf5
        - name: txid
          in: query
          description: ID of any in/out tx in event
          required: false
          schema:
            type: string
          example: 2F624637DE179665BA3322B864DB9F30001FD37B4E0D22A0B6ECE6A5B078DAB4
        # TODO(lukesaunders): maybe rename asset parameter to pool
        #   For volume we have /v2/history/volume?pool=BNB.BNB
        #   But here we have /v2/tx?asset=BNB.BNB
        #   Proposal: let's have pool on both places as parameter
        - name: asset
          in: query
          description: Any asset used in event (CHAIN.SYMBOL)
          required: false
          schema:
            type: string
          example: BNB.TOMOB-1E1
        - name: type
          in: query
          description: One or more comma separated unique types of event
          required: false
          schema:
            type: string
          # TODO(acsaba): check if these are actually the accepted types in the code
          example: [swap, stake, unstake, add, refund, doubleSwap]
        - name: limit
          in: query
          description: pagination limit
          required: true
          schema:
            type: integer
            format: int64
            # TODO(acsaba): check min and max in the code
            minimum: 0
            maximum: 50
        - name: offset
          in: query
          description: pagination offset
          required: true
          schema:
            type: integer
            format: int64
            minimum: 0
      responses:
        "200":
          $ref: '#/components/responses/TxResponse'

  "/v2/members":
    get:
      operationId: GetMembersAdresses
      summary: Get members
      description: Returns an array containing the RUNE addresses for all members
      responses:
        "200":
          "$ref": "#/components/responses/MembersResponse"

  "/v2/members/{address}":
    get:
      operationId: GetMemberDetail
      summary: Details of a member
      description: Returns an array of statistics per pool for a given member RUNE address
      parameters:
        - name: address
          in: path
          description: Unique member RUNE address
          required: true
          schema:
            type: string
          example: 'bnb1jxfh2g85q3v0tdq56fnevx6xcxtcnhtsmcu64m'
      responses:
        "200":
          $ref: '#/components/responses/MemberDetailsResponse'

  "/v2/stats":
    get:
      operationId: GetStats
      summary: Get Global Stats
      description: Returns an object containing global stats for all pools and all transactions
      responses:
        "200":
          $ref: '#/components/responses/StatsResponse'

  "/v2/thorchain/inbound_addresses":
    get:
      operationId: GetProxiedInboundAddresses
      summary: Get the Proxied THORChain Inbound Addresses
      description: >-
        Inbound addresses will return a list of address , one per chain. The address might change frequently if THORChain has multiple asgards.
      responses:
        "200":
          $ref: '#/components/responses/InboundAddressesResponse'

  "/v2/thorchain/constants":
    get:
      operationId: GetProxiedConstants
      summary: Get the Proxied THORChain Constants
      description: Constant values used by THORChain , some of the values can be overrided by mimir
      responses:
        "200":
          $ref: '#/components/responses/ConstantsResponse'

  "/v2/thorchain/lastblock":
    get:
      operationId: GetProxiedLastblock
      summary: Get the Proxied THORChain Lastblock
      description: Retrieve lastest block infomation across all chains.
      responses:
        "200":
          $ref: '#/components/responses/LastblockResponse'

  "/v2/thorchain/queue":
    get:
      operationId: GetProxiedQueue
      summary: Get the Proxied THORChain Queue
      description: Returns the proxied queue endpoint from a local thornode
      responses:
        "200":
          $ref: '#/components/responses/QueueResponse'

components:
  responses:
    HealthResponse:
      description: Returns health status for Midgard
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Health'
    PoolsResponse:
      description: Array of pool details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PoolDetails'
    PoolLegacyResponse:
      description: Object containing details for one pool
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PoolLegacyDetail'
    PoolResponse:
      description: Object containing details for one pool
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PoolDetail'
    DepthHistoryResponse:
      description: Depth and price history
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DepthHistory'
    EarningsHistoryResponse:
      description: earnings history
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EarningsHistory'
    SwapHistoryResponse:
      description: Swap count, volume, fee and slip history
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SwapHistory'
    LiquidityHistoryResponse:
      description: Withdrawals and deposits history
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LiquidityHistory'
    NodeKeyResponse:
      # TODO(acsaba): add better description
      description: Returns an object containing Node public key data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NodeKeys'
    NetworkResponse:
      # TODO(acsaba): add better description
      description: Returns an object containing Network data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Network'
    TxResponse:
      # TODO(elfedy): make a separate type in the schema section.
      description: Returns an array of transactions
      content:
        application/json:
          schema:
            type: object
            required:
              - count
              - txs
            properties:
              count:
                type: string
                description: Int64, count of txs matching the filters.
              # TODO(acsaba): sync with Luke if this sould be tx or the endpoint txs
              txs:
                type: array
                items:
                  $ref: '#/components/schemas/TxDetails'
    MembersResponse:
      description: array of all the members
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Members'
    MemberDetailsResponse:
      description: object containing liquidity provider data for a specific member
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MemberDetails'
    StatsResponse:
      description: object containing global BEPSwap data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/StatsData'

    InboundAddressesResponse:
      description: Thornode Indbound Adresses response.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InboundAddresses'
    ConstantsResponse:
      description: Thornode Constants response.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Constants'
    LastblockResponse:
      description: Thornode Lastblock response.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Lastblock'
    QueueResponse:
      description: Thornode Queue response.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Queue'


  schemas:
    Health:
      type: object
      required:
      - database
      - scannerHeight
      - inSync
      properties:
        database:
          type: boolean
          description: True means healthy, connected to database
        scannerHeight:
          type: string
          description: Int64, the current block count
        inSync:
          type: boolean
          description: True means healthy. False means Midgard is still catching up to the chain

    PoolDetails:
      type: array
      items:
        $ref: '#/components/schemas/PoolDetail'
    PoolDetail:
        # TODO(lukesaunders): consider renaming this "asset" to "pool" too.
        #   note that the response for /v2/tx returns a field named pool
        #   for the same thing.
        # NOTE(elfedy): the thornode endpoint for pools /thorchain/pools names this field "asset"
        #   Heimdall also refers to the field by "asset" in the smoke tests so if changed,
        #   remeber to submit a PR changing that too.
      type: object
      required:
        - asset
        - volume24h
        - assetDepth
        - runeDepth
        - assetPrice
        - poolAPY
        - status
        - units
      properties:
        asset:
          type: string
        volume24h:
          type: string
          description: Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
        assetDepth:
          type: string
          description: Int64, the amount of Asset in the pool.
        runeDepth:
          type: string
          description: Int64, the amount of Rune in the pool.
        assetPrice:
          type: string
          description: Float, price of asset in rune. I.e. rune amount / asset amount.
        poolAPY:
          type: string
          description: 'Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.'
        status:
          type: string
          description: The state of the pool, e.g. Available, Staged.
        units:
          type: string
          description: Int64, Liquidity Units in the pool.

    PoolLegacyDetail:
      type: object
      required:
        - asset
        - volume24h
        - assetDepth
        - runeDepth
        - assetPrice
        - poolAPY
        - status
        - units
        - swappingTxCount
        - poolSlipAverage
        - poolTxAverage
        - poolFeesTotal
        - poolDepth
        - sellVolume
        - buyVolume
        - poolVolume
        - sellTxAverage
        - buyTxAverage
        - poolFeeAverage
        - sellAssetCount
        - buyAssetCount
      properties:
        asset:
          type: string
        volume24h:
          type: string
          description: Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune
        assetDepth:
          type: string
          description: Int64, the amount of Asset in the pool
        runeDepth:
          type: string
          description: Int64, the amount of Rune in the pool
        assetPrice:
          type: string
          description: Float, price of asset in rune. I.e. rune amount / asset amount
        poolAPY:
          type: string
          description: 'Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.'
        status:
          type: string
          description: The state of the pool, e.g. Available, Staged
        units:
          type: string
          description: Int64, Liquidity Units in the pool
        swappingTxCount:
          type: string
          description: Int64, same as history/swaps:totalCount
        poolSlipAverage:
          type: string
          description: Float, same as history/swaps:averageSlip
        poolTxAverage:
          type: string
          description: Float, same as history/swaps:totalVolume/totalCount
        poolFeesTotal:
          type: string
          description: Int64, same as history/swaps:totalFees
        poolDepth:
          type: string
          description: Int64, same as assetDepth + runeDepth
        sellVolume:
          type: string
          description: Int64, same as history/swaps:toRuneVolume
        buyVolume:
          type: string
          description: Int64, same as history/swaps:toAssetVolume
        poolVolume:
          type: string
          description: Int64, same as buyVolume + sellVolume
        sellTxAverage:
          type: string
          description: Float, same as history/swaps:toAssetVolume/toAssetCount
        buyTxAverage:
          type: string
          description: Float, same as history/swaps:toRuneVolume/toRuneCount
        poolFeeAverage:
          type: string
          description: Float, same as history/swaps:totalFees/totalCount
        sellAssetCount:
          type: string
          description: Int64, same as history/swaps:toRuneCount
        buyAssetCount:
          type: string
          description: Int64, same as history/swaps:toAssetCount

    DepthHistory:
      type: object
      required:
        - meta
        - intervals
      properties:
        meta:
          $ref: '#/components/schemas/DepthHistoryMeta'
        intervals:
          $ref: '#/components/schemas/DepthHistoryIntervals'
    DepthHistoryMeta:
      type: object
      required:
        - startTime
        - endTime
      properties:
        startTime:
          type: string
          description: Int64, The beginning time of bucket in unix timestamp
        endTime:
          type: string
          description: Int64, The end time of bucket in unix timestamp
    DepthHistoryIntervals:
      type: array
      items:
        $ref: '#/components/schemas/DepthHistoryItem'
    DepthHistoryItem:
      type: object
      required:
        - startTime
        - endTime
        - assetDepth
        - runeDepth
        - assetPrice
      properties:
        startTime:
          type: string
          description: Int64, The beginning time of bucket in unix timestamp
        endTime:
          type: string
          description: Int64, The end time of bucket in unix timestamp
        assetDepth:
          type: string
          description: Int64, the amount of Asset in the pool
        runeDepth:
          type: string
          description: Int64, the amount of Rune in the pool
        assetPrice:
          type: string
          description: Float, price of asset in rune. I.e. rune amount / asset amount
    EarningsHistory:
      type: object
      required:
        - meta
        - intervals
      properties:
        meta:
          $ref: '#/components/schemas/EarningsHistoryItem'
        intervals:
          $ref: '#/components/schemas/EarningsHistoryIntervals'
    EarningsHistoryIntervals:
      type: array
      items:
        $ref: '#/components/schemas/EarningsHistoryItem'
    EarningsHistoryItem:
      type: object
      required:
        - startTime
        - endTime
        - liquidityFees
        - blockRewards
        - earnings
        - bondingEarnings
        - liquidityEarnings
        - avgNodeCount
        - pools
      properties:
        startTime:
          type: string
          description: Int64, The beginning time of interval in unix timestamp
        endTime:
          type: string
          description: Int64, The end time of interval in unix timestamp
        liquidityFees:
          type: string
          description: Int64, Total liquidity fees, converted to RUNE, collected during the time interval
        blockRewards:
          type: string
          description: Int64, Total block rewards emitted during the time interval
        earnings:
          type: string
          description: Int64, System income generated during the time interval. It is the sum of liquidity fees and block rewards
        bondingEarnings:
          type: string
          description: Int64, Share of earnings sent to nodes during the time interval
        liquidityEarnings:
          type: string
          description: Int64, Share of earnings sent to pools during the time interval
        avgNodeCount:
          type: string
          description: float64, Average amount of active nodes during the time interval
        pools:
          type: array
          description: Earnings data for each pool for the time interval
          items:
            $ref: '#/components/schemas/EarningsHistoryItemPool'
    EarningsHistoryItemPool:
      type: object
      required:
        - pool
        - earnings
      description: pool earnings data during the time interval
      properties:
        pool:
          type: string
          description: asset for the given pool
        earnings:
          type: string
          description: Int64, Share of earnings sent to the pool during the time interval

    SwapHistory:
      type: object
      required:
        - meta
        - intervals
      properties:
        meta:
          $ref: '#/components/schemas/SwapHistoryItem'
        intervals:
          $ref: '#/components/schemas/SwapHistoryIntervals'
    SwapHistoryIntervals:
      type: array
      items:
        $ref: '#/components/schemas/SwapHistoryItem'
    SwapHistoryItem:
      type: object
      required:
        - startTime
        - endTime
        - toAssetCount
        - toRuneCount
        - totalCount
        - toAssetVolume
        - toRuneVolume
        - totalVolume
        - totalFees
        - averageSlip
      properties:
        startTime:
          type: string
          description: Int64, The beginning time of bucket in unix timestamp
        endTime:
          type: string
          description: Int64, The end time of bucket in unix timestamp
        toAssetCount:
          type: string
          description: Int64, count of swaps from rune to asset
        toRuneCount:
          type: string
          description: Int64, count of swaps from asset to rune
        totalCount:
          type: string
          description: Int64, toAssetCount + toRuneCount
        toAssetVolume:
          type: string
          description: Int64, volume of swaps from rune to asset denoted in rune
        toRuneVolume:
          type: string
          description: Int64, volume of swaps from asset to rune denoted in rune
        totalVolume:
          type: string
          description: Int64, toAssetVolume + toRuneVolume (denoted in rune)
        totalFees:
          type: string
          description: Int64, the sum of all fees collected denoted in rune
        averageSlip:
          type: string
          description: Float, the average slip by swap. Big swaps have the same weight as small swaps
    LiquidityHistory:
      type: object
      required:
        - meta
        - intervals
      properties:
        meta:
          $ref: '#/components/schemas/LiquidityHistoryItem'
        intervals:
          $ref: '#/components/schemas/LiquidityHistoryIntervals'
    LiquidityHistoryIntervals:
      type: array
      items:
        $ref: '#/components/schemas/LiquidityHistoryItem'
    LiquidityHistoryItem:
      type: object
      required:
        - startTime
        - endTime
        - withdrawals
        - deposits
        - net
      properties:
        startTime:
          type: string
          description: Int64, The beginning time of bucket in unix timestamp
        endTime:
          type: string
          description: Int64, The end time of bucket in unix timestamp
        withdrawals:
          type: string
          description: Int64, total withdrawals during the time interval
        deposits:
          type: string
          description: Int64, total deposits (liquidity additions) during the time interval
        net:
          type: string
          description: Int64, net liquidity changes (withdrawals - deposits) during the time interval
    NodeKeys:
      type: array
      items:
        $ref: '#/components/schemas/NodeKey'
    NodeKey:
      type: object
      required:
        - nodeAddress
        - secp256k1
        - ed25519
      properties:
        nodeAddress:
          type: string
          description: node thorchain address
          example: thor102y0m3uptg0vvudeyh00r2fnz70wq7d8y7mu2g
        secp256k1:
          type: string
          description: secp256k1 public key
          example: thorpub1addwnpepqgxwdf3ure0pg5fwnpeux3ym9n06267lkres54zwjh4c8048ezhj5024qyr
        ed25519:
          type: string
          description: ed25519 public key
          example: thorpub1addwnpepqgxwdf3ure0pg5fwnpeux3ym9n06267lkres54zwjh4c8048ezhj5024qyr
    Network:
      type: object
      required:
        - bondMetrics
        - blockRewards
        - activeBonds
        - standbyBonds
        - activeNodeCount
        - standbyNodeCount
        - totalPooledRune
        - totalReserve
        - nextChurnHeight
        - poolActivationCountdown
        - poolShareFactor
        - bondingAPY
        - liquidityAPY
      properties:
        bondMetrics:
          $ref: '#/components/schemas/BondMetrics'
        blockRewards:
          $ref: '#/components/schemas/BlockRewards'
        activeBonds:
          type: array
          # TODO(acsaba): add description
          items:
            type: string
        standbyBonds:
          type: array
          # TODO(acsaba): add description
          description: Array of Standby Bonds
          items:
            type: string
        activeNodeCount:
          type: string
          description: Int64, Number of Active Nodes
        standbyNodeCount:
          type: string
          description: Int64, Number of Standby Nodes
        totalPooledRune:
          type: string
          description: Int64, Total Rune pooled in all pools
        totalReserve:
          type: string
          # TODO(acsaba): document what left in reserve
          description: Int64, Total left in Reserve
        nextChurnHeight:
          type: string
          # TODO(acsaba): check documentation
          description: Int64, next height of blocks
        poolActivationCountdown:
          type: string
          description: Int64, the remaining time of pool activation (in blocks)
        poolShareFactor:
          type: string
          # TODO(acsaba): float, add documentation
        bondingAPY:
          type: string
          # TODO(acsaba): doublecheck that documentation holds
          description: Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
        liquidityAPY:
          # TODO(acsaba): doublecheck that documentation holds
          type: string
          description: Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
    BondMetrics:
      type: object
      required:
        - totalActiveBond
        - averageActiveBond
        - medianActiveBond
        - minimumActiveBond
        - maximumActiveBond
        - totalStandbyBond
        - averageStandbyBond
        - medianStandbyBond
        - minimumStandbyBond
        - maximumStandbyBond
      properties:
        totalActiveBond:
          type: string
          description: Int64, Total bond of active nodes
        averageActiveBond:
          type: string
          # TODO(acsaba): make this float
          description: Int64, Average bond of active nodes
        medianActiveBond:
          type: string
          description: Int64, Median bond of active nodes
        minimumActiveBond:
          type: string
          description: Int64, Minumum bond of active nodes
        maximumActiveBond:
          type: string
          description: Int64, Maxinum bond of active nodes
        totalStandbyBond:
          type: string
          description: Int64, Total bond of standby nodes
        averageStandbyBond:
          type: string
          # TODO(acsaba): make this float
          description: Int64, Average bond of standby nodes
        medianStandbyBond:
          type: string
          description: Int64, Median bond of standby nodes
        minimumStandbyBond:
          type: string
          description: Int64, Minumum bond of standby nodes
        maximumStandbyBond:
          type: string
          description: Int64, Maximum bond of standby nodes
    BlockRewards:
      type: object
      required:
        - blockReward
        - bondReward
        - poolReward
      properties:
        blockReward:
          type: string
          # TODO(acsaba): add description
        bondReward:
          type: string
          # TODO(acsaba): add description
        poolReward:
          type: string
          # TODO(acsaba): add description
    TxDetails:
      type: object
      required:
        - pools
        - type
        - status
        - in
        - out
        - date
        - height
        - metadata
      # TODO(acsaba): add description to the fields
      properties:
        pools:
          type: array
          items:
            type: string
        type:
          type: string
          enum: [swap, stake, unstake, rewards, add, pool, refund]
        status:
          type: string
          enum: [success, pending]
        in:
          type: array
          items:
            $ref: '#/components/schemas/tx'
        out:
          type: array
          items:
            $ref: '#/components/schemas/tx'
        date:
          type: string
          description: Int64, Unix timestamp
        # TODO(acsaba): check with Fede if it's ok to not have gas field
        height:
          type: string
          # TODO(acsaba): Int64, add description,
        metadata:
          $ref: '#/components/schemas/metadata'
    tx:
      type: object
      required:
        - txID
        - memo
        - address
        - coins
      properties:
        txID:
          type: string
        memo:
          type: string
        address:
          type: string
        coins:
          $ref: '#/components/schemas/coins'
    coins:
      type: array
      items:
        $ref: '#/components/schemas/coin'
    coin:
      type: object
      required:
        - asset
        - amount
      properties:
        asset:
          type: string
        amount:
          type: string
    metadata:
      type: object
      properties:
        swap:
          $ref: '#/components/schemas/swapMetadata'
        addLiquidity:
          $ref: '#/components/schemas/addLiquidityMetadata'
        refund:
          $ref: '#/components/schemas/refundMetadata'
    swapMetadata:
      type: object
      required:
        - networkFees
        - liquidityFee
        - tradeSlip
        - tradeTarget
      properties:
        networkFees:
          type: array
          items:
            $ref: '#/components/schemas/coin'
        liquidityFee:
          type: string 
        tradeSlip:
          type: string
        tradeTarget:
          type: string
    addLiquidityMetadata:
      type: object
      required:
        - liquidityUnits
      properties:
        liquidityUnits:
          type: string
    refundMetadata:
      type: object
      required:
        - networkFees
        - reason
      properties:
        networkFees:
          type: array
          items:
            $ref: '#/components/schemas/coin'
        reason:
          type: string
    Members:
      type: array
      items:
        type: string
        description: Member address
        example: tbnb1fj2lqj8dvr5pumfchc7ntlfqd2v6zdxqwjewf5
    MemberDetails:
      type: object
      required:
        - pools
      properties:
        pools:
          type: array
          items:
              $ref: '#/components/schemas/MemberPoolDetails'
          description: Liquidity provider data for all the pools of a given member
    MemberPoolDetails:
      type: object
      required:
        - pool
        - assetAdded
        - assetWithdrawn
        - dateFirstAdded
        - dateLastAdded
        - liquidityUnits
        - runeAdded
        - runeWithdrawn
      properties:
        pool:
          type: string
          description: Pool rest of the data refers to
        assetAdded:
          type: string
          description: Int64, total asset added to the pool by member
        assetWithdrawn:
          type: string
          description: Int64, total asset withdrawn from the pool by member
        dateFirstAdded:
          type: string
          description: Int64, Unix timestamp for the first time member deposited into the pool
        dateLastAdded:
          type: string
          description: Int64, Unix timestamp for the last time member deposited into the pool
        liquidityUnits:
          type: string
          description: Int64, pool liquidity units that belong the the member
        runeAdded:
          type: string
          description: Int64, total RUNE added to the pool by member
        runeWithdrawn:
          type: string
          description: Int64, total RUNE withdrawn from the pool by member

    StatsData:
      type: object
      required:
        - dailyActiveUsers
        - dailyTx
        - monthlyActiveUsers
        - monthlyTx
        - totalUsers
        - totalTx
        - totalVolume
        - totalStaked
        - totalDepth
        - totalAssetBuys
        - totalAssetSells
        - totalStakeTx
        - totalWithdrawTx
      properties:
        # TODO(acsaba): all are int types and add description to the fields
        dailyActiveUsers:
          type: string
          description: Daily active users (unique addresses interacting)
        dailyTx:
          type: string
          description: Daily transactions
        monthlyActiveUsers:
          type: string
          description: Monthly active users
        monthlyTx:
          type: string
          description: Monthly transactions
        totalUsers:
          type: string
          description: Total unique swappers & members
        totalTx:
          type: string
          description: Total transactions
        # TODO(acsaba): do we want thee from v1: totalEarned, poolCount volume24h as in v1?
        totalVolume:
          type: string
          description: Total (in RUNE Value) of all assets swapped since start
        totalStaked:
          type: string
          description: Total staked (in RUNE Value)
        totalDepth:
          type: string
          description: Total RUNE balances
        totalAssetBuys:
          type: string
          description: Total buying transactions
        totalAssetSells:
          type: string
          description: Total selling transactions
        totalStakeTx:
          type: string
          description: Total staking transactions
        totalWithdrawTx:
          type: string
          description: Total withdrawing transactions

    InboundAddresses:
      type: object
      required:
        - current
      properties:
        current:
          type: array
          items:
            $ref: '#/components/schemas/InboundAddressesItem'
    InboundAddressesItem:
      type: object
      required:
        - chain
        - pub_key
        - address
        - halted
      properties:
        chain:
          type: string
          example: "BTC"
        pub_key:
          type: string
          example: "tthorpub1addwnpepqd9nqqmgay6mju0yq72ptjucmk9atawtev4v4n6wkee5y26q80eccg0xk37"
        address:
          type: string
          example: "bcrt1q257g60tcxvu4dvflpszgkwq34d5vw6pg726gf3"
        halted:
          type: boolean
          description: indicate whether this chain has halted
          example: false

    Constants:
      type: object
      required:
        - int_64_values
        - bool_values
        - string_values
      properties:
        int_64_values:
          $ref: '#/components/schemas/Int64Constants'
        bool_values:
          $ref: '#/components/schemas/BoolConstants'
        string_values:
          $ref: '#/components/schemas/StringConstants'

    Int64Constants:
      type: object
      required:
        - AsgardSize
        - BadValidatorRate
        - BlocksPerYear
        - ChurnInterval
        - ChurnRetryInterval
        - CliTxCost
        - DesiredValidatorSet
        - DoubleSignMaxAge
        - EmissionCurve
        - FailKeygenSlashPoints
        - FailKeysignSlashPoints
        - FundMigrationInterval
        - JailTimeKeygen
        - JailTimeKeysign
        - LackOfObservationPenalty
        - LiquidityLockUpBlocks
        - MinimumBondInRune
        - MinimumNodesForBFT
        - MinimumNodesForYggdrasil
        - NativeChainGasFee
        - NewPoolCycle
        - ObservationDelayFlexibility
        - ObserveSlashPoints
        - OldValidatorRate
        - OutboundTransactionFee
        - SigningTransactionPeriod
        - YggFundLimit
      properties:
        AsgardSize:
          type: integer
          format: int64
          example: 30
        BadValidatorRate:
          type: integer
          format: int64
          example: 60
        BlocksPerYear:
          type: integer
          format: int64
          example: 6311390
        ChurnInterval:
          type: integer
          format: int64
          example: 60
        ChurnRetryInterval:
          type: integer
          format: int64
          example: 30
        CliTxCost:
          type: integer
          format: int64
          example: 0
        DesiredValidatorSet:
          type: integer
          format: int64
          example: 12
        DoubleSignMaxAge:
          type: integer
          format: int64
          example: 24
        EmissionCurve:
          type: integer
          format: int64
          example: 6
        FailKeygenSlashPoints:
          type: integer
          format: int64
          example: 720
        FailKeysignSlashPoints:
          type: integer
          format: int64
          example: 2
        FundMigrationInterval:
          type: integer
          format: int64
          example: 60
        JailTimeKeygen:
          type: integer
          format: int64
          example: 10
        JailTimeKeysign:
          type: integer
          format: int64
          example: 10
        LackOfObservationPenalty:
          type: integer
          format: int64
          example: 2
        LiquidityLockUpBlocks:
          type: integer
          format: int64
          example: 0
        MinimumBondInRune:
          type: integer
          format: int64
          example: 100000000
        MinimumNodesForBFT:
          type: integer
          format: int64
          example: 4
        MinimumNodesForYggdrasil:
          type: integer
          format: int64
          example: 6
        NativeChainGasFee:
          type: integer
          format: int64
          example: 10000000
        NewPoolCycle:
          type: integer
          format: int64
          example: 51840
        ObservationDelayFlexibility:
          type: integer
          format: int64
          example: 5
        ObserveSlashPoints:
          type: integer
          format: int64
          example: 1
        OldValidatorRate:
          type: integer
          format: int64
          example: 60
        OutboundTransactionFee:
          type: integer
          format: int64
          example: 100000000
        SigningTransactionPeriod:
          type: integer
          format: int64
          example: 300
        YggFundLimit:
          type: integer
          format: int64
          example: 5
    BoolConstants:
      type: object
      required:
        - StrictBondLiquidityRatio
      properties:
         StrictBondLiquidityRatio:
          type: boolean
          example: false
    StringConstants:
      type: object
      required:
        - DefaultPoolStatus
      properties:
         DefaultPoolStatus:
          type: string
          example: "Enabled"

    Lastblock:
      type: object
      required:
        - current
      properties:
        current:
          type: array
          items:
            $ref: '#/components/schemas/LastblockItem'
    LastblockItem:
      type: object
      required:
        - chain
        - last_observed_in
        - last_signed_out
        - thorchain
      properties:
        chain:
          type: string
          example: "BNB"
        last_observed_in:
          type: string
          example: "1590"
        last_signed_out:
          type: string
          example: "109"
        thorchain:
          type: string
          example: "1548"

    Queue:
      type: object
      required:
        - swap
        - outbound
      properties:
        swap:
          type: string
          example: "0"
        outbound:
          type: string
          example: "0"
