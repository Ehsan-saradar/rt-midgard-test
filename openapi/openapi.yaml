openapi: 3.0.0
info:
  title: Midgard Public API
  version: 2.0.0-alpha.3
  contact:
    email: devs@thorchain.org
  description: >-
    The Midgard Public API queries THORChain and any chains linked via the Bifr√∂st
    and prepares information about the network to be readily available for public users.
    The API parses transaction event data from THORChain and stores them
    in a time-series database to make time-dependent queries easy.
    Midgard does not hold critical information.
    To interact with BEPSwap and Asgardex, users should query THORChain directly.

paths:
  # TODO(acsaba): remove remaining mentions of stake from documentation.
  /v2/doc:
    get:
      operationId: GetDocs
      summary: Documentation
      description: Swagger/OpenAPI 3.0 specification generated documents.
      responses:
        "200":
          description: swagger/OpenAPI 3.0 spec generated docs
      tags:
        - Specification

  "/v2/swagger.json":
    get:
      operationId: GetSwagger
      summary: Swagger File
      description: Returns human and machine readable swagger/openapi specification
      responses:
        "200":
          description: human and machine readable swagger/openapi specification
      tags:
        - Specification

  "/v2/health":
    get:
      operationId: GetHealth
      summary: Health Info
      description: Returns an object containing the health response of the API
      responses:
        "200":
          $ref: '#/components/responses/HealthResponse'

  "/v2/pools":
    get:
      operationId: GetPools
      summary: Pools List
      description: Returns an array containing details for a set of pools
      parameters:
        - name: status
          in: query
          description: Filter for only pools with this status
          required: false
          schema:
            type: string
            enum: ["available", "staged", "suspended"]
      responses:
        "200":
          $ref: '#/components/responses/PoolsResponse'

  "/v2/pool/{asset}":
    get:
      operationId: GetPool
      summary: Details of a Pool
      description: 'Returns details of the pool: depths, price, 24h volume, APY. '
      parameters:
        - in: path
          name: asset
          description: pool name
          required: true
          schema:
            type: string
          example: 'BNB.TOMOB-1E1'
      responses:
        "200":
          $ref: '#/components/responses/PoolResponse'

  "/v2/pool/{asset}/stats":
    get:
      operationId: GetPoolStats
      summary: Pool Statistics
      description: |
        Statistics about the pool. The description of the fields have pointers about the
        corresponding v2/history location. Visit the history endpoint for drilldowns.
      parameters:
        - in: path
          name: asset
          description: pool name
          required: true
          schema:
            type: string
          example: 'BNB.TOMOB-1E1'
        - name: period
          in: query
          description: |
            Restricts aggregation type fields to the last period only.
            Default is 30d.
          required: false
          example: "24h"
          schema:
            type: string
            enum: ["1h", "24h", "7d", "30d", "90d", "365d", "all"]
      responses:
        "200":
          $ref: '#/components/responses/PoolStatsResponse'

  "/v2/pool/{asset}/stats/legacy":
    get:
      operationId: GetPoolStatsLegacy
      summary: Pool Statistics (v1 naming)
      description: |
        Legacy, V1 style names for backward compatibility. Please migrate to GetPoolStats, check
        the fields documentation for details.
      parameters:
        - in: path
          name: asset
          description: pool name
          required: true
          schema:
            type: string
          example: 'BNB.TOMOB-1E1'
      responses:
        "200":
          $ref: '#/components/responses/PoolLegacyResponse'

  "/v2/history/depths/{pool}":
    get:
      operationId: GetDepthHistory
      summary: Depth and Price History
      description: |
        Returns the asset and rune depths and price.
        The values report the state at the end of each interval.

        History endpoint has two modes:
        * With Interval parameter it returns a series of time buckets. From and To dates will
          be rounded to the Interval boundaries.
        * Without Interval parameter a single From..To search is performed with exact timestamps.


        * Interval: possible values: 5min, hour, day, week, month, quarter, year.
        * count: [1..400]. Defines number of intervals. Don't provide if Interval is missing.
        * from/to: optional int, unix second.

        Possible usages with interval.
        * last 10 days: `?interval=day&count=10`
        * last 10 days before to: `?interval=day&count=10&to=1608825600`
        * next 10 days after from: `?interval=day&count=10&from=1606780800`
        * Days between from and to. From defaults to start of chain, to defaults to now.
          Only the first 400 intervals are returned:
          `interval=day&from=1606780800&to=1608825600`

        Pagination is possible with from&count and then using the returned meta.endTime as the
        From parameter of the next query.

        Possible configurations without interval:
        * exact search for one time frame: `?from=1606780899&to=1608825600`
        * one time frame until now: `?from=1606780899`
        * from chain start until now: no query parameters
      parameters:
        - name: pool
          in: path
          description: Return stats for this single pool.
          required: true
          schema:
            type: string
        - name: interval
          in: query
          description: Interval of calculations
          required: false
          example: "day"
          schema:
            type: string
            enum: ["5min", "hour", "day", "week", "month", "quarter", "year"]
        - name: count
          in: query
          description: Number of intervals to return. Should be between [1..400].
          required: false
          example: 30
          schema:
            type: integer
        - name: to
          in: query
          description: End time of the query as unix timestamp. If only count is given, defaults to now.
          required: false
          example: 1608825600
          schema:
            type: integer
            format: int64
        - name: from
          in: query
          description: Start time of the query as unix timestamp
          required: false
          example: 1606780800
          schema:
            type: integer
            format: int64
      responses:
        "200":
          $ref: '#/components/responses/DepthHistoryResponse'

  "/v2/history/earnings":
    get:
      operationId: GetEarningsHistory
      summary: Earnings History
      description: |
        Returns earnings data for the specified interval.

        History endpoint has two modes:
        * With Interval parameter it returns a series of time buckets. From and To dates will
          be rounded to the Interval boundaries.
        * Without Interval parameter a single From..To search is performed with exact timestamps.


        * Interval: possible values: 5min, hour, day, week, month, quarter, year.
        * count: [1..400]. Defines number of intervals. Don't provide if Interval is missing.
        * from/to: optional int, unix second.

        Possible usages with interval.
        * last 10 days: `?interval=day&count=10`
        * last 10 days before to: `?interval=day&count=10&to=1608825600`
        * next 10 days after from: `?interval=day&count=10&from=1606780800`
        * Days between from and to. From defaults to start of chain, to defaults to now.
          Only the first 400 intervals are returned:
          `interval=day&from=1606780800&to=1608825600`

        Pagination is possible with from&count and then using the returned meta.endTime as the
        From parameter of the next query.

        Possible configurations without interval:
        * exact search for one time frame: `?from=1606780899&to=1608825600`
        * one time frame until now: `?from=1606780899`
        * from chain start until now: no query parameters
      parameters:
        - name: interval
          in: query
          description: Interval of calculations
          required: false
          example: "day"
          schema:
            type: string
            enum: ["5min", "hour", "day", "week", "month", "quarter", "year"]
        - name: count
          in: query
          description: Number of intervals to return. Should be between [1..400].
          required: false
          example: 30
          schema:
            type: integer
        - name: to
          in: query
          description: End time of the query as unix timestamp. If only count is given, defaults to now.
          required: false
          example: 1608825600
          schema:
            type: integer
            format: int64
        - name: from
          in: query
          description: Start time of the query as unix timestamp
          required: false
          example: 1606780800
          schema:
            type: integer
            format: int64
      responses:
        "200":
          $ref: '#/components/responses/EarningsHistoryResponse'

  "/v2/history/swaps":
    get:
      operationId: GetSwapHistory
      summary: Swaps History
      description: |
        Returns swap count, volume, fees, slip in specified interval.
        If pool is not specified returns for all pools

        History endpoint has two modes:
        * With Interval parameter it returns a series of time buckets. From and To dates will
          be rounded to the Interval boundaries.
        * Without Interval parameter a single From..To search is performed with exact timestamps.


        * Interval: possible values: 5min, hour, day, week, month, quarter, year.
        * count: [1..400]. Defines number of intervals. Don't provide if Interval is missing.
        * from/to: optional int, unix second.

        Possible usages with interval.
        * last 10 days: `?interval=day&count=10`
        * last 10 days before to: `?interval=day&count=10&to=1608825600`
        * next 10 days after from: `?interval=day&count=10&from=1606780800`
        * Days between from and to. From defaults to start of chain, to defaults to now.
          Only the first 400 intervals are returned:
          `interval=day&from=1606780800&to=1608825600`

        Pagination is possible with from&count and then using the returned meta.endTime as the
        From parameter of the next query.

        Possible configurations without interval:
        * exact search for one time frame: `?from=1606780899&to=1608825600`
        * one time frame until now: `?from=1606780899`
        * from chain start until now: no query parameters
      parameters:
        - name: pool
          in: query
          description: Return history given pool. Returns sum of all pools if missing.
          required: false
          schema:
            type: string
        - name: interval
          in: query
          description: Interval of calculations
          required: false
          example: "day"
          schema:
            type: string
            enum: ["5min", "hour", "day", "week", "month", "quarter", "year"]
        - name: count
          in: query
          description: Number of intervals to return. Should be between [1..400].
          required: false
          example: 30
          schema:
            type: integer
        - name: to
          in: query
          description: End time of the query as unix timestamp. If only count is given, defaults to now.
          required: false
          example: 1608825600
          schema:
            type: integer
            format: int64
        - name: from
          in: query
          description: Start time of the query as unix timestamp
          required: false
          example: 1606780800
          schema:
            type: integer
            format: int64
      responses:
        "200":
          $ref: '#/components/responses/SwapHistoryResponse'

  "/v2/history/liquidity_changes":
    get:
      operationId: GetLiquidityHistory
      summary: Liquidity Changes History
      description: |
        Returns withdrawals and deposits for given time interval.
        If pool is not specified returns for all pools

        History endpoint has two modes:
        * With Interval parameter it returns a series of time buckets. From and To dates will
          be rounded to the Interval boundaries.
        * Without Interval parameter a single From..To search is performed with exact timestamps.


        * Interval: possible values: 5min, hour, day, week, month, quarter, year.
        * count: [1..400]. Defines number of intervals. Don't provide if Interval is missing.
        * from/to: optional int, unix second.

        Possible usages with interval.
        * last 10 days: `?interval=day&count=10`
        * last 10 days before to: `?interval=day&count=10&to=1608825600`
        * next 10 days after from: `?interval=day&count=10&from=1606780800`
        * Days between from and to. From defaults to start of chain, to defaults to now.
          Only the first 400 intervals are returned:
          `interval=day&from=1606780800&to=1608825600`

        Pagination is possible with from&count and then using the returned meta.endTime as the
        From parameter of the next query.

        Possible configurations without interval:
        * exact search for one time frame: `?from=1606780899&to=1608825600`
        * one time frame until now: `?from=1606780899`
        * from chain start until now: no query parameters
      parameters:
        - name: pool
          in: query
          description: Return stats for given pool. Returns sum of all pools if missing
          required: false
          schema:
            type: string
        - name: interval
          in: query
          description: Interval of calculations
          required: false
          example: "day"
          schema:
            type: string
            enum: ["5min", "hour", "day", "week", "month", "quarter", "year"]
        - name: count
          in: query
          description: Number of intervals to return. Should be between [1..400]
          required: false
          example: 30
          schema:
            type: integer
        - name: to
          in: query
          description: End time of the query as unix timestamp. If only count is given, defaults to now
          required: false
          example: 1608825600
          schema:
            type: integer
            format: int64
        - name: from
          in: query
          description: Start time of the query as unix timestamp
          required: false
          example: 1606780800
          schema:
            type: integer
            format: int64
      responses:
        "200":
          $ref: '#/components/responses/LiquidityHistoryResponse'

  "/v2/nodes":
    get:
      operationId: GetNodes
      summary: Nodes List
      description: Returns a list of Node public keys and adresses.
      responses:
        "200":
          "$ref": "#/components/responses/NodesResponse"

  "/v2/network":
    get:
      operationId: GetNetworkData
      summary: Network Data
      description: Returns an object containing Network data
      responses:
        "200":
          "$ref": "#/components/responses/NetworkResponse"

  "/v2/actions":
    get:
      operationId: GetActions
      summary: Actions List
      description: |
        List actions along with their related transactions. An action is generated by one or more
        inbound transactions with the intended action set in the transaction memo. The action may result in one
        or more outbound transactions. Results are paginated by sets of 50. Filters may be applied
        to query actions.
      parameters:
        - name: address
          in: query
          description: |
            Comma separated list. Address of sender or recipient of any in/out transaction related
            to the action.
          required: false
          schema:
            type: string
          example: tbnb1fj2lqj8dvr5pumfchc7ntlfqd2v6zdxqwjewf5
        - name: txid
          in: query
          description: ID of any in/out tx related to the action
          required: false
          schema:
            type: string
          example: 2F624637DE179665BA3322B864DB9F30001FD37B4E0D22A0B6ECE6A5B078DAB4
        - name: asset
          in: query
          description: Any asset that is part of the action (CHAIN.SYMBOL)
          required: false
          schema:
            type: string
          example: BNB.TOMOB-1E1
        - name: type
          in: query
          description: One or more comma separated unique types of action (swap, addLiquidity, withdraw, donate, refund)
          required: false
          schema:
            type: string
          example: swap,addLiquidity
        - name: limit
          in: query
          description: pagination limit
          required: true
          schema:
            type: integer
            format: int64
            minimum: 0
            maximum: 50
        - name: offset
          in: query
          description: pagination offset
          required: true
          schema:
            type: integer
            format: int64
            minimum: 0
      responses:
        "200":
          $ref: '#/components/responses/ActionsResponse'

  "/v2/members":
    get:
      operationId: GetMembersAdresses
      summary: Members List
      description: |
        Returns an array containing the addresses for all pool members.
        Addresses are only shown once. If there's both a RUNE address and an asset address
        for a member, only the RUNE address will be shown.
      parameters:
        - name: pool
          in: query
          description: Return only members present in the pool.
          required: false
          schema:
            type: string
      responses:
        "200":
          "$ref": "#/components/responses/MembersResponse"

  "/v2/member/{address}":
    get:
      operationId: GetMemberDetail
      summary: Member Details
      description: Returns an array of statistics for all the liquidity providers associated with a given member address.
      parameters:
        - name: address
          in: path
          description: Address to match liquidity providers. Either a rune or an asset address may be given.
          required: true
          schema:
            type: string
          example: 'bnb1jxfh2g85q3v0tdq56fnevx6xcxtcnhtsmcu64m'
      responses:
        "200":
          $ref: '#/components/responses/MemberDetailsResponse'

  "/v2/stats":
    get:
      operationId: GetStats
      summary: Global Stats
      description: Returns an object containing global stats for all pools and all transactions
      responses:
        "200":
          $ref: '#/components/responses/StatsResponse'

  "/v2/thorchain/inbound_addresses":
    get:
      operationId: GetProxiedInboundAddresses
      summary: Proxied THORChain Inbound Addresses
      description: >-
        Inbound addresses will return a list of address , one per chain. The address might change frequently if THORChain has multiple asgards.
      responses:
        "200":
          $ref: '#/components/responses/InboundAddressesResponse'

  "/v2/thorchain/constants":
    get:
      operationId: GetProxiedConstants
      summary: Proxied THORChain Constants
      description: Constant values used by THORChain , some of the values can be overrided by mimir
      responses:
        "200":
          $ref: '#/components/responses/ConstantsResponse'

  "/v2/thorchain/lastblock":
    get:
      operationId: GetProxiedLastblock
      summary: Proxied THORChain Lastblock
      description: Retrieve lastest block infomation across all chains.
      responses:
        "200":
          $ref: '#/components/responses/LastblockResponse'

  "/v2/thorchain/queue":
    get:
      operationId: GetProxiedQueue
      summary: Proxied THORChain Queue
      description: Returns the proxied queue endpoint from thornode
      responses:
        "200":
          $ref: '#/components/responses/QueueResponse'

  "/v2/thorchain/nodes":
    get:
      operationId: GetProxiedNodes
      summary: Proxied THORChain Nodes
      description: Returns the proxied nodes endpoint from thornode
      responses:
        "200":
          $ref: '#/components/responses/ProxiedNodesResponse'

components:
  responses:
    HealthResponse:
      description: Returns health status for Midgard
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Health'
    PoolsResponse:
      description: Array of pool details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PoolDetails'
    PoolStatsResponse:
      description: Stats for one pool.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PoolStatsDetail'
    PoolLegacyResponse:
      description: Stats for one pool with V1 naming.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PoolLegacyDetail'
    PoolResponse:
      description: Object containing details for one pool
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PoolDetail'
    DepthHistoryResponse:
      description: Depth and price history
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DepthHistory'
    EarningsHistoryResponse:
      description: earnings history
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EarningsHistory'
    SwapHistoryResponse:
      description: Swap count, volume, fee and slip history
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SwapHistory'
    LiquidityHistoryResponse:
      description: Withdrawals and deposits history
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LiquidityHistory'
    NodesResponse:
      # TODO(acsaba): add better description
      description: Returns an object containing Node public key data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Nodes'
    NetworkResponse:
      # TODO(acsaba): add better description
      description: Returns an object containing Network data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Network'
    ActionsResponse:
      description: Returns an array of actions for the given filters.
      content:
        application/json:
          schema:
            type: object
            required:
              - count
              - actions
            properties:
              count:
                type: string
                description: Int64, number of results matching the given filters.
              actions:
                type: array
                items:
                  $ref: '#/components/schemas/Action'
    MembersResponse:
      description: array of all the members
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Members'
    MemberDetailsResponse:
      description: object containing liquidity provider data for a specific member
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MemberDetails'
    StatsResponse:
      description: object containing global BEPSwap data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/StatsData'

    InboundAddressesResponse:
      description: Thornode Indbound Adresses response.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InboundAddresses'
    ConstantsResponse:
      description: Thornode Constants response.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Constants'
    LastblockResponse:
      description: Thornode Lastblock response.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Lastblock'
    QueueResponse:
      description: Thornode Queue response.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Queue'
    ProxiedNodesResponse:
      description: Thornode Nodes response.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProxiedNodes'


  schemas:
    Health:
      type: object
      required:
      - database
      - scannerHeight
      - inSync
      properties:
        database:
          type: boolean
          description: True means healthy, connected to database
        scannerHeight:
          type: string
          description: Int64, the current block count
        inSync:
          type: boolean
          description: True means healthy. False means Midgard is still catching up to the chain

    PoolDetails:
      type: array
      items:
        $ref: '#/components/schemas/PoolDetail'
    PoolDetail:
        # TODO(lukesaunders): consider renaming this "asset" to "pool" too.
        #   note that the response for /v2/tx returns a field named pool
        #   for the same thing.
        # NOTE(elfedy): the thornode endpoint for pools /thorchain/pools names this field "asset"
        #   Heimdall also refers to the field by "asset" in the smoke tests so if changed,
        #   remeber to submit a PR changing that too.
      type: object
      required:
        - asset
        - volume24h
        - assetDepth
        - runeDepth
        - assetPrice
        - assetPriceUSD
        - poolAPY
        - status
        - units
      properties:
        asset:
          type: string
        volume24h:
          type: string
          description: Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
        assetDepth:
          type: string
          description: Int64(e8), the amount of Asset in the pool.
        runeDepth:
          type: string
          description: Int64(e8), the amount of Rune in the pool.
        assetPrice:
          type: string
          description: Float, price of asset in rune. I.e. rune amount / asset amount.
        assetPriceUSD:
          type: string
          description: Float, the price of asset in USD (based on the deepest USD pool).
        poolAPY:
          type: string
          description: 'Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.'
        status:
          type: string
          description: The state of the pool, e.g. Available, Staged.
        units:
          type: string
          description: Int64, Liquidity Units in the pool.

    PoolStatsDetail:
      type: object
      required:
        - asset
        - status
        - assetPrice
        - assetPriceUSD
        - assetDepth
        - runeDepth
        - units
        - toAssetVolume
        - toRuneVolume
        - swapVolume
        - toAssetCount
        - toRuneCount
        - swapCount
        - uniqueSwapperCount
        - toAssetAverageSlip
        - toRuneAverageSlip
        - averageSlip
        - toAssetFees
        - toRuneFees
        - totalFees
        - poolAPY
        - addAssetLiquidityVolume
        - addRuneLiquidityVolume
        - addLiquidityVolume
        - addLiquidityCount
        - withdrawAssetVolume
        - withdrawRuneVolume
        - withdrawVolume
        - withdrawCount
        - uniqueMemberCount
      properties:
        asset:
          type: string
        status:
          type: string
          description: The state of the pool, e.g. Available, Staged
        assetPrice:
          type: string
          description: Float, price of asset in rune. I.e. rune amount / asset amount
        assetPriceUSD:
          type: string
          description: Float, the price of asset in USD (based on the deepest USD pool).
        assetDepth:
          type: string
          description: Int64(e8), the amount of Asset in the pool
        runeDepth:
          type: string
          description: Int64(e8), the amount of Rune in the pool
        units:
          type: string
          description: Int64, Liquidity Units in the pool
        toAssetVolume:
          type: string
          description: Int64(e8), same as history/swaps:toAssetVolume
        toRuneVolume:
          type: string
          description: Int64(e8), same as history/swaps:toRuneVolume
        swapVolume:
          type: string
          description: Int64(e8), same as history/swaps:totalVolume
        toAssetCount:
          type: string
          description: Int64, same as history/swaps:toAssetCount
        toRuneCount:
          type: string
          description: Int64, same as history/swaps:toRuneCount
        swapCount:
          type: string
          description: Int64, same as history/swaps:totalCount
        uniqueSwapperCount:
          type: string
          description: |
            Int64, number of unique adresses that initiated swaps transactions in the period.
        toAssetAverageSlip:
          type: string
          description: Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toAssetAverageSlip
        toRuneAverageSlip:
          type: string
          description: Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toRuneAverageSlip
        averageSlip:
          type: string
          description: Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
        toAssetFees:
          type: string
          description: Int64(e8), same as history/swaps:toAssetFees
        toRuneFees:
          type: string
          description: Int64(e8), same as history/swaps:toRuneFees
        totalFees:
          type: string
          description: Int64(e8), same as history/swaps:totalFees
        poolAPY:
          type: string
          description: 'Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.'
        addAssetLiquidityVolume:
          type: string
          description: Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
        addRuneLiquidityVolume:
          type: string
          description: Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
        addLiquidityVolume:
          type: string
          description: Int64(e8), same as history/liquidity_changes:addLiquidityVolume
        addLiquidityCount:
          type: string
          description: Int64, same as history/liquidity_changes:addLiquidityCount
        withdrawAssetVolume:
          type: string
          description: Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
        withdrawRuneVolume:
          type: string
          description: Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
        withdrawVolume:
          type: string
          description: Int64(e8), same as history/liquidity_changes:withdrawVolume
        withdrawCount:
          type: string
          description: Int64, same as history/liquidity_changes:withdrawCount
        uniqueMemberCount:
          type: string
          description: Int64, same as len(history/members?pool=POOL)

    PoolLegacyDetail:
      type: object
      required:
        - asset
        - status
        - price
        - assetDepth
        - runeDepth
        - poolDepth
        - poolUnits
        - buyVolume
        - sellVolume
        - poolVolume
        - volume24h
        - buyAssetCount
        - sellAssetCount
        - swappingTxCount
        - swappersCount
        - buyTxAverage
        - sellTxAverage
        - poolTxAverage
        - buySlipAverage
        - sellSlipAverage
        - poolSlipAverage
        - buyFeesTotal
        - sellFeesTotal
        - poolFeesTotal
        - buyFeeAverage
        - sellFeeAverage
        - poolFeeAverage
        - poolAPY
        - assetStakedTotal
        - runeStakedTotal
        - poolStakedTotal
        - stakeTxCount
        - withdrawTxCount
        - stakingTxCount
        - stakersCount
      properties:
        asset:
          type: string
        status:
          type: string
          description: same as status from pool/stats
        price:
          type: string
          description: same as assetPrice from pool/stats
        assetDepth:
          type: string
          description: same as assetDepth from pool/stats
        runeDepth:
          type: string
          description: same as runeDepth from pool/stats
        poolDepth:
          type: string
          description: same as 2*runeDepth from pool/stats
        poolUnits:
          type: string
          description: same as units from pool/stats
        buyVolume:
          type: string
          description: same as toAssetVolume from pool/stats
        sellVolume:
          type: string
          description: same as toRuneVolume from pool/stats
        poolVolume:
          type: string
          description: Int64(e8), same as buyVolume + sellVolume
        volume24h:
          type: string
          description: Int64(e8), same as swapVolume pool/stats?period=24h
        buyAssetCount:
          type: string
          description: same as toAssetCount from pool/stats
        sellAssetCount:
          type: string
          description: same as toRuneCount from pool/stats
        swappingTxCount:
          type: string
          description: Int64, same as history/swaps:totalCount
        swappersCount:
          type: string
          description: Int64, same as history/swaps:uniqueSwapperCount
        buyTxAverage:
          type: string
          description:  same as toAssetVolume / toAssetCount from pool/stats
        sellTxAverage:
          type: string
          description: same as toRuneVolume / toRuneCount from pool/stats
        poolTxAverage:
          type: string
          description: same as swapVolume / swapCount from pool/stats
        buySlipAverage:
          type: string
          description: same as toAssetAverageSlip from pool/stats
        sellSlipAverage:
          type: string
          description: same as toRuneAverageSlip from pool/stats
        poolSlipAverage:
          type: string
          description: same as averageSlip from pool/stats
        buyFeesTotal:
          type: string
          description: same as toAssetFees from pool/stats
        sellFeesTotal:
          type: string
          description: same as toRuneFees from pool/stats
        poolFeesTotal:
          type: string
          description: same as totalFees from pool/stats
        buyFeeAverage:
          type: string
          description: same as toAssetFees / toAssetCount from pool/stats
        sellFeeAverage:
          type: string
          description: same as toRuneFees / toRuneCount from pool/stats
        poolFeeAverage:
          type: string
          description: same as totalFees / swapCount from pool/stats
        poolAPY:
          type: string
          description: 'Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.'
        assetStakedTotal:
          type: string
          description: same as addAssetLiquidityVolume from pool/stats
        runeStakedTotal:
          type: string
          description: same as addRuneLiquidityVolume from pool/stats
        poolStakedTotal:
          type: string
          description: same as addLiquidityVolume from pool/stats
        stakeTxCount:
          type: string
          description: same as addLiquidityCount from pool/stats
        withdrawTxCount:
          type: string
          description: same as withdrawCount from pool/stats
        stakingTxCount:
          type: string
          description: same as addLiquidityCount + withdrawCount from pool/stats
        stakersCount:
          type: string
          description: same as uniqueMemberCount from pool/stats

    DepthHistory:
      type: object
      required:
        - meta
        - intervals
      properties:
        meta:
          $ref: '#/components/schemas/DepthHistoryMeta'
        intervals:
          $ref: '#/components/schemas/DepthHistoryIntervals'
    DepthHistoryMeta:
      type: object
      required:
        - startTime
        - endTime
      properties:
        startTime:
          type: string
          description: Int64, The beginning time of bucket in unix timestamp
        endTime:
          type: string
          description: Int64, The end time of bucket in unix timestamp
    DepthHistoryIntervals:
      type: array
      items:
        $ref: '#/components/schemas/DepthHistoryItem'
    DepthHistoryItem:
      type: object
      required:
        - startTime
        - endTime
        - assetDepth
        - runeDepth
        - assetPrice
        - assetPriceUSD
        - liquidityUnits
      properties:
        startTime:
          type: string
          description: Int64, The beginning time of bucket in unix timestamp
        endTime:
          type: string
          description: Int64, The end time of bucket in unix timestamp
        assetDepth:
          type: string
          description: Int64(e8), the amount of Asset in the pool at the end of the interval
        runeDepth:
          type: string
          description: Int64(e8), the amount of Rune in the pool at the end of the interval
        assetPrice:
          type: string
          description: Float, price of asset in rune. I.e. rune amount / asset amount
        assetPriceUSD:
          type: string
          description: Float, the price of asset in USD (based on the deepest USD pool).
        liquidityUnits:
          type: string
          description: Int64, Liquidity Units in the pool at the end of the interval

    EarningsHistory:
      type: object
      required:
        - meta
        - intervals
      properties:
        meta:
          $ref: '#/components/schemas/EarningsHistoryItem'
        intervals:
          $ref: '#/components/schemas/EarningsHistoryIntervals'
    EarningsHistoryIntervals:
      type: array
      items:
        $ref: '#/components/schemas/EarningsHistoryItem'
    EarningsHistoryItem:
      type: object
      required:
        - startTime
        - endTime
        - liquidityFees
        - blockRewards
        - earnings
        - bondingEarnings
        - liquidityEarnings
        - avgNodeCount
        - pools
      properties:
        startTime:
          type: string
          description: Int64, The beginning time of interval in unix timestamp
        endTime:
          type: string
          description: Int64, The end time of interval in unix timestamp
        liquidityFees:
          type: string
          description: Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
        blockRewards:
          type: string
          description: Int64(e8), Total block rewards emitted during the time interval
        earnings:
          type: string
          description: Int64(e8), System income generated during the time interval. It is the sum of liquidity fees and block rewards
        bondingEarnings:
          type: string
          description: Int64(e8), Share of earnings sent to nodes during the time interval
        liquidityEarnings:
          type: string
          description: Int64(e8), Share of earnings sent to pools during the time interval
        avgNodeCount:
          type: string
          description: float64, Average amount of active nodes during the time interval
        pools:
          type: array
          description: Earnings data for each pool for the time interval
          items:
            $ref: '#/components/schemas/EarningsHistoryItemPool'
    EarningsHistoryItemPool:
      type: object
      required:
        - pool
        - assetLiquidityFees
        - runeLiquidityFees
        - totalLiquidityFeesRune
        - rewards
        - earnings
      description: pool earnings data during the time interval
      properties:
        pool:
          type: string
          description: asset for the given pool
        assetLiquidityFees:
          type: string
          description: Int64 (10^8), liquidity fees collected in the pool's asset
        runeLiquidityFees:
          type: string
          description: Int64 (10^8), liquidity fees collected in RUNE
        totalLiquidityFeesRune:
          type: string
          description: Int64 (10^8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
        rewards:
          type: string
          description: |
            Int64 (10^8), RUNE amount sent to (positive) or taken from (negative) the pool as
            a result of balancing it's share of system income each block
        earnings:
          type: string
          description: Int64 (10^8), total earnings in RUNE (totalLiquidityFees + rewards)
    SwapHistory:
      type: object
      required:
        - meta
        - intervals
      properties:
        meta:
          $ref: '#/components/schemas/SwapHistoryItem'
        intervals:
          $ref: '#/components/schemas/SwapHistoryIntervals'
    SwapHistoryIntervals:
      type: array
      items:
        $ref: '#/components/schemas/SwapHistoryItem'
    SwapHistoryItem:
      type: object
      required:
        - startTime
        - endTime
        - toAssetCount
        - toRuneCount
        - totalCount
        - toAssetVolume
        - toRuneVolume
        - totalVolume
        - toAssetFees
        - toRuneFees
        - totalFees
        - toAssetAverageSlip
        - toRuneAverageSlip
        - averageSlip
      properties:
        startTime:
          type: string
          description: Int64, The beginning time of bucket in unix timestamp
        endTime:
          type: string
          description: Int64, The end time of bucket in unix timestamp
        toAssetCount:
          type: string
          description: Int64, count of swaps from rune to asset
        toRuneCount:
          type: string
          description: Int64, count of swaps from asset to rune
        totalCount:
          type: string
          description: Int64, toAssetCount + toRuneCount
        toAssetVolume:
          type: string
          description: Int64(e8), volume of swaps from rune to asset denoted in rune
        toRuneVolume:
          type: string
          description: Int64(e8), volume of swaps from asset to rune denoted in rune
        totalVolume:
          type: string
          description: Int64(e8), toAssetVolume + toRuneVolume (denoted in rune)
        toAssetFees:
          type: string
          description: Int64(e8), the fees collected from swaps to asset denoted in rune
        toRuneFees:
          type: string
          description: Int64(e8), the fees collected from swaps to rune
        totalFees:
          type: string
          description: Int64(e8), the sum of all fees collected denoted in rune
        toAssetAverageSlip:
          type: string
          description: |
            Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps to asset.
            Big swaps have the same weight as small swaps
        toRuneAverageSlip:
          type: string
          description: |
            Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps to rune.
            Big swaps have the same weight as small swaps
        averageSlip:
          type: string
          description: |
            Float64 (Basis points, 0-10000, where 10000=100%), the average slip by swap.
            Big swaps have the same weight as small swaps
    LiquidityHistory:
      type: object
      required:
        - meta
        - intervals
      properties:
        meta:
          $ref: '#/components/schemas/LiquidityHistoryItem'
        intervals:
          $ref: '#/components/schemas/LiquidityHistoryIntervals'
    LiquidityHistoryIntervals:
      type: array
      items:
        $ref: '#/components/schemas/LiquidityHistoryItem'
    LiquidityHistoryItem:
      type: object
      required:
        - startTime
        - endTime
        - addAssetLiquidityVolume
        - addRuneLiquidityVolume
        - addLiquidityVolume
        - addLiquidityCount
        - withdrawAssetVolume
        - withdrawRuneVolume
        - withdrawVolume
        - withdrawCount
        - net
      properties:
        startTime:
          type: string
          description: Int64, The beginning time of bucket in unix timestamp
        endTime:
          type: string
          description: Int64, The end time of bucket in unix timestamp
        addAssetLiquidityVolume:
          type: string
          description: |
            Int64(e8), total assets deposited during the time interval.
            Denoted in Rune using the price at deposit time.
        addRuneLiquidityVolume:
          type: string
          description: |
            Int64(e8), total Rune deposited during the time interval.
        addLiquidityVolume:
          type: string
          description: |
            Int64(e8), total of rune and asset deposits.
            Denoted in Rune (using the price at deposit time).
        addLiquidityCount:
          type: string
          description: |
            Int64, number of deposits during the time interval.
        withdrawAssetVolume:
          type: string
          description: |
            Int64 (10^8), total assets withdrawn during the time interval.
            Denoted in Rune using the price at withdraw time.
        withdrawRuneVolume:
          type: string
          description: |
            Int64 (10^8), total Rune withdrawn during the time interval.
        withdrawVolume:
          type: string
          description: |
            Int64 (10^8), total of rune and asset withdrawals.
            Denoted in Rune (using the price at withdraw time).
        withdrawCount:
          type: string
          description: |
            Int64, number of withdraw during the time interval.
        net:
          type: string
          description: Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
    Nodes:
      type: array
      items:
        $ref: '#/components/schemas/Node'
    Node:
      type: object
      required:
        - nodeAddress
        - secp256k1
        - ed25519
      properties:
        nodeAddress:
          type: string
          description: node thorchain address
          example: thor102y0m3uptg0vvudeyh00r2fnz70wq7d8y7mu2g
        secp256k1:
          type: string
          description: secp256k1 public key
          example: thorpub1addwnpepqgxwdf3ure0pg5fwnpeux3ym9n06267lkres54zwjh4c8048ezhj5024qyr
        ed25519:
          type: string
          description: ed25519 public key
          example: thorpub1addwnpepqgxwdf3ure0pg5fwnpeux3ym9n06267lkres54zwjh4c8048ezhj5024qyr
    Network:
      type: object
      required:
        - bondMetrics
        - blockRewards
        - activeBonds
        - standbyBonds
        - activeNodeCount
        - standbyNodeCount
        - totalPooledRune
        - totalReserve
        - nextChurnHeight
        - poolActivationCountdown
        - poolShareFactor
        - bondingAPY
        - liquidityAPY
      properties:
        bondMetrics:
          $ref: '#/components/schemas/BondMetrics'
        blockRewards:
          $ref: '#/components/schemas/BlockRewards'
        activeBonds:
          type: array
          # TODO(acsaba): add description
          items:
            type: string
        standbyBonds:
          type: array
          # TODO(acsaba): add description
          description: Array of Standby Bonds
          items:
            type: string
        activeNodeCount:
          type: string
          description: Int64, Number of Active Nodes
        standbyNodeCount:
          type: string
          description: Int64, Number of Standby Nodes
        totalPooledRune:
          type: string
          description: Int64(e8), Total Rune pooled in all pools
        totalReserve:
          type: string
          # TODO(acsaba): document what left in reserve
          description: Int64(e8), Total left in Reserve
        nextChurnHeight:
          type: string
          # TODO(acsaba): check documentation
          description: Int64, next height of blocks
        poolActivationCountdown:
          type: string
          description: Int64, the remaining time of pool activation (in blocks)
        poolShareFactor:
          type: string
          # TODO(acsaba): float, add documentation
        bondingAPY:
          type: string
          # TODO(acsaba): doublecheck that documentation holds
          description: Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
        liquidityAPY:
          # TODO(acsaba): doublecheck that documentation holds
          type: string
          description: Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
    BondMetrics:
      type: object
      required:
        - totalActiveBond
        - averageActiveBond
        - medianActiveBond
        - minimumActiveBond
        - maximumActiveBond
        - totalStandbyBond
        - averageStandbyBond
        - medianStandbyBond
        - minimumStandbyBond
        - maximumStandbyBond
      properties:
        totalActiveBond:
          type: string
          description: Int64(e8), Total bond of active nodes
        averageActiveBond:
          type: string
          # TODO(acsaba): make this float
          description: Int64(e8), Average bond of active nodes
        medianActiveBond:
          type: string
          description: Int64(e8), Median bond of active nodes
        minimumActiveBond:
          type: string
          description: Int64(e8), Minumum bond of active nodes
        maximumActiveBond:
          type: string
          description: Int64(e8), Maxinum bond of active nodes
        totalStandbyBond:
          type: string
          description: Int64(e8), Total bond of standby nodes
        averageStandbyBond:
          type: string
          # TODO(acsaba): make this float
          description: Int64(e8), Average bond of standby nodes
        medianStandbyBond:
          type: string
          description: Int64(e8), Median bond of standby nodes
        minimumStandbyBond:
          type: string
          description: Int64(e8), Minumum bond of standby nodes
        maximumStandbyBond:
          type: string
          description: Int64(e8), Maximum bond of standby nodes
    BlockRewards:
      type: object
      required:
        - blockReward
        - bondReward
        - poolReward
      properties:
        blockReward:
          type: string
          # TODO(acsaba): add description
        bondReward:
          type: string
          # TODO(acsaba): add description
        poolReward:
          type: string
          # TODO(acsaba): add description.
    Action:
      type: object
      description: action details among with related transactions
      required:
        - pools
        - type
        - status
        - in
        - out
        - date
        - height
        - metadata
      properties:
        pools:
          type: array
          description: Pools involved in the action
          items:
            type: string
        type:
          type: string
          description: Type of action
          enum: [swap, addLiquidity, withdraw, donate, refund]
        status:
          type: string
          description: Indicates if the action is completed or if related outbound transactions are still pending.
          enum: [success, pending]
        in:
          type: array
          description: Inbound transactions related to the action
          items:
            $ref: '#/components/schemas/Transaction'
        out:
          type: array
          description: Outbound transactions related to the action
          items:
            $ref: '#/components/schemas/Transaction'
        date:
          type: string
          description: Int64, Unix timestamp for when the action was registered
        height:
          type: string
          description: Int64, block height at which the action was registered
        metadata:
          description: Metadata associated with the action
          $ref: '#/components/schemas/Metadata'
    Transaction:
      type: object
      description: Transaction data
      required:
        - txID
        - address
        - coins
      properties:
        txID:
          type: string
          description: Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
        address:
          type: string
          description: Sender address
        coins:
          $ref: '#/components/schemas/Coins'
          description: Coins sent in the transaction
    Coins:
      type: array
      items:
        $ref: '#/components/schemas/Coin'
    Coin:
      type: object
      description: Represents a digital currency amount
      required:
        - asset
        - amount
      properties:
        asset:
          type: string
          description: Asset in CHAIN.SYMBOL format
        amount:
          type: string
          description: Int64 (10^8), asset Amount.
    Metadata:
      type: object
      properties:
        swap:
          $ref: '#/components/schemas/SwapMetadata'
        addLiquidity:
          $ref: '#/components/schemas/AddLiquidityMetadata'
        withdraw:
          $ref: '#/components/schemas/WithdrawMetadata'
        refund:
          $ref: '#/components/schemas/RefundMetadata'
    SwapMetadata:
      type: object
      required:
        - networkFees
        - liquidityFee
        - tradeSlip
        - tradeTarget
      properties:
        networkFees:
          $ref: '#/components/schemas/NetworkFees'
        liquidityFee:
          type: string
          description: Int64 (10^8), RUNE amount charged as swap liquidity fee
        tradeSlip:
          type: string
          description: Int64 (Basis points, 0-10000, where 10000=100%), trade slip percentage
        tradeTarget:
          type: string
          description: Int64 (10^8), minimum output amount specified for the swap
    AddLiquidityMetadata:
      type: object
      required:
        - liquidityUnits
      properties:
        liquidityUnits:
          type: string
          description: Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
    WithdrawMetadata:
      type: object
      required:
        - liquidityUnits
        - asymmetry
        - basisPoints
        - networkFees
      properties:
        liquidityUnits:
          type: string
          description: Int64, amount of liquidity units removed from the member as result of the withdrawal
        asymmetry:
          type: string
          description: Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
        basisPoints:
          type: string
          description: Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
        networkFees:
          $ref: '#/components/schemas/NetworkFees'
    RefundMetadata:
      type: object
      required:
        - networkFees
        - reason
      properties:
        networkFees:
          $ref: '#/components/schemas/NetworkFees'
        reason:
          type: string
          description: Reason for the refund
    NetworkFees:
      type: array
      description: List of network fees associated to an action. One network fee is charged for each outbound transaction
      items:
        $ref: '#/components/schemas/Coin'
    Members:
      type: array
      items:
        type: string
        description: Member address
        example: tbnb1fj2lqj8dvr5pumfchc7ntlfqd2v6zdxqwjewf5
    MemberDetails:
      type: object
      required:
        - pools
      properties:
        pools:
          type: array
          items:
              $ref: '#/components/schemas/MemberPool'
          description: List details of all the liquidity providers identified with the given address
    MemberPool:
      type: object
      required:
        - pool
        - runeAddress
        - assetAddress
        - liquidityUnits
        - runeAdded
        - assetAdded
        - runeWithdrawn
        - assetWithdrawn
        - dateFirstAdded
        - dateLastAdded
      properties:
        pool:
          type: string
          description: Pool rest of the data refers to
        runeAddress:
          type: string
          description: rune address used by the member
        assetAddress:
          type: string
          description: asset address used by the member
        liquidityUnits:
          type: string
          description: Int64, pool liquidity units that belong the the member
        runeAdded:
          type: string
          description: Int64(e8), total RUNE added to the pool by member
        assetAdded:
          type: string
          description: Int64(e8), total asset added to the pool by member
        runeWithdrawn:
          type: string
          description: Int64(e8), total RUNE withdrawn from the pool by member
        assetWithdrawn:
          type: string
          description: Int64(e8), total asset withdrawn from the pool by member
        dateFirstAdded:
          type: string
          description: Int64, Unix timestamp for the first time member deposited into the pool
        dateLastAdded:
          type: string
          description: Int64, Unix timestamp for the last time member deposited into the pool

    StatsData:
      type: object
      required:
        - runeDepth
        - runePriceUSD
        - swapVolume
        - swapCount24h
        - swapCount30d
        - swapCount
        - toAssetCount
        - toRuneCount
        - dailyActiveUsers
        - monthlyActiveUsers
        - uniqueSwapperCount
        - addLiquidityVolume
        - withdrawVolume
        - addLiquidityCount
        - withdrawCount
      properties:
        runeDepth:
          type: string
          description: Int64 (10^8), current total Rune in the pools.
        runePriceUSD:
          type: string
          description: Float, the price of Rune based on the deepest USD pool.
        swapVolume:
          type: string
          description: Int64(e8), total volume of swaps denoted in Rune since beginning.
        swapCount24h:
          type: string
          description: Int64(e8), number of swaps in the last 24h.
        swapCount30d:
          type: string
          description: Int64, number of swaps in the last 30d.
        swapCount:
          type: string
          description: Int64, number of swaps since beginning.
        toAssetCount:
          type: string
          description: Int64, number of swaps from Rune to Asset since beginning.
        toRuneCount:
          type: string
          description: Int64, number of swaps from Asset to Rune since beginning.
        dailyActiveUsers:
          type: string
          description: Int64, unique users (addresses) initiating swaps in the last 24 hours.
        monthlyActiveUsers:
          type: string
          description: Int64, unique users (addresses) initiating swaps in the last 30 days.
        uniqueSwapperCount:
          type: string
          description: Int64, unique users (addresses) initiating swaps since beginning.
        addLiquidityVolume:
          type: string
          description: |
            Int64 (10^8), total of deposits since beginning.
        withdrawVolume:
          type: string
          description: |
            Int64 (10^8), total of withdraws since beginning.
        addLiquidityCount:
          type: string
          description: Int64, number of deposits since beginning.
        withdrawCount:
          type: string
          description: Int64, number of withdraws since beginning.

    InboundAddresses:
      type: array
      items:
        $ref: '#/components/schemas/InboundAddressesItem'
    InboundAddressesItem:
      type: object
      required:
        - chain
        - pub_key
        - address
        - halted
      properties:
        chain:
          type: string
          example: "BTC"
        pub_key:
          type: string
          example: "tthorpub1addwnpepqd9nqqmgay6mju0yq72ptjucmk9atawtev4v4n6wkee5y26q80eccg0xk37"
        address:
          type: string
          example: "bcrt1q257g60tcxvu4dvflpszgkwq34d5vw6pg726gf3"
        router:
          type: string
          example: "0x9d496De78837f5a2bA64Cb40E62c19FBcB67f55a"
        halted:
          type: boolean
          description: indicate whether this chain has halted
          example: false
        gas_rate:
          type: string
          example: "56250"

    Constants:
      type: object
      required:
        - int_64_values
        - bool_values
        - string_values
      properties:
        int_64_values:
          $ref: '#/components/schemas/Int64Constants'
        bool_values:
          $ref: '#/components/schemas/BoolConstants'
        string_values:
          $ref: '#/components/schemas/StringConstants'

    Int64Constants:
      type: object
      required:
        - AsgardSize
        - BadValidatorRate
        - BlocksPerYear
        - ChurnInterval
        - ChurnRetryInterval
        - CliTxCost
        - DesiredValidatorSet
        - DoubleSignMaxAge
        - EmissionCurve
        - FailKeygenSlashPoints
        - FailKeysignSlashPoints
        - FundMigrationInterval
        - JailTimeKeygen
        - JailTimeKeysign
        - LackOfObservationPenalty
        - LiquidityLockUpBlocks
        - MinimumBondInRune
        - MinimumNodesForBFT
        - MinimumNodesForYggdrasil
        - NativeChainGasFee
        - NewPoolCycle
        - ObservationDelayFlexibility
        - ObserveSlashPoints
        - OldValidatorRate
        - OutboundTransactionFee
        - SigningTransactionPeriod
        - YggFundLimit
      properties:
        AsgardSize:
          type: integer
          format: int64
          example: 30
        BadValidatorRate:
          type: integer
          format: int64
          example: 60
        BlocksPerYear:
          type: integer
          format: int64
          example: 6311390
        ChurnInterval:
          type: integer
          format: int64
          example: 60
        ChurnRetryInterval:
          type: integer
          format: int64
          example: 30
        CliTxCost:
          type: integer
          format: int64
          example: 0
        DesiredValidatorSet:
          type: integer
          format: int64
          example: 12
        DoubleSignMaxAge:
          type: integer
          format: int64
          example: 24
        EmissionCurve:
          type: integer
          format: int64
          example: 6
        FailKeygenSlashPoints:
          type: integer
          format: int64
          example: 720
        FailKeysignSlashPoints:
          type: integer
          format: int64
          example: 2
        FundMigrationInterval:
          type: integer
          format: int64
          example: 60
        JailTimeKeygen:
          type: integer
          format: int64
          example: 10
        JailTimeKeysign:
          type: integer
          format: int64
          example: 10
        LackOfObservationPenalty:
          type: integer
          format: int64
          example: 2
        LiquidityLockUpBlocks:
          type: integer
          format: int64
          example: 0
        MinimumBondInRune:
          type: integer
          format: int64
          example: 100000000
        MinimumNodesForBFT:
          type: integer
          format: int64
          example: 4
        MinimumNodesForYggdrasil:
          type: integer
          format: int64
          example: 6
        NativeChainGasFee:
          type: integer
          format: int64
          example: 10000000
        NewPoolCycle:
          type: integer
          format: int64
          example: 51840
        ObservationDelayFlexibility:
          type: integer
          format: int64
          example: 5
        ObserveSlashPoints:
          type: integer
          format: int64
          example: 1
        OldValidatorRate:
          type: integer
          format: int64
          example: 60
        OutboundTransactionFee:
          type: integer
          format: int64
          example: 100000000
        SigningTransactionPeriod:
          type: integer
          format: int64
          example: 300
        YggFundLimit:
          type: integer
          format: int64
          example: 5
    BoolConstants:
      type: object
      required:
        - StrictBondLiquidityRatio
      properties:
         StrictBondLiquidityRatio:
          type: boolean
          example: false
    StringConstants:
      type: object
      required:
        - DefaultPoolStatus
      properties:
         DefaultPoolStatus:
          type: string
          example: "Enabled"

    Lastblock:
      type: object
      required:
        - current
      properties:
        current:
          type: array
          items:
            $ref: '#/components/schemas/LastblockItem'
    LastblockItem:
      type: object
      required:
        - chain
        - last_observed_in
        - last_signed_out
        - thorchain
      properties:
        chain:
          type: string
          example: "BNB"
        last_observed_in:
          type: string
          example: "1590"
        last_signed_out:
          type: string
          example: "109"
        thorchain:
          type: string
          example: "1548"

    Queue:
      type: object
      required:
        - swap
        - outbound
        - internal
      properties:
        swap:
          type: integer
          example: 0
        outbound:
          type: integer
          example: 0
        internal:
          type: integer
          example: 0

    ProxiedNodes:
      type: array
      items:
        $ref: '#/components/schemas/ProxiedNode'

    ProxiedNode:
      type: object
      required:
        - node_address
        - status
        - pub_key_set
        - validator_cons_pub_key
        - bond
        - active_block_height
        - bond_address
        - status_since
        - signer_membership
        - requested_to_leave
        - forced_to_leave
        - leave_height
        - ip_address
        - version
        - slash_points
        - jail
        - current_award
        - observe_chains
        - preflight_status
      properties:
        node_address:
          type: string
          example: "tthorabc1"
        status:
          type: string
          example: "Active"
        pub_key_set:
          type: object
          required:
            - secp256k1
            - ed25519
          properties:
            secp256k1:
              type: string
              example: "tthorpub1xyz1"
            ed25519:
              type: string
              example: "tthorpub1xyz2"
        validator_cons_pub_key:
          type: string
          example: "tthorabc2"
        bond:
          type: string
          example: "123456789"
        active_block_height:
          type: integer
          example: 123456
        bond_address:
          type: string
          example: "tthorabc3"
        status_since:
          type: integer
          example: 100000
        signer_membership:
          type: array
          items:
            type: string
        requested_to_leave:
          type: boolean
        forced_to_leave:
          type: boolean
        leave_height:
          type: integer
          example: 0
        ip_address:
          type: string
          example: "10.20.30.40"
        version:
          type: string
          example: "0.35.0"
        slash_points:
          type: integer
          example: 42
        jail:
          type: object
          properties:
            node_address:
              type: string
              example: "tthorabc4"
        current_award:
          type: string
          example: "123456"
        observe_chains:
          type: array
          items:
            $ref: '#/components/schemas/ObservedChain'
        preflight_status:
          $ref: '#/components/schemas/PreflightStatus'

    ObservedChain:
      type: object
      required:
        - chain
        - height
      properties:
        chain:
          type: string
          example: "BTC"
        height:
          type: integer
          example: 2000000

    PreflightStatus:
      type: object
      required:
        - status
        - reason
        - code
      properties:
        status:
          type: string
          example: "Ready"
        reason:
          type: string
          example: "OK"
        code:
          type: integer
          example: 0
