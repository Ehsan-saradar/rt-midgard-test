openapi: 3.0.0
info:
  title: Midgard Public API
  version: 0.6.0
  contact:
    email: devs@thorchain.org
  description: >-
    The Midgard Public API queries THORChain and any chains linked via the BifrÃ¶st
    and prepares information about the network to be readily available for public users.
    The API parses transaction event data from THORChain and stores them
    in a time-series database to make time-dependent queries easy.
    Midgard does not hold critical information.
    To interact with BEPSwap and Asgardex, users should query THORChain directly.
paths:
  /v2/doc:
    get:
      operationId: GetDocs
      summary: Get Documentation
      description: Swagger/OpenAPI 3.0 specification generated documents.
      responses:
        "200":
          description: swagger/OpenAPI 3.0 spec generated docs
      tags:
        - Documentation
  "/v2/swagger.json":
    get:
      operationId: GetSwagger
      summary: Get Swagger
      description: Returns human and machine readable swagger/openapi specification.
      responses:
        "200":
          description: human and machine readable swagger/openapi specification
      tags:
        - Specification
  "/v2/health":
    get:
      operationId: GetHealth
      summary: Get Health
      description: Returns an object containing the health response of the API.
      responses:
        "200":
          $ref: '#/components/responses/HealthResponse'
  # TODO(lukesaunders): change the pools endpoints.
  # Current state:
  #   /v2/pools -> returns all pools only names
  #   /v2/assets?asset=BNB.BNB,BTC.BTC -> return summary of selected pools (name, date, price)
  #   /v2/pools/BNB.BNB -> details for a single pool
  #
  # Proposed future state:
  #   /v2/pools -> all pools, gives back summary like v2/assets now.
  #   /v2/pools/BNB.BNB -> details for a single one
  "/v2/pools":
    get:
      operationId: GetPools
      summary: Get Asset Pools
      description: Returns an array containing all the assets supported.
      responses:
        "200":
          $ref: '#/components/responses/PoolsResponse'
  # TODO(lukesaunders): remove, make part of pools.
  "/v2/assets":
    get:
      operationId: GetAssetInfo
      summary: Get Asset Information
      description: >-
        Detailed information about a specific assets. Returns enough information to display a
        set of asset in various user interfaces, including latest price.
      parameters:
        - name: asset
          in: query
          description: One or more comma separated unique asset (CHAIN.SYMBOL)
          required: true
          schema:
            type: string
          example: [BNB.TOMOB-1E1, BNB.TCAN-014]
      responses:
        "200":
          $ref: '#/components/responses/AssetsSummaryResponse'
  "/v2/pools/{asset}":
    get:
      operationId: GetPoolDetail
      summary: Get detailed information about a pool
      description: 'Returns details of the pool: depths, price, 24h volume, APY. '
      parameters:
        - in: path
          name: asset
          description: pool name.
          required: true
          schema:
            type: string
          example: 'BNB.TOMOB-1E1'
      responses:
        "200":
          $ref: '#/components/responses/PoolDetailResponse'
  # TODO(lukesaunders) rename this to /v2/history/volume
  #   the reason it's called total because in v1 it queried all the pools, but now
  #   we can specify the pool
  "/v2/history/total_volume":
    get:
      operationId: GetTotalVolume
      summary: Get Total Volume
      description: >-
        Returns total volume in specified interval. If pool is not specified returns for all pools.
      parameters:
        - name: pool
          in: query
          description: Return volume for this single pool. Returns volume for all pools if missing.
          required: false
          schema:
            type: integer
            format: int64
        - name: interval
          in: query
          description: Interval of calculations
          required: true
          schema:
            type: string
            enum: ["5min", "hour", "day", "week", "month", "quarter", "year"]
        - name: from
          in: query
          description: Start time of the query as unix timestamp
          required: true
          schema:
            type: integer
            format: int64
        - name: to
          in: query
          description: End time of the query as unix timestamp
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          $ref: '#/components/responses/VolumeResponse'
  "/v2/nodes":
    get:
      operationId: GetNodes
      summary: Get Node public keys
      description: Returns an object containing Node public keys
      responses:
        "200":
          "$ref": "#/components/responses/NodeKeyResponse"
  "/v2/network":
    get:
      operationId: GetNetworkData
      summary: Get Network Data
      description: Returns an object containing Network data
      responses:
        "200":
          "$ref": "#/components/responses/NetworkResponse"
  "/v2/tx":
    get:
      operationId: GetTxDetails
      summary: List transactions or get details for specific transactions.
      # TODO(acsaba): add better description.
      description: Return an array containing the event details
      parameters:
        - name: address
          in: query
          description: Address of sender or recipient of any in/out tx in event
          required: false
          schema:
            type: string
          example: tbnb1fj2lqj8dvr5pumfchc7ntlfqd2v6zdxqwjewf5
        - name: txid
          in: query
          description: ID of any in/out tx in event
          required: false
          schema:
            type: string
          example: 2F624637DE179665BA3322B864DB9F30001FD37B4E0D22A0B6ECE6A5B078DAB4
        # TODO(lukesaunders): maybe rename asset parameter to pool
        #   For volume we have /v2/history/volume?pool=BNB.BNB
        #   But here we have /v2/tx?asset=BNB.BNB
        #   Proposal: let's have pool on both places as parameter.
        - name: asset
          in: query
          description: Any asset used in event (CHAIN.SYMBOL)
          required: false
          schema:
            type: string
          example: BNB.TOMOB-1E1
        - name: type
          in: query
          description: One or more comma separated unique types of event
          required: false
          schema:
            type: string
          # TODO(acsaba): check if these are actually the accepted types in the code.
          example: [swap, stake, unstake, add, refund, doubleSwap]
        - name: limit
          in: query
          description: pagination limit
          required: true
          schema:
            type: integer
            format: int64
            # TODO(acsaba): check min and max in the code.
            minimum: 0
            maximum: 50
        - name: offset
          in: query
          description: pagination offset
          required: true
          schema:
            type: integer
            format: int64
            minimum: 0
      responses:
        "200":
          $ref: '#/components/responses/TxResponse'

components:
  responses:
    HealthResponse:
      description: Returns an health status of Midgard
      content:
        application/json:
          schema:
            type: object
            required:
            - database
            - scannerHeight
            - inSync
            properties:
              database:
                type: boolean
                description: True means healthy, connected to database.
              scannerHeight:
                type: string
                description: Int64, the current block count.
              inSync:
                type: boolean
                description: True means healthy. False means Midgard is still catching up to the chain.
    PoolsResponse:
      description: Array of assets.
      content:
        application/json:
          schema:
            type: array
            items:
              type: string
    AssetsSummaryResponse:
      description: Array containing limited details for pools.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/AssetSummary'
    PoolDetailResponse:
      description: Object containing details for one pool
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PoolDetail'
    VolumeResponse:
      description: Get Return an array of total volume changes.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Volume'
    NodeKeyResponse:
      # TODO(acsaba): add better description
      description: Returns an object containing Network data
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/NodeKey'
    NetworkResponse:
      # TODO(acsaba): add better description
      description: Returns an object containing Network data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Network'
    TxResponse:
      description: Returns an array of transactions
      content:
        application/json:
          schema:
            type: object
            required:
              - count
              - txs
            properties:
              count:
                type: string
                description: Int64, count of txs matching the filters.
              # TODO(acsaba): sync with Luke if this sould be tx or the endpoint txs
              txs:
                type: array
                items:
                  $ref: '#/components/schemas/TxDetails'

  schemas:
    AssetSummary:
      type: object
      required:
        - asset
        - dateCreated
        - price
      properties:
        # TODO(lukesaunders): consider renaming this "asset" to "pool" too.
        #   note that the response for /v2/tx returns a field named pool
        #   for the same thing.
        asset:
          type: string
        dateCreated:
          type: string
          description: Int64, unix timestamp (second).
        price:
          # TODO(acsaba): consider changing all such to floats instead of string.
          type: string
          # TODO(acsaba): check if this formulation is correct.
          description: Float, price of asset in rune. I.e. rune amount / asset amount.
    PoolDetail:
      type: object
      required:
        - asset
        - volume24h
        - assetDepth
        - runeDepth
        - price
        - poolAPY
        - status
        - units
      properties:
        asset:
          type: string
        # TODONOWISH(acsaba): rename to volume24h:
        volume24h:
          type: string
          description: Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
        assetDepth:
          type: string
          description: Int64, the amount of Asset in the pool.
        runeDepth:
          type: string
          description: Int64, the amount of Rune in the pool.
        price:
          type: string
          # TODO(acsaba): check if this formulation is correct. copy from up
          description: Float, price of asset in rune. I.e. rune amount / asset amount.
        poolAPY:
          type: string
          description: 'Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.'
        status:
          type: string
          description: The state of the pool, e.g. Enabled, Bootstrap.
        units:
          type: string
          description: Int64, Liquidity Units in the pool.
    Volume:
      type: object
      required:
        - time
        - buyVolume
        - sellVolume
        - totalVolume
      properties:
        time:
          type: string
          description: Int64, The beginning time of bucket in unix timestamp.
        buyVolume:
          type: string
          description: Sum of "rune_amount" of buy swap events.
        sellVolume:
          type: string
          description: Sum of "rune_amount" of sell swap events.
        totalVolume:
          type: string
          description: buyVolume + sellVolume
    NodeKey:
      type: object
      required:
        - secp256k1
        - ed25519
      properties:
        secp256k1:
          type: string
          description: secp256k1 public key
        ed25519:
          type: string
          description: ed25519 public key
    Network:
      type: object
      required:
        - bondMetrics
        - blockRewards
        - activeBonds
        - standbyBonds
        - activeNodeCount
        - standbyNodeCount
        - totalPooledRune
        - totalReserve
        - nextChurnHeight
        - poolActivationCountdown
        - poolShareFactor
        - bondingROI
        - bondingAPY
        - liquidityAPY
      properties:
        bondMetrics:
          $ref: '#/components/schemas/BondMetrics'
        blockRewards:
          $ref: '#/components/schemas/BlockRewards'
        activeBonds:
          type: array
          # TODO(acsaba): add description.
          items:
            type: string
        standbyBonds:
          type: array
          # TODO(acsaba): add description.
          description: Array of Standby Bonds
          items:
            type: string
        activeNodeCount:
          type: string
          description: Int64, Number of Active Nodes
        standbyNodeCount:
          type: string
          description: Int64, Number of Standby Nodes
        totalPooledRune:
          type: string
          description: Int64, Total Rune pooled in all pools.
        totalReserve:
          type: string
          # TODO(acsaba): document what left in reserve.
          description: Int64, Total left in Reserve
        nextChurnHeight:
          type: string
          # TODO(acsaba): check documentation.
          description: Int64, next height of blocks.
        poolActivationCountdown:
          type: string
          description: Int64, the remaining time of pool activation (in blocks).
        poolShareFactor:
          type: string
          # TODO(acsaba): float, add documentation
        bondingROI:
          type: string
        stakingROI:
          type: string
        bondingAPY:
          type: string
          # TODO(acsaba): doublecheck that documentation holds.
          description: Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
        liquidityAPY:
          # TODO(acsaba): doublecheck that documentation holds.
          type: string
          description: Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
    BondMetrics:
      type: object
      required:
        - totalActiveBond
        - averageActiveBond
        - medianActiveBond
        - minimumActiveBond
        - maximumActiveBond
        - totalStandbyBond
        - averageStandbyBond
        - medianStandbyBond
        - minimumStandbyBond
        - maximumStandbyBond
      properties:
        totalActiveBond:
          type: string
          description: Int64, Total bond of active nodes.
        averageActiveBond:
          type: string
          # TODO(acsaba): make this float.
          description: Int64, Average bond of active nodes.
        medianActiveBond:
          type: string
          description: Int64, Median bond of active nodes.
        minimumActiveBond:
          type: string
          description: Int64, Minumum bond of active nodes.
        maximumActiveBond:
          type: string
          description: Int64, Maxinum bond of active nodes.
        totalStandbyBond:
          type: string
          description: Int64, Total bond of standby nodes
        averageStandbyBond:
          type: string
          # TODO(acsaba): make this float.
          description: Int64, Average bond of standby nodes
        medianStandbyBond:
          type: string
          description: Int64, Median bond of standby nodes
        minimumStandbyBond:
          type: string
          description: Int64, Minumum bond of standby nodes
        maximumStandbyBond:
          type: string
          description: Int64, Maximum bond of standby nodes
    BlockRewards:
      type: object
      required:
        - blockReward
        - bondReward
        - poolReward
      properties:
        blockReward:
          type: string
          # TODO(acsaba): add description.
        bondReward:
          type: string
          # TODO(acsaba): add description.
        poolReward:
          type: string
          # TODO(acsaba): add description.
    TxDetails:
      type: object
      required:
        - pool
        - type
        - status
        - in
        - out
        - date
        - height
        - events
      # TODO(acsaba): add description to the fields
      properties:
        pool:
          type: string
        type:
          type: string
          # TODO(acsaba): check if these are the only allowed enums.
          enum: [swap, stake, unstake, rewards, add, pool, gas, refund, doubleSwap]
        status:
          type: string
          # TODO(acsaba): check if these are the only allowed enums.
          enum: [success, refund]
        in:
          $ref: '#/components/schemas/tx'
        out:
          type: array
          items:
            $ref: '#/components/schemas/tx'
        date:
          type: string
          description: Int64, Unix timestamp.
        # TODO(acsaba): check with Fede if it's ok to not have gas field.
        height:
          type: string
          # TODO(acsaba): Int64, add description,
        events:
          $ref: '#/components/schemas/event'
    tx:
      type: object
      required:
        - txID
        - memo
        - address
        - coins
        - options
      properties:
        txID:
          type: string
        memo:
          type: string
        address:
          type: string
        coins:
          $ref: '#/components/schemas/coins'
        # TODO(acsaba): doublecheck with Fede that options should be here and not in TXDetails:
        options:
          $ref: '#/components/schemas/option'
    coins:
      type: array
      items:
        $ref: '#/components/schemas/coin'
    coin:
      type: object
      required:
        - asset
        - amount
      properties:
        # TODO(acsaba): maybe this could stay as asset and not as pool.
        #   we already have a pool two level up in TXDetailss, this seems diferent.
        asset:
          type: string
        amount:
          type: string
    event:
      type: object
      required:
        - fee
        - stakeUnits
        - slip
      properties:
        fee:
          type: string
          #TODO(acsaba): add description, int.
        stakeUnits:
          type: string
          #TODO(acsaba): add description, int.
        slip:
          type: string
          #TODO(acsaba): add description, float.
    option:
      type: object
      required:
        - priceTarget
        - withdrawBasisPoints
        - asymmetry
      properties:
        priceTarget:
          type: string
          #TODO(acsaba): add description, int.
        withdrawBasisPoints:
          type: string
          #TODO(acsaba): add description, int.
        asymmetry:
          type: string
          #TODO(acsaba): add description, int.


