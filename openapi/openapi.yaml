openapi: 3.0.0
info:
  title: Midgard Public API
  version: 0.6.0
  contact:
    email: devs@thorchain.org
  description: >-
    The Midgard Public API queries THORChain and any chains linked via the BifrÃ¶st
    and prepares information about the network to be readily available for public users.
    The API parses transaction event data from THORChain and stores them
    in a time-series database to make time-dependent queries easy.
    Midgard does not hold critical information.
    To interact with BEPSwap and Asgardex, users should query THORChain directly.
paths:
  /v2/doc:
    get:
      operationId: GetDocs
      summary: Get Documentation
      description: Swagger/OpenAPI 3.0 specification generated documents.
      responses:
        "200":
          description: swagger/OpenAPI 3.0 spec generated docs
      tags:
        - Documentation

  "/v2/health":
    get:
      operationId: GetHealth
      summary: Get Health
      description: Returns an object containing the health response of the API.
      responses:
        "200":
          $ref: '#/components/responses/HealthResponse'
  "/v2/pools":
    get:
      operationId: GetPools
      summary: Get Asset Pools
      # TODO(acsaba): understand what BEPSwap is.
      description: Returns an array containing all the assets supported on BEPSwap pools
      responses:
        "200":
          $ref: '#/components/responses/PoolsResponse'
  # TODO(acsaba): make this /v2/poolsSummary/
  "/v2/assets":
    get:
      operationId: GetAssetInfo
      summary: Get Asset Information
      description: >-
        Detailed information about a specific assets. Returns enough information to display a
        set of asset in various user interfaces, including latest price.
      parameters:
        - name: asset
          in: query
          description: One or more comma separated unique asset (CHAIN.SYMBOL)
          required: true
          schema:
            type: string
          example: [BNB.TOMOB-1E1, BNB.TCAN-014]
      responses:
        "200":
          $ref: '#/components/responses/AssetsSummaryResponse'
  # TODO(acsaba): rename this to v2/pool/:pool because it serves just one
  #   in this case the pools/details can stay separate.
  "/v2/pools/{asset}":
    get:
      operationId: GetPoolDetail
      summary: Get detailed information about a pool
      description: 'Returns details of the pool: depths, price, 24h volume, APY. '
      parameters:
        - in: path
          name: asset
          description: pool name.
          required: true
          schema:
            type: string
          example: 'BNB.TOMOB-1E1'
      responses:
        "200":
          $ref: '#/components/responses/PoolDetailResponse'

components:
  responses:
    HealthResponse:
      description: Returns an health status of Midgard
      content:
        application/json:
          schema:
            type: object
            required:
            - database
            - scannerHeight
            - inSync
            properties:
              database:
                type: boolean
                description: True means healthy, connected to database.
              scannerHeight:
                type: string
                description: Int64, the current block count.
              inSync:
                type: boolean
                description: True means healthy. False means Midgard is still catching up to the chain.
    PoolsResponse:
      description: Array of assets.
      content:
        application/json:
          schema:
            type: array
            items:
              type: string
    AssetsSummaryResponse:
      description: Array containing limited details for pools.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/AssetSummary'
    PoolDetailResponse:
      description: Object containing details for one pool
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PoolDetail'
  schemas:
    AssetSummary:
      type: object
      required:
        - asset
        - dateCreated
        - priceRune
      properties:
        asset:
          type: string
        dateCreated:
          type: string
          description: Int64, unix timestamp (second).
        # TODO(acsaba): the name seems misleading, looks like priceAsset or just price
        priceRune:
          # TODO(acsaba): consider changing all such to floats instead of string.
          type: string
          # TODO(acsaba): check if this formulation is correct.
          description: Float, price of asset in rune. I.e. rune amount / asset amount.
    PoolDetail:
      type: object
      required:
        - asset
        - two4HVolume
        - assetDepth
        - runeDepth
        - price
        - poolAPY
        - status
        - units
      properties:
        asset:
          type: string
        # TODO(acsaba): rename to h24Volume or dayVolume:
        two4HVolume:
          type: string
          description: Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
        assetDepth:
          type: string
          description: Int64, the amount of Asset in the pool.
        runeDepth:
          type: string
          description: Int64, the amount of Rune in the pool.
        price:
          type: string
          # TODO(acsaba): check if this formulation is correct.
          description: Float, price of asset in rune. I.e. rune amount / asset amount.
        poolAPY:
          type: string
          # TODO(acsaba): what is the acronym stand for? add comment
          description: Float, yearly rewards approximated from last week.
        status:
          type: string
          description: The state of the pool, e.g. Enabled, Bootstrap.
        units:
          type: string
          description: Int64, Liquidity Units in the pool.



