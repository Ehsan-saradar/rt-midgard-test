openapi: 3.0.0
info:
  title: Midgard Public API
  version: 0.6.0
  contact:
    email: devs@thorchain.org
  description: >-
    The Midgard Public API queries THORChain and any chains linked via the BifrÃ¶st
    and prepares information about the network to be readily available for public users.
    The API parses transaction event data from THORChain and stores them
    in a time-series database to make time-dependent queries easy.
    Midgard does not hold critical information.
    To interact with BEPSwap and Asgardex, users should query THORChain directly.
paths:
  # TODO(acsaba): remove remaining mentions of stake from documentation.
  /v2/doc:
    get:
      operationId: GetDocs
      summary: Get Documentation
      description: Swagger/OpenAPI 3.0 specification generated documents.
      responses:
        "200":
          description: swagger/OpenAPI 3.0 spec generated docs
      tags:
        - Documentation
  "/v2/swagger.json":
    get:
      operationId: GetSwagger
      summary: Get Swagger
      description: Returns human and machine readable swagger/openapi specification
      responses:
        "200":
          description: human and machine readable swagger/openapi specification
      tags:
        - Specification
  "/v2/health":
    get:
      operationId: GetHealth
      summary: Get Health
      description: Returns an object containing the health response of the API
      responses:
        "200":
          $ref: '#/components/responses/HealthResponse'
  "/v2/pools":
    get:
      operationId: GetPools
      summary: Get Asset Pools
      description: Returns an array containing details for a set of pools.
      parameters:
        - name: status
          in: query
          description: Interval of calculations
          required: true
          schema:
            type: string
            enum: ["enabled", "bootstrap", "suspended"]
      responses:
        "200":
          $ref: '#/components/responses/PoolsResponse'
  "/v2/pools/{asset}":
    get:
      operationId: GetPool
      summary: Get details for a specific pool
      description: 'Returns details of the pool: depths, price, 24h volume, APY. '
      parameters:
        - in: path
          name: asset
          description: pool name.
          required: true
          schema:
            type: string
          example: 'BNB.TOMOB-1E1'
      responses:
        "200":
          $ref: '#/components/responses/PoolResponse'
  "/v2/history/earnings":
    get:
      operationId: GetEarningsHistory
      summary: Earnings related history
      description: >-
        Returns earnings data for the specified interval.
      parameters:
        - name: interval
          in: query
          description: Interval of calculations
          required: true
          schema:
            type: string
            enum: ["5min", "hour", "day", "week", "month", "quarter", "year"]
        - name: from
          in: query
          description: Start time of the query as unix timestamp
          required: true
          schema:
            type: integer
            format: int64
        - name: to
          in: query
          description: End time of the query as unix timestamp
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          $ref: '#/components/responses/EarningsHistoryResponse'
  "/v2/history/swaps":
    get:
      operationId: GetSwapHistory
      summary: Swaps related history
      description: >-
        Returns swap count, volume, fees, slip in specified interval.
        If pool is not specified returns for all pools
      parameters:
        - name: pool
          in: query
          description: Return stats for this single pool. Returns sum of all pools if missing.
          required: false
          schema:
            type: integer
            format: int64
        - name: interval
          in: query
          description: Interval of calculations
          required: true
          schema:
            type: string
            enum: ["5min", "hour", "day", "week", "month", "quarter", "year"]
        - name: from
          in: query
          description: Start time of the query as unix timestamp
          required: true
          schema:
            type: integer
            format: int64
        - name: to
          in: query
          description: End time of the query as unix timestamp
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          $ref: '#/components/responses/SwapHistoryResponse'
  "/v2/nodes":
    get:
      operationId: GetNodes
      summary: Get Node public keys
      description: Returns an object containing Node public keys
      responses:
        "200":
          "$ref": "#/components/responses/NodeKeyResponse"
  "/v2/network":
    get:
      operationId: GetNetworkData
      summary: Get Network Data
      description: Returns an object containing Network data
      responses:
        "200":
          "$ref": "#/components/responses/NetworkResponse"
  "/v2/tx":
    get:
      operationId: GetTxDetails
      summary: List transactions or get details for specific transactions.
      # TODO(acsaba): add better description.
      description: Return an array containing the event details
      parameters:
        - name: address
          in: query
          description: Address of sender or recipient of any in/out tx in event
          required: false
          schema:
            type: string
          example: tbnb1fj2lqj8dvr5pumfchc7ntlfqd2v6zdxqwjewf5
        - name: txid
          in: query
          description: ID of any in/out tx in event
          required: false
          schema:
            type: string
          example: 2F624637DE179665BA3322B864DB9F30001FD37B4E0D22A0B6ECE6A5B078DAB4
        # TODO(lukesaunders): maybe rename asset parameter to pool
        #   For volume we have /v2/history/volume?pool=BNB.BNB
        #   But here we have /v2/tx?asset=BNB.BNB
        #   Proposal: let's have pool on both places as parameter.
        - name: asset
          in: query
          description: Any asset used in event (CHAIN.SYMBOL)
          required: false
          schema:
            type: string
          example: BNB.TOMOB-1E1
        - name: type
          in: query
          description: One or more comma separated unique types of event
          required: false
          schema:
            type: string
          # TODO(acsaba): check if these are actually the accepted types in the code.
          example: [swap, stake, unstake, add, refund, doubleSwap]
        - name: limit
          in: query
          description: pagination limit
          required: true
          schema:
            type: integer
            format: int64
            # TODO(acsaba): check min and max in the code.
            minimum: 0
            maximum: 50
        - name: offset
          in: query
          description: pagination offset
          required: true
          schema:
            type: integer
            format: int64
            minimum: 0
      responses:
        "200":
          $ref: '#/components/responses/TxResponse'
  "/v2/members":
    get:
      operationId: GetMembersAdresses
      summary: Get members
      description: Returns an array containing the RUNE addresses for all members.
      responses:
        "200":
          "$ref": "#/components/responses/MembersResponse"
  "/v2/members/{address}":
    get:
      operationId: GetMemberDetail
      summary: Details of a member
      description: Returns an array of statistics per pool for a given member RUNE address.
      parameters:
        - name: address
          in: path
          description: Unique member RUNE address
          required: true
          schema:
            type: string
          example: 'bnb1jxfh2g85q3v0tdq56fnevx6xcxtcnhtsmcu64m'
      responses:
        "200":
          $ref: '#/components/responses/MemberDetailsResponse'
  "/v2/stats":
    get:
      operationId: GetStats
      summary: Get Global Stats
      description: Returns an object containing global stats for all pools and all transactions.
      responses:
        "200":
          $ref: '#/components/responses/StatsResponse'

components:
  responses:
    HealthResponse:
      description: Returns health status for Midgard
      content:
        application/json:
          schema:
            type: object
            required:
            - database
            - scannerHeight
            - inSync
            properties:
              database:
                type: boolean
                description: True means healthy, connected to database
              scannerHeight:
                type: string
                description: Int64, the current block count
              inSync:
                type: boolean
                description: True means healthy. False means Midgard is still catching up to the chain
    PoolsResponse:
      description: Array of pool details
      content:
        application/json:
          schema:
            type: array
            items:
              type: string
              $ref: '#/components/schemas/PoolDetail'
    PoolResponse:
      description: Object containing details for one pool
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PoolDetail'
    EarningsHistoryResponse:
      description: earnings history
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EarningsHistory'
    SwapHistoryResponse:
      description: Swap count, volume, fee and slip history
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SwapHistory'
    NodeKeyResponse:
      # TODO(acsaba): add better description
      description: Returns an object containing Network data
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/NodeKey'
    NetworkResponse:
      # TODO(acsaba): add better description
      description: Returns an object containing Network data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Network'
    TxResponse:
      description: Returns an array of transactions
      content:
        application/json:
          schema:
            type: object
            required:
              - count
              - txs
            properties:
              count:
                type: string
                description: Int64, count of txs matching the filters.
              # TODO(acsaba): sync with Luke if this sould be tx or the endpoint txs
              txs:
                type: array
                items:
                  $ref: '#/components/schemas/TxDetails'
    MembersResponse:
      description: array of all the members
      content:
        application/json:
          schema:
            type: array
            items:
              type: string
              description: Member address
              example: tbnb1fj2lqj8dvr5pumfchc7ntlfqd2v6zdxqwjewf5
    MemberDetailsResponse:
      description: object containing liquidity provider data for a specific member
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MemberDetails'
    StatsResponse:
      description: object containing global BEPSwap data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/StatsData'

  schemas:
    PoolDetail:
        # TODO(lukesaunders): consider renaming this "asset" to "pool" too.
        #   note that the response for /v2/tx returns a field named pool
        #   for the same thing.
        # NOTE(elfedy): the thornode endpoint for pools /thorchain/pools names this field "asset"
        #   Heimdall also refers to the field by "asset" in the smoke tests so if changed,
        #   remeber to submit a PR changing that too.
      type: object
      required:
        - asset
        - volume24h
        - assetDepth
        - runeDepth
        - price
        - poolAPY
        - status
        - units
      properties:
        asset:
          type: string
        volume24h:
          type: string
          description: Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
        assetDepth:
          type: string
          description: Int64, the amount of Asset in the pool.
        runeDepth:
          type: string
          description: Int64, the amount of Rune in the pool.
        price:
          type: string
          # TODO(acsaba): check if this formulation is correct. copy from up
          description: Float, price of asset in rune. I.e. rune amount / asset amount.
        poolAPY:
          type: string
          description: 'Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.'
        status:
          type: string
          description: The state of the pool, e.g. Enabled, Bootstrap.
        units:
          type: string
          description: Int64, Liquidity Units in the pool.
    EarningsHistory:
      type: object
      required:
        - meta
        - intervals
      properties:
        meta:
          $ref: '#/components/schemas/EarningsHistoryInterval'
        intervals:
          $ref: '#/components/schemas/EarningsHistoryIntervals'
    EarningsHistoryIntervals:
      type: array
      items:
        $ref: '#/components/schemas/EarningsHistoryInterval'
    EarningsHistoryInterval:
      type: object
      required:
        - startTime
        - endTime
        - liquidityFees
        - blockRewards
        - earnings
        - bondingEarnings
        - liquidityEarnings
        - pools
      properties:
        startTime:
          type: string
          description: Int64, The beginning time of interval in unix timestamp
        endTime:
          type: string
          description: Int64, The end time of interval in unix timestamp
        liquidityFees:
          type: string
          description: Int64, Total liquidity fees, converted to RUNE, collected during the time interval.
        blockRewards:
          type: string
          description: Int64, Total block rewards emitted during the time interval
        earnings:
          type: string
          description: Int64, System income generated during the time interval. It is the sum of liquidity fees and block rewards.
        bondingEarnings:
          type: string
          description: Int64, Share of earnings sent to nodes during the time interval
        liquidityEarnings:
          type: string
          description: Int64, Share of earnings sent to pools during the time interval
        pools:
          type: array
          description: Earnings data for each pool for the time interval
          items:
            $ref: '#/components/schemas/EarningsHistoryIntervalPool'
    EarningsHistoryIntervalPool:
      type: object
      required:
        - pool
        - earnings
      description: pool earnings data during the time interval
      properties:
        pool: 
          type: string
          description: asset for the given pool
        earnings: 
          type: string
          description: Int64, Share of earnings sent to the pool during the time interval 
    SwapHistory:
      type: object
      required:
        - meta
        - intervals
      properties:
        meta:
          $ref: '#/components/schemas/SwapHistoryMeta'
        intervals:
          $ref: '#/components/schemas/SwapHistoryIntervals'
    SwapHistoryMeta:
      type: object
      required:
        - firstTime
        - lastTime
        - toAssetVolume
        - toRuneVolume
        - totalVolume
      description: Sum values of all the returned intervals.
      properties:
        firstTime:
          type: string
          description: Int64, The beginning timestamp of the first interval. Can be smaller then from.
        lastTime:
          type: string
          description: Int64, The beginning timestamp of the last interval. It is smaller then until
        toAssetVolume:
          type: string
          description: Int64, volume of swaps from rune to asset denoted in rune.
        toRuneVolume:
          type: string
          description: Int64, volume of swaps from asset to runt denoted in rune.
        totalVolume:
          type: string
          description: toAssetVolume + toRuneVolume (denoted in rune)
    SwapHistoryIntervals:
      type: array
      items:
        $ref: '#/components/schemas/SwapHistoryInterval'
    SwapHistoryInterval:
      type: object
      required:
        - time
        - toAssetVolume
        - toRuneVolume
        - totalVolume
      properties:
        time:
          type: string
          description: Int64, The beginning time of bucket in unix timestamp.
        toAssetVolume:
          type: string
          description: Int64, volume of swaps from rune to asset denoted in rune.
        toRuneVolume:
          type: string
          description: Int64, volume of swaps from asset to rune denoted in rune.
        totalVolume:
          type: string
          description: toAssetVolume + toRuneVolume (denoted in rune)
    NodeKey:
      type: object
      required:
        - secp256k1
        - ed25519
      properties:
        secp256k1:
          type: string
          description: secp256k1 public key
        ed25519:
          type: string
          description: ed25519 public key
    Network:
      type: object
      required:
        - bondMetrics
        - blockRewards
        - activeBonds
        - standbyBonds
        - activeNodeCount
        - standbyNodeCount
        - totalPooledRune
        - totalReserve
        - nextChurnHeight
        - poolActivationCountdown
        - poolShareFactor
        - bondingROI
        - bondingAPY
        - liquidityAPY
      properties:
        bondMetrics:
          $ref: '#/components/schemas/BondMetrics'
        blockRewards:
          $ref: '#/components/schemas/BlockRewards'
        activeBonds:
          type: array
          # TODO(acsaba): add description.
          items:
            type: string
        standbyBonds:
          type: array
          # TODO(acsaba): add description.
          description: Array of Standby Bonds
          items:
            type: string
        activeNodeCount:
          type: string
          description: Int64, Number of Active Nodes
        standbyNodeCount:
          type: string
          description: Int64, Number of Standby Nodes
        totalPooledRune:
          type: string
          description: Int64, Total Rune pooled in all pools.
        totalReserve:
          type: string
          # TODO(acsaba): document what left in reserve.
          description: Int64, Total left in Reserve
        nextChurnHeight:
          type: string
          # TODO(acsaba): check documentation.
          description: Int64, next height of blocks.
        poolActivationCountdown:
          type: string
          description: Int64, the remaining time of pool activation (in blocks).
        poolShareFactor:
          type: string
          # TODO(acsaba): float, add documentation
        bondingROI:
          type: string
        stakingROI:
          type: string
        bondingAPY:
          type: string
          # TODO(acsaba): doublecheck that documentation holds.
          description: Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
        liquidityAPY:
          # TODO(acsaba): doublecheck that documentation holds.
          type: string
          description: Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
    BondMetrics:
      type: object
      required:
        - totalActiveBond
        - averageActiveBond
        - medianActiveBond
        - minimumActiveBond
        - maximumActiveBond
        - totalStandbyBond
        - averageStandbyBond
        - medianStandbyBond
        - minimumStandbyBond
        - maximumStandbyBond
      properties:
        totalActiveBond:
          type: string
          description: Int64, Total bond of active nodes.
        averageActiveBond:
          type: string
          # TODO(acsaba): make this float.
          description: Int64, Average bond of active nodes.
        medianActiveBond:
          type: string
          description: Int64, Median bond of active nodes.
        minimumActiveBond:
          type: string
          description: Int64, Minumum bond of active nodes.
        maximumActiveBond:
          type: string
          description: Int64, Maxinum bond of active nodes.
        totalStandbyBond:
          type: string
          description: Int64, Total bond of standby nodes
        averageStandbyBond:
          type: string
          # TODO(acsaba): make this float.
          description: Int64, Average bond of standby nodes
        medianStandbyBond:
          type: string
          description: Int64, Median bond of standby nodes
        minimumStandbyBond:
          type: string
          description: Int64, Minumum bond of standby nodes
        maximumStandbyBond:
          type: string
          description: Int64, Maximum bond of standby nodes
    BlockRewards:
      type: object
      required:
        - blockReward
        - bondReward
        - poolReward
      properties:
        blockReward:
          type: string
          # TODO(acsaba): add description.
        bondReward:
          type: string
          # TODO(acsaba): add description.
        poolReward:
          type: string
          # TODO(acsaba): add description.
    TxDetails:
      type: object
      required:
        - pool
        - type
        - status
        - in
        - out
        - date
        - height
        - events
      # TODO(acsaba): add description to the fields
      properties:
        pool:
          type: string
        type:
          type: string
          # TODO(acsaba): check if these are the only allowed enums.
          enum: [swap, stake, unstake, rewards, add, pool, gas, refund, doubleSwap]
        status:
          type: string
          # TODO(acsaba): check if these are the only allowed enums.
          enum: [success, refund]
        in:
          $ref: '#/components/schemas/tx'
        out:
          type: array
          items:
            $ref: '#/components/schemas/tx'
        date:
          type: string
          description: Int64, Unix timestamp.
        # TODO(acsaba): check with Fede if it's ok to not have gas field.
        height:
          type: string
          # TODO(acsaba): Int64, add description,
        events:
          $ref: '#/components/schemas/event'
    tx:
      type: object
      required:
        - txID
        - memo
        - address
        - coins
        - options
      properties:
        txID:
          type: string
        memo:
          type: string
        address:
          type: string
        coins:
          $ref: '#/components/schemas/coins'
        # TODO(acsaba): doublecheck with Fede that options should be here and not in TXDetails:
        options:
          $ref: '#/components/schemas/option'
    coins:
      type: array
      items:
        $ref: '#/components/schemas/coin'
    coin:
      type: object
      required:
        - asset
        - amount
      properties:
        # TODO(acsaba): maybe this could stay as asset and not as pool.
        #   we already have a pool two level up in TXDetailss, this seems diferent.
        asset:
          type: string
        amount:
          type: string
    event:
      type: object
      required:
        - fee
        - stakeUnits
        - slip
      properties:
        fee:
          type: string
          #TODO(acsaba): add description, int.
        stakeUnits:
          type: string
          #TODO(acsaba): add description, int.
        slip:
          type: string
          #TODO(acsaba): add description, float.
    option:
      type: object
      required:
        - priceTarget
        - withdrawBasisPoints
        - asymmetry
      properties:
        priceTarget:
          type: string
          #TODO(acsaba): add description, int.
        withdrawBasisPoints:
          type: string
          #TODO(acsaba): add description, int.
        asymmetry:
          type: string
          #TODO(acsaba): add description, int.
    MemberDetails:
      type: object
      required:
        - pools
      properties:
        pools:
          type: array
          items:
              $ref: '#/components/schemas/MemberPoolDetails'
          description: Liquidity provider data for all the pools of a given member
    MemberPoolDetails:
      type: object
      required:
        - pool
        - assetAdded
        - assetWithdrawn
        - dateFirstAdded
        - dateLastAdded
        - liquidityUnits
        - runeAdded
        - runeWithdrawn
      properties:
        pool:
          type: string
          description: Pool rest of the data refers to
        assetAdded:
          type: string
          description: Int64, total asset added to the pool by member 
        assetWithdrawn:
          type: string
          description: Int64, total asset withdrawn from the pool by member 
        dateFirstAdded:
          type: string
          description: Int64, Unix timestamp for the first time member deposited into the pool
        dateLastAdded:
          type: string
          description: Int64, Unix timestamp for the last time member deposited into the pool
        liquidityUnits:
          type: string
          description: Int64, pool liquidity units that belong the the member 
        runeAdded:
          type: string
          description: Int64, total RUNE added to the pool by member 
        runeWithdrawn:
          type: string
          description: Int64, total RUNE withdrawn from the pool by member 

    StatsData:
      type: object
      required:
        - dailyActiveUsers
        - dailyTx
        - monthlyActiveUsers
        - monthlyTx
        - totalUsers
        - totalTx
        - totalVolume
        - totalStaked
        - totalDepth
        - totalAssetBuys
        - totalAssetSells
        - totalStakeTx
        - totalWithdrawTx
      properties:
        # TODO(acsaba): all are int types and add description to the fields.
        dailyActiveUsers:
          type: string
          description: Daily active users (unique addresses interacting)
        dailyTx:
          type: string
          description: Daily transactions
        monthlyActiveUsers:
          type: string
          description: Monthly active users
        monthlyTx:
          type: string
          description: Monthly transactions
        totalUsers:
          type: string
          description: Total unique swappers & members
        totalTx:
          type: string
          description: Total transactions
        # TODO(acsaba): do we want thee from v1: totalEarned, poolCount volume24h as in v1?
        totalVolume:
          type: string
          description: Total (in RUNE Value) of all assets swapped since start.
        totalStaked:
          type: string
          description: Total staked (in RUNE Value).
        totalDepth:
          type: string
          description: Total RUNE balances
        totalAssetBuys:
          type: string
          description: Total buying transactions
        totalAssetSells:
          type: string
          description: Total selling transactions
        totalStakeTx:
          type: string
          description: Total staking transactions
        totalWithdrawTx:
          type: string
          description: Total withdrawing transactions
