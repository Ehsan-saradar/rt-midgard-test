// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Action defines model for Action.
type Action struct {

	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status string `json:"status"`

	// Type of action
	Type string `json:"type"`
}

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Coin defines model for Coin.
type Coin struct {

	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistoryItemPool defines model for EarningsHistoryItemPool.
type EarningsHistoryItemPool struct {

	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string  `json:"address"`
	Chain   string  `json:"chain"`
	GasRate *string `json:"gas_rate,omitempty"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                  int64 `json:"AsgardSize"`
	BadValidatorRate            int64 `json:"BadValidatorRate"`
	BlocksPerYear               int64 `json:"BlocksPerYear"`
	ChurnInterval               int64 `json:"ChurnInterval"`
	ChurnRetryInterval          int64 `json:"ChurnRetryInterval"`
	CliTxCost                   int64 `json:"CliTxCost"`
	DesiredValidatorSet         int64 `json:"DesiredValidatorSet"`
	DoubleSignMaxAge            int64 `json:"DoubleSignMaxAge"`
	EmissionCurve               int64 `json:"EmissionCurve"`
	FailKeygenSlashPoints       int64 `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints      int64 `json:"FailKeysignSlashPoints"`
	FundMigrationInterval       int64 `json:"FundMigrationInterval"`
	JailTimeKeygen              int64 `json:"JailTimeKeygen"`
	JailTimeKeysign             int64 `json:"JailTimeKeysign"`
	LackOfObservationPenalty    int64 `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks       int64 `json:"LiquidityLockUpBlocks"`
	MinimumBondInRune           int64 `json:"MinimumBondInRune"`
	MinimumNodesForBFT          int64 `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil    int64 `json:"MinimumNodesForYggdrasil"`
	NativeChainGasFee           int64 `json:"NativeChainGasFee"`
	NewPoolCycle                int64 `json:"NewPoolCycle"`
	ObservationDelayFlexibility int64 `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints          int64 `json:"ObserveSlashPoints"`
	OldValidatorRate            int64 `json:"OldValidatorRate"`
	OutboundTransactionFee      int64 `json:"OutboundTransactionFee"`
	SigningTransactionPeriod    int64 `json:"SigningTransactionPeriod"`
	YggFundLimit                int64 `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock struct {
	Current []LastblockItem `json:"current"`
}

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn string `json:"last_observed_in"`
	LastSignedOut  string `json:"last_signed_out"`
	Thorchain      string `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`
	PoolShareFactor         string `json:"poolShareFactor"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), Total Rune pooled in all pools
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NetworkFees defines model for NetworkFees.
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// ObservedChain defines model for ObservedChain.
type ObservedChain struct {
	Chain  string `json:"chain"`
	Height int    `json:"height"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolLegacyDetail defines model for PoolLegacyDetail.
type PoolLegacyDetail struct {
	Asset string `json:"asset"`

	// same as assetDepth from pool/stats
	AssetDepth string `json:"assetDepth"`

	// same as addAssetLiquidityVolume from pool/stats
	AssetStakedTotal string `json:"assetStakedTotal"`

	// same as toAssetCount from pool/stats
	BuyAssetCount string `json:"buyAssetCount"`

	// same as toAssetFees / toAssetCount from pool/stats
	BuyFeeAverage string `json:"buyFeeAverage"`

	// same as toAssetFees from pool/stats
	BuyFeesTotal string `json:"buyFeesTotal"`

	// same as toAssetAverageSlip from pool/stats
	BuySlipAverage string `json:"buySlipAverage"`

	// same as toAssetVolume / toAssetCount from pool/stats
	BuyTxAverage string `json:"buyTxAverage"`

	// same as toAssetVolume from pool/stats
	BuyVolume string `json:"buyVolume"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// same as 2*runeDepth from pool/stats
	PoolDepth string `json:"poolDepth"`

	// same as totalFees / swapCount from pool/stats
	PoolFeeAverage string `json:"poolFeeAverage"`

	// same as totalFees from pool/stats
	PoolFeesTotal string `json:"poolFeesTotal"`

	// same as averageSlip from pool/stats
	PoolSlipAverage string `json:"poolSlipAverage"`

	// same as addLiquidityVolume from pool/stats
	PoolStakedTotal string `json:"poolStakedTotal"`

	// same as swapVolume / swapCount from pool/stats
	PoolTxAverage string `json:"poolTxAverage"`

	// same as units from pool/stats
	PoolUnits string `json:"poolUnits"`

	// Int64(e8), same as buyVolume + sellVolume
	PoolVolume string `json:"poolVolume"`

	// same as assetPrice from pool/stats
	Price string `json:"price"`

	// same as runeDepth from pool/stats
	RuneDepth string `json:"runeDepth"`

	// same as addRuneLiquidityVolume from pool/stats
	RuneStakedTotal string `json:"runeStakedTotal"`

	// same as toRuneCount from pool/stats
	SellAssetCount string `json:"sellAssetCount"`

	// same as toRuneFees / toRuneCount from pool/stats
	SellFeeAverage string `json:"sellFeeAverage"`

	// same as toRuneFees from pool/stats
	SellFeesTotal string `json:"sellFeesTotal"`

	// same as toRuneAverageSlip from pool/stats
	SellSlipAverage string `json:"sellSlipAverage"`

	// same as toRuneVolume / toRuneCount from pool/stats
	SellTxAverage string `json:"sellTxAverage"`

	// same as toRuneVolume from pool/stats
	SellVolume string `json:"sellVolume"`

	// same as addLiquidityCount from pool/stats
	StakeTxCount string `json:"stakeTxCount"`

	// same as uniqueMemberCount from pool/stats
	StakersCount string `json:"stakersCount"`

	// same as addLiquidityCount + withdrawCount from pool/stats
	StakingTxCount string `json:"stakingTxCount"`

	// same as status from pool/stats
	Status string `json:"status"`

	// Int64, same as history/swaps:uniqueSwapperCount
	SwappersCount string `json:"swappersCount"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64(e8), same as swapVolume pool/stats?period=24h
	Volume24h string `json:"volume24h"`

	// same as withdrawCount from pool/stats
	WithdrawTxCount string `json:"withdrawTxCount"`
}

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`
	Asset                  string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Int64, number of unique adresses that initiated swaps transactions in the period.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Liquidity Units in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// PreflightStatus defines model for PreflightStatus.
type PreflightStatus struct {
	Code   int    `json:"code"`
	Reason string `json:"reason"`
	Status string `json:"status"`
}

// ProxiedNode defines model for ProxiedNode.
type ProxiedNode struct {
	ActiveBlockHeight int    `json:"active_block_height"`
	Bond              string `json:"bond"`
	BondAddress       string `json:"bond_address"`
	CurrentAward      string `json:"current_award"`
	ForcedToLeave     bool   `json:"forced_to_leave"`
	IpAddress         string `json:"ip_address"`
	Jail              struct {
		NodeAddress *string `json:"node_address,omitempty"`
	} `json:"jail"`
	LeaveHeight     int             `json:"leave_height"`
	NodeAddress     string          `json:"node_address"`
	ObserveChains   []ObservedChain `json:"observe_chains"`
	PreflightStatus PreflightStatus `json:"preflight_status"`
	PubKeySet       struct {
		Ed25519   string `json:"ed25519"`
		Secp256k1 string `json:"secp256k1"`
	} `json:"pub_key_set"`
	RequestedToLeave    bool     `json:"requested_to_leave"`
	SignerMembership    []string `json:"signer_membership"`
	SlashPoints         int      `json:"slash_points"`
	Status              string   `json:"status"`
	StatusSince         int      `json:"status_since"`
	ValidatorConsPubKey string   `json:"validator_cons_pub_key"`
	Version             string   `json:"version"`
}

// ProxiedNodes defines model for ProxiedNodes.
type ProxiedNodes []ProxiedNode

// Queue defines model for Queue.
type Queue struct {
	Internal int `json:"internal"`
	Outbound int `json:"outbound"`
	Swap     int `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, unique users (addresses) initiating swaps in the last 24 hours.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64, unique users (addresses) initiating swaps in the last 30 days.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Int64, unique users (addresses) initiating swaps since beginning.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip by swap.
	// Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps to asset denoted in rune
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps to rune
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64(e8), toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// Transaction defines model for Transaction.
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolLegacyResponse defines model for PoolLegacyResponse.
type PoolLegacyResponse PoolLegacyDetail

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ProxiedNodesResponse defines model for ProxiedNodesResponse.
type ProxiedNodesResponse ProxiedNodes

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action (swap, addLiquidity, withdraw, donate, refund)
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *string `json:"period,omitempty"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *string `json:"status,omitempty"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"I04g1wAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
