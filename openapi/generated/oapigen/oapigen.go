// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64, Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64, Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64, Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64, Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64, Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64, Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64, Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64, Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64, Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64, Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64, Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64, Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64, System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64, Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistoryItemPool defines model for EarningsHistoryItemPool.
type EarningsHistoryItemPool struct {

	// Int64, Share of earnings sent to the pool during the time interval
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses struct {
	Current []InboundAddressesItem `json:"current"`
}

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string `json:"address"`
	Chain   string `json:"chain"`

	// indicate whether this chain has halted
	Halted bool   `json:"halted"`
	PubKey string `json:"pub_key"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                  int64 `json:"AsgardSize"`
	BadValidatorRate            int64 `json:"BadValidatorRate"`
	BlocksPerYear               int64 `json:"BlocksPerYear"`
	ChurnInterval               int64 `json:"ChurnInterval"`
	ChurnRetryInterval          int64 `json:"ChurnRetryInterval"`
	CliTxCost                   int64 `json:"CliTxCost"`
	DesiredValidatorSet         int64 `json:"DesiredValidatorSet"`
	DoubleSignMaxAge            int64 `json:"DoubleSignMaxAge"`
	EmissionCurve               int64 `json:"EmissionCurve"`
	FailKeygenSlashPoints       int64 `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints      int64 `json:"FailKeysignSlashPoints"`
	FundMigrationInterval       int64 `json:"FundMigrationInterval"`
	JailTimeKeygen              int64 `json:"JailTimeKeygen"`
	JailTimeKeysign             int64 `json:"JailTimeKeysign"`
	LackOfObservationPenalty    int64 `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks       int64 `json:"LiquidityLockUpBlocks"`
	MinimumBondInRune           int64 `json:"MinimumBondInRune"`
	MinimumNodesForBFT          int64 `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil    int64 `json:"MinimumNodesForYggdrasil"`
	NativeChainGasFee           int64 `json:"NativeChainGasFee"`
	NewPoolCycle                int64 `json:"NewPoolCycle"`
	ObservationDelayFlexibility int64 `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints          int64 `json:"ObserveSlashPoints"`
	OldValidatorRate            int64 `json:"OldValidatorRate"`
	OutboundTransactionFee      int64 `json:"OutboundTransactionFee"`
	SigningTransactionPeriod    int64 `json:"SigningTransactionPeriod"`
	YggFundLimit                int64 `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock struct {
	Current []LastblockItem `json:"current"`
}

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn string `json:"last_observed_in"`
	LastSignedOut  string `json:"last_signed_out"`
	Thorchain      string `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64, total deposits (liquidity additions) during the time interval
	Deposits string `json:"deposits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, total withdrawals during the time interval
	Withdrawals string `json:"withdrawals"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// Liquidity provider data for all the pools of a given member
	Pools []MemberPoolDetails `json:"pools"`
}

// MemberPoolDetails defines model for MemberPoolDetails.
type MemberPoolDetails struct {

	// Int64, total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// Int64, total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Int64, total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`
	PoolShareFactor         string `json:"poolShareFactor"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64, Total Rune pooled in all pools
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64, Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NodeKey defines model for NodeKey.
type NodeKey struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// NodeKeys defines model for NodeKeys.
type NodeKeys []NodeKey

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolLegacyDetail defines model for PoolLegacyDetail.
type PoolLegacyDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, same as history/swaps:totalFees
	PoolFeesTotal string `json:"poolFeesTotal"`

	// Float, same as history/swaps:averageSlip
	PoolSlipAverage *string `json:"poolSlipAverage,omitempty"`

	// Float, same as history/swaps totalVolume / totalCount
	PoolTxAverage string `json:"poolTxAverage"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64, Liquidity Units in the pool
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune
	Volume24h string `json:"volume24h"`
}

// Queue defines model for Queue.
type Queue struct {
	Outbound string `json:"outbound"`
	Swap     string `json:"swap"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Daily active users (unique addresses interacting)
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Daily transactions
	DailyTx string `json:"dailyTx"`

	// Monthly active users
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Monthly transactions
	MonthlyTx string `json:"monthlyTx"`

	// Total buying transactions
	TotalAssetBuys string `json:"totalAssetBuys"`

	// Total selling transactions
	TotalAssetSells string `json:"totalAssetSells"`

	// Total RUNE balances
	TotalDepth string `json:"totalDepth"`

	// Total staking transactions
	TotalStakeTx string `json:"totalStakeTx"`

	// Total staked (in RUNE Value)
	TotalStaked string `json:"totalStaked"`

	// Total transactions
	TotalTx string `json:"totalTx"`

	// Total unique swappers & members
	TotalUsers string `json:"totalUsers"`

	// Total (in RUNE Value) of all assets swapped since start
	TotalVolume string `json:"totalVolume"`

	// Total withdrawing transactions
	TotalWithdrawTx string `json:"totalWithdrawTx"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float, the average slip by swap. Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64, volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64, volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64, the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64, toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// TxDetails defines model for TxDetails.
type TxDetails struct {

	// Int64, Unix timestamp
	Date   string `json:"date"`
	Events Event  `json:"events"`
	Height string `json:"height"`
	In     Tx     `json:"in"`
	Out    []Tx   `json:"out"`
	Pool   string `json:"pool"`
	Status string `json:"status"`
	Type   string `json:"type"`
}

// Coin defines model for coin.
type Coin struct {
	Amount string `json:"amount"`
	Asset  string `json:"asset"`
}

// Coins defines model for coins.
type Coins []Coin

// Event defines model for event.
type Event struct {
	Fee        string `json:"fee"`
	Slip       string `json:"slip"`
	StakeUnits string `json:"stakeUnits"`
}

// Option defines model for option.
type Option struct {
	Asymmetry           string `json:"asymmetry"`
	PriceTarget         string `json:"priceTarget"`
	WithdrawBasisPoints string `json:"withdrawBasisPoints"`
}

// Tx defines model for tx.
type Tx struct {
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`
	Memo    string `json:"memo"`
	Options Option `json:"options"`
	TxID    string `json:"txID"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodeKeyResponse defines model for NodeKeyResponse.
type NodeKeyResponse NodeKeys

// PoolLegacyResponse defines model for PoolLegacyResponse.
type PoolLegacyResponse PoolLegacyDetail

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// TxResponse defines model for TxResponse.
type TxResponse struct {

	// Int64, count of txs matching the filters.
	Count string      `json:"count"`
	Txs   []TxDetails `json:"txs"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *string `json:"status,omitempty"`
}

// GetTxDetailsParams defines parameters for GetTxDetails.
type GetTxDetailsParams struct {

	// Address of sender or recipient of any in/out tx in event
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx in event
	Txid *string `json:"txid,omitempty"`

	// Any asset used in event (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of event
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
