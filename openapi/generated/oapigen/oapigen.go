// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {
	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {
	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {
	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Represents a digital currency amount
type Coin struct {
	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {
	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {
	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {
	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {
	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {
	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string  `json:"address"`
	Chain   string  `json:"chain"`
	GasRate *string `json:"gas_rate,omitempty"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                    int64  `json:"AsgardSize"`
	BadValidatorRate              int64  `json:"BadValidatorRate"`
	BadValidatorRedline           int    `json:"BadValidatorRedline"`
	BlocksPerYear                 int64  `json:"BlocksPerYear"`
	ChurnInterval                 int64  `json:"ChurnInterval"`
	ChurnRetryInterval            int64  `json:"ChurnRetryInterval"`
	DesiredValidatorSet           int64  `json:"DesiredValidatorSet"`
	DoubleSignMaxAge              int64  `json:"DoubleSignMaxAge"`
	EmissionCurve                 int64  `json:"EmissionCurve"`
	FailKeygenSlashPoints         int64  `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints        int64  `json:"FailKeysignSlashPoints"`
	FullImpLossProtectionBlocks   int64  `json:"FullImpLossProtectionBlocks"`
	FundMigrationInterval         int64  `json:"FundMigrationInterval"`
	IncentiveCurve                int64  `json:"IncentiveCurve"`
	JailTimeKeygen                int64  `json:"JailTimeKeygen"`
	JailTimeKeysign               int64  `json:"JailTimeKeysign"`
	LackOfObservationPenalty      int64  `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks         int64  `json:"LiquidityLockUpBlocks"`
	MaxAvailablePools             int64  `json:"MaxAvailablePools"`
	MaxSwapsPerBlock              int64  `json:"MaxSwapsPerBlock"`
	MinRunePoolDepth              int64  `json:"MinRunePoolDepth"`
	MinSlashPointsForBadValidator int64  `json:"MinSlashPointsForBadValidator"`
	MinSwapsPerBlock              int64  `json:"MinSwapsPerBlock"`
	MinimumBondInRune             int64  `json:"MinimumBondInRune"`
	MinimumNodesForBFT            int64  `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil      int64  `json:"MinimumNodesForYggdrasil"`
	NativeTransactionFee          int64  `json:"NativeTransactionFee"`
	NewPoolCycle                  *int64 `json:"NewPoolCycle,omitempty"`
	ObservationDelayFlexibility   int64  `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints            int64  `json:"ObserveSlashPoints"`
	OldValidatorRate              int64  `json:"OldValidatorRate"`
	OutboundTransactionFee        int64  `json:"OutboundTransactionFee"`
	PoolCycle                     int64  `json:"PoolCycle"`
	SigningTransactionPeriod      int64  `json:"SigningTransactionPeriod"`
	VirtualMultSynths             int64  `json:"VirtualMultSynths"`
	YggFundLimit                  int64  `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock []LastblockItem

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn int64  `json:"last_observed_in"`
	LastSignedOut  int64  `json:"last_signed_out"`
	Thorchain      int64  `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {
	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {
	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {
	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {
	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// OHLCVHistory defines model for OHLCVHistory.
type OHLCVHistory struct {
	Intervals OHLCVHistoryIntervals `json:"intervals"`
	Meta      OHLCVHistoryMeta      `json:"meta"`
}

// OHLCVHistoryIntervals defines model for OHLCVHistoryIntervals.
type OHLCVHistoryIntervals []OHLCVHistoryItem

// OHLCVHistoryItem defines model for OHLCVHistoryItem.
type OHLCVHistoryItem struct {
	// Float, close price of asset in USD
	ClosePrice string `json:"closePrice"`

	// Int64, The end time of bucket in unix timestamp
	CloseTime string `json:"closeTime"`

	// Float, high price of asset in USD
	HighPrice string `json:"highPrice"`

	// Int64, The high time of bucket in unix timestamp
	HighTime string `json:"highTime"`

	// Int64, Liquidty is USD
	Liquidity string `json:"liquidity"`

	// Float, low price of asset in USD
	LowPrice string `json:"lowPrice"`

	// Int64, The low time of bucket in unix timestamp
	LowTime string `json:"lowTime"`

	// Float, open price of asset in USD
	OpenPrice string `json:"openPrice"`

	// Int64, The beginning time of bucket in unix timestamp
	OpenTime string `json:"openTime"`

	// Int64, Volume in USD
	Volume string `json:"volume"`
}

// OHLCVHistoryMeta defines model for OHLCVHistoryMeta.
type OHLCVHistoryMeta struct {
	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// ObservedChain defines model for ObservedChain.
type ObservedChain struct {
	Chain  string `json:"chain"`
	Height int    `json:"height"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {
	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`
	Asset                  string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Int64, number of unique adresses that initiated swaps transactions in the period.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// PreflightStatus defines model for PreflightStatus.
type PreflightStatus struct {
	Code   int    `json:"code"`
	Reason string `json:"reason"`
	Status string `json:"status"`
}

// ProxiedNode defines model for ProxiedNode.
type ProxiedNode struct {
	ActiveBlockHeight int    `json:"active_block_height"`
	Bond              string `json:"bond"`
	BondAddress       string `json:"bond_address"`
	CurrentAward      string `json:"current_award"`
	ForcedToLeave     bool   `json:"forced_to_leave"`
	IpAddress         string `json:"ip_address"`
	Jail              struct {
		NodeAddress *string `json:"node_address,omitempty"`
	} `json:"jail"`
	LeaveHeight     int             `json:"leave_height"`
	NodeAddress     string          `json:"node_address"`
	ObserveChains   []ObservedChain `json:"observe_chains"`
	PreflightStatus PreflightStatus `json:"preflight_status"`
	PubKeySet       struct {
		Ed25519   string `json:"ed25519"`
		Secp256k1 string `json:"secp256k1"`
	} `json:"pub_key_set"`
	RequestedToLeave    bool     `json:"requested_to_leave"`
	SignerMembership    []string `json:"signer_membership"`
	SlashPoints         int      `json:"slash_points"`
	Status              string   `json:"status"`
	StatusSince         int      `json:"status_since"`
	ValidatorConsPubKey string   `json:"validator_cons_pub_key"`
	Version             string   `json:"version"`
}

// ProxiedNodes defines model for ProxiedNodes.
type ProxiedNodes []ProxiedNode

// Queue defines model for Queue.
type Queue struct {
	Internal int `json:"internal"`
	Outbound int `json:"outbound"`
	Swap     int `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {
	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// StatsData defines model for StatsData.
type StatsData struct {
	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, unique users (addresses) initiating swaps in the last 24 hours.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, unique users (addresses) initiating swaps in the last 30 days.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Int64, unique users (addresses) initiating swaps since beginning.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {
	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {
	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {
	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {
	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {
	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at the end of the interval
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {
	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {
	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// OHLCVHistoryResponse defines model for OHLCVHistoryResponse.
type OHLCVHistoryResponse OHLCVHistory

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ProxiedNodesResponse defines model for ProxiedNodesResponse.
type ProxiedNodesResponse ProxiedNodes

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {
	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {
	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {
	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {
	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetOHLCVHistoryParams defines parameters for GetOHLCVHistory.
type GetOHLCVHistoryParams struct {
	// Interval of calculations
	Interval *GetOHLCVHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetOHLCVHistoryParamsInterval defines parameters for GetOHLCVHistory.
type GetOHLCVHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {
	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {
	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {
	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {
	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {
	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"b/8/AAD//3yFByUHAgEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
