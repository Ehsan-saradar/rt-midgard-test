// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {

	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Represents a digital currency amount
type Coin struct {

	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, The liquidity unit value index. Sqrt(assetDepth * runeDepth)/liquidity units
	Luvi string `json:"luvi"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval at time endTime
	EndAssetDepth string `json:"endAssetDepth"`

	// Int64, Liquidity Units in the pool at the end of the interval at time endTime
	EndLPUnits string `json:"endLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval at time endTime
	EndRuneDepth string `json:"endRuneDepth"`

	// Int64, Synth Units in the pool at the end of the interval at time endTime
	EndSynthUnits string `json:"endSynthUnits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, The liquidity unit value index increase between the first and last depth item
	LuviIncrease string `json:"luviIncrease"`

	// Float, The impermanent loss between the first and last depth item
	PriceShiftLoss string `json:"priceShiftLoss"`

	// Int64(e8), the amount of Asset in the pool at the start of the interval at time startTime
	StartAssetDepth string `json:"startAssetDepth"`

	// Int64, Liquidity Units in the pool at the start of the interval at time startTime
	StartLPUnits string `json:"startLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the start of the interval at time startTime
	StartRuneDepth string `json:"startRuneDepth"`

	// Int64, Synth Units in the pool at the start of the interval at time startTime
	StartSynthUnits string `json:"startSynthUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {

	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync         bool     `json:"inSync"`
	LastAggregated HeightTS `json:"lastAggregated"`
	LastCommitted  HeightTS `json:"lastCommitted"`
	LastFetched    HeightTS `json:"lastFetched"`
	LastThorNode   HeightTS `json:"lastThorNode"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// HeightTS defines model for HeightTS.
type HeightTS struct {

	// Block height
	Height int `json:"height"`

	// Block timestamp (seconds since epoch)
	Timestamp int `json:"timestamp"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string  `json:"address"`
	Chain   string  `json:"chain"`
	GasRate *string `json:"gas_rate,omitempty"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                    int64  `json:"AsgardSize"`
	BadValidatorRate              int64  `json:"BadValidatorRate"`
	BadValidatorRedline           int    `json:"BadValidatorRedline"`
	BlocksPerYear                 int64  `json:"BlocksPerYear"`
	ChurnInterval                 int64  `json:"ChurnInterval"`
	ChurnRetryInterval            int64  `json:"ChurnRetryInterval"`
	DesiredValidatorSet           int64  `json:"DesiredValidatorSet"`
	DoubleSignMaxAge              int64  `json:"DoubleSignMaxAge"`
	EmissionCurve                 int64  `json:"EmissionCurve"`
	FailKeygenSlashPoints         int64  `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints        int64  `json:"FailKeysignSlashPoints"`
	FullImpLossProtectionBlocks   int64  `json:"FullImpLossProtectionBlocks"`
	FundMigrationInterval         int64  `json:"FundMigrationInterval"`
	IncentiveCurve                int64  `json:"IncentiveCurve"`
	JailTimeKeygen                int64  `json:"JailTimeKeygen"`
	JailTimeKeysign               int64  `json:"JailTimeKeysign"`
	LackOfObservationPenalty      int64  `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks         int64  `json:"LiquidityLockUpBlocks"`
	MaxAvailablePools             int64  `json:"MaxAvailablePools"`
	MaxSwapsPerBlock              int64  `json:"MaxSwapsPerBlock"`
	MinRunePoolDepth              int64  `json:"MinRunePoolDepth"`
	MinSlashPointsForBadValidator int64  `json:"MinSlashPointsForBadValidator"`
	MinSwapsPerBlock              int64  `json:"MinSwapsPerBlock"`
	MinimumBondInRune             int64  `json:"MinimumBondInRune"`
	MinimumNodesForBFT            int64  `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil      int64  `json:"MinimumNodesForYggdrasil"`
	NativeTransactionFee          int64  `json:"NativeTransactionFee"`
	NewPoolCycle                  *int64 `json:"NewPoolCycle,omitempty"`
	ObservationDelayFlexibility   int64  `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints            int64  `json:"ObserveSlashPoints"`
	OldValidatorRate              int64  `json:"OldValidatorRate"`
	OutboundTransactionFee        int64  `json:"OutboundTransactionFee"`
	PoolCycle                     int64  `json:"PoolCycle"`
	SigningTransactionPeriod      int64  `json:"SigningTransactionPeriod"`
	VirtualMultSynths             int64  `json:"VirtualMultSynths"`
	YggFundLimit                  int64  `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock []LastblockItem

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn int64  `json:"last_observed_in"`
	LastSignedOut  int64  `json:"last_signed_out"`
	Thorchain      int64  `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {

	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// ObservedChain defines model for ObservedChain.
type ObservedChain struct {
	Chain  string `json:"chain"`
	Height int    `json:"height"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`
	Asset                  string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Int64, number of unique adresses that initiated swaps transactions in the period.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// PreflightStatus defines model for PreflightStatus.
type PreflightStatus struct {
	Code   int    `json:"code"`
	Reason string `json:"reason"`
	Status string `json:"status"`
}

// ProxiedNode defines model for ProxiedNode.
type ProxiedNode struct {
	ActiveBlockHeight int    `json:"active_block_height"`
	Bond              string `json:"bond"`
	BondAddress       string `json:"bond_address"`
	CurrentAward      string `json:"current_award"`
	ForcedToLeave     bool   `json:"forced_to_leave"`
	IpAddress         string `json:"ip_address"`
	Jail              struct {
		NodeAddress *string `json:"node_address,omitempty"`
	} `json:"jail"`
	LeaveHeight     int             `json:"leave_height"`
	NodeAddress     string          `json:"node_address"`
	ObserveChains   []ObservedChain `json:"observe_chains"`
	PreflightStatus PreflightStatus `json:"preflight_status"`
	PubKeySet       struct {
		Ed25519   string `json:"ed25519"`
		Secp256k1 string `json:"secp256k1"`
	} `json:"pub_key_set"`
	RequestedToLeave    bool     `json:"requested_to_leave"`
	SignerMembership    []string `json:"signer_membership"`
	SlashPoints         int      `json:"slash_points"`
	Status              string   `json:"status"`
	StatusSince         int      `json:"status_since"`
	ValidatorConsPubKey string   `json:"validator_cons_pub_key"`
	Version             string   `json:"version"`
}

// ProxiedNodes defines model for ProxiedNodes.
type ProxiedNodes []ProxiedNode

// Queue defines model for Queue.
type Queue struct {
	Internal int `json:"internal"`
	Outbound int `json:"outbound"`
	Swap     int `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, unique users (addresses) initiating swaps in the last 24 hours.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, unique users (addresses) initiating swaps in the last 30 days.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Int64, unique users (addresses) initiating swaps since beginning.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {

	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {

	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at the end of the interval
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ProxiedNodesResponse defines model for ProxiedNodesResponse.
type ProxiedNodesResponse ProxiedNodes

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// Affiliate address of the action (swap)
	AffiliateAddress *string `json:"affiliate_address,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {

	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
