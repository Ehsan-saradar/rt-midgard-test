// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64, Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64, Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64, Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64, Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64, Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64, Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64, Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64, Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64, Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64, Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64, Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64, Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64, System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64, Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistoryItemPool defines model for EarningsHistoryItemPool.
type EarningsHistoryItemPool struct {

	// Int64, Share of earnings sent to the pool during the time interval
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses struct {
	Current []InboundAddressesItem `json:"current"`
}

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string `json:"address"`
	Chain   string `json:"chain"`

	// indicate whether this chain has halted
	Halted bool   `json:"halted"`
	PubKey string `json:"pub_key"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                  int64 `json:"AsgardSize"`
	BadValidatorRate            int64 `json:"BadValidatorRate"`
	BlocksPerYear               int64 `json:"BlocksPerYear"`
	ChurnInterval               int64 `json:"ChurnInterval"`
	ChurnRetryInterval          int64 `json:"ChurnRetryInterval"`
	CliTxCost                   int64 `json:"CliTxCost"`
	DesiredValidatorSet         int64 `json:"DesiredValidatorSet"`
	DoubleSignMaxAge            int64 `json:"DoubleSignMaxAge"`
	EmissionCurve               int64 `json:"EmissionCurve"`
	FailKeygenSlashPoints       int64 `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints      int64 `json:"FailKeysignSlashPoints"`
	FundMigrationInterval       int64 `json:"FundMigrationInterval"`
	JailTimeKeygen              int64 `json:"JailTimeKeygen"`
	JailTimeKeysign             int64 `json:"JailTimeKeysign"`
	LackOfObservationPenalty    int64 `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks       int64 `json:"LiquidityLockUpBlocks"`
	MinimumBondInRune           int64 `json:"MinimumBondInRune"`
	MinimumNodesForBFT          int64 `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil    int64 `json:"MinimumNodesForYggdrasil"`
	NativeChainGasFee           int64 `json:"NativeChainGasFee"`
	NewPoolCycle                int64 `json:"NewPoolCycle"`
	ObservationDelayFlexibility int64 `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints          int64 `json:"ObserveSlashPoints"`
	OldValidatorRate            int64 `json:"OldValidatorRate"`
	OutboundTransactionFee      int64 `json:"OutboundTransactionFee"`
	SigningTransactionPeriod    int64 `json:"SigningTransactionPeriod"`
	YggFundLimit                int64 `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock struct {
	Current []LastblockItem `json:"current"`
}

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn string `json:"last_observed_in"`
	LastSignedOut  string `json:"last_signed_out"`
	Thorchain      string `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64, total deposits (liquidity additions) during the time interval
	Deposits string `json:"deposits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, total withdrawals during the time interval
	Withdrawals string `json:"withdrawals"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// Liquidity provider data for all the pools of a given member
	Pools []MemberPoolDetails `json:"pools"`
}

// MemberPoolDetails defines model for MemberPoolDetails.
type MemberPoolDetails struct {

	// Int64, total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// Int64, total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Int64, total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`
	PoolShareFactor         string `json:"poolShareFactor"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64, Total Rune pooled in all pools
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64, Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NodeKey defines model for NodeKey.
type NodeKey struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// NodeKeys defines model for NodeKeys.
type NodeKeys []NodeKey

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolLegacyDetail defines model for PoolLegacyDetail.
type PoolLegacyDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Int64, same as history/swaps:toAssetCount
	BuyAssetCount string `json:"buyAssetCount"`

	// Float, same as history/swaps:toRuneVolume/toRuneCount
	BuyTxAverage string `json:"buyTxAverage"`

	// Int64, same as history/swaps:toAssetVolume
	BuyVolume string `json:"buyVolume"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, same as assetDepth + runeDepth
	PoolDepth string `json:"poolDepth"`

	// Float, same as history/swaps:totalFees/totalCount
	PoolFeeAverage string `json:"poolFeeAverage"`

	// Int64, same as history/swaps:totalFees
	PoolFeesTotal string `json:"poolFeesTotal"`

	// Float, same as history/swaps:averageSlip
	PoolSlipAverage string `json:"poolSlipAverage"`

	// Float, same as history/swaps:totalVolume/totalCount
	PoolTxAverage string `json:"poolTxAverage"`

	// Int64, same as buyVolume + sellVolume
	PoolVolume string `json:"poolVolume"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// Int64, same as history/swaps:toRuneCount
	SellAssetCount string `json:"sellAssetCount"`

	// Float, same as history/swaps:toAssetVolume/toAssetCount
	SellTxAverage string `json:"sellTxAverage"`

	// Int64, same as history/swaps:toRuneVolume
	SellVolume string `json:"sellVolume"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64, Liquidity Units in the pool
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune
	Volume24h string `json:"volume24h"`
}

// Queue defines model for Queue.
type Queue struct {
	Outbound string `json:"outbound"`
	Swap     string `json:"swap"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Daily active users (unique addresses interacting)
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Daily transactions
	DailyTx string `json:"dailyTx"`

	// Monthly active users
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Monthly transactions
	MonthlyTx string `json:"monthlyTx"`

	// Total buying transactions
	TotalAssetBuys string `json:"totalAssetBuys"`

	// Total selling transactions
	TotalAssetSells string `json:"totalAssetSells"`

	// Total RUNE balances
	TotalDepth string `json:"totalDepth"`

	// Total staking transactions
	TotalStakeTx string `json:"totalStakeTx"`

	// Total staked (in RUNE Value)
	TotalStaked string `json:"totalStaked"`

	// Total transactions
	TotalTx string `json:"totalTx"`

	// Total unique swappers & members
	TotalUsers string `json:"totalUsers"`

	// Total (in RUNE Value) of all assets swapped since start
	TotalVolume string `json:"totalVolume"`

	// Total withdrawing transactions
	TotalWithdrawTx string `json:"totalWithdrawTx"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float, the average slip by swap. Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64, volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64, volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64, the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64, toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// TxDetails defines model for TxDetails.
type TxDetails struct {

	// Int64, Unix timestamp
	Date     string   `json:"date"`
	Height   string   `json:"height"`
	In       []Tx     `json:"in"`
	Metadata Metadata `json:"metadata"`
	Out      []Tx     `json:"out"`
	Pools    []string `json:"pools"`
	Status   string   `json:"status"`
	Type     string   `json:"type"`
}

// AddLiquidityMetadata defines model for addLiquidityMetadata.
type AddLiquidityMetadata struct {
	LiquidityUnits string `json:"liquidityUnits"`
}

// Coin defines model for coin.
type Coin struct {
	Amount string `json:"amount"`
	Asset  string `json:"asset"`
}

// Coins defines model for coins.
type Coins []Coin

// Metadata defines model for metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// RefundMetadata defines model for refundMetadata.
type RefundMetadata struct {
	NetworkFees []Coin `json:"networkFees"`
	Reason      string `json:"reason"`
}

// SwapMetadata defines model for swapMetadata.
type SwapMetadata struct {
	LiquidityFee string `json:"liquidityFee"`
	NetworkFees  []Coin `json:"networkFees"`
	TradeSlip    string `json:"tradeSlip"`
	TradeTarget  string `json:"tradeTarget"`
}

// Tx defines model for tx.
type Tx struct {
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`
	Memo    string `json:"memo"`
	TxID    string `json:"txID"`
}

// WithdrawMetadata defines model for withdrawMetadata.
type WithdrawMetadata struct {
	Asymmetry      string `json:"asymmetry"`
	LiquidityUnits string `json:"liquidityUnits"`
	NetworkFees    []Coin `json:"networkFees"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodeKeyResponse defines model for NodeKeyResponse.
type NodeKeyResponse NodeKeys

// PoolLegacyResponse defines model for PoolLegacyResponse.
type PoolLegacyResponse PoolLegacyDetail

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// TxResponse defines model for TxResponse.
type TxResponse struct {

	// Int64, count of txs matching the filters.
	Count string      `json:"count"`
	Txs   []TxDetails `json:"txs"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *string `json:"status,omitempty"`
}

// GetTxDetailsParams defines parameters for GetTxDetails.
type GetTxDetailsParams struct {

	// Address of sender or recipient of any in/out tx in event
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx in event
	Txid *string `json:"txid,omitempty"`

	// Any asset used in event (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of event
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/76DaVopnAAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
