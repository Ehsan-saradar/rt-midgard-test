// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64, Average bond of active nodes.
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64, Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64, Maxinum bond of active nodes.
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64, Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64, Median bond of active nodes.
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64, Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64, Minumum bond of active nodes.
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64, Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64, Total bond of active nodes.
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64, Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64, Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64, Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64, System income generated during the time interval. It is the sum of liquidity fees and block rewards.
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64, Total liquidity fees, converted to RUNE, collected during the time interval.
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistoryItemPool defines model for EarningsHistoryItemPool.
type EarningsHistoryItemPool struct {

	// Int64, Share of earnings sent to the pool during the time interval
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64, total deposits (liquidity additions) during the time interval
	Deposits string `json:"deposits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, total withdrawals during the time interval
	Withdrawals string `json:"withdrawals"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// Liquidity provider data for all the pools of a given member
	Pools []MemberPoolDetails `json:"pools"`
}

// MemberPoolDetails defines model for MemberPoolDetails.
type MemberPoolDetails struct {

	// Int64, total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// Int64, total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Int64, total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`
	BondingROI string `json:"bondingROI"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks).
	PoolActivationCountdown string  `json:"poolActivationCountdown"`
	PoolShareFactor         string  `json:"poolShareFactor"`
	StakingROI              *string `json:"stakingROI,omitempty"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64, Total Rune pooled in all pools.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64, Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NodeKey defines model for NodeKey.
type NodeKey struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Enabled, Bootstrap.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Daily active users (unique addresses interacting)
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Daily transactions
	DailyTx string `json:"dailyTx"`

	// Monthly active users
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Monthly transactions
	MonthlyTx string `json:"monthlyTx"`

	// Total buying transactions
	TotalAssetBuys string `json:"totalAssetBuys"`

	// Total selling transactions
	TotalAssetSells string `json:"totalAssetSells"`

	// Total RUNE balances
	TotalDepth string `json:"totalDepth"`

	// Total staking transactions
	TotalStakeTx string `json:"totalStakeTx"`

	// Total staked (in RUNE Value).
	TotalStaked string `json:"totalStaked"`

	// Total transactions
	TotalTx string `json:"totalTx"`

	// Total unique swappers & members
	TotalUsers string `json:"totalUsers"`

	// Total (in RUNE Value) of all assets swapped since start.
	TotalVolume string `json:"totalVolume"`

	// Total withdrawing transactions
	TotalWithdrawTx string `json:"totalWithdrawTx"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Int64, the average slip by swap. Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64, volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64, volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64, the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64, toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// TxDetails defines model for TxDetails.
type TxDetails struct {

	// Int64, Unix timestamp.
	Date   string `json:"date"`
	Events Event  `json:"events"`
	Height string `json:"height"`
	In     Tx     `json:"in"`
	Out    []Tx   `json:"out"`
	Pool   string `json:"pool"`
	Status string `json:"status"`
	Type   string `json:"type"`
}

// Coin defines model for coin.
type Coin struct {
	Amount string `json:"amount"`
	Asset  string `json:"asset"`
}

// Coins defines model for coins.
type Coins []Coin

// Event defines model for event.
type Event struct {
	Fee        string `json:"fee"`
	Slip       string `json:"slip"`
	StakeUnits string `json:"stakeUnits"`
}

// Option defines model for option.
type Option struct {
	Asymmetry           string `json:"asymmetry"`
	PriceTarget         string `json:"priceTarget"`
	WithdrawBasisPoints string `json:"withdrawBasisPoints"`
}

// Tx defines model for tx.
type Tx struct {
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`
	Memo    string `json:"memo"`
	Options Option `json:"options"`
	TxID    string `json:"txID"`
}

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse []string

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodeKeyResponse defines model for NodeKeyResponse.
type NodeKeyResponse []NodeKey

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse []PoolDetail

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// TxResponse defines model for TxResponse.
type TxResponse struct {

	// Int64, count of txs matching the filters.
	Count string      `json:"count"`
	Txs   []TxDetails `json:"txs"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval string `json:"interval"`

	// Start time of the query as unix timestamp
	From int64 `json:"from"`

	// End time of the query as unix timestamp
	To int64 `json:"to"`
}

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval string `json:"interval"`

	// Start time of the query as unix timestamp
	From int64 `json:"from"`

	// End time of the query as unix timestamp
	To int64 `json:"to"`
}

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing.
	Pool *int64 `json:"pool,omitempty"`

	// Interval of calculations
	Interval string `json:"interval"`

	// Start time of the query as unix timestamp
	From int64 `json:"from"`

	// End time of the query as unix timestamp
	To int64 `json:"to"`
}

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval string `json:"interval"`

	// Start time of the query as unix timestamp
	From int64 `json:"from"`

	// End time of the query as unix timestamp
	To int64 `json:"to"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Interval of calculations
	Status string `json:"status"`
}

// GetTxDetailsParams defines parameters for GetTxDetails.
type GetTxDetailsParams struct {

	// Address of sender or recipient of any in/out tx in event
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx in event
	Txid *string `json:"txid,omitempty"`

	// Any asset used in event (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of event
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
