// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Action defines model for Action.
type Action struct {

	// Int64, Unix timestamp for when the action was registered
	Date string `json:"date"`

	// Int64, block height at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status string `json:"status"`

	// Type of action
	Type string `json:"type"`
}

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64, Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64, Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64, Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64, Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64, Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64, Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64, Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64, Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64, Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64, Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Coin defines model for Coin.
type Coin struct {

	// Int64 (10^8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64, Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64, Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64, System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64, Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistoryItemPool defines model for EarningsHistoryItemPool.
type EarningsHistoryItemPool struct {

	// Int64, Share of earnings sent to the pool during the time interval
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses struct {
	Current []InboundAddressesItem `json:"current"`
}

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string `json:"address"`
	Chain   string `json:"chain"`

	// indicate whether this chain has halted
	Halted bool   `json:"halted"`
	PubKey string `json:"pub_key"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                  int64 `json:"AsgardSize"`
	BadValidatorRate            int64 `json:"BadValidatorRate"`
	BlocksPerYear               int64 `json:"BlocksPerYear"`
	ChurnInterval               int64 `json:"ChurnInterval"`
	ChurnRetryInterval          int64 `json:"ChurnRetryInterval"`
	CliTxCost                   int64 `json:"CliTxCost"`
	DesiredValidatorSet         int64 `json:"DesiredValidatorSet"`
	DoubleSignMaxAge            int64 `json:"DoubleSignMaxAge"`
	EmissionCurve               int64 `json:"EmissionCurve"`
	FailKeygenSlashPoints       int64 `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints      int64 `json:"FailKeysignSlashPoints"`
	FundMigrationInterval       int64 `json:"FundMigrationInterval"`
	JailTimeKeygen              int64 `json:"JailTimeKeygen"`
	JailTimeKeysign             int64 `json:"JailTimeKeysign"`
	LackOfObservationPenalty    int64 `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks       int64 `json:"LiquidityLockUpBlocks"`
	MinimumBondInRune           int64 `json:"MinimumBondInRune"`
	MinimumNodesForBFT          int64 `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil    int64 `json:"MinimumNodesForYggdrasil"`
	NativeChainGasFee           int64 `json:"NativeChainGasFee"`
	NewPoolCycle                int64 `json:"NewPoolCycle"`
	ObservationDelayFlexibility int64 `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints          int64 `json:"ObserveSlashPoints"`
	OldValidatorRate            int64 `json:"OldValidatorRate"`
	OutboundTransactionFee      int64 `json:"OutboundTransactionFee"`
	SigningTransactionPeriod    int64 `json:"SigningTransactionPeriod"`
	YggFundLimit                int64 `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock struct {
	Current []LastblockItem `json:"current"`
}

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn string `json:"last_observed_in"`
	LastSignedOut  string `json:"last_signed_out"`
	Thorchain      string `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64 (10^8), total deposits (liquidity additions) in RUNE during the time interval. Accounts for both asset (using the price at deposit time) and RUNE deposited into pools
	Deposits string `json:"deposits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64 (10^8), total withdrawals in RUNE during the time interval. Accounts for both asset (using the price at withdrawal time) and RUNE withdrawn from pools
	Withdrawals string `json:"withdrawals"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// Liquidity provider data for all the pools of a given member
	Pools []MemberPoolDetails `json:"pools"`
}

// MemberPoolDetails defines model for MemberPoolDetails.
type MemberPoolDetails struct {

	// Int64, total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// Int64, total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Int64, total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`
	PoolShareFactor         string `json:"poolShareFactor"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64, Total Rune pooled in all pools
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64, Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NetworkFees defines model for NetworkFees.
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolLegacyDetail defines model for PoolLegacyDetail.
type PoolLegacyDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Int64, same as history/swaps:toAssetCount
	BuyAssetCount string `json:"buyAssetCount"`

	// Float, same as history/swaps:toRuneVolume/toRuneCount
	BuyTxAverage string `json:"buyTxAverage"`

	// Int64, same as history/swaps:toAssetVolume
	BuyVolume string `json:"buyVolume"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, same as assetDepth + runeDepth
	PoolDepth string `json:"poolDepth"`

	// Float, same as history/swaps:totalFees/totalCount
	PoolFeeAverage string `json:"poolFeeAverage"`

	// Int64, same as history/swaps:totalFees
	PoolFeesTotal string `json:"poolFeesTotal"`

	// Float, same as history/swaps:averageSlip
	PoolSlipAverage string `json:"poolSlipAverage"`

	// Float, same as history/swaps:totalVolume/totalCount
	PoolTxAverage string `json:"poolTxAverage"`

	// Int64, same as buyVolume + sellVolume
	PoolVolume string `json:"poolVolume"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// Int64, same as history/swaps:toRuneCount
	SellAssetCount string `json:"sellAssetCount"`

	// Float, same as history/swaps:toAssetVolume/toAssetCount
	SellTxAverage string `json:"sellTxAverage"`

	// Int64, same as history/swaps:toRuneVolume
	SellVolume string `json:"sellVolume"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64, Liquidity Units in the pool
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune
	Volume24h string `json:"volume24h"`
}

// Queue defines model for Queue.
type Queue struct {
	Outbound string `json:"outbound"`
	Swap     string `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Daily active users (unique addresses interacting)
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Daily transactions
	DailyTx string `json:"dailyTx"`

	// Monthly active users
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Monthly transactions
	MonthlyTx string `json:"monthlyTx"`

	// Total buying transactions
	TotalAssetBuys string `json:"totalAssetBuys"`

	// Total selling transactions
	TotalAssetSells string `json:"totalAssetSells"`

	// Total RUNE balances
	TotalDepth string `json:"totalDepth"`

	// Total staking transactions
	TotalStakeTx string `json:"totalStakeTx"`

	// Total staked (in RUNE Value)
	TotalStaked string `json:"totalStaked"`

	// Total transactions
	TotalTx string `json:"totalTx"`

	// Total unique swappers & members
	TotalUsers string `json:"totalUsers"`

	// Total (in RUNE Value) of all assets swapped since start
	TotalVolume string `json:"totalVolume"`

	// Total withdrawing transactions
	TotalWithdrawTx string `json:"totalWithdrawTx"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float, the average slip by swap. Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64, volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64, volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64, the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64, toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Int64 (10^8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), trade slip percentage
	TradeSlip string `json:"tradeSlip"`

	// Int64 (10^8), minimum output amount specified for the swap
	TradeTarget string `json:"tradeTarget"`
}

// Transaction defines model for Transaction.
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction memo
	Memo string `json:"memo"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolLegacyResponse defines model for PoolLegacyResponse.
type PoolLegacyResponse PoolLegacyDetail

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Address of sender or recipient of any in/out transaction related to the action
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action (swap, addLiquidity, withdraw, donate, refund)
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *string `json:"status,omitempty"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AGfuTLxZ7/Pnz5//JwAA//87b25aCqUAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
