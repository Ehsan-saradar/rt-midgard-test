// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Action defines model for Action.
type Action struct {

	// Int64, Unix timestamp for when the action was registered
	Date string `json:"date"`

	// Int64, block height at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status string `json:"status"`

	// Type of action
	Type string `json:"type"`
}

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64, Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64, Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64, Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64, Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64, Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64, Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64, Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64, Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64, Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64, Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Coin defines model for Coin.
type Coin struct {

	// Int64 (10^8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64, the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Int64, the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64, Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64, Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64, System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64, Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistoryItemPool defines model for EarningsHistoryItemPool.
type EarningsHistoryItemPool struct {

	// Int64, Share of earnings sent to the pool during the time interval
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses struct {
	Current []InboundAddressesItem `json:"current"`
}

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string `json:"address"`
	Chain   string `json:"chain"`

	// indicate whether this chain has halted
	Halted bool   `json:"halted"`
	PubKey string `json:"pub_key"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                  int64 `json:"AsgardSize"`
	BadValidatorRate            int64 `json:"BadValidatorRate"`
	BlocksPerYear               int64 `json:"BlocksPerYear"`
	ChurnInterval               int64 `json:"ChurnInterval"`
	ChurnRetryInterval          int64 `json:"ChurnRetryInterval"`
	CliTxCost                   int64 `json:"CliTxCost"`
	DesiredValidatorSet         int64 `json:"DesiredValidatorSet"`
	DoubleSignMaxAge            int64 `json:"DoubleSignMaxAge"`
	EmissionCurve               int64 `json:"EmissionCurve"`
	FailKeygenSlashPoints       int64 `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints      int64 `json:"FailKeysignSlashPoints"`
	FundMigrationInterval       int64 `json:"FundMigrationInterval"`
	JailTimeKeygen              int64 `json:"JailTimeKeygen"`
	JailTimeKeysign             int64 `json:"JailTimeKeysign"`
	LackOfObservationPenalty    int64 `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks       int64 `json:"LiquidityLockUpBlocks"`
	MinimumBondInRune           int64 `json:"MinimumBondInRune"`
	MinimumNodesForBFT          int64 `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil    int64 `json:"MinimumNodesForYggdrasil"`
	NativeChainGasFee           int64 `json:"NativeChainGasFee"`
	NewPoolCycle                int64 `json:"NewPoolCycle"`
	ObservationDelayFlexibility int64 `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints          int64 `json:"ObserveSlashPoints"`
	OldValidatorRate            int64 `json:"OldValidatorRate"`
	OutboundTransactionFee      int64 `json:"OutboundTransactionFee"`
	SigningTransactionPeriod    int64 `json:"SigningTransactionPeriod"`
	YggFundLimit                int64 `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock struct {
	Current []LastblockItem `json:"current"`
}

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn string `json:"last_observed_in"`
	LastSignedOut  string `json:"last_signed_out"`
	Thorchain      string `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64 (10^8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64 (10^8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64 (10^8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64 (10^8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64 (10^8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64 (10^8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64, total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64, total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64, total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`
	PoolShareFactor         string `json:"poolShareFactor"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64, Total Rune pooled in all pools
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64, Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NetworkFees defines model for NetworkFees.
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolLegacyDetail defines model for PoolLegacyDetail.
type PoolLegacyDetail struct {
	Asset string `json:"asset"`

	// same as assetDepth from pool/stats
	AssetDepth string `json:"assetDepth"`

	// same as addAssetLiquidityVolume from pool/stats
	AssetStakedTotal string `json:"assetStakedTotal"`

	// same as toAssetCount from pool/stats
	BuyAssetCount string `json:"buyAssetCount"`

	// same as toAssetFees / toAssetCount from pool/stats
	BuyFeeAverage string `json:"buyFeeAverage"`

	// same as toAssetFees from pool/stats
	BuyFeesTotal string `json:"buyFeesTotal"`

	// same as toAssetAverageSlip from pool/stats
	BuySlipAverage string `json:"buySlipAverage"`

	// same as toAssetVolume / toAssetCount from pool/stats
	BuyTxAverage string `json:"buyTxAverage"`

	// same as toAssetVolume from pool/stats
	BuyVolume string `json:"buyVolume"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// same as 2*runeDepth from pool/stats
	PoolDepth string `json:"poolDepth"`

	// same as totalFees / swapCount from pool/stats
	PoolFeeAverage string `json:"poolFeeAverage"`

	// same as totalFees from pool/stats
	PoolFeesTotal string `json:"poolFeesTotal"`

	// same as averageSlip from pool/stats
	PoolSlipAverage string `json:"poolSlipAverage"`

	// same as addLiquidityVolume from pool/stats
	PoolStakedTotal string `json:"poolStakedTotal"`

	// same as swapVolume / swapCount from pool/stats
	PoolTxAverage string `json:"poolTxAverage"`

	// same as units from pool/stats
	PoolUnits string `json:"poolUnits"`

	// Int64, same as buyVolume + sellVolume
	PoolVolume string `json:"poolVolume"`

	// same as assetPrice from pool/stats
	Price string `json:"price"`

	// same as runeDepth from pool/stats
	RuneDepth string `json:"runeDepth"`

	// same as addRuneLiquidityVolume from pool/stats
	RuneStakedTotal string `json:"runeStakedTotal"`

	// same as toRuneCount from pool/stats
	SellAssetCount string `json:"sellAssetCount"`

	// same as toRuneFees / toRuneCount from pool/stats
	SellFeeAverage string `json:"sellFeeAverage"`

	// same as toRuneFees from pool/stats
	SellFeesTotal string `json:"sellFeesTotal"`

	// same as toRuneAverageSlip from pool/stats
	SellSlipAverage string `json:"sellSlipAverage"`

	// same as toRuneVolume / toRuneCount from pool/stats
	SellTxAverage string `json:"sellTxAverage"`

	// same as toRuneVolume from pool/stats
	SellVolume string `json:"sellVolume"`

	// same as addLiquidityCount from pool/stats
	StakeTxCount string `json:"stakeTxCount"`

	// same as uniqueMemberCount from pool/stats
	StakersCount string `json:"stakersCount"`

	// same as addLiquidityCount + withdrawCount from pool/stats
	StakingTxCount string `json:"stakingTxCount"`

	// same as status from pool/stats
	Status string `json:"status"`

	// Int64, same as history/swaps:uniqueSwapperCount
	SwappersCount string `json:"swappersCount"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64, same as swapVolume pool/stats?period=24h
	Volume24h string `json:"volume24h"`

	// same as withdrawCount from pool/stats
	WithdrawTxCount string `json:"withdrawTxCount"`
}

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64, same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64, same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`
	Asset                  string `json:"asset"`

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64, same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Float, same as history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64, same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64, same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float, same as history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64, same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64, same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Int64, number of unique adresses that initiated swaps transactions in the period.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Liquidity Units in the pool
	Units string `json:"units"`

	// Int64, same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64, same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64, same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// Queue defines model for Queue.
type Queue struct {
	Outbound string `json:"outbound"`
	Swap     string `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64 (10^8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, unique users (addresses) initiating swaps in the last 24 hours.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64, unique users (addresses) initiating swaps in the last 30 days.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64 (10^8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Int64, number of swaps since beginning.
	SwapCount string `json:"swapCount"`

	// Int64, number of swaps in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64, total volume of swaps denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Int64, unique users (addresses) initiating swaps since beginning.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64 (10^8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float, the average slip by swap. Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float, the average slip for swaps to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64, the fees collected from swaps to asset denoted in rune
	ToAssetFees string `json:"toAssetFees"`

	// Int64, volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float, the average slip for swaps to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64, the fees collected from swaps to rune
	ToRuneFees string `json:"toRuneFees"`

	// Int64, volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64, the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64, toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Int64 (10^8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), trade slip percentage
	TradeSlip string `json:"tradeSlip"`

	// Int64 (10^8), minimum output amount specified for the swap
	TradeTarget string `json:"tradeTarget"`
}

// Transaction defines model for Transaction.
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolLegacyResponse defines model for PoolLegacyResponse.
type PoolLegacyResponse PoolLegacyDetail

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Address of sender or recipient of any in/out transaction related to the action
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action (swap, addLiquidity, withdraw, donate, refund)
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *string `json:"period,omitempty"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *string `json:"status,omitempty"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP//9qUJhFXFAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
