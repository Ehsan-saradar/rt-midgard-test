// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Action defines model for Action.
type Action struct {

	// Int64, Unix timestamp for when the action was registered
	Date string `json:"date"`

	// Int64, block height at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status string `json:"status"`

	// Type of action
	Type string `json:"type"`
}

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64, Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64, Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64, Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64, Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64, Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64, Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64, Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64, Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64, Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64, Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Coin defines model for Coin.
type Coin struct {

	// Int64 (10^8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64, the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Int64, the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64, Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64, Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64, System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64, Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistoryItemPool defines model for EarningsHistoryItemPool.
type EarningsHistoryItemPool struct {

	// Int64, Share of earnings sent to the pool during the time interval
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string `json:"address"`
	Chain   string `json:"chain"`

	// indicate whether this chain has halted
	Halted bool   `json:"halted"`
	PubKey string `json:"pub_key"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                  int64 `json:"AsgardSize"`
	BadValidatorRate            int64 `json:"BadValidatorRate"`
	BlocksPerYear               int64 `json:"BlocksPerYear"`
	ChurnInterval               int64 `json:"ChurnInterval"`
	ChurnRetryInterval          int64 `json:"ChurnRetryInterval"`
	CliTxCost                   int64 `json:"CliTxCost"`
	DesiredValidatorSet         int64 `json:"DesiredValidatorSet"`
	DoubleSignMaxAge            int64 `json:"DoubleSignMaxAge"`
	EmissionCurve               int64 `json:"EmissionCurve"`
	FailKeygenSlashPoints       int64 `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints      int64 `json:"FailKeysignSlashPoints"`
	FundMigrationInterval       int64 `json:"FundMigrationInterval"`
	JailTimeKeygen              int64 `json:"JailTimeKeygen"`
	JailTimeKeysign             int64 `json:"JailTimeKeysign"`
	LackOfObservationPenalty    int64 `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks       int64 `json:"LiquidityLockUpBlocks"`
	MinimumBondInRune           int64 `json:"MinimumBondInRune"`
	MinimumNodesForBFT          int64 `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil    int64 `json:"MinimumNodesForYggdrasil"`
	NativeChainGasFee           int64 `json:"NativeChainGasFee"`
	NewPoolCycle                int64 `json:"NewPoolCycle"`
	ObservationDelayFlexibility int64 `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints          int64 `json:"ObserveSlashPoints"`
	OldValidatorRate            int64 `json:"OldValidatorRate"`
	OutboundTransactionFee      int64 `json:"OutboundTransactionFee"`
	SigningTransactionPeriod    int64 `json:"SigningTransactionPeriod"`
	YggFundLimit                int64 `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock struct {
	Current []LastblockItem `json:"current"`
}

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn string `json:"last_observed_in"`
	LastSignedOut  string `json:"last_signed_out"`
	Thorchain      string `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64 (10^8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64 (10^8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64 (10^8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64 (10^8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64 (10^8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64 (10^8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64, total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64, total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64, total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`
	PoolShareFactor         string `json:"poolShareFactor"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64, Total Rune pooled in all pools
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64, Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NetworkFees defines model for NetworkFees.
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolLegacyDetail defines model for PoolLegacyDetail.
type PoolLegacyDetail struct {
	Asset string `json:"asset"`

	// same as assetDepth from pool/stats
	AssetDepth string `json:"assetDepth"`

	// same as addAssetLiquidityVolume from pool/stats
	AssetStakedTotal string `json:"assetStakedTotal"`

	// same as toAssetCount from pool/stats
	BuyAssetCount string `json:"buyAssetCount"`

	// same as toAssetFees / toAssetCount from pool/stats
	BuyFeeAverage string `json:"buyFeeAverage"`

	// same as toAssetFees from pool/stats
	BuyFeesTotal string `json:"buyFeesTotal"`

	// same as toAssetAverageSlip from pool/stats
	BuySlipAverage string `json:"buySlipAverage"`

	// same as toAssetVolume / toAssetCount from pool/stats
	BuyTxAverage string `json:"buyTxAverage"`

	// same as toAssetVolume from pool/stats
	BuyVolume string `json:"buyVolume"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// same as 2*runeDepth from pool/stats
	PoolDepth string `json:"poolDepth"`

	// same as totalFees / swapCount from pool/stats
	PoolFeeAverage string `json:"poolFeeAverage"`

	// same as totalFees from pool/stats
	PoolFeesTotal string `json:"poolFeesTotal"`

	// same as averageSlip from pool/stats
	PoolSlipAverage string `json:"poolSlipAverage"`

	// same as addLiquidityVolume from pool/stats
	PoolStakedTotal string `json:"poolStakedTotal"`

	// same as swapVolume / swapCount from pool/stats
	PoolTxAverage string `json:"poolTxAverage"`

	// same as units from pool/stats
	PoolUnits string `json:"poolUnits"`

	// Int64, same as buyVolume + sellVolume
	PoolVolume string `json:"poolVolume"`

	// same as assetPrice from pool/stats
	Price string `json:"price"`

	// same as runeDepth from pool/stats
	RuneDepth string `json:"runeDepth"`

	// same as addRuneLiquidityVolume from pool/stats
	RuneStakedTotal string `json:"runeStakedTotal"`

	// same as toRuneCount from pool/stats
	SellAssetCount string `json:"sellAssetCount"`

	// same as toRuneFees / toRuneCount from pool/stats
	SellFeeAverage string `json:"sellFeeAverage"`

	// same as toRuneFees from pool/stats
	SellFeesTotal string `json:"sellFeesTotal"`

	// same as toRuneAverageSlip from pool/stats
	SellSlipAverage string `json:"sellSlipAverage"`

	// same as toRuneVolume / toRuneCount from pool/stats
	SellTxAverage string `json:"sellTxAverage"`

	// same as toRuneVolume from pool/stats
	SellVolume string `json:"sellVolume"`

	// same as addLiquidityCount from pool/stats
	StakeTxCount string `json:"stakeTxCount"`

	// same as uniqueMemberCount from pool/stats
	StakersCount string `json:"stakersCount"`

	// same as addLiquidityCount + withdrawCount from pool/stats
	StakingTxCount string `json:"stakingTxCount"`

	// same as status from pool/stats
	Status string `json:"status"`

	// Int64, same as history/swaps:uniqueSwapperCount
	SwappersCount string `json:"swappersCount"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64, same as swapVolume pool/stats?period=24h
	Volume24h string `json:"volume24h"`

	// same as withdrawCount from pool/stats
	WithdrawTxCount string `json:"withdrawTxCount"`
}

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64, same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64, same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`
	Asset                  string `json:"asset"`

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64, same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64, same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64, same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64, same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64, same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Int64, number of unique adresses that initiated swaps transactions in the period.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Liquidity Units in the pool
	Units string `json:"units"`

	// Int64, same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64, same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64, same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// Queue defines model for Queue.
type Queue struct {
	Outbound string `json:"outbound"`
	Swap     string `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64 (10^8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, unique users (addresses) initiating swaps in the last 24 hours.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64, unique users (addresses) initiating swaps in the last 30 days.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64 (10^8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps since beginning.
	SwapCount string `json:"swapCount"`

	// Int64, number of swaps in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64, total volume of swaps denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Int64, unique users (addresses) initiating swaps since beginning.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64 (10^8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip by swap.
	// Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64, the fees collected from swaps to asset denoted in rune
	ToAssetFees string `json:"toAssetFees"`

	// Int64, volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64, the fees collected from swaps to rune
	ToRuneFees string `json:"toRuneFees"`

	// Int64, volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64, the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64, toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Int64 (10^8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), trade slip percentage
	TradeSlip string `json:"tradeSlip"`

	// Int64 (10^8), minimum output amount specified for the swap
	TradeTarget string `json:"tradeTarget"`
}

// Transaction defines model for Transaction.
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolLegacyResponse defines model for PoolLegacyResponse.
type PoolLegacyResponse PoolLegacyDetail

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Address of sender or recipient of any in/out transaction related to the action
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action (swap, addLiquidity, withdraw, donate, refund)
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *string `json:"period,omitempty"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *string `json:"status,omitempty"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
