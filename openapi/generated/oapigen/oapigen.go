// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// AssetSummary defines model for AssetSummary.
type AssetSummary struct {
	Asset string `json:"asset"`

	// Int64, unix timestamp (second).
	DateCreated string `json:"dateCreated"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	Price string `json:"price"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64, Average bond of active nodes.
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64, Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64, Maxinum bond of active nodes.
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64, Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64, Median bond of active nodes.
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64, Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64, Minumum bond of active nodes.
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64, Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64, Total bond of active nodes.
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64, Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {
	StakeArray  []string `json:"stakeArray"`
	TotalStaked string   `json:"totalStaked"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`
	BondingROI string `json:"bondingROI"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks).
	PoolActivationCountdown string  `json:"poolActivationCountdown"`
	PoolShareFactor         string  `json:"poolShareFactor"`
	StakingROI              *string `json:"stakingROI,omitempty"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64, Total Rune pooled in all pools.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64, Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NodeKey defines model for NodeKey.
type NodeKey struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	Price string `json:"price"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Enabled, Bootstrap.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// TxDetails defines model for TxDetails.
type TxDetails struct {

	// Int64, Unix timestamp.
	Date   string `json:"date"`
	Events Event  `json:"events"`
	Height string `json:"height"`
	In     Tx     `json:"in"`
	Out    []Tx   `json:"out"`
	Pool   string `json:"pool"`
	Status string `json:"status"`
	Type   string `json:"type"`
}

// Volume defines model for Volume.
type Volume struct {

	// Sum of "rune_amount" of buy swap events.
	BuyVolume string `json:"buyVolume"`

	// Sum of "rune_amount" of sell swap events.
	SellVolume string `json:"sellVolume"`

	// Int64, The beginning time of bucket in unix timestamp.
	Time string `json:"time"`

	// buyVolume + sellVolume
	TotalVolume string `json:"totalVolume"`
}

// Coin defines model for coin.
type Coin struct {
	Amount string `json:"amount"`
	Asset  string `json:"asset"`
}

// Coins defines model for coins.
type Coins []Coin

// Event defines model for event.
type Event struct {
	Fee        string `json:"fee"`
	Slip       string `json:"slip"`
	StakeUnits string `json:"stakeUnits"`
}

// Option defines model for option.
type Option struct {
	Asymmetry           string `json:"asymmetry"`
	PriceTarget         string `json:"priceTarget"`
	WithdrawBasisPoints string `json:"withdrawBasisPoints"`
}

// Tx defines model for tx.
type Tx struct {
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`
	Memo    string `json:"memo"`
	Options Option `json:"options"`
	TxID    string `json:"txID"`
}

// AssetsSummaryResponse defines model for AssetsSummaryResponse.
type AssetsSummaryResponse []AssetSummary

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {

	// True means healthy, connected to database.
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain.
	InSync bool `json:"inSync"`

	// Int64, the current block count.
	ScannerHeight string `json:"scannerHeight"`
}

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse []string

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodeKeyResponse defines model for NodeKeyResponse.
type NodeKeyResponse []NodeKey

// PoolDetailResponse defines model for PoolDetailResponse.
type PoolDetailResponse PoolDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse []string

// TxResponse defines model for TxResponse.
type TxResponse struct {

	// Int64, count of txs matching the filters.
	Count string      `json:"count"`
	Txs   []TxDetails `json:"txs"`
}

// VolumeResponse defines model for VolumeResponse.
type VolumeResponse []Volume

// GetAssetInfoParams defines parameters for GetAssetInfo.
type GetAssetInfoParams struct {

	// One or more comma separated unique asset (CHAIN.SYMBOL)
	Asset string `json:"asset"`
}

// GetTotalVolumeParams defines parameters for GetTotalVolume.
type GetTotalVolumeParams struct {

	// Return volume for this single pool. Returns volume for all pools if missing.
	Pool *int64 `json:"pool,omitempty"`

	// Interval of calculations
	Interval string `json:"interval"`

	// Start time of the query as unix timestamp
	From int64 `json:"from"`

	// End time of the query as unix timestamp
	To int64 `json:"to"`
}

// GetTxDetailsParams defines parameters for GetTxDetails.
type GetTxDetailsParams struct {

	// Address of sender or recipient of any in/out tx in event
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx in event
	Txid *string `json:"txid,omitempty"`

	// Any asset used in event (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of event
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"wTcAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
