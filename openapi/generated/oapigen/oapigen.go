// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {

	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Represents a digital currency amount
type Coin struct {

	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {

	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string  `json:"address"`
	Chain   string  `json:"chain"`
	GasRate *string `json:"gas_rate,omitempty"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                    int64  `json:"AsgardSize"`
	BadValidatorRate              int64  `json:"BadValidatorRate"`
	BadValidatorRedline           int    `json:"BadValidatorRedline"`
	BlocksPerYear                 int64  `json:"BlocksPerYear"`
	ChurnInterval                 int64  `json:"ChurnInterval"`
	ChurnRetryInterval            int64  `json:"ChurnRetryInterval"`
	DesiredValidatorSet           int64  `json:"DesiredValidatorSet"`
	DoubleSignMaxAge              int64  `json:"DoubleSignMaxAge"`
	EmissionCurve                 int64  `json:"EmissionCurve"`
	FailKeygenSlashPoints         int64  `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints        int64  `json:"FailKeysignSlashPoints"`
	FullImpLossProtectionBlocks   int64  `json:"FullImpLossProtectionBlocks"`
	FundMigrationInterval         int64  `json:"FundMigrationInterval"`
	IncentiveCurve                int64  `json:"IncentiveCurve"`
	JailTimeKeygen                int64  `json:"JailTimeKeygen"`
	JailTimeKeysign               int64  `json:"JailTimeKeysign"`
	LackOfObservationPenalty      int64  `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks         int64  `json:"LiquidityLockUpBlocks"`
	MaxAvailablePools             int64  `json:"MaxAvailablePools"`
	MaxSwapsPerBlock              int64  `json:"MaxSwapsPerBlock"`
	MinRunePoolDepth              int64  `json:"MinRunePoolDepth"`
	MinSlashPointsForBadValidator int64  `json:"MinSlashPointsForBadValidator"`
	MinSwapsPerBlock              int64  `json:"MinSwapsPerBlock"`
	MinimumBondInRune             int64  `json:"MinimumBondInRune"`
	MinimumNodesForBFT            int64  `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil      int64  `json:"MinimumNodesForYggdrasil"`
	NativeTransactionFee          int64  `json:"NativeTransactionFee"`
	NewPoolCycle                  *int64 `json:"NewPoolCycle,omitempty"`
	ObservationDelayFlexibility   int64  `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints            int64  `json:"ObserveSlashPoints"`
	OldValidatorRate              int64  `json:"OldValidatorRate"`
	OutboundTransactionFee        int64  `json:"OutboundTransactionFee"`
	PoolCycle                     int64  `json:"PoolCycle"`
	SigningTransactionPeriod      int64  `json:"SigningTransactionPeriod"`
	VirtualMultSynths             int64  `json:"VirtualMultSynths"`
	YggFundLimit                  int64  `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock []LastblockItem

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn int64  `json:"last_observed_in"`
	LastSignedOut  int64  `json:"last_signed_out"`
	Thorchain      int64  `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`
	PoolShareFactor         string `json:"poolShareFactor"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), Total Rune pooled in all pools
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// ObservedChain defines model for ObservedChain.
type ObservedChain struct {
	Chain  string `json:"chain"`
	Height int    `json:"height"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`
	Asset                  string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Int64, number of unique adresses that initiated swaps transactions in the period.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// PreflightStatus defines model for PreflightStatus.
type PreflightStatus struct {
	Code   int    `json:"code"`
	Reason string `json:"reason"`
	Status string `json:"status"`
}

// ProxiedNode defines model for ProxiedNode.
type ProxiedNode struct {
	ActiveBlockHeight int    `json:"active_block_height"`
	Bond              string `json:"bond"`
	BondAddress       string `json:"bond_address"`
	CurrentAward      string `json:"current_award"`
	ForcedToLeave     bool   `json:"forced_to_leave"`
	IpAddress         string `json:"ip_address"`
	Jail              struct {
		NodeAddress *string `json:"node_address,omitempty"`
	} `json:"jail"`
	LeaveHeight     int             `json:"leave_height"`
	NodeAddress     string          `json:"node_address"`
	ObserveChains   []ObservedChain `json:"observe_chains"`
	PreflightStatus PreflightStatus `json:"preflight_status"`
	PubKeySet       struct {
		Ed25519   string `json:"ed25519"`
		Secp256k1 string `json:"secp256k1"`
	} `json:"pub_key_set"`
	RequestedToLeave    bool     `json:"requested_to_leave"`
	SignerMembership    []string `json:"signer_membership"`
	SlashPoints         int      `json:"slash_points"`
	Status              string   `json:"status"`
	StatusSince         int      `json:"status_since"`
	ValidatorConsPubKey string   `json:"validator_cons_pub_key"`
	Version             string   `json:"version"`
}

// ProxiedNodes defines model for ProxiedNodes.
type ProxiedNodes []ProxiedNode

// Queue defines model for Queue.
type Queue struct {
	Internal int `json:"internal"`
	Outbound int `json:"outbound"`
	Swap     int `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, unique users (addresses) initiating swaps in the last 24 hours.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, unique users (addresses) initiating swaps in the last 30 days.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Int64, unique users (addresses) initiating swaps since beginning.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {

	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {

	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at the end of the interval
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ProxiedNodesResponse defines model for ProxiedNodesResponse.
type ProxiedNodesResponse ProxiedNodes

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {

	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
