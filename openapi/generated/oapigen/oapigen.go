// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {

	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Represents a digital currency amount
type Coin struct {

	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {

	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string  `json:"address"`
	Chain   string  `json:"chain"`
	GasRate *string `json:"gas_rate,omitempty"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                    int64  `json:"AsgardSize"`
	BadValidatorRate              int64  `json:"BadValidatorRate"`
	BadValidatorRedline           int    `json:"BadValidatorRedline"`
	BlocksPerYear                 int64  `json:"BlocksPerYear"`
	ChurnInterval                 int64  `json:"ChurnInterval"`
	ChurnRetryInterval            int64  `json:"ChurnRetryInterval"`
	DesiredValidatorSet           int64  `json:"DesiredValidatorSet"`
	DoubleSignMaxAge              int64  `json:"DoubleSignMaxAge"`
	EmissionCurve                 int64  `json:"EmissionCurve"`
	FailKeygenSlashPoints         int64  `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints        int64  `json:"FailKeysignSlashPoints"`
	FullImpLossProtectionBlocks   int64  `json:"FullImpLossProtectionBlocks"`
	FundMigrationInterval         int64  `json:"FundMigrationInterval"`
	IncentiveCurve                int64  `json:"IncentiveCurve"`
	JailTimeKeygen                int64  `json:"JailTimeKeygen"`
	JailTimeKeysign               int64  `json:"JailTimeKeysign"`
	LackOfObservationPenalty      int64  `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks         int64  `json:"LiquidityLockUpBlocks"`
	MaxAvailablePools             int64  `json:"MaxAvailablePools"`
	MaxSwapsPerBlock              int64  `json:"MaxSwapsPerBlock"`
	MinRunePoolDepth              int64  `json:"MinRunePoolDepth"`
	MinSlashPointsForBadValidator int64  `json:"MinSlashPointsForBadValidator"`
	MinSwapsPerBlock              int64  `json:"MinSwapsPerBlock"`
	MinimumBondInRune             int64  `json:"MinimumBondInRune"`
	MinimumNodesForBFT            int64  `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil      int64  `json:"MinimumNodesForYggdrasil"`
	NativeTransactionFee          int64  `json:"NativeTransactionFee"`
	NewPoolCycle                  *int64 `json:"NewPoolCycle,omitempty"`
	ObservationDelayFlexibility   int64  `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints            int64  `json:"ObserveSlashPoints"`
	OldValidatorRate              int64  `json:"OldValidatorRate"`
	OutboundTransactionFee        int64  `json:"OutboundTransactionFee"`
	PoolCycle                     int64  `json:"PoolCycle"`
	SigningTransactionPeriod      int64  `json:"SigningTransactionPeriod"`
	VirtualMultSynths             int64  `json:"VirtualMultSynths"`
	YggFundLimit                  int64  `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock []LastblockItem

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn int64  `json:"last_observed_in"`
	LastSignedOut  int64  `json:"last_signed_out"`
	Thorchain      int64  `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`
	PoolShareFactor         string `json:"poolShareFactor"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), Total Rune pooled in all pools
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// ObservedChain defines model for ObservedChain.
type ObservedChain struct {
	Chain  string `json:"chain"`
	Height int    `json:"height"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolLegacyDetail defines model for PoolLegacyDetail.
type PoolLegacyDetail struct {
	Asset string `json:"asset"`

	// same as assetDepth from pool/stats
	AssetDepth string `json:"assetDepth"`

	// same as addAssetLiquidityVolume from pool/stats
	AssetStakedTotal string `json:"assetStakedTotal"`

	// same as toAssetCount from pool/stats
	BuyAssetCount string `json:"buyAssetCount"`

	// same as toAssetFees / toAssetCount from pool/stats
	BuyFeeAverage string `json:"buyFeeAverage"`

	// same as toAssetFees from pool/stats
	BuyFeesTotal string `json:"buyFeesTotal"`

	// same as toAssetAverageSlip from pool/stats
	BuySlipAverage string `json:"buySlipAverage"`

	// same as toAssetVolume / toAssetCount from pool/stats
	BuyTxAverage string `json:"buyTxAverage"`

	// same as toAssetVolume from pool/stats
	BuyVolume string `json:"buyVolume"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// same as 2*runeDepth from pool/stats
	PoolDepth string `json:"poolDepth"`

	// same as totalFees / swapCount from pool/stats
	PoolFeeAverage string `json:"poolFeeAverage"`

	// same as totalFees from pool/stats
	PoolFeesTotal string `json:"poolFeesTotal"`

	// same as averageSlip from pool/stats
	PoolSlipAverage string `json:"poolSlipAverage"`

	// same as addLiquidityVolume from pool/stats
	PoolStakedTotal string `json:"poolStakedTotal"`

	// same as swapVolume / swapCount from pool/stats
	PoolTxAverage string `json:"poolTxAverage"`

	// same as units from pool/stats
	PoolUnits string `json:"poolUnits"`

	// Int64(e8), same as buyVolume + sellVolume
	PoolVolume string `json:"poolVolume"`

	// same as assetPrice from pool/stats
	Price string `json:"price"`

	// same as runeDepth from pool/stats
	RuneDepth string `json:"runeDepth"`

	// same as addRuneLiquidityVolume from pool/stats
	RuneStakedTotal string `json:"runeStakedTotal"`

	// same as toRuneCount from pool/stats
	SellAssetCount string `json:"sellAssetCount"`

	// same as toRuneFees / toRuneCount from pool/stats
	SellFeeAverage string `json:"sellFeeAverage"`

	// same as toRuneFees from pool/stats
	SellFeesTotal string `json:"sellFeesTotal"`

	// same as toRuneAverageSlip from pool/stats
	SellSlipAverage string `json:"sellSlipAverage"`

	// same as toRuneVolume / toRuneCount from pool/stats
	SellTxAverage string `json:"sellTxAverage"`

	// same as toRuneVolume from pool/stats
	SellVolume string `json:"sellVolume"`

	// same as addLiquidityCount from pool/stats
	StakeTxCount string `json:"stakeTxCount"`

	// same as uniqueMemberCount from pool/stats
	StakersCount string `json:"stakersCount"`

	// same as addLiquidityCount + withdrawCount from pool/stats
	StakingTxCount string `json:"stakingTxCount"`

	// same as status from pool/stats
	Status string `json:"status"`

	// Int64, same as history/swaps:uniqueSwapperCount
	SwappersCount string `json:"swappersCount"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64(e8), same as swapVolume pool/stats?period=24h
	Volume24h string `json:"volume24h"`

	// same as withdrawCount from pool/stats
	WithdrawTxCount string `json:"withdrawTxCount"`
}

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`
	Asset                  string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Int64, number of unique adresses that initiated swaps transactions in the period.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Liquidity Units in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// PreflightStatus defines model for PreflightStatus.
type PreflightStatus struct {
	Code   int    `json:"code"`
	Reason string `json:"reason"`
	Status string `json:"status"`
}

// ProxiedNode defines model for ProxiedNode.
type ProxiedNode struct {
	ActiveBlockHeight int    `json:"active_block_height"`
	Bond              string `json:"bond"`
	BondAddress       string `json:"bond_address"`
	CurrentAward      string `json:"current_award"`
	ForcedToLeave     bool   `json:"forced_to_leave"`
	IpAddress         string `json:"ip_address"`
	Jail              struct {
		NodeAddress *string `json:"node_address,omitempty"`
	} `json:"jail"`
	LeaveHeight     int             `json:"leave_height"`
	NodeAddress     string          `json:"node_address"`
	ObserveChains   []ObservedChain `json:"observe_chains"`
	PreflightStatus PreflightStatus `json:"preflight_status"`
	PubKeySet       struct {
		Ed25519   string `json:"ed25519"`
		Secp256k1 string `json:"secp256k1"`
	} `json:"pub_key_set"`
	RequestedToLeave    bool     `json:"requested_to_leave"`
	SignerMembership    []string `json:"signer_membership"`
	SlashPoints         int      `json:"slash_points"`
	Status              string   `json:"status"`
	StatusSince         int      `json:"status_since"`
	ValidatorConsPubKey string   `json:"validator_cons_pub_key"`
	Version             string   `json:"version"`
}

// ProxiedNodes defines model for ProxiedNodes.
type ProxiedNodes []ProxiedNode

// Queue defines model for Queue.
type Queue struct {
	Internal int `json:"internal"`
	Outbound int `json:"outbound"`
	Swap     int `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, unique users (addresses) initiating swaps in the last 24 hours.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, unique users (addresses) initiating swaps in the last 30 days.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Int64, unique users (addresses) initiating swaps since beginning.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip by swap.
	// Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps to asset denoted in rune
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps to rune
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64(e8), toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {

	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {

	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at the end of the interval
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolLegacyResponse defines model for PoolLegacyResponse.
type PoolLegacyResponse PoolLegacyDetail

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ProxiedNodesResponse defines model for ProxiedNodesResponse.
type ProxiedNodesResponse ProxiedNodes

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {

	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9/XIbN/Lgq6B4d7VyMqFI6stWVWpPsuxffD9/6CwnV6lVTgFnQBLWDDAaYEgxKb/W",
	"vcC92BUawHxihiAt5TaJ9o+NzAEajUaj0d3obvw+CHmSckaYFIPT3wcZESlngsA/zkJJORMfzW/qp5Az",
	"SZhUf+I0jWmIVZP9z4Iz9ZsIFyTB6q804ynJJNWQsIak/qSSJPDHf83IbHA6+C/7JQb7ur/Y1yMPvgQD",
	"uU7J4HSAswyv1b9DnuvhIyLCjKbQ7nTwhsnjwwCxPJmSDPEZyojIYylQgmW4oGyO5IKgOV0ShmY0liQT",
	"w0EBXciMsvngy5dgkJG7nGYkGpz+y4wVFNj/UnTg088klIMvqkcdkY9E5hkTCDMEOCtcTH8045kLjS/B",
	"4CVnQmImd6N1HyULyC5kPy14xnhEUNEKWQYAtC5IKhc/UCF5tn5wzKrAXcjBd4RZhNKMhgQtbNNg8Apn",
	"jLK5eCzUGvBd2BHTpIrWDwTHcvHg2Giwfcy2gBZISCxzzWbvaDTHWaSwesOmPGfRWRRlRAjy8CzWHKCX",
	"096wCFqjM9O6znFvsZDTmIe3D45lAbkXvaJVAy16l9OIyvVjcVxzABeS/4vKRZThFY4FbIuIpFxQWWPB",
	"d0QJwAsiMY0ffqVr0F0oarmI1GCYqv2BYjsxlGZ8SSOSoQhLDEyKkUhJSGc0RAlALmfwWLg7sS4FdRyD",
	"gE5s22DwnsgVzx6eHQ3cDUdIm56mHxAR8OPRI2xpgLo9bmoHpfk0piG6JesCx0vO47dkjsOH3zclaM2V",
	"LpyvJJZaKnJGUMp5jFZULtBPY8RwQtl8aJF8FPS6EfvQomCkt1YNWYscTONRMATI29CvIJh4RIo5+e/M",
	"blVYxsg2DAaXGb+nJHqc7VAF3nt8QIv60fE/c5KTB8cIoPaiAi3qqHwkS5IJ8umHDx/f4+ThkWrA9zwh",
	"MIqpkGpNbUe1LYloHhFY6xdqIo+zFfQ2AJnlg/c85lMco/NXl1crnBbCTv3jsbSECmznRlV4gNESoCWP",
	"84QEaEYIKAsipmlVUbC0fixVoQHfj6QFA7hUBMUUgPlPbx+LviVo59biEsdW8KRyIQIk4acpZ5EIgMz6",
	"hyWOc4KUGkmikuhfAoNGxbhuW7LaWCxOApxwNtfnVUZiLEmEZIaZsDZp0LC0IyxJt3mMGUeSJkRInKRq",
	"yyltR+u7WKLVgoYL+MkgscJKmM2pkESZxC17ORgsCJ0vuu1x/fkhBqLMNYg2JaoEKanEKwMMAj+/w6cS",
	"ksv5kBCJYZ9v1DVNuy/BgOcO8nzI5R+MumJb0UYEDnFE2ZLHSxIhyjpGbq1HE762PV1rFKm9SASis+qK",
	"U4HUJGKiJswz9dVOnzuJgzOChKRxjFLCItDaggFheTI4/ddA5GGozoZgYD5WfDVNnJsYflqnpPTSVIGu",
	"cDoIBjiKCutsEAxWxgobBIOIM7XbgkFGZjlTbCtWVIYLx+ANz5JeDdOqIB5wueaYQG/kYoNVeK/thQoG",
	"ZxUc31WYtC4bClvsR0al6Ny0OFFHiCJJabzlqgfCQtA5KzlU20kINq/I42Kjl/2MjbrR1dZAzTXHc+0W",
	"WOEsEu25TcuvTn5VMrrncwraf8fnBq7VoWqAa2CcU+AsekdkRkPHDPCSZHhO1LmwJKplxwLtkefPAnSm",
	"W8PZY7l3SRADFdXB+wb6lcQsmq63Bi90v274Cb6nSZ54Yv8O31OWJ97YG+i+2L/TzbfAnkQUM1/kobE/",
	"7tDcG/U68M2YU7YN3RXVt6G7hu6NfAP8RuxBXfLE/VOha/lgDpB98a6D3oB1Qxo0pxA4NrKDwVwr59pF",
	"jpk4N7OLz5zr59xMbmHF4/L2oCWurpQYk6p3cfJ8VDq3+kbusTraB6czHAtSwJ5yHhPMWiTsBOVC6yV3",
	"qYIfSZoRoRQihFFE51QtaJhnGWHh2pxoLV3Z/NzHGVgIItEZNBw65apq0AZxBv0oQy9/OHvzfnj187vz",
	"D2+VRZPgzYehhhlY/Lqo4H+dBjRzKG09y6vW6gbsmI3Q64wCurq8OT707A3ErnXXVPHsfgWNq7dcdVrW",
	"cQlq82oO5SJ07ZaqRSXKJMmWOBbbXHa9KToZk2Kbzkq7a00SgAQVbDbN5E0Vby8WqvWWJHGxU6tNW8dR",
	"nA3Nencd2AmFFlrsJfUzmN9Ywt9Ey2v1p5165xa9zGjoUP5fxxzLwNwwqmPFjpXljAzRmyEZwp8WnX3T",
	"opAoPaP9eHXROSBMpTXoj1cXaG+KhTKC9HQjQlIiJHxRU3/mFEKERZ9o0m33fzLEUqa/GnCah7d6xJzR",
	"+9Ij4ILtaTQUkhtBu69YLkXubVnko1qi3YcUEmdyIwWnZE4Z+Km2p2Njw5YDlosXVHdHlQw1Dm4yWOBj",
	"OrUESGtjPiYH/VtQ10WW5jX/7uK9AWlrCd/sDwJ2FyHfiYivnHdi0hb1rmYOi3b+nkfkpVvLmilJqFbf",
	"2prldq4q9yjKMxu/A5zRt5GnDR/BJo3f3PRDe0QSKiWJthuQg7vJkqN3zKsFzoCxi9gRpbAiyXeYKPEa",
	"cC0kSRBlIU8ImhNGMtw3wSF6IxEV8EHkSd0DNCNEhx3UiPYQp5Edfsvz6CtpDi64rWhejPyaEB/uqtMu",
	"QCFnS5IZB+/HH9+/Uj/FMQm3ZboOX64lSHl7QnC40OehDT1rwt5VJlyai+mmXFCn1nbKDxzdvTpPz2E+",
	"vGYPeeJsw4leJ3qdZRryqbKL24LExehBXaI2qG35wudYsCvYIg/Qm9QYqYczHcr9W+9N0hAt5Vao6HH/",
	"EMgaw7uJQH0fV0yIMth4aA9+r+GKvrUy7VnXnnNc1oHmXo/rhJYuvdbjWALkzDloBdUeeNDpkjxDahx8",
	"SxiaZTxBe4zMsf5Q6r3imuGKN36KY8xCtX5U/kMgYcWhqB0NICeAN937SfHZwyysmmCnu642hJILHkvb",
	"GGwPVsSuZ86I+vNZiUOAxIKvWDcqjosaq3O/bWzmNlU651GufoVvXRvVxHq2VCm1E5WQdFxfZTlBCcFF",
	"GOgaThqmSS45Krq2/XBKm7xas9AH6hC9xrGwP5r4UqUt6Eu50MZZ56m9HQoXmDLnqCLEjJHsh/7LY4AB",
	"LjxplI7QbXQ31qwy4fpAxXRdlG9FsfpqzM2OXSqzs11bZzZRLlUv6mAaZnJ8Nzk6mR+PZHi/zA+j5SxO",
	"xW/z29XdwWF0tFwdp/OTyfF8duDaXXolaiDPP710tZxjcZOZEIKy8dHx5GjkvP7HsSQO3zo1t75otSBy",
	"QZR4pEIzBFpggUy/YKOnOBik+fTmlqzrCEm54FmaT8c4ilYsJeld9ILd3SVzvD5OPuej9d3JJJWf8zC5",
	"fYElXkmyPFwesuPVLSFH68nx3fMRCcP56P724MQp8HguSVYfc3T/Ijp8cXxBTp4/PziZHeHJ9Oz48OX0",
	"cPTqeBKOX7w+D8+PT2ZHR3hzYoHZGXZuQbHsBUndLFpzlbZ450yoPXlFf6sv38EoGBjPs1oZeXxYIqgO",
	"87kOvD3H0U84phGWPPvYZIHjHWCQKKasgYqzk9rb4pJkPxNcp/nxwXh88MJv6JeLPGPW3t0FdwDwkcjS",
	"at6FihdEqFUuqHClbwcKMOOJHxieT2NyRefsHb4/m9epODn0gvEqoUJQzl7m2bKxml79X2Ma/ydZzwm7",
	"irFYXHJquK6AczIZbQNJ0HknKD+yvM7j+E2SvuVCXGZcEgjZ0PxTp/Lh4Wg08kQuZ9E7Os8gYOxrGOgN",
	"CwlT+lib4GNPXP4HprEyHTTZGyC2haDIvQuItzi8/TD7MBWKEoool4ThWK53WK9CE3rLw9sfU8dK+aGk",
	"NsES0xhPY3Jprd9t5/UO31+tcKokDSCyEwzKlEKno5SNj3oHGJVd8JpnVam5K8AHmBhN8uScs+gNs7p3",
	"lX/1/7aBBcHQanqvP9WAHe4C5Of5PMqwoPEOguw9WEmVALnXxD09P2hkpZb/5TqM61COxs8P/UBU9tYF",
	"ifH6dUzu6ZTGtLHJjraARrok69gPSPz1p7+NavSgtB9AN50PDyae/dX5Sdm8gs8lySiPGge7H7CfaCZz",
	"HL/LY3m1ZnKxy/n183yujpu3NKFy65VuKJEVbc+hvLl1saay1VSbnFqQW6lx6ChNlaNLhehUCPoP+K6j",
	"unXyts7R9rHYc8p1nVquU8hxqDjOiE0i3yHBXQLZKVh7BGWH4OsXP05x4hAPnbu9umt7dqBrPzX2h8sE",
	"KrM4fc3zokeXXV5v0DKqXLbz+3Pn/QAW8oZr6kU3jU7jI087BqDoMNsbEztekZ4vvGAo67iN9/jo8Pn2",
	"Ysbaqq3ZtVGtDuxcvGaS6+4Xrk1QW9+4tgDsfOXajYo3izpxcXCqq53Lg3RWc1f+BKlAHr5U8HIKG7Pd",
	"d1F4zS4I49anmzOCcmFb6psdLC0c6NpxUVONrX/pWdmhSHvuwW7TWN4k4TMT/sMiE6Zjh3fQYG8DEZ51",
	"Y/ax6kv2xg5G9VquPzpqiCYpyRKs+Lx+ll9i2h+Lm+KsyCOwuRZqnpooJnVohQVK8ZpEaEpCnAt9e1eO",
	"iWIuxDVLi2E7SMBIf/gnI7JywxAuMJsTgfZWlUz87wqOeLbVJe6f+6Z0G16w1AKptK0wsp3ZVwojC6dP",
	"Gtk2vpKogLnlxmuzte9e96JG35BfIfgqTO8p+2o0dws/v7i4jhOtU3I6hb3rtHEzp3OFNsm0Fo2b/KSl",
	"TWPjuxSKepWN1vneEf3xlgpZZI1Walm0C3AIRCNlLs0oiXRmaXl5Xd5DeGkuGlV3MIgz5a17vjYewRFT",
	"cBZFJPIVGWoKZYYaSMXp2tYX6YrXPStv3VwX/IYqKFeyd7qu5L51QrTFWpg33uXehtt9P+wjLMlrmole",
	"GgXox5qQLgIWZqqnlh8mla9UJiirkLBraGU77TSyMh12HdgzIhmI18xglAss0ZTE3MrO3pV0B30oTkUZ",
	"EYWaAmEyGZmprSV512Hvy8U6BmQ7Jjbw3Tys5fhWLKy6bMPBgPMODOyOtqjOprFBW6tfpW1QFRfNSbT2",
	"ZWvzNFm6W1bVTbs6bd6ZnNgC4cqt9ZRNx7PPk/ju8/NomR2leTILF+EJk/HsLposj3+L7u9Wn8lqdjQI",
	"Nqdcdyf61lKWN5Xac6UOfylymjeW/FCtqv0ga9qjjkW1T5FTvaGfXbyy7xfHGtnSSs4qhDqtrr6AGymt",
	"O/bEMhuR875QDXUGn64H4xOo3JtfVW1rYo4rWcT9qVll0zJa+ezy506LY2+MvkV7ZVIz+kbH3ohLkr3j",
	"TC72GwmPz56h/43GE/TduFdWbx5TSHxLegfVFQHL+HBQKfrHZ+Regkt7Q6yRalepVjG1Ll/nkQCTB/cp",
	"sEPEO2WktuAykpgCJ9Z80sZaAQbtUWbG7Aw+hEjm1zg0d4QuS86mczqkUlE3yWR9It1uywoPquc2u8AO",
	"9r43S1edpyTaGO/3qTSDUuihbA+l5daKKbSgfyTgsvSJ1yYzsGhtj02nVXUftkJ7q7KmsThteeIgbps2",
	"jfm0ebubOdscVJMFjW36S7dMdcd+vjX1m5ipTadTBYTgIbX1TDAz9TWG6AMj1ZZIB4ZlcxKVMeuuEiC+",
	"NklXsquirSPxKZocHY1ftCdlPlTq2dXP8mYA2vx+Fc0O8oyM0vnRTP2W3x+skxdsdDw5PolvMyKODn9b",
	"fV4chs9Hh8/Jb4vPR6PJ4d3aqYAxHnUrdFDfq3C1u1WNBc/Go8l6lBzkqZyPlss8IuvFaJRNZuy3k9Hq",
	"7iR6vj5J8snc6RYiYTo5Or4dtwcvPv1/oUxjC1bJVMU6KNbVycwgjny988A3Dn4y92TRS3vRsvneyB1z",
	"WdZQKm+T7SW55+WMAeGabKUEodu6dgr/h0nUHf6x6bjDf5d8XJDDPQqPzXi7JFlImFR//kxJHJ0izFiO",
	"lXUp84whIiRNQIRq7xpYzStCboWJ3A+QxLfqC/CtEpjgB1QYghmNw7CTMA+RZzvs8Ck7S0F9WhAoUUys",
	"3awgBIgM50NU3KsHSmmYk8gJOd81BdkJTZfImxxuJoCp6qZvIPgMKRungA+LMjlc6GMu0savuZmp+UiH",
	"3oUfSsx2TQq2HFipLZV3pgdXa276SsVqZdO2bGyVZX0g0SNwQhA2SUHaHAByq+nuq5mKThFwpcyLCDS9",
	"HrhuT7PPINN8DV07dGM7guRlK0+wrwkxAmMjWEh82d9xELGBONUx/IBexTT1Rd20U108oX+694VtVnEn",
	"wnTdmLiH8ID5pzgc0mqAq3vik28KaeQ7bT9Oljg2fKzkrPdamQE2c7GF7wnTi4nxdtyb6qrLXgJpB1mk",
	"vnrsDkXeYmtsTesO77sFrv3tnrA8riUt3GJLom+RIHFc3La1Abt1zNoZAkemD5Y92pIFuNV2UI19OcBx",
	"xekzhKKO35GkBvBeewXWbyN/NPmXIHh3GWPzXi6G8ATqeSIpsFseSAq614lUCWbZiS6bD6TKCD4wFRd+",
	"ut/AJK27c2/QmdgAOmf0Lif63mQr0JTNd8D7W1S7l/cczGnRFILUPLziAWmF07SbJMaSsXBN6eh9sDdO",
	"NZ2uNISXXfWnYIQ+yvSOAadjJ2w/i8lxvJRE+WcK8b/fa+OmM05l47puuYYdhlZhHKVVO8plbaWVaO7y",
	"9KtqiLXdWTvW6gZd3VBoien2Cja5pqH8NkVP8/hvaeJtSdhWdBo2QVMiN7Wtpp3SOiVa+l/VRG3ZZ+3j",
	"sa0yNQRXm3VaMqIhj7os4eprGA8SXNvcaYWz/cYEFJ52Bzh9RcSs17CteKivDZvdbtTeeW4bE+s1tDtc",
	"rLus5yN5Rv+edQorVlLHiMeHaO8cCypQCqknARp9BzljAVotSEYQ/OP78Wj03551nWHVUf68ocl/Gx/y",
	"o7mQu7Sjh9eLSk1nKwFVAd0tidrusUfcOo7BulHajY41VacL9MYaQ73QbS2eDuBfsVL1KGHHAA3D8VGX",
	"qjlWJ0K7LVTZsxPwzstUdO4E/RWLVAvadgeF7Iy47eu+nKqbsRspHhO2ZwcwTw7+Uwm07y8/fHj7rHuM",
	"mgm4OU1Bd0LYPrgJMbCUUamjM/RlVu2tFSudwVTrOJ92vot7iBSRzaqeO65/x5QP/+E6N8yWOR/+I/Zz",
	"+xZ5H/5Ddg23ycjuvbHstLxzY2m3pG99o1fO4MYJVReDVR3AuaGcR65Lttf12frZVZOQVaFTs3v/Inkt",
	"bcnntK0zMovpfKEsfaPcNSJmTIBWtTZMO7c5I9i86VYG1nz4z34lsmz5keBo7ZOGpDnWDBZo3NyzKp6G",
	"7Ao4voHQwBtHmM94cnB4dOya5dQ8WVJirtuePH/RVYb4xlk6Diql4Wnorgunq+vdYPvwUXM4V6cZz0IS",
	"3Uh+ExOsAysddQVTNzrj0XAyGh6MhofOenKfnU4XxiPSP7tD55K2FgsQdi2Ek9M2D+sMOTY58jcQm+Uf",
	"UFEPJ3O94Gb3z03J2P2Pltb3W1lL78b4NjojIR2F9u7Xv002Rgq6+4037zfPwD3Vhwi5kfugJkF2Y3Sq",
	"hdbDt4h0jrFY3KTtUjqHExefuOSMjo/vlko3grLQVRrHNcDSVt64CTkTN90VEfE0dC7SkmSCNoXmaHhw",
	"NBx5hVjelCGmpce8wkudKBpBFjglYUNsNUjjWkUnB7QlUmOj16RRSYzGOhvh0xSKrf3s2IgbzoUtgqoq",
	"h4mDL/Wjv+6iGaxRs87JSDasenNLm8XT16q5ifVzicUYQYmYi0CNzKG20K9HnHu8pQ5NaxpC840o9XuR",
	"glg82riB/yvAC9juCTVeP+7OEas9dFwLnk7W5qeNQqp8rbg3/Wvrqhqw+8qM/+FDltLoHMRtYkaYxmst",
	"SX8UJuvOOQ1j4eaqEdrDtsLuM2vlUjZ3xmyiBc8zMXxYL3HT14tKVy9KMYX3TTsmnHAmF4855YMRivBa",
	"fIUv1xZkrhQlqNj23ZAfutTFcDfvbsnwmjg+3F5A3XTx3QTeCBDuB34wiryxri9pNPwKn7Q7tLkRuexJ",
	"JirDhUciV3kVwKA+mb64st31XT7JwskI8ax4Xj1zB1B7OqObBCxjtCU3l3M+U/RxpzqH0kNI7k/NLTx9",
	"/qLAZ+Bdi6BsB32bU6N7BI+KIlVPUo1DW69n1BxItT3f2KV1D1Kvq6l1gjllfIcbyunraTljNnlv+pxD",
	"3c6a5rOKLR3jgsxwHksbMNG0f14xPI3JZu2qDcaJzQqnX18zrgJl63Jx1b47V4pzIuBrG7QwcKiEjSZd",
	"T0w/2M0UXOyae2gR0xRN1yBphtfsnFqhs8BLXWcDHMwrnWONBRIJjmPd5o+vT/b3qb71SPfHraVXZpW5",
	"SuI6UuRhuMDrfA+tRlE5czNzvHc+IOR71wyVcuov2cAA9dlWdabM5GvvfgHdVMjaM/Ib7zHuo/uXHhS1",
	"B1r5zdqWa+GxVbb6yfL1694Pf9dVrqHvt8pFbEpnFYpq3tO3aOPlvs8VeeWVQLWQDUr54u2lCFYzrL6t",
	"B7jvNQZ6tmONuV41rh79038P2Qjn8bsT3PHGcWMpuVqhnZY6UH2dzvtZMlurwQR41x/g6qixuaMjT8F3",
	"Sy3AbasYGoUqCKu0iJfrspo/qQn21wU17+ojnss0l8WLbSkJdVU962M0PtFtPIy1RanQoIaba62tU7Gz",
	"cCBhMqPEs3Sg9nZDQrNcEFoUtCICJodNvUA7qG9xDtv+FZPZ2qXDkvuUZj360A8fPsINmXkRzJTsocxE",
	"XxaeVQ3HGajDV0y/7VQfAX7+hwAQD19To7HmGodiukGxOH0rq4nW92RYo3ihqfnGDbUaD7I53ger9+/r",
	"1FGIwuLinMZPb7/eiCuBbG3DVbrubMK5hve14Jrjt5m/0eIPfaX772QRqRMaxzmUZ9pUk7Eo/1C6Laec",
	"RQLtTblc2FJkSk6aGk7Ptnx8vkTnLQ9vvUpELlVrFENz6wzWtYD2rBp0zT4tqEDkLsexQL9WiknBUKBG",
	"SRxrCsBPvwbqTKcShTyZUkZEs3wsPJgML0DD/M3U4O3qYZcGb6emh+6ZmtXfqhQ3Zb70bA25dVVohQVM",
	"09YAq4SDix76X7P3XJJT/RwhFUiuFC+DQTOfZ2SOJSmKqptSc7bA2O7li1tU8FDcKg9muB7nLD5C7dH2",
	"S7xdJ8IVYVGtOGX7KOAmaGVTiS0Qu/L+zUU/fjRCCywWQ3TFE1KPMt0TeahW1FntS6AER8XdkrkogNV/",
	"hhK81lYlRr+RjGsG2VxdBZCtPrWo5+oif6vQpKN+yTpJiDmP69O/ICFNcIz2vhsPR+g6H40Owu/hPwSN",
	"h6NnAbLPYwq04Cs1q3UCdeRwXMstwTFaYTFEI/PoKjBSvEZlc2csmFKKy3egvlJxLtVl2EvFvkSgwYgF",
	"Tcu6r19RrLcUrs2KvRlJ+NKa3mXVWki4L545rlPtIa2QBg+1qs+WfFCnfH3ENo99gcd3Z1wHPjKJQx2R",
	"lkAE3CAiS/HfixJvQ57pC/FWMox9h/dS12I7u3yD7nKiNMmKqgw13Nna6vQxZercWFIMdDuns+z//h8h",
	"oVmakRRnRCCFW5bo6pR4ynMtUm3dPsnRlKCM4IjGa4Rt5g2YBqYsHFxHDeG4VlilOIPY84poIEvCpHms",
	"Xi1uHWGlBukzKAEhD2f6d0LPzT7xqxBJ8K2ugf9dRFIl35gsaECwWA8LIkWcCMS4RAseRyjMqIQtV5nq",
	"EH3i+rDAoa7IXVxAKpz0k1vkPjCXbWLB8ziC0dYV9COakVDGaxBJVILx0F6oSijS6WAyHA8PwThJCcMp",
	"HZwODoYjCM9KsXlrbH852TfCUf3TaaOCKWclKIYy17bCO81QRmJdkLEiZ4fozNZmVCfinDCSQaPpGnFG",
	"EM9QwjNyzShzCOmifLwimlIlLKhKvmN1zROScM0U9ge8tvuYMjXgNTMjuo+FIfoIrQXCGUEpnlNmsQXN",
	"gM/Q0WiIXtNYqhVS4KcE4TSNKYmumeRmtSw4ONWVYNdvikWD08F/EHlmyKyon+GESAjF+FeT2i95kmAk",
	"1JYBJGIq5BCdWbNrhoQ+b7kifUhTSrSMU5uRsn3YVRXimOW5tgXQcSU/cNcq0squG8CUlUhSlvpp5QTU",
	"Is8RFPklaAnqiybm9yU/VfGtITt5fTw5PD44uXg1PnlxfHx0fnZwMJmcPz8+vDh/8fpgNBqNX18cnJwf",
	"vhpdTCZno/PjVy9fHZ8dnY9Onl+cnR92zEDew93mFuifsbX1rEL6i6hlc5oF2Hv5w9mb98Orn9+d6wSc",
	"2ptfw08f3n04/278atxFV5vw4I/Wh3KHKb27xk3mXl/BELbqMWfXbE+scBrUKlsExekXoIirHRGY+LbA",
	"BFY8a3ARwKjVCe+gtJrBVlMye1LRM4Z33NyA7bfydJVZTqojtV4qS/A9TfJkcHo0CgbGBdcRmdiDFJ/N",
	"9DK5sCo+boNWHya/KFAi5cw8KT8Zjbr0j6LdvhE/H80PoIWIPEmwUjcH5itSsh4+qYMh4mHnoXC1wvM5",
	"yfY/pISps/hgOLK+ylDTpJT6EQ/zRKEzdMnFCx7qKMj2jBplOjqGrI8kGjO7MINjI0ckniuxO7iqIjv4",
	"xc55QXCsw9Wc0/4ICdDKWERa60KgaJlK3AuCdH9kZ2OFgT6bW3P/QY+2y3rqrh3LqT+iN0oZLGZmcrDA",
	"DBX7vyuN+8vGiYIk02n/xj7Wdqwwqh0NyfCaqcMXLCalQKc805qdzqquW85QirnisLlmxjulGoDxAI/5",
	"yxVHCY+IOL1m3yBlOiHrHEPF8YmoNBnpAikhB+qZIjhNiPHeiCF6DRdgLFJqWAQG0orG8TVDoG4qZaA8",
	"bYoxQEnACuDQIqDOJwcOGAnK5jGBcYbDTxwJgjM1SaEMHbWz7ZM45F5pgIUfScD0FXgL9hSlXAiqtF5N",
	"zVN0lFAWQExpgCKshDIhtwGCiJ8A3eU4kyQL0JrgDDCFy8tT9K/xcHg4Gv0yRBdkBo6XMrqq8EYO0QVn",
	"/5D2ER9EZ+UEqUDw7ipERH0DyvS+5KeIA4OAhisD7RgTJOQsgslcWvRzgefEqHKV1f5GxxeOdcjoKfr1",
	"n/bj9xFeK3t2cgwz+H48+rXZHE3JTJ1pCo2+jvpfkn8/Ph49fz45Oh5pWFCP38LCM7V4alo+wFQ7Be74",
	"5PnouQF3oVGSK0LM6yRwscENx0U6CgkudcGHo0gP1lKgfqp+Znw1VPz4gcXryhs6h6NRuVagmmpmJ9Gp",
	"av1rG+kGmm5CXLPL8uACi92sGSyWAlGhgL2sYZX3zywWKCESD41PCqqELcg1g8mX28N69BTt4Vys80nI",
	"2YzOcy0VNb+ofWanBrtfbxuzq5Q1qEwI2OMzNYpav9rEX7zo4oB6R5QzSWNFfQeIXy3XGyeoXsJKD2a1",
	"/lKbd+v9ECloLyk2KP9a6oLgFObCjworYGyIMtXKB5wbRsWwj9x0KhibVXG78RWX4jjMY2zNlVLBi3CX",
	"SldxRpeDEqY0mH8NlAwbBAMlxCB+UfVTYsxGLg6CgRFkg2CgJFnFt9GN8fu2QIMIByDhEF1pO3pKij1a",
	"yMTqnA5G7gmFNrG3ScIehfBV5ZpEMb2xCkXj/mCI3swQV3tdbzFlIdMlYUFLKFQRLVm5Q6nmg16NcjP6",
	"V8DiHhNooGWkjRsttYW2RGwn9ba6yzqUIl1HUwk0XaHT7smmgkRwptQ5sVE3sg2Nv8nezxc39k9qzpOa",
	"86TmPKk5fws155URhp6azpO+8aRv/Jn1jQa7d6gctlWnrtEqiLNR6ai+E66kVpH/qkSGDqBrPt78xjwO",
	"R/VNVamgWK0Cou9sUMKTsvKkrDwpK0/Kyl9ZWSluqHb1y2hBCx4ZZCVzJXFBx4zRmd2vHVqMcds8uWlc",
	"atOfRWt6Upq8labmtuvQmspCjy+1UtSpPkGK00aVCRI1YBVtelQAqUWBzt5QksTls3lSm57Upie16Ult",
	"elKbrNpUrZngpzEZQb2tvjR8Upie/ExPKhOplejo0JauIM27S0OSy3hzjE8Zga9je2xOECTlBOYwcCUJ",
	"ddx16bfvdVKQTkBC35sH8eG5evQtmqBvzC+Xaly4m3vSoZ40qCcN6kmD+gtrUJV85acLsifF5S+suJSc",
	"3qG3OJSEphKj0/L2fzfJJV98wrIh8R3yZCSWVEgalo6aRvKxPukyeLaXh/rlEpB7thKFTQvUwzuj1/UL",
	"BeZpvw1b2ibxQIKZDBcuXIboFZULUCQg2FphzmwEtulvEpAAxxpLDqZsOv58P1tM5s+P7g6WIxndHR3P",
	"GFneH9+H9zJkCymSMD8+TNxxhGUWj38o4U7cUSVbV06CboNs7ZE6Uwh/XmhE6DeKjhjr06y1UsLOigbq",
	"mAW5IBZ8xRBnIQFZoRaI/EMgnT5uStmYxdGJkfUVu2a6vokeI9AwFS61nkoPVesKg3UkkWmaiDODoacV",
	"DuOZCaI0I4Kw2suBO5vbX7H2/aveyEQxOaK7pWWY3Fub1t6iqfl+oT9vPx/Tv2M+dnQAX8zHlnDvnw0k",
	"/ylZ9p5HxCbB3pK14TLDBE65pIvE7zQd1bNrMupbfWnghdzfgd03y+dKQSDLe6eFzQnJJAGaHC4KL/3Z",
	"5c9D5JrepebMXuaHbd2qhu5MumtIQbEpX+tB9oGaQ2eoalk4CQxkJ7nNw8SdKVrlAVhmW2sX3CcorFI0",
	"tusxoySOTHU9ML7hcLR9r1nIM41+pPZV6WVAMQ9NrvNPVFA90qJpyCsZGGU0jiO+6sySLV7L/Tda3aDN",
	"zupbKEVR4kMRUXWzJDQOBLBY9ZNnIISH18xUp1VK5sEoaibi6tLATlkMUJzq/Fj10T1PVAtdUPgF/P/B",
	"8RFU7I1jlw6/M9/CEnUwLzh0SubrYd39mMxxuO7OPIfPAfppjIRcx/ptA31uT3F4u8JZBC+MYkmnNKZy",
	"PUSXMcGCoITOMywhl7/KVAEKFyS8vWYVbo+qCYKaSfXu28ShGru/ghTSM/FbTrS3HKv5UDZ/Vlva3TQy",
	"eyJoBUnpTFxfu4ou2m+UDDpP3zgHYltkyFQVoPZl/Y5tVnxsb7OiJIV+Vka/BityAQUiogfdXn1bq3H+",
	"9p8BvYrRPOZTHFeiWsqrGNAvlMVUKZPgvBEyonoHx3aPBPkPjZgGXkxUp/8OP5uHWHrnu8gTrGt+JDhc",
	"UKYLi0A9EZtGbKpi1LOWO269VAevHOWdx2359FVb9JoCt23IWS5quuyH1eLqTgLZ8us2XTcXutBFWWkk",
	"QIKXHgfTLMRMmSZ8SbKMRrpLQhOaOXepfnKorPS+C38Uvbu2gh6kgng5XpswptDITWH8dRLojSlJUpqJ",
	"YJeZl69LldxabQE4ElOSad+gKURiLXWoJKlDe9EMHppiMl4jOqvgvcACJXksaRoThKEcjFunN1M2GBZm",
	"6k7kbQLxprKlTzl8m9pK7YFCj337NKNkqTUkIqQpvUnZjNsCQWHGlTld1A3tI8nbYsCdwpJsb28ilOO1",
	"J+9n2+mqhxou9KjoyboqFc/U7z2T3t3EqwLwnrMerj3fO/uCmPd8ocf289VPle0yX+jpPVE9TnWiSjfY",
	"jzm/zdP939U/tvNE9tS9bXoeFZlaVXDbtwi1sryb9CFchVUvPWtLrDrUT6OyPrL22Sgw3OUqthV4m77A",
	"YnEyuzo7uYqL99V61qN0jXYuhzhfnxWttvMEVzCYK2aRf1K/buPBui79ji5J1b1Vzn66RpkGgfSKDr58",
	"+fLl/wUAAP//wWO1QlL0AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
