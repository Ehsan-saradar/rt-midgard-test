// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {

	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Represents a digital currency amount
type Coin struct {

	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {

	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string  `json:"address"`
	Chain   string  `json:"chain"`
	GasRate *string `json:"gas_rate,omitempty"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                    int64  `json:"AsgardSize"`
	BadValidatorRate              int64  `json:"BadValidatorRate"`
	BadValidatorRedline           int    `json:"BadValidatorRedline"`
	BlocksPerYear                 int64  `json:"BlocksPerYear"`
	ChurnInterval                 int64  `json:"ChurnInterval"`
	ChurnRetryInterval            int64  `json:"ChurnRetryInterval"`
	DesiredValidatorSet           int64  `json:"DesiredValidatorSet"`
	DoubleSignMaxAge              int64  `json:"DoubleSignMaxAge"`
	EmissionCurve                 int64  `json:"EmissionCurve"`
	FailKeygenSlashPoints         int64  `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints        int64  `json:"FailKeysignSlashPoints"`
	FullImpLossProtectionBlocks   int64  `json:"FullImpLossProtectionBlocks"`
	FundMigrationInterval         int64  `json:"FundMigrationInterval"`
	IncentiveCurve                int64  `json:"IncentiveCurve"`
	JailTimeKeygen                int64  `json:"JailTimeKeygen"`
	JailTimeKeysign               int64  `json:"JailTimeKeysign"`
	LackOfObservationPenalty      int64  `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks         int64  `json:"LiquidityLockUpBlocks"`
	MaxAvailablePools             int64  `json:"MaxAvailablePools"`
	MaxSwapsPerBlock              int64  `json:"MaxSwapsPerBlock"`
	MinRunePoolDepth              int64  `json:"MinRunePoolDepth"`
	MinSlashPointsForBadValidator int64  `json:"MinSlashPointsForBadValidator"`
	MinSwapsPerBlock              int64  `json:"MinSwapsPerBlock"`
	MinimumBondInRune             int64  `json:"MinimumBondInRune"`
	MinimumNodesForBFT            int64  `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil      int64  `json:"MinimumNodesForYggdrasil"`
	NativeTransactionFee          int64  `json:"NativeTransactionFee"`
	NewPoolCycle                  *int64 `json:"NewPoolCycle,omitempty"`
	ObservationDelayFlexibility   int64  `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints            int64  `json:"ObserveSlashPoints"`
	OldValidatorRate              int64  `json:"OldValidatorRate"`
	OutboundTransactionFee        int64  `json:"OutboundTransactionFee"`
	PoolCycle                     int64  `json:"PoolCycle"`
	SigningTransactionPeriod      int64  `json:"SigningTransactionPeriod"`
	VirtualMultSynths             int64  `json:"VirtualMultSynths"`
	YggFundLimit                  int64  `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock []LastblockItem

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn int64  `json:"last_observed_in"`
	LastSignedOut  int64  `json:"last_signed_out"`
	Thorchain      int64  `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`
	PoolShareFactor         string `json:"poolShareFactor"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), Total Rune pooled in all pools
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// ObservedChain defines model for ObservedChain.
type ObservedChain struct {
	Chain  string `json:"chain"`
	Height int    `json:"height"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`
	Asset                  string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Int64, number of unique adresses that initiated swaps transactions in the period.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// PreflightStatus defines model for PreflightStatus.
type PreflightStatus struct {
	Code   int    `json:"code"`
	Reason string `json:"reason"`
	Status string `json:"status"`
}

// ProxiedNode defines model for ProxiedNode.
type ProxiedNode struct {
	ActiveBlockHeight int    `json:"active_block_height"`
	Bond              string `json:"bond"`
	BondAddress       string `json:"bond_address"`
	CurrentAward      string `json:"current_award"`
	ForcedToLeave     bool   `json:"forced_to_leave"`
	IpAddress         string `json:"ip_address"`
	Jail              struct {
		NodeAddress *string `json:"node_address,omitempty"`
	} `json:"jail"`
	LeaveHeight     int             `json:"leave_height"`
	NodeAddress     string          `json:"node_address"`
	ObserveChains   []ObservedChain `json:"observe_chains"`
	PreflightStatus PreflightStatus `json:"preflight_status"`
	PubKeySet       struct {
		Ed25519   string `json:"ed25519"`
		Secp256k1 string `json:"secp256k1"`
	} `json:"pub_key_set"`
	RequestedToLeave    bool     `json:"requested_to_leave"`
	SignerMembership    []string `json:"signer_membership"`
	SlashPoints         int      `json:"slash_points"`
	Status              string   `json:"status"`
	StatusSince         int      `json:"status_since"`
	ValidatorConsPubKey string   `json:"validator_cons_pub_key"`
	Version             string   `json:"version"`
}

// ProxiedNodes defines model for ProxiedNodes.
type ProxiedNodes []ProxiedNode

// Queue defines model for Queue.
type Queue struct {
	Internal int `json:"internal"`
	Outbound int `json:"outbound"`
	Swap     int `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, unique users (addresses) initiating swaps in the last 24 hours.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, unique users (addresses) initiating swaps in the last 30 days.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Int64, unique users (addresses) initiating swaps since beginning.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip by swap.
	// Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps to asset denoted in rune
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps to rune
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64(e8), toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {

	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {

	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at the end of the interval
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ProxiedNodesResponse defines model for ProxiedNodesResponse.
type ProxiedNodesResponse ProxiedNodes

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {

	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x97XLjtrLgq6C0uxVPwsiSLMseV6Xu2uPxjffOh3c8yVYqzjoQCUkYkwBNgJKV1LzW",
	"vsC+2BYaAD9BipLt7M2Jz48Tjwg0Go1Go7vR3fiz5/Mo5owwKXonf/YSImLOBIF/nPqSciY+md/UTz5n",
	"kjCp/sRxHFIfqyb7XwRn6jfhL0iE1V9xwmOSSKohYQ1J/UklieCP/5qQWe+k91/2cwz2dX+xr0fuffV6",
	"ch2T3kkPJwleq3/7PNXDB0T4CY2h3UnvksnJ2EMsjaYkQXyGEiLSUAoUYekvKJsjuSBoTpeEoRkNJUlE",
	"v5dBFzKhbN77+tXrJeQ+pQkJeie/mrG8DPvfsg58+oX4svdV9Sgj8onINGECYYYAZ4WL6Y9mPHGh8dXr",
	"veFMSMzkbrRuo2QG2YXs5wVPGA8IylohywCA1jmJ5eJHKiRP1k+OWRG4Czn4jjALUJxQn6CFber13uKE",
	"UTYXz4VaBb4LO2KaFNH6keBQLp4cGw22jdkW0AIJiWWq2ew9DeY4CRRWl2zKUxacBkFChCBPz2LVAVo5",
	"7ZIF0BqdmtZljnuHhZyG3L97ciwzyK3oZa0qaNH7lAZUrp+L46oDuJD8X1QuggSvcChgWwQk5oLKEgu+",
	"J0oAnhOJafj0K12C7kJRy0WkBsNU7Q8U2omhOOFLGpAEBVhiYFKMREx8OqM+igByPoPnwt2JdS6owxAE",
	"dGTber0PRK548vTsaOBuOELq9DT9gIiAHw+eYUsD1O1xUzsoTqch9dEdWWc4XnEePjmKCqjmRBeeH2vI",
	"BZprgfE4IyjmPLTIXUv8DEdvBrkZTfhcQqlvcRLPSDHn0p7aXaDQsOQCbBL+QEnwPJxWBN4qmaFFWSr/",
	"z5Sk5MkxAqitqECLMiqfyJIkgnz+8eOnDzh6eqQq8DsKX4xCKqRaU9sRMdW7Kn2xPrrVRJ5nK+htAOKg",
	"C97zkE9xiM7eXl2vcJzJEfWP5zqAC7CdG1XhAfaAh5Y8TCPioRkhcA6LkMbFM9jS+rlO4Qr8biTNGMB1",
	"+iqmAMx/fvdc9M1BO7cWlzi0gieWC+EhCT9NOQuEB2TWPyxxmBKkNDQS5ET/6hk0CnZr3UjUdlh2EuCI",
	"szlaUblACQmxJAGSCWbCmntexYgNsCTNlidmHEkaESFxFKstpxQJrUpiiVYL6i/gJ4PECithNqdCEmVt",
	"1kxRr7cgdL5oNnX156cYiDLXIFpLLxIkpxIvDNDzupn0n3NILrs+IhLDPt+oxpl2X70eTx3k+ZjKvxh1",
	"xbaijggc4oiyJQ+XJECUNYxcW48qfG3WudYoUHuRCERnxRWnAqlJhERNmCfqq50+dxIHJwQJScMQxYQF",
	"lM37Pa9HWBr1Tn7tidT31dng9czHghukinMVw8/rmOQOkCLQFY57Xg8HQWb49Lzeyhg4Pa8XcKZ2m9dL",
	"yCxlim3Fikp/4Ri84rTRq2FaZcQDLtcc4+mNnG2wAu/VHTxe77SA4/sCk5ZlQ2bm/MSoFI2bFkfqCFEk",
	"ye2iVPVAWAg6ZzmHahMEweYVaZht9LyfMf82erEqqLnmeKYt7hVOAlGf2zT/6uRXJaNbPseg/Td8ruBa",
	"HKoEuATGOQXOgvdEJtR3zAAvSYLnRJ0LS6JaNizQHjl+5aFT3RrOHsu9S4IYqKgO3jfQryVmwXS9NXih",
	"+zXDj/ADjdKoI/bv8QNladQZewO9K/bvdfMtsCcBxawr8tC4O+7QvDPqZeCbMadsG7orqm9Ddw29M/IV",
	"8BuxB3WpI+6fM12rC+YAuSveZdAbsK5Ig+oUPMdGdjCYa+Vcu8gxE+dmdvGZc/2cm8ktrHiYO+Zr4upa",
	"iTGpemcnzyelc6tv5AGro713MsOhIBnsKechwaxGwkZQLrTecJcq+InECRFKIUIYBXRO1YL6aZIQ5q/N",
	"iVbTlc3PbZyBhSASnULDvlOuqgZ1EKfQjzL05sfTyw/961/en318pyyaCG8+DDVMz+LXRIXuN1VAM4fS",
	"1rK8aq1uwY7ZCL3MKKCry9vJuGNvIHapu6ZKx+7X0Lh4gVSmZRkXrzSv6lAuQpcugGpUokySZIlDsc09",
	"0mXWyZgU23RW2l1tkgDEK2CzaSaXRbw7sVCptySRi51qbeo6juJsaNa668BOyLTQbC+pn8H8xhL+Jlpe",
	"qz/t1Bu36FVCfYfyfxFyLD1zeaeOFTtWkjLSR5d90oc/LTr7pkUmUVpG++n6vHFAmEpt0J+uz9HeFAtl",
	"BOnpBoTEREj4oqb+yimECAs+06jZ7v9siKVMfzXgNPXv9Igpow+5R8AFu6PRkEluBO0esVyK3NuyyCe1",
	"RLsPKSRO5EYKTsmcMvBT7UJHsWZycZ3GcbhuHOVatUECGj1mOgpM+3LpkR67VGnrGFqr0mPs5Tih71CZ",
	"p17tjEFFDObLmG8JryhzisxVkgvVbVtj+xJRy4tpybBJ5r4nLpv8Obfu87N1hwVwkaUaurD7uVqBtPXR",
	"Wu0PJ9sup2sjIl0PWCcm9TPW1czhSph/4AF541ZvZ+oIUqtvjfxcjhatKhSkiY1JAs5okwTTinNmk6ll",
	"ohegPSIRlZIE2w3Iwc9nydE65vUCJ8DYWTyMshSQ5DtMlHQacC0kiRBlPo8ImhNGEtw2wT66lIgK+CDS",
	"qOx6mxGiQylKRHsKNcAOv6Ui8Eiag+9zK5pnI18Q0oW7yrTzkM/ZkiTGs/7ppw9v1U9hSPxtma7BiW4J",
	"kl9bEewv9HFmw+mqsHeVCVcmIqAqF9TBtp3WCTpTq7LZchb3b9hTnjjbcGKnQ7/MMhX5VNjFdUHiYnSv",
	"LFEr1LZ80eVYsCtYIw/Qm5QYqYUzHVbVu86bpCJa8q1QUMO+Ech6IXYTgfoiNJsQZbDx0B78XsIVfWdl",
	"2qumPee4JQWTqRyrCi1dBkWHYwmQM+egFVR7cHVBl+QVUuPgO8LQLOER2mNkjvWHXG0VNwwXrkGmOMTM",
	"V+tH5TcCCSsOReloADkBvOneT4rPnmZh1QQb/aSlIZRc6LC0lcH2YEXseqaMqD9f5Th4SCz4ijWj4rgh",
	"s2r5u8pmrlOlcR756hf41rVRTfxqTZVSO1EJSce9YZISFBGchbau4aRhmuSSo6xr3QGqtMnrNfO7QO2j",
	"CxwK+6OJmVXagr4N9W3seBrbazl/gSlzjip8zBhJfmy/tQcY4DuVRunw3d6OypoVJlweKJuui/K1yNyu",
	"GnO1Y5PK7GxX15lNeFHRfd2b+okc3o8Oj+aTgfQfluk4WM7CWPwxv1vdH4yDw+VqEs+PRpP57MC1u/RK",
	"lECefX7jajnH4jYxsRt548PJ6HDgjLvAoSSOSw1qrtvRakHkgijxSIVmCLTAApl+3kYXvdeL0+ntHVmX",
	"EZJywZM4nQ5xEKxYTOL74DW7v4/meD2JvqSD9f3RKJZfUj+6e40lXkmyHC/HbLK6I+RwPZrcHw+I788H",
	"D3cHR06Bx1NJkvKYg4fXwfj15JwcHR8fHM0O8Wh6Ohm/mY4Hbycjf/j64sw/mxzNDg/x5mQJszPs3Lxs",
	"2TOSulm05KOu8c6pUHvymv5RXr6DgdczLn+1MnIyzhFUh/lcBxOf4eBnHNIAS558qrLAZAcYJAgpq6Di",
	"7KT2trgiyS8El2k+ORgOD153G/rNIk2YtXd3wR0AfCIyt5p3oeI5EWqVMypc62uZDMxw1A0MT6chuaZz",
	"9h4/nM7LVByNO8F4G1EhKGdv0mRZWc1O/S8wDf+DrOeEXYdYLK44NVyXwTkaDbaBJOi8EVQ3slykYXgZ",
	"xe+4EFcJlwRiZTT/lKk8Hg8Gg47IpSx4T+cJROo9hoEumU+Y0sfqBB92xOV/YBoq00GTvQJiWwiK3LuA",
	"eIf9u4+zj1OhKKGIckUYDuV6h/XKNKF33L/7KXasVDeU1CZYYhriaUiurPW77bze44frFY6VpAFEdoJB",
	"mVLodHi4uRzYAUZhF1zwpCg1dwX4BBOjURqdcRZcMqt7F/lX/28bWBCFrqZ38bkEbLwLkF/m8yDBgoY7",
	"CLIPYCUVIhMviHt63aCRlVr+N2s/LEM5HB6Pu4Eo7K1zEuL1RUge6JSGtLLJDreARpok67AbkPDxp78N",
	"J+1A6W4A3XQeH4w69lfnJ2XzAj5XJKE8qBzs3YD9TBOZ4vB9Gkq4ttrl/PplPlfHzTsaUbn1SleUyIK2",
	"51De3LpYVdmqqk1OLcit1Dh0lKrK0aRCNCoE7Qd801FdO3lr52j9WGw55ZpOLdcp5DhUHGfEJpHvkOAu",
	"gewUrC2CskHwtYsfpzhxiIfG3V7ctS070LWfKvvDZQLlmaldzfOsR5NdXm5QM6pctvOHM+f9ABbylmvq",
	"BbeVTsPDjnYMQNHxzbcmaL8gPV93gqGs4zrew8Px8fZixtqqtdnVUS0O7Fy8auLu7heuVVBb37jWAOx8",
	"5dqMSmcWdeLi4FRXO5cH6bTkrvwZcrA6+FLByylssHzbReENOyeMW59uyghKhW2pb3awtHCga8NFTTGp",
	"4U3HahVZKncLdpvG6kwSPjNxVyww8VF2eAcN9jYQ4VUzZp+KvuTO2MGonZbrrw7XolFMkggrPi+f5VeY",
	"tgdBxzjJEjhskouapyaKydlaYYFivCYBmhIfp0Lf3uVjopALccPibNgGEjDSHnfLiCzcMPgLzOZEoL1V",
	"obrA9xlHvNrqEvfvfVO6DS9YaoFU2lYY2c7skcLIwmmTRrZNV0mUwdxy49XZuute70SNtiEfIfgKTN9R",
	"9pVo7hZ+3ULnGk60RsnpFPau08bNnM4V2iTTajSu8pOWNpWN71IoypVDaud7Q/THOypklq5bqM9RLyoi",
	"EA2UuTSjJNApvfnldX4P0Ulz0ai6g0GcuYbN87XxCI6YgtMgIEFXkaGmkKcGglScrm3NlKZA6dP81s11",
	"wW+oglIle6frQtJhI0RbgIZ1xjvf23C73w37AEtyQRPRSiMP/VQS0lnAwkz11PLD5FDmygRlBRI2Da1s",
	"p51GVqbDrgN3DAUH4lVTR+UCSzQlIbeys3Ul3UEfilNRQkSmpkCYTEJmamtJ3nTYd+ViHQOyHRMb+G4e",
	"1nJ8KxZWXbbhYMB5BwZ2R1sUZ1PZoI6I6Jy2XlFcVCdR25e1zVNl6WZZVTbtyrR5b5KRM4QLt9ZTNh3O",
	"vozC+y/HwTI5jNNo5i/8IybD2X0wWk7+CB7uV1/IanbY8zbnujdnWJdyxTeVD3TlbH/Nksk31lpRrYr9",
	"IF29QwGRYp8smX1DP7t4ed+vjjWy5aKclRV1PmN5ATdSWndsiWU2IudDphrq1EldiKdLoHJrYluxrYk5",
	"LqRvt+fE5U3zaOXTq18aLY69IfoO7eXZ5OhbHXsjrkjynjO52K9kmr56hf43Go7Q98NWWb15TCHxHWkd",
	"VFc5zOPDQaVoH5+RBwku7Q2xRqpdoUzI1Lp8nUcCTB7cp8AOAW+UkdqCS0hkKstY80kbaxkYtEeZGbMx",
	"+BAimS+wb+4IXZaczaN1SKWsYJVJt0W63ZalNVTPbXaBHexDa3q0Ok9JsDHe73NuBsXQQ9keSsstVbGo",
	"Qf9EwGXZJV6bzMCitT02nVbFfVgL7S3Kmsri1OWJg7h12lTmU+ftZuasc1BJFlS26W/NMtUd+/nOFM5i",
	"pt6eThUQgvvUFpLBzBQ26aOPjBRbIh0YlsxJkMesu2qvdLVJmrKMFW0diU/B6PBw+Lo+KfOhUKOvfJZX",
	"A9DmD6tgdpAmZBDPD2fqt/ThYB29ZoPJaHIU3iVEHI7/WH1ZjP3jwfiY/LH4cjgYje/XTgWM8aBZoYPC",
	"apmr3a1qLHgyHIzWg+ggjeV8sFymAVkvBoNkNGN/HA1W90fB8fooSkdzp1uI+PHocHI3rA+effr/QpnK",
	"FiySqYi1l62rk5lBHHX1zgPfOPjJ3JMFb+xFy+Z7I3fMZV68Kr9NtpfkHS9nDAjXZAu1H93WtVP4P02G",
	"dP+vzYPu/2dJhH58snK/Ufdo0aNsIt0VSXzCpPrzF0rC4ARhxlKsjFaZJgwRIWkEklk77cAYXxFyJ0xC",
	"gIckvlNfYDsoOQzuRTVxsM6x7zfS+ynypvsNrmpnaa/PCwLVnIk1xxUED5H+vI+y63pP6SJzEvSfOie6",
	"/7SZz/2/KL/ZOY4u1jgab146U19QX8nwGVJGXzYPYKfReKHP/UB7A8xVVclp3O9cgiTHbNdEart3ClXO",
	"nia3ulgptuuRUqzHWz9YqrVwn+SGV+CIIJzVv97PJn9rbrVOmr3sj7i27TRszSn/2Lvb7UZtnee2F7Od",
	"hnbfWTQX9Xmm4/mfWaXEVq0Kadww4mSM9s6woALFEP/kocH3ELjoodWCJATBP34YDgb/zbHiIAtPiqP8",
	"fe/HH6/I/KP1mGdTY5yAVzjeThhrToWzvFHyqjY7iL0C6Gb59hi962nVLrf3CATm6V8iLhyDNaO02yoX",
	"ujaD3pjc2wrdJsE2AH8EH5Wv5x0DqK33Vy1VdaxGhHZbqLxnI+Cdlynr3Aj6EYtUipZwe2N3Rtz2dZtH",
	"9ynR927dKB4StmcHMO+X/JsSAz9cffz47lXzGNcrHMebBsnjg3QnhO3rPXD5TBmV2i2qjaZSdWkrkiBG",
	"uuFMfgZr8CmitjYrvu5Qmx2jsLoP17iVtgzD6j5i+z7YIhSr+5BNwzXY05kN3GozN1ra21vO1TOgIm1K",
	"ekblnCsL06Ke49yWzoPbdUKULYHyCViSs0XRVXQk/KuEpdXlp9PPkZBZSOcLeZ0psBWHt7lfKaZ21lMT",
	"EoLNWxi5X/zjf7QrynnLTwQH6y5RhJq7zWCexs09q+xJnaZ4gVu42bt1eOmHo4Px4cQ1y6kp9Zxjrtse",
	"Hb9uqiJ266z8AIUO8NR3l3XQxTFusS0YXx3O1WnGE58Et5LfhgTre1FHWZDYjc5w0B8N+geD/thZDuKL",
	"013FeEDaZzd2LmltsQBh10I4OW3zsM6IAZPicgtXK91deuXbINfLF3b/3OaM3f7YU3m/5aUwbo1XqPEi",
	"01En42H9x2jjRZ+733Dzfut476b6ECE3ch+kFCW3RjNbaG1+i0CFEIvFbVzPhB2PXHzikjM6vKVZKt0K",
	"ynxXZqtrgKVNnLv1ORO3zQVN8NR3LtKSJIJWheagf3DYH3S6Ib3Nb4gz0VjkpUYUjSDznJKwIrYqpHGt",
	"opMD6hKpstFL0ignRmWdjfCpCsXafnZsxA3nwhZu/cJh4uBL/ViaO+eNVUpOOBnJRkVsbmmD8NpaVTex",
	"fmYmG8PLEXMRqBL4Vxf65YCRDs87QtOShlCtra9+zyKIs8duNvB/AXgG2z2hyqtxzSGepQfiSrEP0dr8",
	"tFFI5a+8tUZvbp0UB7svT9jpP2UmXOMgbkM1wDRca0n6kzBBs85pGDs5VY3QHrYFsl5ZW5myufOGES14",
	"6nyb+jH+9aqXHOVOchRjCu9CNUw44kwunnPKBwMU4LV4hL/a1lMr5BQV/ADNkJ86U62/mwc7Z3hNnC7c",
	"nkHddLFdBV65zm4HfjAIOmNdXtKg/wi/u/sivnLP3pFMVPqLDnGY+XUHg/IC+srPdte3/STxRwPEk+xZ",
	"ysR93d/RpV0lYB5RILm51uwyxS5OWedQegjJu1NzC39hd1HQZeBdcxi3g77NqdE8QoeEwKLXqcShteK3",
	"JQdSac9XdmnZg9TqaqqdYE4Z3+CGcvp6as6YTd6bNudQs7Om+hxNTcc4JzOchtKGmlTtn7cMT0OyWbuq",
	"g3FiU3gvdveSDwUoW1d7KPbdudCDE4GutkENA4dKWGnS9DTfk91vweW1uWuHh3mna5A0/Rt2Rq3QWeCl",
	"TpMDZ/RKp0hggUSEw1C3+evLC/xzkuef6Ra6tvTKrDIXUlzH2DwNF3Q6332rURTO3MQc7431v7veWEOi",
	"a7kQNQxQnm1RZ0pMusXu19hVhaw+o27jPcetdvvSg6L2RCu/WdtyLTy2ylY7WR6/7u3wd13lEvrdVjmL",
	"v2lMIitsIvQd2hgi0OWivfDIh1rICqW64t1JESzsmgx788+9ykCvdiwR0arGlSOc2u8hKyFL3e4Ed7xx",
	"3FgJopQn2/yOsimy2OlVAZtqpXawMsxK9fMbSuTs6MhT8N1SC3DbKhJHoQrCKs5iApus5s9qgu1lfcx7",
	"pIinMk5l9uCCfuLf5KHB/tA+0W08jKVFKdCghJtrra1TsbHuB2EyoaRj5Q/t7Ybwe7kgNMtHJwImh025",
	"Dzto59fdTfu3TCZrlw5LHmKatOhDP378BDdkpqC/ybilzMStZp5VDccZ7sNXTJdmL48AP38jAMTTp8RV",
	"1lzjkE3XyxanbWU10doq/ldqj5iSDdxQq/KegqO8f7l/W6eGPDKLi3MaP797vBGXA9nahit03dmEcw3f",
	"1YKrjl9n/kqLv/SRvX+SRaROaBymkF29qaRKlqyUuy2nnAUC7U25XNhKAkpOmhTsV1s+Ppmj8477d50q",
	"vMA7vyiE5tYZrFN596wadMM+L6hA5D7FoUC/F3LBYShQoyQONQXgp989daZTiXweTSkjolr9Cd47gwfc",
	"YP5mavD0XL9Jg7dT00O3TM3qb0WKmyx9PVtDbl3UTWEB07Qp/IWQd9FC/xv2gUtyol8ToQLJleJlMGjm",
	"84TMsSRZTURTKcLWB9i9+liNCh0Ut0K9W9fbOtlHKB1Uf0ir6US4Jiwo1ZapHwX2Qe5NGfIgduXD5Xk7",
	"fjRACywWfXTNI1KOVd0Tqa9W1JmsL1CEg+xuyVwUwOq/QhFea6sSoz9IwjWDbM4FBGSLL6XoubrIX6sT",
	"48h8XkcRMedxefrnxKcRDtHe98P+AN2kg8GB/wP8h6Bhf/DKQ/Z1G4EWfKVmtY6gDAQOS1k5OEQrLPpo",
	"YN5MAkYK1yhv7owFU0pxXsb9kYpzri7DXsr2JQINRixonJdt2uoetVHA4yCg6pesVgekIfFUtqUiFS5Z",
	"H5GGlIv4atmvhER8aR0Aeekrxb35W2nltXtKW6jCybXw2Zwby+vvVYyL5tWo74Kv8LrXjOvQTCaxr2Pm",
	"IojR6wVkKf57VkOizxN9ZV9LSbIPfV3pYg+nV5foPiVK1y0o81Akkq2t1RFSpk62JcVA0zM6S/7v/xES",
	"msUJiXFCBFK4JZEuf4Onij9AUpjCIJKjKUEJwQEN1wjb/CcwXkzdCbgw64NCobCKcQIx9gXhRZaKv/Rr",
	"mGrhywgrRU2fkhEcQ6B1fC/03OwbYgqRCN/pIpvfByRWEpjJjAYEi3U/I1LAiUCMS7TgYYD8hEoQCoWp",
	"9tFnro8z7OuSf9kVqcJJ1/QnD565DhQLnoYBjLYuoB/QhPgyXIPQpBLMm/pCFYKlTnqj/qg/BvMpJgzH",
	"tHfSO+gPIIAsxuYxg/3laN+Ib/VPpxUNxqaV8Rjq6NkSkjRBCQl1xZfCSdBHp7b4izqz82dop2vEGUE8",
	"QRFPyA2jzHGMZPUpFdGUsmNBFXJZi2sekYhrprA/4LXd45SpAW+YGdF9cPXRJ2gtEE6U9JpTZrEF3YXP",
	"0OGgjy5oKNUKKfBTgnAch5QEN0xys1oWHOgd6ujRjxYEvZPevxN5asisqJ/giEgIFvm1Su03PIowEmrL",
	"ABIhFbKPTq1hOENCawRckd6nMSXmAWW2RpTtw64qEMcsz42tsIgLuZ+7lqlTlmcPpqzEFY5IbrnCA3xK",
	"HDrCNr96NSF+XsX8IeenIr4lZEcXk9F4cnB0/nZ49HoyOTw7PTgYjc6OJ+Pzs9cXB4PBYHhxfnB0Nn47",
	"OB+NTgdnk7dv3k5OD88GR8fnp2fjhhnIB7h93QL9U7a2vl9I8xGlTF2zAHtvfjy9/NC//uX9mU40Kj0q",
	"0P/88f3Hs++Hb4dNdLXpG93R+pjvMGUZlLjJRB4oGMKWVePshu2JFY7hJM+unr3sZPRQwNWO8EwEnmdC",
	"P15VuAhglAoRNlBazWCrKeXBC1ZI6HxgEngo0BfSivzwYqFrxBBelygOWXsTIcIPNEqj3snhwOsZb2FD",
	"EGXtBV0tMdRq89lMEFlCqgkn3XQDUm14/KZUDBFzZp6uHA0GTSpK1m7fSKFP5gdQVEQaRVjpxT3zFSmR",
	"D5/U+RBwv/FsuF7h+Zwk+x9jwtSRfNAfWKeqrylSeIOc+2mk0Om7xOM593W4Zn1GlWpUDUOWRxKVmZ2b",
	"wbFVOPFcSd/edRHZ3m92zovsUVbntD8B9ymrFmnlC4G+ZSr+LYh5QRXZ2ViZoI/o2tzNE7C7rKfu2rCc",
	"+iO6VDphNjOTWAb2stj/U5kGXzdOFASaruxgDHltcAuj4VGf9G+YOoPBtFP7M+aJVvB0invZxIeSbwXP",
	"0g0zbjTVAKwceDRUrjiKeEDEyQ37FikbD1kvHspOUUSlEQcCKVkHWpoiOI2IcTOJPrqAmzoWKG0sAEtu",
	"RcPwhiHQOpVOkB862RigK2AFsG8RUMeUAweMBGXzkMA4/f5njgTBiZqkUBaZ2tm29DZ5UIpg5vASMH0F",
	"3oI9QTEXgirlV1PzBB1GlHkQ/OqhACvZTMidhyA0yUP3KU4kSTy0JjgBTOGW9QT9Ouz3x4PBb310Tmbg",
	"IcolaeY27aNzzr6Rtlg4orN8glQgeN8JQre+BZ16X/ITxGNj8FEmPe3BE8TnLIDJXFn0U4HnxGh0hdX+",
	"VgdCDnVs6wn6/d/sxx8CvFaG92gCM/hhOPi92hxNyUwdbQqNto76X5L/MJwMjo9Hh5OBhgV1Py0sPFOL",
	"p6bVBZhqp8BNjo4HxwbcuUZJroh9pBtuYLjhOHMQwO0zOJsU6cFo8uCl5sJnxld9xY8fWbgu1OoeDwb5",
	"WoGGas++E9X69zrSFTTdhLhhV/mxBa4Fs2awWApEgQL2VokV3lmwWKCISNw3zjNlXssFuWEw+Xx7WNej",
	"oj2cg2U+8Tmb0XmqpaLmF7XP7NRg9+ttY3aVMgqVJQF7fKZGUetXmvjr100cUO6IUiZpqKjvAPG75Xrj",
	"rdVLWOjBrPKfK/Vu9R9CGu1tygYbQEtdEJzC3ExSYQWMjaWmWvWAc8OoFLaYduZ4kElKttPI7cZXXIpD",
	"Pw2xtVpyPS/ATZpdwWueD0qY0mB+7SkZ1vN6SohBoKXqp8SYDbHseT0jyHpeT0mygoujGeMPdYEGoRhA",
	"wj661ub0lGR7NJOJxTkdDNwTss+P10jYog6+LdznKKY3xqGoXHT00eUMcbXX9RZThjJdEubVhEIR0ZyV",
	"G3Rr3q5Rbkb/Gli8wwQqaBlp40ZLbaEtEdtJvS3usgalSJeUVgIN/PnI7smqgpQ92r9JN7INjdvJBhJk",
	"oQUvas6LmvOi5ryoOf8INeetEYYdNZ0XfeNF3/g76xsVdm9QOWyrRl2jVuVno9JRfI9QSa0sUVeJDB3p",
	"V30k7tI8QkH1hVWuoFitAsIEbfTEi7Lyoqy8KCsvysq/srJSe516W7+MFrTgkUFWMhcyLHRwG53Z/dqg",
	"xRi3zYubxqU2/V20phelqbPSVN12DVpTXmL6jXmFuUl9glysjSoTZJTAKto8Lg9yoDydZqIkictn86I2",
	"vahNL2rTi9r0ojZZtalY3KGbxmQE9bb6Uv9FYXrxM72oTKRUS6RBW7qGfPQmDUkuw80xPnmqgI7tsclL",
	"kD3kmcPAlc3UcNelC5Pr7CWdKYV+MNXK4VlM9B0aoW/NL/DENtzNvehQLxrUiwb1okH9C2tQhcTqlwuy",
	"F8XlX1hxyTm9QW9xKAlVJUZn7u3/aXJMvnYJy8b29XMhsaRCUj931FSypPVJl5Terwa5Z0tm2MxBPbwz",
	"el0/pWBeb9ywpW0uD+SZSX/hwqWP3lK5AEUCgq0V5sxGYJv+Jg8JcCyxZG/KpsMvD7PFaH58eH+wHMjg",
	"/nAyY2T5MHnwH6TPFlJEfjoZR+44wjyZp3so4U7cUSRbU06CboNskZQyU4juvFCJ0K9URzHWp1lrpYSd",
	"Zg3UMQtyQSz4iiHOfAKyQi0Q+UYgneduau6YxdH5keUVu2G6EIsew9MwFS6lnkoPVesKgzXkkmmaiFOD",
	"YUcrHMYzE0RxQgRhtbebdzK3H7H27ateyUQxqaK7pWWY9Fybf1+jqfl+rj9vPx/Tv2E+dnQAn83H1ppv",
	"nw3kACpZ9oEHpPAGu+EywwROuaSr2e80HdWzaTLqW3lpFI/s/wnsvlk+FyoXWd47yWxOSCbx4DVh66U/",
	"vfqlj1zTu9Kc2cr8sK1rZduduXcVKWhS755ZBqo5NIaq5hWewEB2knsf7iObU7TyAzBPutYuuM9QASZr",
	"bNdjRkkYmDKAYHzD4Wj73jCfJxr9QO2r3MuAQu6blOefqaB6pEXVkFcyMEhoGAZ81Zgsmz2I/J9odb06",
	"O6tvvhRZLRJFRNXNktA4EMBi1S+8gRDu37DzPEHwYBBU83F1DWOnLAYoTnV+qPronkeqha58/Br+/2By",
	"CKWFw9Clw+/Mt7BEDcwLDp2c+Uqsu9uxbcWGPkXVwcr13ZxoYqGN7KNzuo0FGdqSOSYDnQqUPZ7iWovs",
	"Y30tsvIF+pEU/X6rSAUUEwiedA3a6F8R0u2CovX0nId8isNC6EPur4dDSKnVhZR657WB2c87eD9b2Ozf",
	"NWIaeDZRnSPa/2KeFWmd7yKNsK4PEWF/QZkuQgG1J2yuqamgUE5tbbgaUR06JbLuPG7N8avaogsK3LYh",
	"sTWr/7HvF0uFOwlki4nbnM5U6KIIeVUKDwmem6WmmY+Z0l/5kiQJDXSXiEY0ce5S/YBOXrd8F/7Iejdt",
	"BT1IAfF8vDphTFGK28xCaCTQpSlfkdsSoLybt6pzvc2q9h54m2KSaAeSKVphzTmoi6jjP9EMnk1iMlwj",
	"OivgvcACRWkoaRwShKF0iFvxM1M2GGa2zE7krQLpTGVLn3z4OrXV2QhlC9v2aULJUh+jREhTSJKyGbfF",
	"ZPyEK5srq4LZRpJ32YA7xa7Y3p2JkI9Xn3w3A0DX8NNwoUdBmdLVjXiifm+Z9O52QBFA5znr4erzvbfv",
	"YXWeL/TYfr764a1d5gs9O09Uj1OcqNIN9kPO79J4/0/1j+3cVS1VXKvuKUWmWk3Xuqu5VGR2kz6Ei7DK",
	"hVRtwVCHLm3072c2lCrlcpv8ibaebNVhlC1OYldnJ39i9lpYy3rk/rPG5RBn69Os1XbuwgIGc8Us8m/q",
	"/Ks8v9ak39ElKfpA8tlP1yjRIJBe0d7Xr1+//r8AAAD//zJGXQSz5wAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
