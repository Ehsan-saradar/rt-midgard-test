// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Action defines model for Action.
type Action struct {

	// Int64, Unix timestamp for when the action was registered
	Date string `json:"date"`

	// Int64, block height at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status string `json:"status"`

	// Type of action
	Type string `json:"type"`
}

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Coin defines model for Coin.
type Coin struct {

	// Int64 (10^8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistoryItemPool defines model for EarningsHistoryItemPool.
type EarningsHistoryItemPool struct {

	// Int64 (10^8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64 (10^8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64 (10^8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64 (10^8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64 (10^8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string  `json:"address"`
	Chain   string  `json:"chain"`
	GasRate *string `json:"gas_rate,omitempty"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                  int64 `json:"AsgardSize"`
	BadValidatorRate            int64 `json:"BadValidatorRate"`
	BlocksPerYear               int64 `json:"BlocksPerYear"`
	ChurnInterval               int64 `json:"ChurnInterval"`
	ChurnRetryInterval          int64 `json:"ChurnRetryInterval"`
	CliTxCost                   int64 `json:"CliTxCost"`
	DesiredValidatorSet         int64 `json:"DesiredValidatorSet"`
	DoubleSignMaxAge            int64 `json:"DoubleSignMaxAge"`
	EmissionCurve               int64 `json:"EmissionCurve"`
	FailKeygenSlashPoints       int64 `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints      int64 `json:"FailKeysignSlashPoints"`
	FundMigrationInterval       int64 `json:"FundMigrationInterval"`
	JailTimeKeygen              int64 `json:"JailTimeKeygen"`
	JailTimeKeysign             int64 `json:"JailTimeKeysign"`
	LackOfObservationPenalty    int64 `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks       int64 `json:"LiquidityLockUpBlocks"`
	MinimumBondInRune           int64 `json:"MinimumBondInRune"`
	MinimumNodesForBFT          int64 `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil    int64 `json:"MinimumNodesForYggdrasil"`
	NativeChainGasFee           int64 `json:"NativeChainGasFee"`
	NewPoolCycle                int64 `json:"NewPoolCycle"`
	ObservationDelayFlexibility int64 `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints          int64 `json:"ObserveSlashPoints"`
	OldValidatorRate            int64 `json:"OldValidatorRate"`
	OutboundTransactionFee      int64 `json:"OutboundTransactionFee"`
	SigningTransactionPeriod    int64 `json:"SigningTransactionPeriod"`
	YggFundLimit                int64 `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock struct {
	Current []LastblockItem `json:"current"`
}

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn string `json:"last_observed_in"`
	LastSignedOut  string `json:"last_signed_out"`
	Thorchain      string `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64 (10^8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64 (10^8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64 (10^8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`
	PoolShareFactor         string `json:"poolShareFactor"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), Total Rune pooled in all pools
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NetworkFees defines model for NetworkFees.
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// ObservedChain defines model for ObservedChain.
type ObservedChain struct {
	Chain  string `json:"chain"`
	Height int    `json:"height"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolLegacyDetail defines model for PoolLegacyDetail.
type PoolLegacyDetail struct {
	Asset string `json:"asset"`

	// same as assetDepth from pool/stats
	AssetDepth string `json:"assetDepth"`

	// same as addAssetLiquidityVolume from pool/stats
	AssetStakedTotal string `json:"assetStakedTotal"`

	// same as toAssetCount from pool/stats
	BuyAssetCount string `json:"buyAssetCount"`

	// same as toAssetFees / toAssetCount from pool/stats
	BuyFeeAverage string `json:"buyFeeAverage"`

	// same as toAssetFees from pool/stats
	BuyFeesTotal string `json:"buyFeesTotal"`

	// same as toAssetAverageSlip from pool/stats
	BuySlipAverage string `json:"buySlipAverage"`

	// same as toAssetVolume / toAssetCount from pool/stats
	BuyTxAverage string `json:"buyTxAverage"`

	// same as toAssetVolume from pool/stats
	BuyVolume string `json:"buyVolume"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// same as 2*runeDepth from pool/stats
	PoolDepth string `json:"poolDepth"`

	// same as totalFees / swapCount from pool/stats
	PoolFeeAverage string `json:"poolFeeAverage"`

	// same as totalFees from pool/stats
	PoolFeesTotal string `json:"poolFeesTotal"`

	// same as averageSlip from pool/stats
	PoolSlipAverage string `json:"poolSlipAverage"`

	// same as addLiquidityVolume from pool/stats
	PoolStakedTotal string `json:"poolStakedTotal"`

	// same as swapVolume / swapCount from pool/stats
	PoolTxAverage string `json:"poolTxAverage"`

	// same as units from pool/stats
	PoolUnits string `json:"poolUnits"`

	// Int64(e8), same as buyVolume + sellVolume
	PoolVolume string `json:"poolVolume"`

	// same as assetPrice from pool/stats
	Price string `json:"price"`

	// same as runeDepth from pool/stats
	RuneDepth string `json:"runeDepth"`

	// same as addRuneLiquidityVolume from pool/stats
	RuneStakedTotal string `json:"runeStakedTotal"`

	// same as toRuneCount from pool/stats
	SellAssetCount string `json:"sellAssetCount"`

	// same as toRuneFees / toRuneCount from pool/stats
	SellFeeAverage string `json:"sellFeeAverage"`

	// same as toRuneFees from pool/stats
	SellFeesTotal string `json:"sellFeesTotal"`

	// same as toRuneAverageSlip from pool/stats
	SellSlipAverage string `json:"sellSlipAverage"`

	// same as toRuneVolume / toRuneCount from pool/stats
	SellTxAverage string `json:"sellTxAverage"`

	// same as toRuneVolume from pool/stats
	SellVolume string `json:"sellVolume"`

	// same as addLiquidityCount from pool/stats
	StakeTxCount string `json:"stakeTxCount"`

	// same as uniqueMemberCount from pool/stats
	StakersCount string `json:"stakersCount"`

	// same as addLiquidityCount + withdrawCount from pool/stats
	StakingTxCount string `json:"stakingTxCount"`

	// same as status from pool/stats
	Status string `json:"status"`

	// Int64, same as history/swaps:uniqueSwapperCount
	SwappersCount string `json:"swappersCount"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64(e8), same as swapVolume pool/stats?period=24h
	Volume24h string `json:"volume24h"`

	// same as withdrawCount from pool/stats
	WithdrawTxCount string `json:"withdrawTxCount"`
}

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`
	Asset                  string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Int64, number of unique adresses that initiated swaps transactions in the period.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Liquidity Units in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// PreflightStatus defines model for PreflightStatus.
type PreflightStatus struct {
	Code   int    `json:"code"`
	Reason string `json:"reason"`
	Status string `json:"status"`
}

// ProxiedNode defines model for ProxiedNode.
type ProxiedNode struct {
	ActiveBlockHeight int    `json:"active_block_height"`
	Bond              string `json:"bond"`
	BondAddress       string `json:"bond_address"`
	CurrentAward      string `json:"current_award"`
	ForcedToLeave     bool   `json:"forced_to_leave"`
	IpAddress         string `json:"ip_address"`
	Jail              struct {
		NodeAddress *string `json:"node_address,omitempty"`
	} `json:"jail"`
	LeaveHeight     int             `json:"leave_height"`
	NodeAddress     string          `json:"node_address"`
	ObserveChains   []ObservedChain `json:"observe_chains"`
	PreflightStatus PreflightStatus `json:"preflight_status"`
	PubKeySet       struct {
		Ed25519   string `json:"ed25519"`
		Secp256k1 string `json:"secp256k1"`
	} `json:"pub_key_set"`
	RequestedToLeave    bool     `json:"requested_to_leave"`
	SignerMembership    []string `json:"signer_membership"`
	SlashPoints         int      `json:"slash_points"`
	Status              string   `json:"status"`
	StatusSince         int      `json:"status_since"`
	ValidatorConsPubKey string   `json:"validator_cons_pub_key"`
	Version             string   `json:"version"`
}

// ProxiedNodes defines model for ProxiedNodes.
type ProxiedNodes []ProxiedNode

// Queue defines model for Queue.
type Queue struct {
	Internal int `json:"internal"`
	Outbound int `json:"outbound"`
	Swap     int `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64 (10^8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, unique users (addresses) initiating swaps in the last 24 hours.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64, unique users (addresses) initiating swaps in the last 30 days.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64 (10^8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Int64, unique users (addresses) initiating swaps since beginning.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64 (10^8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip by swap.
	// Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps to asset denoted in rune
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps to rune
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64(e8), toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Int64 (10^8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), trade slip percentage
	TradeSlip string `json:"tradeSlip"`

	// Int64 (10^8), minimum output amount specified for the swap
	TradeTarget string `json:"tradeTarget"`
}

// Transaction defines model for Transaction.
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolLegacyResponse defines model for PoolLegacyResponse.
type PoolLegacyResponse PoolLegacyDetail

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ProxiedNodesResponse defines model for ProxiedNodesResponse.
type ProxiedNodesResponse ProxiedNodes

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action (swap, addLiquidity, withdraw, donate, refund)
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *string `json:"period,omitempty"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *string `json:"status,omitempty"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"69ev/zcAAP//V5BcThHWAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
