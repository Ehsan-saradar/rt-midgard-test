// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// AssetSummary defines model for AssetSummary.
type AssetSummary struct {
	Asset string `json:"asset"`

	// Int64, unix timestamp (second).
	DateCreated string `json:"dateCreated"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	Price string `json:"price"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64, Average bond of active nodes.
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64, Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64, Maxinum bond of active nodes.
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64, Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64, Median bond of active nodes.
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64, Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64, Minumum bond of active nodes.
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64, Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64, Total bond of active nodes.
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64, Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`
	BondingROI string `json:"bondingROI"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks).
	PoolActivationCountdown string  `json:"poolActivationCountdown"`
	PoolShareFactor         string  `json:"poolShareFactor"`
	StakingROI              *string `json:"stakingROI,omitempty"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64, Total Rune pooled in all pools.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64, Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NodeKey defines model for NodeKey.
type NodeKey struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	Price string `json:"price"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Enabled, Bootstrap.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// Volume defines model for Volume.
type Volume struct {

	// Sum of "rune_amount" of buy swap events.
	BuyVolume string `json:"buyVolume"`

	// Sum of "rune_amount" of sell swap events.
	SellVolume string `json:"sellVolume"`

	// Int64, The beginning time of bucket in unix timestamp.
	Time string `json:"time"`

	// buyVolume + sellVolume
	TotalVolume string `json:"totalVolume"`
}

// AssetsSummaryResponse defines model for AssetsSummaryResponse.
type AssetsSummaryResponse []AssetSummary

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {

	// True means healthy, connected to database.
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain.
	InSync bool `json:"inSync"`

	// Int64, the current block count.
	ScannerHeight string `json:"scannerHeight"`
}

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodeKeyResponse defines model for NodeKeyResponse.
type NodeKeyResponse []NodeKey

// PoolDetailResponse defines model for PoolDetailResponse.
type PoolDetailResponse PoolDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse []string

// VolumeResponse defines model for VolumeResponse.
type VolumeResponse []Volume

// GetAssetInfoParams defines parameters for GetAssetInfo.
type GetAssetInfoParams struct {

	// One or more comma separated unique asset (CHAIN.SYMBOL)
	Asset string `json:"asset"`
}

// GetTotalVolumeParams defines parameters for GetTotalVolume.
type GetTotalVolumeParams struct {

	// Return volume for this single pool. Returns volume for all pools if missing.
	Pool *int64 `json:"pool,omitempty"`

	// Interval of calculations
	Interval string `json:"interval"`

	// Start time of the query as unix timestamp
	From int64 `json:"from"`

	// End time of the query as unix timestamp
	To int64 `json:"to"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xabXPbuBH+KztsPyQ9hrJ9yc1Unyo7SePp+WVstzOZXHoDESsRZxKgAVC2JuO/1T/Q",
	"P9ZZgJREEtSL07tvkgjuPvv2YLHQtyhVRakkSmui8bdIoymVNOi+TIxBa26romB6eVM/oQepkhalpY+s",
	"LHORMiuUHP1mlKTfTJphweiTsFg4UX/WOIvG0Z9Ga3Ujv8yMnJpaS/QcR3ZZYjSOmNZsGT0/P8cRR5Nq",
	"UZKSaBxN6AEQBiakkHPIRSEscuBomcgNzJSGUqncJCTuE7LcZi+CX2pVorbCu4Mzy6bMi2gjutMVQoFM",
	"GsictmVM+CSmBMsqaF5NopV5U6VyZJIQCnm7lOk+YhP4yHLT/Hgh+JxpDsKAsSLPIWU2zcgjVUlabYaQ",
	"ZkzIsFqTMilRf0Ixz2xf+7m0P72NvZBKa5QWprlK7yFVlbQbIo3VQs4jCpTGh0po5NH4y9pdXU0rg7+u",
	"RKjpb5jaULBv0FZaGmCy9gEYy2xlQM0a+8mWS7SPSt+/KMrbcrOWuwOZh7+ZkvV7LvAOn+L4D/wdi6hW",
	"sE/9HAT8Wqn8vaur/7tv16JDKK960DbLW0l0Jd5ANN/n2U4m78tBagbMcaQjmn+pvCrw9wuxl78Pur+j",
	"BR9lCjJrsFplWQ4LJ4aIQc6RkDsqcCpWpN+wcY8DnblBj3Fm8Uwjs1T9A1xSSfEEVhRoLCtKeGUwVZK/",
	"DnBJHJVapAGq/ZgrZmNwT1f+ByFBVxITOE8wcR+BFURTMKpX+K+7Wcsb2DanAdPnqzg6JUq8wUemuem7",
	"a7p+GnTaVEm+5TFl+ODjDvBNVS3BLTFBE5TkF2i1SAMWsAVqNsdJasUCaeVgcCd+JZBqFxn3CkjFKcsC",
	"Ea5F31om+XR5kGzj3/HCQ7IL9iSKqtgD9gV7ErIq9oddi94H9oVfegBs5ILJfVC7hQeAduv3wtyWvBuy",
	"kPt6mvx8kKe96L1Qd2TvhO24cA/Qd44z94bsxO4DuC13B9xOqXexx4EqDeRSKFahSglYESzWUFYFgxas",
	"mRATNd1Wn4VW6Mwh+3Zcv0jN0Rnx/2A4LqtiippC4R0Bl0OJM+0Q/rYdu7U51HS/wbRbX91YWr8p5Hxy",
	"/XlwS3x1DD/AqzXxw198v26uUV8oabNRJ29ev4Z/w/EJvDkO2uk13lydBx2di4dKcGGXuyEZy+5xK6b3",
	"WNpso77c4W07PIlP9iyrtNxxfKF1kLk1pMBrDzccSnnnuCbNpQtXj3LrwUhjUTen1NWQApLizXBi4JWQ",
	"tdLXg1pvM6bxI0ut0kFfkwO3hMKsq8r00a461br4wK+LDyiiWsEhVdQou9zKv9S5I7+pJO7gSVriXIuc",
	"ej2W580Bf0j0DRrUi11yc5y55rFZvYt5Nwu4QwVxi6Q6UekTUcCrfad0bOln/XDW9jOrVdItRulUc5CZ",
	"6+Nlj5mRn7x7d/zXvp/rB1BW01ykcI/LUKwMpuXJu5/uj/sCVo+2iugEaC0vXkEL2bNx9jzgjOOeOLLa",
	"ygr10YM2k+Z0Qj9TQIaZZwuNNt3vNeoUpaWPnwXmfAxMyorloP1ZD40VBZ1YoDJuLsaMhUfEewNCpqrA",
	"GDyTgNtwKknFZFGjIYxWAUuHZjt/3Hksjmj5IU525LDLx35qFJixZegmSg58IyEGTOYJfJBsmiOP4VQp",
	"a6xmZVB0JYU1g1h/bkoL/knrdgL1x/OTt9utbx3lqYF8ZOVKtov7ydsMKKSSw0yrwnuJo1TWcyh93/84",
	"vEbVqoLNYDUpss7nldcbH4UqsZ5q9I/O1XL9qO2H26ogm39xyn/1ifBL5Lb3aulcAbigbiqcCZjnh0um",
	"t3aKpiZgeMfJEKY4F7LVL0yr9N4XTHs4MryzDWFfOQx+gA0bdx4mhFu0dnfLQ22d4YGtkDPVTLtY6piT",
	"2qI8GkccF+ZvNlPaj6GV9qOiXgU2k+xrz/ST63N4qFALNHD36ermjN52qczk0o+0DeRC3iOHhWAu6U/F",
	"TP/3P8a6ZaXGkmmkipgpXfhWjE1VZd1aWQ85rYIpNXGMi3wJbMFEThXvLxA8lMqgNokLHqEqmTZowGom",
	"DW3pSvp8cPNSX2htwMYqwmEzLFzn4iL8xnjbmhE5ASnYPfqHHEuUnIQ2PkBmlsnKSVyhAaksZCrnkGph",
	"RcryTVMTuFOe2llq4VHYDE4/XN9S9hKmiSE5+BR768Bkqsq507bcgM+FxtTmS5eKwuYU936giBxQGx/L",
	"o+Sn5IhCrEqUrBTROPoxOUqOiBSYzVxhjxYnIz81pW9zDLSTfmd2PNUNHwNTYipmIm1Gr9DMs1Gqap61",
	"3rEKuDBlzpb0ItrWDrVgWqjKOCd4b81YiiamzTKvuN9BLW2OjtjIDURQTvI592NWt8GfUwGQhZoVaFGb",
	"aPyla9KVRFAaCqWRdt+C4NALbreW4qHCGtirs0+T88vk9vPF6dXPr6mNeWJFSc7/Ep1eniZ3VxdXp2+O",
	"P1CH476fTS7fHB2/peIUpMmFkXpFVrguvmbwdc1bXWG8MXzu8sPXuH0NeHJ0NHRaXa0bhe8K3Wy5mSW7",
	"sbTviM7XMXJrKCe4SgcT4vaRzeeoR1clSirDH5OjVR74SM9RovcmV2lVNBTdC9h75Vr3kIGd9nNAZVuT",
	"CZj4vgbgzYsjy+aUEVH796+N3f5aa9D0rbc1RGb1tVhjUdPHTK7Pgw7w16HRS2LcuUntW17LXlkmiP2W",
	"/oz/62K1b221s9XZCNmEGetedcHyBM7rc7bwPLheomshROCtQ2LPDXcb29qO0q1vUmpIJNpmwgC12Hnd",
	"yK04aGPRSj+IGRTC0PokChepu8rarElfHtE4EtQ8rDdx8sEcNbk40GY491ACpCxPq9wZbAZUNt7cSg0o",
	"q4JS910hKJMzVWl3N0Jy6GARxVGhpEunh4ppi/R4iUxvtArrvqNX1ZZpu+qEKGn9FsRMpxkaMIG2263w",
	"X+DFD5J/ByKrvhPPi7i3c/HYr0s/7GjuD+vqlOth6+HE07omDpRX/fy9f3y4Sd37/L5NDQKnYmWTGze9",
	"zCLFcWPSYIJW1dOsF9jTuf8P2NPV39jkOGQfm1j3fzHEQO6o7PZmMFVZKm2RBwnR3aK/yLb2/fvQlu/l",
	"t4wafXPInnca19z8bxzRx8Dp1Gnq0UPszruefWOYXH9OYMjIeuyzg/Td/kJVnWy2YL0OzJEAtbZ/eMMV",
	"+GNG3/V8WyPt/z9RB6Rud5Lmvwlb45FVBfPHm4KlmZD+DOWOTk3bVB8A2l1aMPHq3m6vpuyligOuWatt",
	"+rPb1htfn5+fn/8XAAD//xrYJssfJwAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
