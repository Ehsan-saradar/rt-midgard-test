// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {

	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still
	// pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still
// pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity
	// deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// Balance defines model for Balance.
type Balance struct {
	Coins Coins `json:"coins"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Represents a digital currency amount
type Coin struct {

	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, The liquidity unit value index. Sqrt(assetDepth * runeDepth)/liquidity units
	Luvi string `json:"luvi"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval at time endTime
	EndAssetDepth string `json:"endAssetDepth"`

	// Int64, Liquidity Units in the pool at the end of the interval at time endTime
	EndLPUnits string `json:"endLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval at time endTime
	EndRuneDepth string `json:"endRuneDepth"`

	// Int64, Synth Units in the pool at the end of the interval at time endTime
	EndSynthUnits string `json:"endSynthUnits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, The liquidity unit value index increase between the first and last depth item
	LuviIncrease string `json:"luviIncrease"`

	// Float, The impermanent loss between the first and last depth item
	PriceShiftLoss string `json:"priceShiftLoss"`

	// Int64(e8), the amount of Asset in the pool at the start of the interval at time
	// startTime
	StartAssetDepth string `json:"startAssetDepth"`

	// Int64, Liquidity Units in the pool at the start of the interval at time startTime
	StartLPUnits string `json:"startLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the start of the interval at time startTime
	StartRuneDepth string `json:"startRuneDepth"`

	// Int64, Synth Units in the pool at the start of the interval at time startTime
	StartSynthUnits string `json:"startSynthUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of
	// liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {

	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync         bool     `json:"inSync"`
	LastAggregated HeightTS `json:"lastAggregated"`
	LastCommitted  HeightTS `json:"lastCommitted"`
	LastFetched    HeightTS `json:"lastFetched"`
	LastThorNode   HeightTS `json:"lastThorNode"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// HeightTS defines model for HeightTS.
type HeightTS struct {

	// Block height
	Height int `json:"height"`

	// Block timestamp (seconds since epoch)
	Timestamp int `json:"timestamp"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string  `json:"address"`
	Chain   string  `json:"chain"`
	GasRate *string `json:"gas_rate,omitempty"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                    int64  `json:"AsgardSize"`
	BadValidatorRate              int64  `json:"BadValidatorRate"`
	BadValidatorRedline           int    `json:"BadValidatorRedline"`
	BlocksPerYear                 int64  `json:"BlocksPerYear"`
	ChurnInterval                 int64  `json:"ChurnInterval"`
	ChurnRetryInterval            int64  `json:"ChurnRetryInterval"`
	DesiredValidatorSet           int64  `json:"DesiredValidatorSet"`
	DoubleSignMaxAge              int64  `json:"DoubleSignMaxAge"`
	EmissionCurve                 int64  `json:"EmissionCurve"`
	FailKeygenSlashPoints         int64  `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints        int64  `json:"FailKeysignSlashPoints"`
	FullImpLossProtectionBlocks   int64  `json:"FullImpLossProtectionBlocks"`
	FundMigrationInterval         int64  `json:"FundMigrationInterval"`
	IncentiveCurve                int64  `json:"IncentiveCurve"`
	JailTimeKeygen                int64  `json:"JailTimeKeygen"`
	JailTimeKeysign               int64  `json:"JailTimeKeysign"`
	LackOfObservationPenalty      int64  `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks         int64  `json:"LiquidityLockUpBlocks"`
	MaxAvailablePools             int64  `json:"MaxAvailablePools"`
	MaxSwapsPerBlock              int64  `json:"MaxSwapsPerBlock"`
	MinRunePoolDepth              int64  `json:"MinRunePoolDepth"`
	MinSlashPointsForBadValidator int64  `json:"MinSlashPointsForBadValidator"`
	MinSwapsPerBlock              int64  `json:"MinSwapsPerBlock"`
	MinimumBondInRune             int64  `json:"MinimumBondInRune"`
	MinimumNodesForBFT            int64  `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil      int64  `json:"MinimumNodesForYggdrasil"`
	NativeTransactionFee          int64  `json:"NativeTransactionFee"`
	NewPoolCycle                  *int64 `json:"NewPoolCycle,omitempty"`
	ObservationDelayFlexibility   int64  `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints            int64  `json:"ObserveSlashPoints"`
	OldValidatorRate              int64  `json:"OldValidatorRate"`
	OutboundTransactionFee        int64  `json:"OutboundTransactionFee"`
	PoolCycle                     int64  `json:"PoolCycle"`
	SigningTransactionPeriod      int64  `json:"SigningTransactionPeriod"`
	VirtualMultSynths             int64  `json:"VirtualMultSynths"`
	YggFundLimit                  int64  `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock []LastblockItem

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn int64  `json:"last_observed_in"`
	LastSignedOut  int64  `json:"last_signed_out"`
	Thorchain      int64  `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {

	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and
	// nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each
// outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// ObservedChain defines model for ObservedChain.
type ObservedChain struct {
	Chain  string `json:"chain"`
	Height int    `json:"height"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {

	// Float, Also called APR. Annual return estimated from last 30 days income
	// (linearly, not compounded). E.g. 0.1 means 10% yearly return.
	// Due to Impermantent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	// It includes synth mint or burn.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Float, Also called APR. Estimated annual return (linearly, not compounded).
	// Always estimated from last 30 days (doesn't take period into account).
	// E.g. 0.1 means 10% yearly return.
	// Due to Impermantent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// PreflightStatus defines model for PreflightStatus.
type PreflightStatus struct {
	Code   int    `json:"code"`
	Reason string `json:"reason"`
	Status string `json:"status"`
}

// ProxiedNode defines model for ProxiedNode.
type ProxiedNode struct {
	ActiveBlockHeight int    `json:"active_block_height"`
	Bond              string `json:"bond"`
	BondAddress       string `json:"bond_address"`
	CurrentAward      string `json:"current_award"`
	ForcedToLeave     bool   `json:"forced_to_leave"`
	IpAddress         string `json:"ip_address"`
	Jail              struct {
		NodeAddress *string `json:"node_address,omitempty"`
	} `json:"jail"`
	LeaveHeight     int             `json:"leave_height"`
	NodeAddress     string          `json:"node_address"`
	ObserveChains   []ObservedChain `json:"observe_chains"`
	PreflightStatus PreflightStatus `json:"preflight_status"`
	PubKeySet       struct {
		Ed25519   string `json:"ed25519"`
		Secp256k1 string `json:"secp256k1"`
	} `json:"pub_key_set"`
	RequestedToLeave    bool     `json:"requested_to_leave"`
	SignerMembership    []string `json:"signer_membership"`
	SlashPoints         int      `json:"slash_points"`
	Status              string   `json:"status"`
	StatusSince         int      `json:"status_since"`
	ValidatorConsPubKey string   `json:"validator_cons_pub_key"`
	Version             string   `json:"version"`
}

// ProxiedNodes defines model for ProxiedNodes.
type ProxiedNodes []ProxiedNode

// Queue defines model for Queue.
type Queue struct {
	Internal int `json:"internal"`
	Outbound int `json:"outbound"`
	Swap     int `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Deprecated, it's always 0.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Deprecated, it's always 0.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps (including synths) since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps (including synths) in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps (including synths) in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps (including synths) denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Synth to Rune since beginning.
	SynthBurnCount string `json:"synthBurnCount"`

	// Int64, number of swaps from Rune to Synth since beginning.
	SynthMintCount string `json:"synthMintCount"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {

	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {

	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of
	// the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity
	// pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at
	// the end of the interval.
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the
	// native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means
	// totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership
	// withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// BalanceResponse defines model for BalanceResponse.
type BalanceResponse Balance

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ProxiedNodesResponse defines model for ProxiedNodesResponse.
type ProxiedNodesResponse ProxiedNodes

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// Affiliate address of the action (swap)
	Affiliate *string `json:"affiliate,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {

	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
