// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {

	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still
	// pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still
// pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity
	// deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// Balance defines model for Balance.
type Balance struct {
	Coins Coins `json:"coins"`

	// full timestamp (nanoseconds since 1970) of the block at which the returned balance snapshot was valid
	Date string `json:"date"`

	// height of the block at which the returned balance snapshot was valid
	Height string `json:"height"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// ChurnItem defines model for ChurnItem.
type ChurnItem struct {

	// full timestamp (nanoseconds since 1970) of the block at which the churn occurred
	Date string `json:"date"`

	// height of the block at which the churn occurred
	Height string `json:"height"`
}

// Churns defines model for Churns.
type Churns []ChurnItem

// Represents a digital currency amount
type Coin struct {

	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, The liquidity unit value index. Sqrt(assetDepth * runeDepth)/liquidity units
	Luvi string `json:"luvi"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval at time endTime
	EndAssetDepth string `json:"endAssetDepth"`

	// Int64, Liquidity Units in the pool at the end of the interval at time endTime
	EndLPUnits string `json:"endLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval at time endTime
	EndRuneDepth string `json:"endRuneDepth"`

	// Int64, Synth Units in the pool at the end of the interval at time endTime
	EndSynthUnits string `json:"endSynthUnits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, The liquidity unit value index increase between startTime and endTime
	LuviIncrease string `json:"luviIncrease"`

	// Float, The impermanent loss between the first and last depth item
	PriceShiftLoss string `json:"priceShiftLoss"`

	// Int64(e8), the amount of Asset in the pool at the start of the interval at time
	// startTime
	StartAssetDepth string `json:"startAssetDepth"`

	// Int64, Liquidity Units in the pool at the start of the interval at time startTime
	StartLPUnits string `json:"startLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the start of the interval at time startTime
	StartRuneDepth string `json:"startRuneDepth"`

	// Int64, Synth Units in the pool at the start of the interval at time startTime
	StartSynthUnits string `json:"startSynthUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of
	// liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {

	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync         bool     `json:"inSync"`
	LastAggregated HeightTS `json:"lastAggregated"`
	LastCommitted  HeightTS `json:"lastCommitted"`
	LastFetched    HeightTS `json:"lastFetched"`
	LastThorNode   HeightTS `json:"lastThorNode"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// HeightTS defines model for HeightTS.
type HeightTS struct {

	// Block height
	Height int `json:"height"`

	// Block timestamp (seconds since epoch)
	Timestamp int `json:"timestamp"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string  `json:"address"`
	Chain   string  `json:"chain"`
	GasRate *string `json:"gas_rate,omitempty"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                    int64  `json:"AsgardSize"`
	BadValidatorRate              int64  `json:"BadValidatorRate"`
	BadValidatorRedline           int    `json:"BadValidatorRedline"`
	BlocksPerYear                 int64  `json:"BlocksPerYear"`
	ChurnInterval                 int64  `json:"ChurnInterval"`
	ChurnRetryInterval            int64  `json:"ChurnRetryInterval"`
	DesiredValidatorSet           int64  `json:"DesiredValidatorSet"`
	DoubleSignMaxAge              int64  `json:"DoubleSignMaxAge"`
	EmissionCurve                 int64  `json:"EmissionCurve"`
	FailKeygenSlashPoints         int64  `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints        int64  `json:"FailKeysignSlashPoints"`
	FullImpLossProtectionBlocks   int64  `json:"FullImpLossProtectionBlocks"`
	FundMigrationInterval         int64  `json:"FundMigrationInterval"`
	IncentiveCurve                int64  `json:"IncentiveCurve"`
	JailTimeKeygen                int64  `json:"JailTimeKeygen"`
	JailTimeKeysign               int64  `json:"JailTimeKeysign"`
	LackOfObservationPenalty      int64  `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks         int64  `json:"LiquidityLockUpBlocks"`
	MaxAvailablePools             int64  `json:"MaxAvailablePools"`
	MaxSwapsPerBlock              int64  `json:"MaxSwapsPerBlock"`
	MinRunePoolDepth              int64  `json:"MinRunePoolDepth"`
	MinSlashPointsForBadValidator int64  `json:"MinSlashPointsForBadValidator"`
	MinSwapsPerBlock              int64  `json:"MinSwapsPerBlock"`
	MinimumBondInRune             int64  `json:"MinimumBondInRune"`
	MinimumNodesForBFT            int64  `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil      int64  `json:"MinimumNodesForYggdrasil"`
	NativeTransactionFee          int64  `json:"NativeTransactionFee"`
	NewPoolCycle                  *int64 `json:"NewPoolCycle,omitempty"`
	ObservationDelayFlexibility   int64  `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints            int64  `json:"ObserveSlashPoints"`
	OldValidatorRate              int64  `json:"OldValidatorRate"`
	OutboundTransactionFee        int64  `json:"OutboundTransactionFee"`
	PoolCycle                     int64  `json:"PoolCycle"`
	SigningTransactionPeriod      int64  `json:"SigningTransactionPeriod"`
	VirtualMultSynths             int64  `json:"VirtualMultSynths"`
	YggFundLimit                  int64  `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock []LastblockItem

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn int64  `json:"last_observed_in"`
	LastSignedOut  int64  `json:"last_signed_out"`
	Thorchain      int64  `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {

	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and
	// nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each
// outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// ObservedChain defines model for ObservedChain.
type ObservedChain struct {
	Chain  string `json:"chain"`
	Height int    `json:"height"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {

	// Float, Also called APR. Annual return estimated linearly (not compounded) from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// Due to Impermanent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	// It includes synth mint or burn.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Float, Also called APR. Annual return estimated linearly (not compounded) from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// Due to Impermanent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// PreflightStatus defines model for PreflightStatus.
type PreflightStatus struct {
	Code   int    `json:"code"`
	Reason string `json:"reason"`
	Status string `json:"status"`
}

// ProxiedNode defines model for ProxiedNode.
type ProxiedNode struct {
	ActiveBlockHeight int    `json:"active_block_height"`
	Bond              string `json:"bond"`
	BondAddress       string `json:"bond_address"`
	CurrentAward      string `json:"current_award"`
	ForcedToLeave     bool   `json:"forced_to_leave"`
	IpAddress         string `json:"ip_address"`
	Jail              struct {
		NodeAddress *string `json:"node_address,omitempty"`
	} `json:"jail"`
	LeaveHeight     int             `json:"leave_height"`
	NodeAddress     string          `json:"node_address"`
	ObserveChains   []ObservedChain `json:"observe_chains"`
	PreflightStatus PreflightStatus `json:"preflight_status"`
	PubKeySet       struct {
		Ed25519   string `json:"ed25519"`
		Secp256k1 string `json:"secp256k1"`
	} `json:"pub_key_set"`
	RequestedToLeave    bool     `json:"requested_to_leave"`
	SignerMembership    []string `json:"signer_membership"`
	SlashPoints         int      `json:"slash_points"`
	Status              string   `json:"status"`
	StatusSince         int      `json:"status_since"`
	ValidatorConsPubKey string   `json:"validator_cons_pub_key"`
	Version             string   `json:"version"`
}

// ProxiedNodes defines model for ProxiedNodes.
type ProxiedNodes []ProxiedNode

// Queue defines model for Queue.
type Queue struct {
	Internal int `json:"internal"`
	Outbound int `json:"outbound"`
	Swap     int `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Deprecated, it's always 0.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Deprecated, it's always 0.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps (including synths) since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps (including synths) in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps (including synths) in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps (including synths) denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Synth to Rune since beginning.
	SynthBurnCount string `json:"synthBurnCount"`

	// Int64, number of swaps from Rune to Synth since beginning.
	SynthMintCount string `json:"synthMintCount"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {

	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {

	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of
	// the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity
	// pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at
	// the end of the interval.
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the
	// native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means
	// totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership
	// withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// BalanceResponse defines model for BalanceResponse.
type BalanceResponse Balance

// ChurnsResponse defines model for ChurnsResponse.
type ChurnsResponse Churns

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ProxiedNodesResponse defines model for ProxiedNodesResponse.
type ProxiedNodesResponse ProxiedNodes

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// Affiliate address of the action (swap)
	Affiliate *string `json:"affiliate,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`
}

// GetBalanceParams defines parameters for GetBalance.
type GetBalanceParams struct {

	// Unix timestamp as seconds since 1970 (if provided, height must not be provided)
	Timestamp *int64 `json:"timestamp,omitempty"`

	// Block height (if provided, timestamp must not be provided)
	Height *int64 `json:"height,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {

	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolParams defines parameters for GetPool.
type GetPoolParams struct {

	// Specifies the base interval from which APY is extrapolated.
	// Default is 30d.
	Period *GetPoolParamsPeriod `json:"period,omitempty"`
}

// GetPoolParamsPeriod defines parameters for GetPool.
type GetPoolParamsPeriod string

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`

	// Specifies the base interval from which annualPercentageRate and poolAPY is extrapolated.
	// Default is 30d.
	Period *GetPoolsParamsPeriod `json:"period,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// GetPoolsParamsPeriod defines parameters for GetPools.
type GetPoolsParamsPeriod string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
