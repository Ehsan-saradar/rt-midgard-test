// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Action defines model for Action.
type Action struct {

	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status string `json:"status"`

	// Type of action
	Type string `json:"type"`
}

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Coin defines model for Coin.
type Coin struct {

	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistoryItemPool defines model for EarningsHistoryItemPool.
type EarningsHistoryItemPool struct {

	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string  `json:"address"`
	Chain   string  `json:"chain"`
	GasRate *string `json:"gas_rate,omitempty"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                  int64 `json:"AsgardSize"`
	BadValidatorRate            int64 `json:"BadValidatorRate"`
	BlocksPerYear               int64 `json:"BlocksPerYear"`
	ChurnInterval               int64 `json:"ChurnInterval"`
	ChurnRetryInterval          int64 `json:"ChurnRetryInterval"`
	CliTxCost                   int64 `json:"CliTxCost"`
	DesiredValidatorSet         int64 `json:"DesiredValidatorSet"`
	DoubleSignMaxAge            int64 `json:"DoubleSignMaxAge"`
	EmissionCurve               int64 `json:"EmissionCurve"`
	FailKeygenSlashPoints       int64 `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints      int64 `json:"FailKeysignSlashPoints"`
	FundMigrationInterval       int64 `json:"FundMigrationInterval"`
	JailTimeKeygen              int64 `json:"JailTimeKeygen"`
	JailTimeKeysign             int64 `json:"JailTimeKeysign"`
	LackOfObservationPenalty    int64 `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks       int64 `json:"LiquidityLockUpBlocks"`
	MinimumBondInRune           int64 `json:"MinimumBondInRune"`
	MinimumNodesForBFT          int64 `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil    int64 `json:"MinimumNodesForYggdrasil"`
	NativeChainGasFee           int64 `json:"NativeChainGasFee"`
	NewPoolCycle                int64 `json:"NewPoolCycle"`
	ObservationDelayFlexibility int64 `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints          int64 `json:"ObserveSlashPoints"`
	OldValidatorRate            int64 `json:"OldValidatorRate"`
	OutboundTransactionFee      int64 `json:"OutboundTransactionFee"`
	SigningTransactionPeriod    int64 `json:"SigningTransactionPeriod"`
	YggFundLimit                int64 `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock struct {
	Current []LastblockItem `json:"current"`
}

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn string `json:"last_observed_in"`
	LastSignedOut  string `json:"last_signed_out"`
	Thorchain      string `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`
	PoolShareFactor         string `json:"poolShareFactor"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), Total Rune pooled in all pools
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NetworkFees defines model for NetworkFees.
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// ObservedChain defines model for ObservedChain.
type ObservedChain struct {
	Chain  string `json:"chain"`
	Height int    `json:"height"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolLegacyDetail defines model for PoolLegacyDetail.
type PoolLegacyDetail struct {
	Asset string `json:"asset"`

	// same as assetDepth from pool/stats
	AssetDepth string `json:"assetDepth"`

	// same as addAssetLiquidityVolume from pool/stats
	AssetStakedTotal string `json:"assetStakedTotal"`

	// same as toAssetCount from pool/stats
	BuyAssetCount string `json:"buyAssetCount"`

	// same as toAssetFees / toAssetCount from pool/stats
	BuyFeeAverage string `json:"buyFeeAverage"`

	// same as toAssetFees from pool/stats
	BuyFeesTotal string `json:"buyFeesTotal"`

	// same as toAssetAverageSlip from pool/stats
	BuySlipAverage string `json:"buySlipAverage"`

	// same as toAssetVolume / toAssetCount from pool/stats
	BuyTxAverage string `json:"buyTxAverage"`

	// same as toAssetVolume from pool/stats
	BuyVolume string `json:"buyVolume"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// same as 2*runeDepth from pool/stats
	PoolDepth string `json:"poolDepth"`

	// same as totalFees / swapCount from pool/stats
	PoolFeeAverage string `json:"poolFeeAverage"`

	// same as totalFees from pool/stats
	PoolFeesTotal string `json:"poolFeesTotal"`

	// same as averageSlip from pool/stats
	PoolSlipAverage string `json:"poolSlipAverage"`

	// same as addLiquidityVolume from pool/stats
	PoolStakedTotal string `json:"poolStakedTotal"`

	// same as swapVolume / swapCount from pool/stats
	PoolTxAverage string `json:"poolTxAverage"`

	// same as units from pool/stats
	PoolUnits string `json:"poolUnits"`

	// Int64(e8), same as buyVolume + sellVolume
	PoolVolume string `json:"poolVolume"`

	// same as assetPrice from pool/stats
	Price string `json:"price"`

	// same as runeDepth from pool/stats
	RuneDepth string `json:"runeDepth"`

	// same as addRuneLiquidityVolume from pool/stats
	RuneStakedTotal string `json:"runeStakedTotal"`

	// same as toRuneCount from pool/stats
	SellAssetCount string `json:"sellAssetCount"`

	// same as toRuneFees / toRuneCount from pool/stats
	SellFeeAverage string `json:"sellFeeAverage"`

	// same as toRuneFees from pool/stats
	SellFeesTotal string `json:"sellFeesTotal"`

	// same as toRuneAverageSlip from pool/stats
	SellSlipAverage string `json:"sellSlipAverage"`

	// same as toRuneVolume / toRuneCount from pool/stats
	SellTxAverage string `json:"sellTxAverage"`

	// same as toRuneVolume from pool/stats
	SellVolume string `json:"sellVolume"`

	// same as addLiquidityCount from pool/stats
	StakeTxCount string `json:"stakeTxCount"`

	// same as uniqueMemberCount from pool/stats
	StakersCount string `json:"stakersCount"`

	// same as addLiquidityCount + withdrawCount from pool/stats
	StakingTxCount string `json:"stakingTxCount"`

	// same as status from pool/stats
	Status string `json:"status"`

	// Int64, same as history/swaps:uniqueSwapperCount
	SwappersCount string `json:"swappersCount"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64(e8), same as swapVolume pool/stats?period=24h
	Volume24h string `json:"volume24h"`

	// same as withdrawCount from pool/stats
	WithdrawTxCount string `json:"withdrawTxCount"`
}

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`
	Asset                  string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Int64, number of unique adresses that initiated swaps transactions in the period.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Liquidity Units in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// PreflightStatus defines model for PreflightStatus.
type PreflightStatus struct {
	Code   int    `json:"code"`
	Reason string `json:"reason"`
	Status string `json:"status"`
}

// ProxiedNode defines model for ProxiedNode.
type ProxiedNode struct {
	ActiveBlockHeight int    `json:"active_block_height"`
	Bond              string `json:"bond"`
	BondAddress       string `json:"bond_address"`
	CurrentAward      string `json:"current_award"`
	ForcedToLeave     bool   `json:"forced_to_leave"`
	IpAddress         string `json:"ip_address"`
	Jail              struct {
		NodeAddress *string `json:"node_address,omitempty"`
	} `json:"jail"`
	LeaveHeight     int             `json:"leave_height"`
	NodeAddress     string          `json:"node_address"`
	ObserveChains   []ObservedChain `json:"observe_chains"`
	PreflightStatus PreflightStatus `json:"preflight_status"`
	PubKeySet       struct {
		Ed25519   string `json:"ed25519"`
		Secp256k1 string `json:"secp256k1"`
	} `json:"pub_key_set"`
	RequestedToLeave    bool     `json:"requested_to_leave"`
	SignerMembership    []string `json:"signer_membership"`
	SlashPoints         int      `json:"slash_points"`
	Status              string   `json:"status"`
	StatusSince         int      `json:"status_since"`
	ValidatorConsPubKey string   `json:"validator_cons_pub_key"`
	Version             string   `json:"version"`
}

// ProxiedNodes defines model for ProxiedNodes.
type ProxiedNodes []ProxiedNode

// Queue defines model for Queue.
type Queue struct {
	Internal int `json:"internal"`
	Outbound int `json:"outbound"`
	Swap     int `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, unique users (addresses) initiating swaps in the last 24 hours.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64, unique users (addresses) initiating swaps in the last 30 days.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), total amount of rune bonded to the network by node operators
	TotalBond string `json:"totalBond"`

	// Int64, unique users (addresses) initiating swaps since beginning.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip by swap.
	// Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps to asset denoted in rune
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps to rune
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64(e8), toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// Transaction defines model for Transaction.
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolLegacyResponse defines model for PoolLegacyResponse.
type PoolLegacyResponse PoolLegacyDetail

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ProxiedNodesResponse defines model for ProxiedNodesResponse.
type ProxiedNodesResponse ProxiedNodes

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action (swap, addLiquidity, withdraw, donate, refund)
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *string `json:"period,omitempty"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *string `json:"status,omitempty"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"5+vXr1//XwAAAP//uan0h3jWAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
