// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// AssetSummary defines model for AssetSummary.
type AssetSummary struct {
	Asset string `json:"asset"`

	// Int64, unix timestamp (second).
	DateCreated string `json:"dateCreated"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	PriceRune string `json:"priceRune"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	Price string `json:"price"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Enabled, Bootstrap.
	Status string `json:"status"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Two4HVolume string `json:"two4HVolume"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`
}

// Volume defines model for Volume.
type Volume struct {

	// Sum of "rune_amount" of buy swap events.
	BuyVolume string `json:"buyVolume"`

	// Sum of "rune_amount" of sell swap events.
	SellVolume string `json:"sellVolume"`

	// Int65, The beginning time of bucket in unix timestamp.
	Time string `json:"time"`

	// buyVolume + sellVolume
	TotalVolume string `json:"totalVolume"`
}

// AssetsSummaryResponse defines model for AssetsSummaryResponse.
type AssetsSummaryResponse []AssetSummary

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {

	// True means healthy, connected to database.
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain.
	InSync bool `json:"inSync"`

	// Int64, the current block count.
	ScannerHeight string `json:"scannerHeight"`
}

// PoolDetailResponse defines model for PoolDetailResponse.
type PoolDetailResponse PoolDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse []string

// VolumeResponse defines model for VolumeResponse.
type VolumeResponse []Volume

// GetAssetInfoParams defines parameters for GetAssetInfo.
type GetAssetInfoParams struct {

	// One or more comma separated unique asset (CHAIN.SYMBOL)
	Asset string `json:"asset"`
}

// GetTotalVolumeParams defines parameters for GetTotalVolume.
type GetTotalVolumeParams struct {

	// Interval of calculations
	Interval string `json:"interval"`

	// Start time of the query as unix timestamp
	From int64 `json:"from"`

	// End time of the query as unix timestamp
	To int64 `json:"to"`

	// Return volume for this single pool. Returns volume for all pools if missing.
	Pool *int64 `json:"pool,omitempty"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
