// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Action defines model for Action.
type Action struct {

	// Int64, Unix timestamp for when the action was registered
	Date string `json:"date"`

	// Int64, block height at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status string `json:"status"`

	// Type of action
	Type string `json:"type"`
}

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Coin defines model for Coin.
type Coin struct {

	// Int64 (10^8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistoryItemPool defines model for EarningsHistoryItemPool.
type EarningsHistoryItemPool struct {

	// Int64 (10^8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64 (10^8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64 (10^8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64 (10^8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64 (10^8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string `json:"address"`
	Chain   string `json:"chain"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                  int64 `json:"AsgardSize"`
	BadValidatorRate            int64 `json:"BadValidatorRate"`
	BlocksPerYear               int64 `json:"BlocksPerYear"`
	ChurnInterval               int64 `json:"ChurnInterval"`
	ChurnRetryInterval          int64 `json:"ChurnRetryInterval"`
	CliTxCost                   int64 `json:"CliTxCost"`
	DesiredValidatorSet         int64 `json:"DesiredValidatorSet"`
	DoubleSignMaxAge            int64 `json:"DoubleSignMaxAge"`
	EmissionCurve               int64 `json:"EmissionCurve"`
	FailKeygenSlashPoints       int64 `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints      int64 `json:"FailKeysignSlashPoints"`
	FundMigrationInterval       int64 `json:"FundMigrationInterval"`
	JailTimeKeygen              int64 `json:"JailTimeKeygen"`
	JailTimeKeysign             int64 `json:"JailTimeKeysign"`
	LackOfObservationPenalty    int64 `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks       int64 `json:"LiquidityLockUpBlocks"`
	MinimumBondInRune           int64 `json:"MinimumBondInRune"`
	MinimumNodesForBFT          int64 `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil    int64 `json:"MinimumNodesForYggdrasil"`
	NativeChainGasFee           int64 `json:"NativeChainGasFee"`
	NewPoolCycle                int64 `json:"NewPoolCycle"`
	ObservationDelayFlexibility int64 `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints          int64 `json:"ObserveSlashPoints"`
	OldValidatorRate            int64 `json:"OldValidatorRate"`
	OutboundTransactionFee      int64 `json:"OutboundTransactionFee"`
	SigningTransactionPeriod    int64 `json:"SigningTransactionPeriod"`
	YggFundLimit                int64 `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock struct {
	Current []LastblockItem `json:"current"`
}

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn string `json:"last_observed_in"`
	LastSignedOut  string `json:"last_signed_out"`
	Thorchain      string `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64 (10^8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64 (10^8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64 (10^8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`
	PoolShareFactor         string `json:"poolShareFactor"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), Total Rune pooled in all pools
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NetworkFees defines model for NetworkFees.
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// ObservedChain defines model for ObservedChain.
type ObservedChain struct {
	Chain  string `json:"chain"`
	Height int    `json:"height"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolLegacyDetail defines model for PoolLegacyDetail.
type PoolLegacyDetail struct {
	Asset string `json:"asset"`

	// same as assetDepth from pool/stats
	AssetDepth string `json:"assetDepth"`

	// same as addAssetLiquidityVolume from pool/stats
	AssetStakedTotal string `json:"assetStakedTotal"`

	// same as toAssetCount from pool/stats
	BuyAssetCount string `json:"buyAssetCount"`

	// same as toAssetFees / toAssetCount from pool/stats
	BuyFeeAverage string `json:"buyFeeAverage"`

	// same as toAssetFees from pool/stats
	BuyFeesTotal string `json:"buyFeesTotal"`

	// same as toAssetAverageSlip from pool/stats
	BuySlipAverage string `json:"buySlipAverage"`

	// same as toAssetVolume / toAssetCount from pool/stats
	BuyTxAverage string `json:"buyTxAverage"`

	// same as toAssetVolume from pool/stats
	BuyVolume string `json:"buyVolume"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// same as 2*runeDepth from pool/stats
	PoolDepth string `json:"poolDepth"`

	// same as totalFees / swapCount from pool/stats
	PoolFeeAverage string `json:"poolFeeAverage"`

	// same as totalFees from pool/stats
	PoolFeesTotal string `json:"poolFeesTotal"`

	// same as averageSlip from pool/stats
	PoolSlipAverage string `json:"poolSlipAverage"`

	// same as addLiquidityVolume from pool/stats
	PoolStakedTotal string `json:"poolStakedTotal"`

	// same as swapVolume / swapCount from pool/stats
	PoolTxAverage string `json:"poolTxAverage"`

	// same as units from pool/stats
	PoolUnits string `json:"poolUnits"`

	// Int64(e8), same as buyVolume + sellVolume
	PoolVolume string `json:"poolVolume"`

	// same as assetPrice from pool/stats
	Price string `json:"price"`

	// same as runeDepth from pool/stats
	RuneDepth string `json:"runeDepth"`

	// same as addRuneLiquidityVolume from pool/stats
	RuneStakedTotal string `json:"runeStakedTotal"`

	// same as toRuneCount from pool/stats
	SellAssetCount string `json:"sellAssetCount"`

	// same as toRuneFees / toRuneCount from pool/stats
	SellFeeAverage string `json:"sellFeeAverage"`

	// same as toRuneFees from pool/stats
	SellFeesTotal string `json:"sellFeesTotal"`

	// same as toRuneAverageSlip from pool/stats
	SellSlipAverage string `json:"sellSlipAverage"`

	// same as toRuneVolume / toRuneCount from pool/stats
	SellTxAverage string `json:"sellTxAverage"`

	// same as toRuneVolume from pool/stats
	SellVolume string `json:"sellVolume"`

	// same as addLiquidityCount from pool/stats
	StakeTxCount string `json:"stakeTxCount"`

	// same as uniqueMemberCount from pool/stats
	StakersCount string `json:"stakersCount"`

	// same as addLiquidityCount + withdrawCount from pool/stats
	StakingTxCount string `json:"stakingTxCount"`

	// same as status from pool/stats
	Status string `json:"status"`

	// Int64, same as history/swaps:uniqueSwapperCount
	SwappersCount string `json:"swappersCount"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64(e8), same as swapVolume pool/stats?period=24h
	Volume24h string `json:"volume24h"`

	// same as withdrawCount from pool/stats
	WithdrawTxCount string `json:"withdrawTxCount"`
}

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`
	Asset                  string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Int64, number of unique adresses that initiated swaps transactions in the period.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Liquidity Units in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// PreflightStatus defines model for PreflightStatus.
type PreflightStatus struct {
	Code   int    `json:"code"`
	Reason string `json:"reason"`
	Status string `json:"status"`
}

// ProxiedNode defines model for ProxiedNode.
type ProxiedNode struct {
	ActiveBlockHeight int    `json:"active_block_height"`
	Bond              string `json:"bond"`
	BondAddress       string `json:"bond_address"`
	CurrentAward      string `json:"current_award"`
	ForcedToLeave     bool   `json:"forced_to_leave"`
	IpAddress         string `json:"ip_address"`
	Jail              struct {
		NodeAddress *string `json:"node_address,omitempty"`
	} `json:"jail"`
	LeaveHeight     int             `json:"leave_height"`
	NodeAddress     string          `json:"node_address"`
	ObserveChains   []ObservedChain `json:"observe_chains"`
	PreflightStatus PreflightStatus `json:"preflight_status"`
	PubKeySet       struct {
		Ed25519   string `json:"ed25519"`
		Secp256k1 string `json:"secp256k1"`
	} `json:"pub_key_set"`
	RequestedToLeave    bool     `json:"requested_to_leave"`
	SignerMembership    []string `json:"signer_membership"`
	SlashPoints         int      `json:"slash_points"`
	Status              string   `json:"status"`
	StatusSince         int      `json:"status_since"`
	ValidatorConsPubKey string   `json:"validator_cons_pub_key"`
	Version             string   `json:"version"`
}

// ProxiedNodes defines model for ProxiedNodes.
type ProxiedNodes []ProxiedNode

// Queue defines model for Queue.
type Queue struct {
	Internal int `json:"internal"`
	Outbound int `json:"outbound"`
	Swap     int `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64 (10^8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, unique users (addresses) initiating swaps in the last 24 hours.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64, unique users (addresses) initiating swaps in the last 30 days.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64 (10^8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Int64, unique users (addresses) initiating swaps since beginning.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64 (10^8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip by swap.
	// Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps to asset denoted in rune
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps to rune
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64(e8), toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Int64 (10^8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), trade slip percentage
	TradeSlip string `json:"tradeSlip"`

	// Int64 (10^8), minimum output amount specified for the swap
	TradeTarget string `json:"tradeTarget"`
}

// Transaction defines model for Transaction.
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolLegacyResponse defines model for PoolLegacyResponse.
type PoolLegacyResponse PoolLegacyDetail

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ProxiedNodesResponse defines model for ProxiedNodesResponse.
type ProxiedNodesResponse ProxiedNodes

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action (swap, addLiquidity, withdraw, donate, refund)
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *string `json:"period,omitempty"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *string `json:"status,omitempty"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
