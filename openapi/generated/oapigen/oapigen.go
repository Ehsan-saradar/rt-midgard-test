// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Action defines model for Action.
type Action struct {

	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status string `json:"status"`

	// Type of action
	Type string `json:"type"`
}

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Coin defines model for Coin.
type Coin struct {

	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistoryItemPool defines model for EarningsHistoryItemPool.
type EarningsHistoryItemPool struct {

	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string  `json:"address"`
	Chain   string  `json:"chain"`
	GasRate *string `json:"gas_rate,omitempty"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                    int64  `json:"AsgardSize"`
	BadValidatorRate              int64  `json:"BadValidatorRate"`
	BadValidatorRedline           int    `json:"BadValidatorRedline"`
	BlocksPerYear                 int64  `json:"BlocksPerYear"`
	ChurnInterval                 int64  `json:"ChurnInterval"`
	ChurnRetryInterval            int64  `json:"ChurnRetryInterval"`
	DesiredValidatorSet           int64  `json:"DesiredValidatorSet"`
	DoubleSignMaxAge              int64  `json:"DoubleSignMaxAge"`
	EmissionCurve                 int64  `json:"EmissionCurve"`
	FailKeygenSlashPoints         int64  `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints        int64  `json:"FailKeysignSlashPoints"`
	FullImpLossProtectionBlocks   int64  `json:"FullImpLossProtectionBlocks"`
	FundMigrationInterval         int64  `json:"FundMigrationInterval"`
	IncentiveCurve                int64  `json:"IncentiveCurve"`
	JailTimeKeygen                int64  `json:"JailTimeKeygen"`
	JailTimeKeysign               int64  `json:"JailTimeKeysign"`
	LackOfObservationPenalty      int64  `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks         int64  `json:"LiquidityLockUpBlocks"`
	MaxAvailablePools             int64  `json:"MaxAvailablePools"`
	MaxSwapsPerBlock              int64  `json:"MaxSwapsPerBlock"`
	MinRunePoolDepth              int64  `json:"MinRunePoolDepth"`
	MinSlashPointsForBadValidator int64  `json:"MinSlashPointsForBadValidator"`
	MinSwapsPerBlock              int64  `json:"MinSwapsPerBlock"`
	MinimumBondInRune             int64  `json:"MinimumBondInRune"`
	MinimumNodesForBFT            int64  `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil      int64  `json:"MinimumNodesForYggdrasil"`
	NativeTransactionFee          int64  `json:"NativeTransactionFee"`
	NewPoolCycle                  *int64 `json:"NewPoolCycle,omitempty"`
	ObservationDelayFlexibility   int64  `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints            int64  `json:"ObserveSlashPoints"`
	OldValidatorRate              int64  `json:"OldValidatorRate"`
	OutboundTransactionFee        int64  `json:"OutboundTransactionFee"`
	PoolCycle                     int64  `json:"PoolCycle"`
	SigningTransactionPeriod      int64  `json:"SigningTransactionPeriod"`
	VirtualMultSynths             int64  `json:"VirtualMultSynths"`
	YggFundLimit                  int64  `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock struct {
	Current []LastblockItem `json:"current"`
}

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn int64  `json:"last_observed_in"`
	LastSignedOut  int64  `json:"last_signed_out"`
	Thorchain      int64  `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`
	PoolShareFactor         string `json:"poolShareFactor"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), Total Rune pooled in all pools
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NetworkFees defines model for NetworkFees.
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// ObservedChain defines model for ObservedChain.
type ObservedChain struct {
	Chain  string `json:"chain"`
	Height int    `json:"height"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolLegacyDetail defines model for PoolLegacyDetail.
type PoolLegacyDetail struct {
	Asset string `json:"asset"`

	// same as assetDepth from pool/stats
	AssetDepth string `json:"assetDepth"`

	// same as addAssetLiquidityVolume from pool/stats
	AssetStakedTotal string `json:"assetStakedTotal"`

	// same as toAssetCount from pool/stats
	BuyAssetCount string `json:"buyAssetCount"`

	// same as toAssetFees / toAssetCount from pool/stats
	BuyFeeAverage string `json:"buyFeeAverage"`

	// same as toAssetFees from pool/stats
	BuyFeesTotal string `json:"buyFeesTotal"`

	// same as toAssetAverageSlip from pool/stats
	BuySlipAverage string `json:"buySlipAverage"`

	// same as toAssetVolume / toAssetCount from pool/stats
	BuyTxAverage string `json:"buyTxAverage"`

	// same as toAssetVolume from pool/stats
	BuyVolume string `json:"buyVolume"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// same as 2*runeDepth from pool/stats
	PoolDepth string `json:"poolDepth"`

	// same as totalFees / swapCount from pool/stats
	PoolFeeAverage string `json:"poolFeeAverage"`

	// same as totalFees from pool/stats
	PoolFeesTotal string `json:"poolFeesTotal"`

	// same as averageSlip from pool/stats
	PoolSlipAverage string `json:"poolSlipAverage"`

	// same as addLiquidityVolume from pool/stats
	PoolStakedTotal string `json:"poolStakedTotal"`

	// same as swapVolume / swapCount from pool/stats
	PoolTxAverage string `json:"poolTxAverage"`

	// same as units from pool/stats
	PoolUnits string `json:"poolUnits"`

	// Int64(e8), same as buyVolume + sellVolume
	PoolVolume string `json:"poolVolume"`

	// same as assetPrice from pool/stats
	Price string `json:"price"`

	// same as runeDepth from pool/stats
	RuneDepth string `json:"runeDepth"`

	// same as addRuneLiquidityVolume from pool/stats
	RuneStakedTotal string `json:"runeStakedTotal"`

	// same as toRuneCount from pool/stats
	SellAssetCount string `json:"sellAssetCount"`

	// same as toRuneFees / toRuneCount from pool/stats
	SellFeeAverage string `json:"sellFeeAverage"`

	// same as toRuneFees from pool/stats
	SellFeesTotal string `json:"sellFeesTotal"`

	// same as toRuneAverageSlip from pool/stats
	SellSlipAverage string `json:"sellSlipAverage"`

	// same as toRuneVolume / toRuneCount from pool/stats
	SellTxAverage string `json:"sellTxAverage"`

	// same as toRuneVolume from pool/stats
	SellVolume string `json:"sellVolume"`

	// same as addLiquidityCount from pool/stats
	StakeTxCount string `json:"stakeTxCount"`

	// same as uniqueMemberCount from pool/stats
	StakersCount string `json:"stakersCount"`

	// same as addLiquidityCount + withdrawCount from pool/stats
	StakingTxCount string `json:"stakingTxCount"`

	// same as status from pool/stats
	Status string `json:"status"`

	// Int64, same as history/swaps:uniqueSwapperCount
	SwappersCount string `json:"swappersCount"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64(e8), same as swapVolume pool/stats?period=24h
	Volume24h string `json:"volume24h"`

	// same as withdrawCount from pool/stats
	WithdrawTxCount string `json:"withdrawTxCount"`
}

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`
	Asset                  string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Int64, number of unique adresses that initiated swaps transactions in the period.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Liquidity Units in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// PreflightStatus defines model for PreflightStatus.
type PreflightStatus struct {
	Code   int    `json:"code"`
	Reason string `json:"reason"`
	Status string `json:"status"`
}

// ProxiedNode defines model for ProxiedNode.
type ProxiedNode struct {
	ActiveBlockHeight int    `json:"active_block_height"`
	Bond              string `json:"bond"`
	BondAddress       string `json:"bond_address"`
	CurrentAward      string `json:"current_award"`
	ForcedToLeave     bool   `json:"forced_to_leave"`
	IpAddress         string `json:"ip_address"`
	Jail              struct {
		NodeAddress *string `json:"node_address,omitempty"`
	} `json:"jail"`
	LeaveHeight     int             `json:"leave_height"`
	NodeAddress     string          `json:"node_address"`
	ObserveChains   []ObservedChain `json:"observe_chains"`
	PreflightStatus PreflightStatus `json:"preflight_status"`
	PubKeySet       struct {
		Ed25519   string `json:"ed25519"`
		Secp256k1 string `json:"secp256k1"`
	} `json:"pub_key_set"`
	RequestedToLeave    bool     `json:"requested_to_leave"`
	SignerMembership    []string `json:"signer_membership"`
	SlashPoints         int      `json:"slash_points"`
	Status              string   `json:"status"`
	StatusSince         int      `json:"status_since"`
	ValidatorConsPubKey string   `json:"validator_cons_pub_key"`
	Version             string   `json:"version"`
}

// ProxiedNodes defines model for ProxiedNodes.
type ProxiedNodes []ProxiedNode

// Queue defines model for Queue.
type Queue struct {
	Internal int `json:"internal"`
	Outbound int `json:"outbound"`
	Swap     int `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, unique users (addresses) initiating swaps in the last 24 hours.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64, unique users (addresses) initiating swaps in the last 30 days.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Int64, unique users (addresses) initiating swaps since beginning.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip by swap.
	// Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps to asset denoted in rune
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps to rune
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64(e8), toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// Transaction defines model for Transaction.
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolLegacyResponse defines model for PoolLegacyResponse.
type PoolLegacyResponse PoolLegacyDetail

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ProxiedNodesResponse defines model for ProxiedNodesResponse.
type ProxiedNodesResponse ProxiedNodes

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action (swap, addLiquidity, withdraw, donate, refund)
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *string `json:"period,omitempty"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *string `json:"status,omitempty"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP//Z1K/w9/bAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
