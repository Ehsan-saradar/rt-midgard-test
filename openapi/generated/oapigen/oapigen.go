// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {
	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still
	// pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still
// pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {
	// Int64, amount of liquidity units assigned to the member as result of the liquidity
	// deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {
	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// Represents a digital currency amount
type Coin struct {
	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {
	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, The liquidity unit value index. Sqrt(assetDepth * runeDepth)/liquidity units
	Luvi string `json:"luvi"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {
	// Int64(e8), the amount of Asset in the pool at the end of the interval at time endTime
	EndAssetDepth string `json:"endAssetDepth"`

	// Int64, Liquidity Units in the pool at the end of the interval at time endTime
	EndLPUnits string `json:"endLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval at time endTime
	EndRuneDepth string `json:"endRuneDepth"`

	// Int64, Synth Units in the pool at the end of the interval at time endTime
	EndSynthUnits string `json:"endSynthUnits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, The liquidity unit value index increase between the first and last depth item
	LuviIncrease string `json:"luviIncrease"`

	// Float, The impermanent loss between the first and last depth item
	PriceShiftLoss string `json:"priceShiftLoss"`

	// Int64(e8), the amount of Asset in the pool at the start of the interval at time
	// startTime
	StartAssetDepth string `json:"startAssetDepth"`

	// Int64, Liquidity Units in the pool at the start of the interval at time startTime
	StartLPUnits string `json:"startLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the start of the interval at time startTime
	StartRuneDepth string `json:"startRuneDepth"`

	// Int64, Synth Units in the pool at the start of the interval at time startTime
	StartSynthUnits string `json:"startSynthUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {
	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of
	// liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {
	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// FullMemberDetails defines model for FullMemberDetails.
type FullMemberDetails struct {
	// List details of all the liquidity providers identified with the given address
	Pools []FullMemberPool `json:"pools"`
}

// FullMemberPool defines model for FullMemberPool.
type FullMemberPool struct {
	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total units of the pool
	PoolUnits string `json:"poolUnits"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`

	// Int64, total units that belong the the member
	SharedUnits string `json:"sharedUnits"`
}

// Health defines model for Health.
type Health struct {
	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync         bool     `json:"inSync"`
	LastAggregated HeightTS `json:"lastAggregated"`
	LastCommitted  HeightTS `json:"lastCommitted"`
	LastFetched    HeightTS `json:"lastFetched"`
	LastThorNode   HeightTS `json:"lastThorNode"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// HeightTS defines model for HeightTS.
type HeightTS struct {
	// Block height
	Height int `json:"height"`

	// Block timestamp (seconds since epoch)
	Timestamp int `json:"timestamp"`
}

// LPDetail defines model for LPDetail.
type LPDetail struct {
	// asset address
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, total asset earned
	AssetEarned string `json:"assetEarned"`

	// Float, current asset price in rune
	AssetPrice string `json:"assetPrice"`

	// Float, current asset price in usd
	AssetPriceUsd string `json:"assetPriceUsd"`

	// pool name
	Pool string `json:"pool"`

	// Int64(e8), pool units
	PoolUnits string `json:"poolUnits"`

	// Int64(e8), total block reward
	Rewards string `json:"rewards"`

	// rune address
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// Float, total rune earned
	RuneEarned string `json:"runeEarned"`

	// Int64(e8), current rune price in usd
	RunePriceUsd string `json:"runePriceUsd"`

	// Int64(e8), share units
	SharedUnits string        `json:"sharedUnits"`
	StakeDetail []StakeDetail `json:"stakeDetail"`

	// Int64(e8), total rune price in usd
	UsdEarned      string        `json:"usdEarned"`
	WithdrawDetail []StakeDetail `json:"withdrawDetail"`
}

// LPDetails defines model for LPDetails.
type LPDetails []LPDetail

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {
	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {
	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {
	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and
	// nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each
// outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {
	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// OHLCVHistory defines model for OHLCVHistory.
type OHLCVHistory struct {
	Intervals OHLCVHistoryIntervals `json:"intervals"`
	Meta      OHLCVHistoryMeta      `json:"meta"`
}

// OHLCVHistoryIntervals defines model for OHLCVHistoryIntervals.
type OHLCVHistoryIntervals []OHLCVHistoryItem

// OHLCVHistoryItem defines model for OHLCVHistoryItem.
type OHLCVHistoryItem struct {
	// Float, close price of asset in USD
	ClosePrice string `json:"closePrice"`

	// Int64, The end time of bucket in unix timestamp
	CloseTime string `json:"closeTime"`

	// Float, high price of asset in USD
	HighPrice string `json:"highPrice"`

	// Int64, The high time of bucket in unix timestamp
	HighTime string `json:"highTime"`

	// Int64, Liquidty is USD
	Liquidity string `json:"liquidity"`

	// Float, low price of asset in USD
	LowPrice string `json:"lowPrice"`

	// Int64, The low time of bucket in unix timestamp
	LowTime string `json:"lowTime"`

	// Float, open price of asset in USD
	OpenPrice string `json:"openPrice"`

	// Int64, The beginning time of bucket in unix timestamp
	OpenTime string `json:"openTime"`

	// Int64, Volume in USD
	Volume string `json:"volume"`
}

// OHLCVHistoryMeta defines model for OHLCVHistoryMeta.
type OHLCVHistoryMeta struct {
	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income,
	// taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	// Doesn't include synth mint or burn.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {
	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`
	Asset                  string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income,
	// taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {
	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// StatsData defines model for StatsData.
type StatsData struct {
	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Deprecated, it's always 0.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Deprecated, it's always 0.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Synth to Rune since beginning.
	SynthBurnCount string `json:"synthBurnCount"`

	// Int64, number of swaps from Rune to Synth since beginning.
	SynthMintCount string `json:"synthMintCount"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {
	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {
	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {
	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {
	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {
	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of
	// the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity
	// pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at
	// the end of the interval.
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {
	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the
	// native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {
	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means
	// totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership
	// withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// StakeDetail defines model for stakeDetail.
type StakeDetail struct {
	// Int64(e8), asset amount
	AssetAmount string `json:"assetAmount"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, asset price in rune
	AssetPrice string `json:"assetPrice"`

	// Float, asset price in usd
	AssetPriceUsd string `json:"assetPriceUsd"`

	// Float, withdraw percentage
	BasisPoint string `json:"basisPoint"`

	// Int64, nano timestamp of the block
	Date string `json:"date"`

	// Int64, block height
	Height string `json:"height"`

	// Int64, total number of pool units
	PoolUnits string `json:"poolUnits"`

	// Int64(e8), rune amount
	RuneAmount string `json:"runeAmount"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// Float, rune price in usd
	RunePriceUsd string `json:"runePriceUsd"`

	// Int64, total number of units changed
	SharedUnits string `json:"sharedUnits"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// FullMembersResponse defines model for FullMembersResponse.
type FullMembersResponse FullMemberDetails

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// LPDetailsResponse defines model for LPDetailsResponse.
type LPDetailsResponse LPDetails

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// OHLCVHistoryResponse defines model for OHLCVHistoryResponse.
type OHLCVHistoryResponse OHLCVHistory

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {
	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// Affiliate address of the action (swap)
	AffiliateAddress *string `json:"affiliate_address,omitempty"`
	AssetType        *string `json:"assetType,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`
}

// GetFullMembersAdressesParams defines parameters for GetFullMembersAdresses.
type GetFullMembersAdressesParams struct {
	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {
	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {
	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {
	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetOHLCVHistoryParams defines parameters for GetOHLCVHistory.
type GetOHLCVHistoryParams struct {
	// Interval of calculations
	Interval *GetOHLCVHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetOHLCVHistoryParamsInterval defines parameters for GetOHLCVHistory.
type GetOHLCVHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {
	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTSSwapHistoryParams defines parameters for GetTSSwapHistory.
type GetTSSwapHistoryParams struct {
	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetTSSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTSSwapHistoryParamsInterval defines parameters for GetTSSwapHistory.
type GetTSSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {
	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetLPDetailParams defines parameters for GetLPDetail.
type GetLPDetailParams struct {
	// Return information for given pools
	Pools *string `json:"pools,omitempty"`
}

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {
	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {
	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {
	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"9pv3DgEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
