// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {

	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Represents a digital currency amount
type Coin struct {

	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {

	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync         bool     `json:"inSync"`
	LastAggregated HeightTS `json:"lastAggregated"`
	LastCommitted  HeightTS `json:"lastCommitted"`
	LastFetched    HeightTS `json:"lastFetched"`
	LastQueried    HeightTS `json:"lastQueried"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// HeightTS defines model for HeightTS.
type HeightTS struct {

	// Block height
	Height int `json:"height"`

	// Block timestamp (seconds since epoch)
	Timestamp int `json:"timestamp"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string  `json:"address"`
	Chain   string  `json:"chain"`
	GasRate *string `json:"gas_rate,omitempty"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                    int64  `json:"AsgardSize"`
	BadValidatorRate              int64  `json:"BadValidatorRate"`
	BadValidatorRedline           int    `json:"BadValidatorRedline"`
	BlocksPerYear                 int64  `json:"BlocksPerYear"`
	ChurnInterval                 int64  `json:"ChurnInterval"`
	ChurnRetryInterval            int64  `json:"ChurnRetryInterval"`
	DesiredValidatorSet           int64  `json:"DesiredValidatorSet"`
	DoubleSignMaxAge              int64  `json:"DoubleSignMaxAge"`
	EmissionCurve                 int64  `json:"EmissionCurve"`
	FailKeygenSlashPoints         int64  `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints        int64  `json:"FailKeysignSlashPoints"`
	FullImpLossProtectionBlocks   int64  `json:"FullImpLossProtectionBlocks"`
	FundMigrationInterval         int64  `json:"FundMigrationInterval"`
	IncentiveCurve                int64  `json:"IncentiveCurve"`
	JailTimeKeygen                int64  `json:"JailTimeKeygen"`
	JailTimeKeysign               int64  `json:"JailTimeKeysign"`
	LackOfObservationPenalty      int64  `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks         int64  `json:"LiquidityLockUpBlocks"`
	MaxAvailablePools             int64  `json:"MaxAvailablePools"`
	MaxSwapsPerBlock              int64  `json:"MaxSwapsPerBlock"`
	MinRunePoolDepth              int64  `json:"MinRunePoolDepth"`
	MinSlashPointsForBadValidator int64  `json:"MinSlashPointsForBadValidator"`
	MinSwapsPerBlock              int64  `json:"MinSwapsPerBlock"`
	MinimumBondInRune             int64  `json:"MinimumBondInRune"`
	MinimumNodesForBFT            int64  `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil      int64  `json:"MinimumNodesForYggdrasil"`
	NativeTransactionFee          int64  `json:"NativeTransactionFee"`
	NewPoolCycle                  *int64 `json:"NewPoolCycle,omitempty"`
	ObservationDelayFlexibility   int64  `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints            int64  `json:"ObserveSlashPoints"`
	OldValidatorRate              int64  `json:"OldValidatorRate"`
	OutboundTransactionFee        int64  `json:"OutboundTransactionFee"`
	PoolCycle                     int64  `json:"PoolCycle"`
	SigningTransactionPeriod      int64  `json:"SigningTransactionPeriod"`
	VirtualMultSynths             int64  `json:"VirtualMultSynths"`
	YggFundLimit                  int64  `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock []LastblockItem

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn int64  `json:"last_observed_in"`
	LastSignedOut  int64  `json:"last_signed_out"`
	Thorchain      int64  `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {

	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// ObservedChain defines model for ObservedChain.
type ObservedChain struct {
	Chain  string `json:"chain"`
	Height int    `json:"height"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`
	Asset                  string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Int64, number of unique adresses that initiated swaps transactions in the period.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// PreflightStatus defines model for PreflightStatus.
type PreflightStatus struct {
	Code   int    `json:"code"`
	Reason string `json:"reason"`
	Status string `json:"status"`
}

// ProxiedNode defines model for ProxiedNode.
type ProxiedNode struct {
	ActiveBlockHeight int    `json:"active_block_height"`
	Bond              string `json:"bond"`
	BondAddress       string `json:"bond_address"`
	CurrentAward      string `json:"current_award"`
	ForcedToLeave     bool   `json:"forced_to_leave"`
	IpAddress         string `json:"ip_address"`
	Jail              struct {
		NodeAddress *string `json:"node_address,omitempty"`
	} `json:"jail"`
	LeaveHeight     int             `json:"leave_height"`
	NodeAddress     string          `json:"node_address"`
	ObserveChains   []ObservedChain `json:"observe_chains"`
	PreflightStatus PreflightStatus `json:"preflight_status"`
	PubKeySet       struct {
		Ed25519   string `json:"ed25519"`
		Secp256k1 string `json:"secp256k1"`
	} `json:"pub_key_set"`
	RequestedToLeave    bool     `json:"requested_to_leave"`
	SignerMembership    []string `json:"signer_membership"`
	SlashPoints         int      `json:"slash_points"`
	Status              string   `json:"status"`
	StatusSince         int      `json:"status_since"`
	ValidatorConsPubKey string   `json:"validator_cons_pub_key"`
	Version             string   `json:"version"`
}

// ProxiedNodes defines model for ProxiedNodes.
type ProxiedNodes []ProxiedNode

// Queue defines model for Queue.
type Queue struct {
	Internal int `json:"internal"`
	Outbound int `json:"outbound"`
	Swap     int `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, unique users (addresses) initiating swaps in the last 24 hours.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, unique users (addresses) initiating swaps in the last 30 days.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Int64, unique users (addresses) initiating swaps since beginning.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {

	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {

	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at the end of the interval
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ProxiedNodesResponse defines model for ProxiedNodesResponse.
type ProxiedNodesResponse ProxiedNodes

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {

	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
