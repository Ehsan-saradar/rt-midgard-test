// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {

	// True means healthy, connected to database.
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain.
	InSync bool `json:"inSync"`

	// Int64, the current block count.
	ScannerHeight string `json:"scannerHeight"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/4xUTXPbRgz9K5htjyqlJp0cdGrStLUPnXhs3zo5QLsQufESu1mAcjkZ/a3+gf6xDkhJ",
	"tvwxk5NEkPveA95bfHM+9yUzsYpbf3OVpGQWmh4uCJN214eSVXxmJVb7i6Wk6FFj5uUXyWw18R31aP9K",
	"zYWqxhkooOIGZ4hA4mssds6t3W0dCHpCFugmtnEBPjOTVwqgGY5HG7dwOhZya7fJORGy2y9c5JuR/ffA",
	"NvAHJjkW/4qhxRogCojGlMCj+i5yC0MxVu0IfIeRX6YVj8xULyi2nT5nv2R998tiBhlqJVbYpOzvwOeB",
	"9RGkaI3cuv1+4Sp9HWKl4NZ/P4zrKdOp4c8niLz5Ql7d3jDOVVyTDpUFkA8zAFHUQSBvj/3PxyJv89Fc",
	"9FM/1GNMbu0C7eRX7XKdh5Fr657x3HZ0mufVsEnRw/urS/g6UI0kcHvx6fo3Ow3IAZDHebACKfIdBdhF",
	"nCb1IW7rf/+KTp+VSgUrCZi22k8pA9zkQadvmfQ+1ztzakNQCUNMI+AOY8JNItjmCmWWMghVacBEmqqC",
	"VUhAK7Kgn2BpZwbZzGFbc/9EsGg2HdpRD1YCjT39JHNvR6NMSI93NL8MVIiDgR5nQChjcxpSyCTAWaHL",
	"KYCvUaPH9LjVBm4zRFaq6BXuo3bw4ferm3ssk6b3Yjj0z2LuDqTLQwoT2/hIfoiVvKZxClzUZHF5bpRb",
	"uB1Vmb1cNe+alVmcCzGW6NbubbNqVm7hCmo3Xebl7uflHCh7aumFC/AoenM+YcpWZLthZuAhkMdtY5HU",
	"2SETa6tjmsNlcGv3J+m8iNzifD29Wa3s58dKW7d2PywfNtny9N3yyQ6zvMvQ91jHGRoO2PZiuXuzDNm/",
	"2tbNPbYt1eWnQmxhetusQAr5uD0sQmiJTTqZyX7oTcuLDX3MXl5p55xSXqE8Z5IX+vp4EDDxWgKwFVsu",
	"5/XP+/1+/38AAAD//8m8YfgFBgAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
