// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {
	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still
	// pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still
// pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {
	// Int64, amount of liquidity units assigned to the member as result of the liquidity
	// deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// Balance defines model for Balance.
type Balance struct {
	Coins Coins `json:"coins"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {
	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Represents a digital currency amount
type Coin struct {
	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {
	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, The liquidity unit value index. Sqrt(assetDepth * runeDepth)/liquidity units
	Luvi string `json:"luvi"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {
	// Int64(e8), the amount of Asset in the pool at the end of the interval at time endTime
	EndAssetDepth string `json:"endAssetDepth"`

	// Int64, Liquidity Units in the pool at the end of the interval at time endTime
	EndLPUnits string `json:"endLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval at time endTime
	EndRuneDepth string `json:"endRuneDepth"`

	// Int64, Synth Units in the pool at the end of the interval at time endTime
	EndSynthUnits string `json:"endSynthUnits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, The liquidity unit value index increase between the first and last depth item
	LuviIncrease string `json:"luviIncrease"`

	// Float, The impermanent loss between the first and last depth item
	PriceShiftLoss string `json:"priceShiftLoss"`

	// Int64(e8), the amount of Asset in the pool at the start of the interval at time
	// startTime
	StartAssetDepth string `json:"startAssetDepth"`

	// Int64, Liquidity Units in the pool at the start of the interval at time startTime
	StartLPUnits string `json:"startLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the start of the interval at time startTime
	StartRuneDepth string `json:"startRuneDepth"`

	// Int64, Synth Units in the pool at the start of the interval at time startTime
	StartSynthUnits string `json:"startSynthUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {
	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of
	// liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {
	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// FullMemberDetails defines model for FullMemberDetails.
type FullMemberDetails struct {
	// List details of all the liquidity providers identified with the given address
	Pools []FullMemberPool `json:"pools"`
}

// FullMemberPool defines model for FullMemberPool.
type FullMemberPool struct {
	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total units of the pool
	PoolUnits string `json:"poolUnits"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`

	// Int64, total units that belong the the member
	SharedUnits string `json:"sharedUnits"`
}

// Health defines model for Health.
type Health struct {
	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync         bool     `json:"inSync"`
	LastAggregated HeightTS `json:"lastAggregated"`
	LastCommitted  HeightTS `json:"lastCommitted"`
	LastFetched    HeightTS `json:"lastFetched"`
	LastThorNode   HeightTS `json:"lastThorNode"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// HeightTS defines model for HeightTS.
type HeightTS struct {
	// Block height
	Height int `json:"height"`

	// Block timestamp (seconds since epoch)
	Timestamp int `json:"timestamp"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string  `json:"address"`
	Chain   string  `json:"chain"`
	GasRate *string `json:"gas_rate,omitempty"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                    int64  `json:"AsgardSize"`
	BadValidatorRate              int64  `json:"BadValidatorRate"`
	BadValidatorRedline           int    `json:"BadValidatorRedline"`
	BlocksPerYear                 int64  `json:"BlocksPerYear"`
	ChurnInterval                 int64  `json:"ChurnInterval"`
	ChurnRetryInterval            int64  `json:"ChurnRetryInterval"`
	DesiredValidatorSet           int64  `json:"DesiredValidatorSet"`
	DoubleSignMaxAge              int64  `json:"DoubleSignMaxAge"`
	EmissionCurve                 int64  `json:"EmissionCurve"`
	FailKeygenSlashPoints         int64  `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints        int64  `json:"FailKeysignSlashPoints"`
	FullImpLossProtectionBlocks   int64  `json:"FullImpLossProtectionBlocks"`
	FundMigrationInterval         int64  `json:"FundMigrationInterval"`
	IncentiveCurve                int64  `json:"IncentiveCurve"`
	JailTimeKeygen                int64  `json:"JailTimeKeygen"`
	JailTimeKeysign               int64  `json:"JailTimeKeysign"`
	LackOfObservationPenalty      int64  `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks         int64  `json:"LiquidityLockUpBlocks"`
	MaxAvailablePools             int64  `json:"MaxAvailablePools"`
	MaxSwapsPerBlock              int64  `json:"MaxSwapsPerBlock"`
	MinRunePoolDepth              int64  `json:"MinRunePoolDepth"`
	MinSlashPointsForBadValidator int64  `json:"MinSlashPointsForBadValidator"`
	MinSwapsPerBlock              int64  `json:"MinSwapsPerBlock"`
	MinimumBondInRune             int64  `json:"MinimumBondInRune"`
	MinimumNodesForBFT            int64  `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil      int64  `json:"MinimumNodesForYggdrasil"`
	NativeTransactionFee          int64  `json:"NativeTransactionFee"`
	NewPoolCycle                  *int64 `json:"NewPoolCycle,omitempty"`
	ObservationDelayFlexibility   int64  `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints            int64  `json:"ObserveSlashPoints"`
	OldValidatorRate              int64  `json:"OldValidatorRate"`
	OutboundTransactionFee        int64  `json:"OutboundTransactionFee"`
	PoolCycle                     int64  `json:"PoolCycle"`
	SigningTransactionPeriod      int64  `json:"SigningTransactionPeriod"`
	VirtualMultSynths             int64  `json:"VirtualMultSynths"`
	YggFundLimit                  int64  `json:"YggFundLimit"`
}

// LPDetail defines model for LPDetail.
type LPDetail struct {
	// asset address
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, total asset earned
	AssetEarned string `json:"assetEarned"`

	// Float, current asset price in rune
	AssetPrice string `json:"assetPrice"`

	// Float, current asset price in usd
	AssetPriceUsd string `json:"assetPriceUsd"`

	// pool name
	Pool string `json:"pool"`

	// Int64(e8), pool units
	PoolUnits string `json:"poolUnits"`

	// Int64(e8), total block reward
	Rewards string `json:"rewards"`

	// rune address
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// Float, total rune earned
	RuneEarned string `json:"runeEarned"`

	// Int64(e8), current rune price in usd
	RunePriceUsd string `json:"runePriceUsd"`

	// Int64(e8), share units
	SharedUnits string        `json:"sharedUnits"`
	StakeDetail []StakeDetail `json:"stakeDetail"`

	// Int64(e8), total rune price in usd
	UsdEarned      string        `json:"usdEarned"`
	WithdrawDetail []StakeDetail `json:"withdrawDetail"`
}

// LPDetails defines model for LPDetails.
type LPDetails []LPDetail

// Lastblock defines model for Lastblock.
type Lastblock []LastblockItem

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn int64  `json:"last_observed_in"`
	LastSignedOut  int64  `json:"last_signed_out"`
	Thorchain      int64  `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {
	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {
	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {
	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and
	// nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each
// outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {
	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// OHLCVHistory defines model for OHLCVHistory.
type OHLCVHistory struct {
	Intervals OHLCVHistoryIntervals `json:"intervals"`
	Meta      OHLCVHistoryMeta      `json:"meta"`
}

// OHLCVHistoryIntervals defines model for OHLCVHistoryIntervals.
type OHLCVHistoryIntervals []OHLCVHistoryItem

// OHLCVHistoryItem defines model for OHLCVHistoryItem.
type OHLCVHistoryItem struct {
	// Float, close price of asset in USD
	ClosePrice string `json:"closePrice"`

	// Int64, The end time of bucket in unix timestamp
	CloseTime string `json:"closeTime"`

	// Float, high price of asset in USD
	HighPrice string `json:"highPrice"`

	// Int64, The high time of bucket in unix timestamp
	HighTime string `json:"highTime"`

	// Int64, Liquidty is USD
	Liquidity string `json:"liquidity"`

	// Float, low price of asset in USD
	LowPrice string `json:"lowPrice"`

	// Int64, The low time of bucket in unix timestamp
	LowTime string `json:"lowTime"`

	// Float, open price of asset in USD
	OpenPrice string `json:"openPrice"`

	// Int64, The beginning time of bucket in unix timestamp
	OpenTime string `json:"openTime"`

	// Int64, Volume in USD
	Volume string `json:"volume"`
}

// OHLCVHistoryMeta defines model for OHLCVHistoryMeta.
type OHLCVHistoryMeta struct {
	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// ObservedChain defines model for ObservedChain.
type ObservedChain struct {
	Chain  string `json:"chain"`
	Height int    `json:"height"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	// Float, Also called APR. Annual return estimated from last 30 days income
	// (linearly, not compounded). E.g. 0.1 means 10% yearly return.
	// Due to Impermantent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	// It includes synth mint or burn.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {
	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Float, Also called APR. Estimated annual return (linearly, not compounded).
	// Always estimated from last 30 days (doesn't take period into account).
	// E.g. 0.1 means 10% yearly return.
	// Due to Impermantent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate *string `json:"annualPercentageRate,omitempty"`
	Asset                string  `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// PreflightStatus defines model for PreflightStatus.
type PreflightStatus struct {
	Code   int    `json:"code"`
	Reason string `json:"reason"`
	Status string `json:"status"`
}

// ProxiedNode defines model for ProxiedNode.
type ProxiedNode struct {
	ActiveBlockHeight int    `json:"active_block_height"`
	Bond              string `json:"bond"`
	BondAddress       string `json:"bond_address"`
	CurrentAward      string `json:"current_award"`
	ForcedToLeave     bool   `json:"forced_to_leave"`
	IpAddress         string `json:"ip_address"`
	Jail              struct {
		NodeAddress *string `json:"node_address,omitempty"`
	} `json:"jail"`
	LeaveHeight     int             `json:"leave_height"`
	NodeAddress     string          `json:"node_address"`
	ObserveChains   []ObservedChain `json:"observe_chains"`
	PreflightStatus PreflightStatus `json:"preflight_status"`
	PubKeySet       struct {
		Ed25519   string `json:"ed25519"`
		Secp256k1 string `json:"secp256k1"`
	} `json:"pub_key_set"`
	RequestedToLeave    bool     `json:"requested_to_leave"`
	SignerMembership    []string `json:"signer_membership"`
	SlashPoints         int      `json:"slash_points"`
	Status              string   `json:"status"`
	StatusSince         int      `json:"status_since"`
	ValidatorConsPubKey string   `json:"validator_cons_pub_key"`
	Version             string   `json:"version"`
}

// ProxiedNodes defines model for ProxiedNodes.
type ProxiedNodes []ProxiedNode

// Queue defines model for Queue.
type Queue struct {
	Internal int `json:"internal"`
	Outbound int `json:"outbound"`
	Swap     int `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {
	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// StatsData defines model for StatsData.
type StatsData struct {
	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Deprecated, it's always 0.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Deprecated, it's always 0.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps (including synths) since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps (including synths) in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps (including synths) in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps (including synths) denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Synth to Rune since beginning.
	SynthBurnCount string `json:"synthBurnCount"`

	// Int64, number of swaps from Rune to Synth since beginning.
	SynthMintCount string `json:"synthMintCount"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {
	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {
	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {
	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {
	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {
	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of
	// the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity
	// pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at
	// the end of the interval.
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {
	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the
	// native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {
	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means
	// totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership
	// withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// StakeDetail defines model for stakeDetail.
type StakeDetail struct {
	// Int64(e8), asset amount
	AssetAmount string `json:"assetAmount"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, asset price in rune
	AssetPrice string `json:"assetPrice"`

	// Float, asset price in usd
	AssetPriceUsd string `json:"assetPriceUsd"`

	// Float, withdraw percentage
	BasisPoint string `json:"basisPoint"`

	// Int64, nano timestamp of the block
	Date string `json:"date"`

	// Int64, block height
	Height string `json:"height"`

	// Int64, total number of pool units
	PoolUnits string `json:"poolUnits"`

	// Int64(e8), rune amount
	RuneAmount string `json:"runeAmount"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// Float, rune price in usd
	RunePriceUsd string `json:"runePriceUsd"`

	// Int64, total number of units changed
	SharedUnits string `json:"sharedUnits"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// BalanceResponse defines model for BalanceResponse.
type BalanceResponse Balance

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// FullMembersResponse defines model for FullMembersResponse.
type FullMembersResponse FullMemberDetails

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LPDetailsResponse defines model for LPDetailsResponse.
type LPDetailsResponse LPDetails

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// OHLCVHistoryResponse defines model for OHLCVHistoryResponse.
type OHLCVHistoryResponse OHLCVHistory

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ProxiedNodesResponse defines model for ProxiedNodesResponse.
type ProxiedNodesResponse ProxiedNodes

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {
	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// Affiliate address of the action (swap)
	Affiliate *string `json:"affiliate,omitempty"`
	AssetType *string `json:"assetType,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`
}

// GetFullMembersAdressesParams defines parameters for GetFullMembersAdresses.
type GetFullMembersAdressesParams struct {
	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {
	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {
	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {
	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetOHLCVHistoryParams defines parameters for GetOHLCVHistory.
type GetOHLCVHistoryParams struct {
	// Interval of calculations
	Interval *GetOHLCVHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetOHLCVHistoryParamsInterval defines parameters for GetOHLCVHistory.
type GetOHLCVHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {
	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTSSwapHistoryParams defines parameters for GetTSSwapHistory.
type GetTSSwapHistoryParams struct {
	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetTSSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTSSwapHistoryParamsInterval defines parameters for GetTSSwapHistory.
type GetTSSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {
	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetLPDetailParams defines parameters for GetLPDetail.
type GetLPDetailParams struct {
	// Return information for given pools
	Pools *string `json:"pools,omitempty"`
}

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {
	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {
	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {
	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Dr5+/fr1/wcAAP//i14D0J42AQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
