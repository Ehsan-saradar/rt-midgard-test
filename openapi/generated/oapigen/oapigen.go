// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// AssetSummary defines model for AssetSummary.
type AssetSummary struct {
	Asset string `json:"asset"`

	// Int64, unix timestamp (second).
	DateCreated string `json:"dateCreated"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	PriceRune string `json:"priceRune"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64, Average bond of active nodes.
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64, Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64, Maxinum bond of active nodes.
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64, Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64, Median bond of active nodes.
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64, Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64, Minumum bond of active nodes.
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64, Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64, Total bond of active nodes.
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64, Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`
	BondingROI string `json:"bondingROI"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks).
	PoolActivationCountdown string  `json:"poolActivationCountdown"`
	PoolShareFactor         string  `json:"poolShareFactor"`
	StakingROI              *string `json:"stakingROI,omitempty"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64, Total Rune pooled in all pools.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64, Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NodeKey defines model for NodeKey.
type NodeKey struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	Price string `json:"price"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Enabled, Bootstrap.
	Status string `json:"status"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Two4HVolume string `json:"two4HVolume"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`
}

// Volume defines model for Volume.
type Volume struct {

	// Sum of "rune_amount" of buy swap events.
	BuyVolume string `json:"buyVolume"`

	// Sum of "rune_amount" of sell swap events.
	SellVolume string `json:"sellVolume"`

	// Int64, The beginning time of bucket in unix timestamp.
	Time string `json:"time"`

	// buyVolume + sellVolume
	TotalVolume string `json:"totalVolume"`
}

// AssetsSummaryResponse defines model for AssetsSummaryResponse.
type AssetsSummaryResponse []AssetSummary

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {

	// True means healthy, connected to database.
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain.
	InSync bool `json:"inSync"`

	// Int64, the current block count.
	ScannerHeight string `json:"scannerHeight"`
}

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodeKeyResponse defines model for NodeKeyResponse.
type NodeKeyResponse []NodeKey

// PoolDetailResponse defines model for PoolDetailResponse.
type PoolDetailResponse PoolDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse []string

// VolumeResponse defines model for VolumeResponse.
type VolumeResponse []Volume

// GetAssetInfoParams defines parameters for GetAssetInfo.
type GetAssetInfoParams struct {

	// One or more comma separated unique asset (CHAIN.SYMBOL)
	Asset string `json:"asset"`
}

// GetTotalVolumeParams defines parameters for GetTotalVolume.
type GetTotalVolumeParams struct {

	// Interval of calculations
	Interval string `json:"interval"`

	// Start time of the query as unix timestamp
	From int64 `json:"from"`

	// End time of the query as unix timestamp
	To int64 `json:"to"`

	// Return volume for this single pool. Returns volume for all pools if missing.
	Pool *int64 `json:"pool,omitempty"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
