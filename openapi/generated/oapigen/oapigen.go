// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Action defines model for Action.
type Action struct {

	// Int64, Unix timestamp for when the action was registered
	Date string `json:"date"`

	// Int64, block height at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status string `json:"status"`

	// Type of action
	Type string `json:"type"`
}

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64, Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64, Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64, Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64, Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64, Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64, Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64, Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64, Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64, Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64, Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Coin defines model for Coin.
type Coin struct {

	// Int64 (10^8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64, Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64, Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64, System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64, Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistoryItemPool defines model for EarningsHistoryItemPool.
type EarningsHistoryItemPool struct {

	// Int64, Share of earnings sent to the pool during the time interval
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses struct {
	Current []InboundAddressesItem `json:"current"`
}

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string `json:"address"`
	Chain   string `json:"chain"`

	// indicate whether this chain has halted
	Halted bool   `json:"halted"`
	PubKey string `json:"pub_key"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                  int64 `json:"AsgardSize"`
	BadValidatorRate            int64 `json:"BadValidatorRate"`
	BlocksPerYear               int64 `json:"BlocksPerYear"`
	ChurnInterval               int64 `json:"ChurnInterval"`
	ChurnRetryInterval          int64 `json:"ChurnRetryInterval"`
	CliTxCost                   int64 `json:"CliTxCost"`
	DesiredValidatorSet         int64 `json:"DesiredValidatorSet"`
	DoubleSignMaxAge            int64 `json:"DoubleSignMaxAge"`
	EmissionCurve               int64 `json:"EmissionCurve"`
	FailKeygenSlashPoints       int64 `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints      int64 `json:"FailKeysignSlashPoints"`
	FundMigrationInterval       int64 `json:"FundMigrationInterval"`
	JailTimeKeygen              int64 `json:"JailTimeKeygen"`
	JailTimeKeysign             int64 `json:"JailTimeKeysign"`
	LackOfObservationPenalty    int64 `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks       int64 `json:"LiquidityLockUpBlocks"`
	MinimumBondInRune           int64 `json:"MinimumBondInRune"`
	MinimumNodesForBFT          int64 `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil    int64 `json:"MinimumNodesForYggdrasil"`
	NativeChainGasFee           int64 `json:"NativeChainGasFee"`
	NewPoolCycle                int64 `json:"NewPoolCycle"`
	ObservationDelayFlexibility int64 `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints          int64 `json:"ObserveSlashPoints"`
	OldValidatorRate            int64 `json:"OldValidatorRate"`
	OutboundTransactionFee      int64 `json:"OutboundTransactionFee"`
	SigningTransactionPeriod    int64 `json:"SigningTransactionPeriod"`
	YggFundLimit                int64 `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock struct {
	Current []LastblockItem `json:"current"`
}

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn string `json:"last_observed_in"`
	LastSignedOut  string `json:"last_signed_out"`
	Thorchain      string `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64, number of deposits during the time interval.
	AddLiqudityCount string `json:"addLiqudityCount"`

	// Int64 (10^8), total deposits in RUNE during the time interval.
	// Accounts for both asset (using the price at deposit time) and RUNE deposited into pools
	AddLiqudityVolume string `json:"addLiqudityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64 (10^8), total withdrawals in RUNE during the time interval. Accounts for
	// both asset (using the price at withdrawal time) and RUNE withdrawn from pools
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// Liquidity provider data for all the pools of a given member
	Pools []MemberPoolDetails `json:"pools"`
}

// MemberPoolDetails defines model for MemberPoolDetails.
type MemberPoolDetails struct {

	// Int64, total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// Int64, total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Int64, total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`
	PoolShareFactor         string `json:"poolShareFactor"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64, Total Rune pooled in all pools
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64, Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NetworkFees defines model for NetworkFees.
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolLegacyDetail defines model for PoolLegacyDetail.
type PoolLegacyDetail struct {
	Asset string `json:"asset"`

	// same as assetDepth from pool/stats
	AssetDepth string `json:"assetDepth"`

	// same as toAssetCount from pool/stats
	BuyAssetCount string `json:"buyAssetCount"`

	// same as toAssetVolume / toAssetCount from pool/stats
	BuyTxAverage string `json:"buyTxAverage"`

	// same as toAssetVolume from pool/stats
	BuyVolume string `json:"buyVolume"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// same as 2*runeDepth from pool/stats
	PoolDepth string `json:"poolDepth"`

	// same as totalFees / swapCount from pool/stats
	PoolFeeAverage string `json:"poolFeeAverage"`

	// same as totalFees from pool/stats
	PoolFeesTotal string `json:"poolFeesTotal"`

	// same as averageSlip from pool/stats
	PoolSlipAverage string `json:"poolSlipAverage"`

	// same as swapVolume / swapCount from pool/stats
	PoolTxAverage string `json:"poolTxAverage"`

	// same as units from pool/stats
	PoolUnits string `json:"poolUnits"`

	// Int64, same as buyVolume + sellVolume
	PoolVolume string `json:"poolVolume"`

	// same as assetPrice from pool/stats
	Price string `json:"price"`

	// same as runeDepth from pool/stats
	RuneDepth string `json:"runeDepth"`

	// same as toRuneCount from pool/stats
	SellAssetCount string `json:"sellAssetCount"`

	// same as toRuneVolume / toRuneCount from pool/stats
	SellTxAverage string `json:"sellTxAverage"`

	// same as toRuneVolume from pool/stats
	SellVolume string `json:"sellVolume"`

	// same as status from pool/stats
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune
	Volume24h string `json:"volume24h"`
}

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, same as buyVolume + sellVolume
	PoolVolume string `json:"poolVolume"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64, same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64, same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64, same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, Liquidity Units in the pool
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune
	Volume24h string `json:"volume24h"`
}

// Queue defines model for Queue.
type Queue struct {
	Outbound string `json:"outbound"`
	Swap     string `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Daily active users (unique addresses interacting)
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Daily transactions
	DailyTx string `json:"dailyTx"`

	// Monthly active users
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Monthly transactions
	MonthlyTx string `json:"monthlyTx"`

	// Total buying transactions
	TotalAssetBuys string `json:"totalAssetBuys"`

	// Total selling transactions
	TotalAssetSells string `json:"totalAssetSells"`

	// Total RUNE balances
	TotalDepth string `json:"totalDepth"`

	// Total staking transactions
	TotalStakeTx string `json:"totalStakeTx"`

	// Total staked (in RUNE Value)
	TotalStaked string `json:"totalStaked"`

	// Total transactions
	TotalTx string `json:"totalTx"`

	// Total unique swappers & members
	TotalUsers string `json:"totalUsers"`

	// Total (in RUNE Value) of all assets swapped since start
	TotalVolume string `json:"totalVolume"`

	// Total withdrawing transactions
	TotalWithdrawTx string `json:"totalWithdrawTx"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float, the average slip by swap. Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64, volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64, volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64, the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64, toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Int64 (10^8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), trade slip percentage
	TradeSlip string `json:"tradeSlip"`

	// Int64 (10^8), minimum output amount specified for the swap
	TradeTarget string `json:"tradeTarget"`
}

// Transaction defines model for Transaction.
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction memo
	Memo string `json:"memo"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolLegacyResponse defines model for PoolLegacyResponse.
type PoolLegacyResponse PoolLegacyDetail

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Address of sender or recipient of any in/out transaction related to the action
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action (swap, addLiquidity, withdraw, donate, refund)
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *string `json:"status,omitempty"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
