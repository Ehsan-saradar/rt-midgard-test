// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {

	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still
	// pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still
// pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity
	// deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// Balance defines model for Balance.
type Balance struct {
	Coins Coins `json:"coins"`

	// full timestamp (nanoseconds since 1970) of the block at which the returned balance snapshot was valid
	Date string `json:"date"`

	// height of the block at which the returned balance snapshot was valid
	Height string `json:"height"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Represents a digital currency amount
type Coin struct {

	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, The liquidity unit value index. Sqrt(assetDepth * runeDepth)/liquidity units
	Luvi string `json:"luvi"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval at time endTime
	EndAssetDepth string `json:"endAssetDepth"`

	// Int64, Liquidity Units in the pool at the end of the interval at time endTime
	EndLPUnits string `json:"endLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval at time endTime
	EndRuneDepth string `json:"endRuneDepth"`

	// Int64, Synth Units in the pool at the end of the interval at time endTime
	EndSynthUnits string `json:"endSynthUnits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, The liquidity unit value index increase between startTime and endTime
	LuviIncrease string `json:"luviIncrease"`

	// Float, The impermanent loss between the first and last depth item
	PriceShiftLoss string `json:"priceShiftLoss"`

	// Int64(e8), the amount of Asset in the pool at the start of the interval at time
	// startTime
	StartAssetDepth string `json:"startAssetDepth"`

	// Int64, Liquidity Units in the pool at the start of the interval at time startTime
	StartLPUnits string `json:"startLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the start of the interval at time startTime
	StartRuneDepth string `json:"startRuneDepth"`

	// Int64, Synth Units in the pool at the start of the interval at time startTime
	StartSynthUnits string `json:"startSynthUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of
	// liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {

	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync         bool     `json:"inSync"`
	LastAggregated HeightTS `json:"lastAggregated"`
	LastCommitted  HeightTS `json:"lastCommitted"`
	LastFetched    HeightTS `json:"lastFetched"`
	LastThorNode   HeightTS `json:"lastThorNode"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// HeightTS defines model for HeightTS.
type HeightTS struct {

	// Block height
	Height int `json:"height"`

	// Block timestamp (seconds since epoch)
	Timestamp int `json:"timestamp"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string  `json:"address"`
	Chain   string  `json:"chain"`
	GasRate *string `json:"gas_rate,omitempty"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                    int64  `json:"AsgardSize"`
	BadValidatorRate              int64  `json:"BadValidatorRate"`
	BadValidatorRedline           int    `json:"BadValidatorRedline"`
	BlocksPerYear                 int64  `json:"BlocksPerYear"`
	ChurnInterval                 int64  `json:"ChurnInterval"`
	ChurnRetryInterval            int64  `json:"ChurnRetryInterval"`
	DesiredValidatorSet           int64  `json:"DesiredValidatorSet"`
	DoubleSignMaxAge              int64  `json:"DoubleSignMaxAge"`
	EmissionCurve                 int64  `json:"EmissionCurve"`
	FailKeygenSlashPoints         int64  `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints        int64  `json:"FailKeysignSlashPoints"`
	FullImpLossProtectionBlocks   int64  `json:"FullImpLossProtectionBlocks"`
	FundMigrationInterval         int64  `json:"FundMigrationInterval"`
	IncentiveCurve                int64  `json:"IncentiveCurve"`
	JailTimeKeygen                int64  `json:"JailTimeKeygen"`
	JailTimeKeysign               int64  `json:"JailTimeKeysign"`
	LackOfObservationPenalty      int64  `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks         int64  `json:"LiquidityLockUpBlocks"`
	MaxAvailablePools             int64  `json:"MaxAvailablePools"`
	MaxSwapsPerBlock              int64  `json:"MaxSwapsPerBlock"`
	MinRunePoolDepth              int64  `json:"MinRunePoolDepth"`
	MinSlashPointsForBadValidator int64  `json:"MinSlashPointsForBadValidator"`
	MinSwapsPerBlock              int64  `json:"MinSwapsPerBlock"`
	MinimumBondInRune             int64  `json:"MinimumBondInRune"`
	MinimumNodesForBFT            int64  `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil      int64  `json:"MinimumNodesForYggdrasil"`
	NativeTransactionFee          int64  `json:"NativeTransactionFee"`
	NewPoolCycle                  *int64 `json:"NewPoolCycle,omitempty"`
	ObservationDelayFlexibility   int64  `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints            int64  `json:"ObserveSlashPoints"`
	OldValidatorRate              int64  `json:"OldValidatorRate"`
	OutboundTransactionFee        int64  `json:"OutboundTransactionFee"`
	PoolCycle                     int64  `json:"PoolCycle"`
	SigningTransactionPeriod      int64  `json:"SigningTransactionPeriod"`
	VirtualMultSynths             int64  `json:"VirtualMultSynths"`
	YggFundLimit                  int64  `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock []LastblockItem

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn int64  `json:"last_observed_in"`
	LastSignedOut  int64  `json:"last_signed_out"`
	Thorchain      int64  `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {

	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and
	// nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each
// outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// ObservedChain defines model for ObservedChain.
type ObservedChain struct {
	Chain  string `json:"chain"`
	Height int    `json:"height"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {

	// Float, Also called APR. Annual return estimated linearly (not compounded) from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// Due to Impermanent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	// It includes synth mint or burn.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Float, Also called APR. Annual return estimated linearly (not compounded) from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// Due to Impermanent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// PreflightStatus defines model for PreflightStatus.
type PreflightStatus struct {
	Code   int    `json:"code"`
	Reason string `json:"reason"`
	Status string `json:"status"`
}

// ProxiedNode defines model for ProxiedNode.
type ProxiedNode struct {
	ActiveBlockHeight int    `json:"active_block_height"`
	Bond              string `json:"bond"`
	BondAddress       string `json:"bond_address"`
	CurrentAward      string `json:"current_award"`
	ForcedToLeave     bool   `json:"forced_to_leave"`
	IpAddress         string `json:"ip_address"`
	Jail              struct {
		NodeAddress *string `json:"node_address,omitempty"`
	} `json:"jail"`
	LeaveHeight     int             `json:"leave_height"`
	NodeAddress     string          `json:"node_address"`
	ObserveChains   []ObservedChain `json:"observe_chains"`
	PreflightStatus PreflightStatus `json:"preflight_status"`
	PubKeySet       struct {
		Ed25519   string `json:"ed25519"`
		Secp256k1 string `json:"secp256k1"`
	} `json:"pub_key_set"`
	RequestedToLeave    bool     `json:"requested_to_leave"`
	SignerMembership    []string `json:"signer_membership"`
	SlashPoints         int      `json:"slash_points"`
	Status              string   `json:"status"`
	StatusSince         int      `json:"status_since"`
	ValidatorConsPubKey string   `json:"validator_cons_pub_key"`
	Version             string   `json:"version"`
}

// ProxiedNodes defines model for ProxiedNodes.
type ProxiedNodes []ProxiedNode

// Queue defines model for Queue.
type Queue struct {
	Internal int `json:"internal"`
	Outbound int `json:"outbound"`
	Swap     int `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Deprecated, it's always 0.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Deprecated, it's always 0.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps (including synths) since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps (including synths) in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps (including synths) in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps (including synths) denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Synth to Rune since beginning.
	SynthBurnCount string `json:"synthBurnCount"`

	// Int64, number of swaps from Rune to Synth since beginning.
	SynthMintCount string `json:"synthMintCount"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {

	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {

	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of
	// the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity
	// pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at
	// the end of the interval.
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the
	// native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means
	// totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership
	// withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// BalanceResponse defines model for BalanceResponse.
type BalanceResponse Balance

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ProxiedNodesResponse defines model for ProxiedNodesResponse.
type ProxiedNodesResponse ProxiedNodes

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// Affiliate address of the action (swap)
	Affiliate *string `json:"affiliate,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`
}

// GetBalanceParams defines parameters for GetBalance.
type GetBalanceParams struct {

	// Unix timestamp as seconds since 1970 (if provided, height must not be provided)
	Timestamp *int64 `json:"timestamp,omitempty"`

	// Block height (if provided, timestamp must not be provided)
	Height *int64 `json:"height,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {

	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolParams defines parameters for GetPool.
type GetPoolParams struct {

	// Specifies the base interval from which APY is extrapolated.
	// Default is 30d.
	Period *GetPoolParamsPeriod `json:"period,omitempty"`
}

// GetPoolParamsPeriod defines parameters for GetPool.
type GetPoolParamsPeriod string

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`

	// Specifies the base interval from which annualPercentageRate and poolAPY is extrapolated.
	// Default is 30d.
	Period *GetPoolsParamsPeriod `json:"period,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// GetPoolsParamsPeriod defines parameters for GetPools.
type GetPoolsParamsPeriod string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"nFnuKgsBAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
