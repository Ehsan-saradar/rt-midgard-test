// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Action defines model for Action.
type Action struct {

	// Int64, Unix timestamp for when the action was registered
	Date string `json:"date"`

	// Int64, block height at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status string `json:"status"`

	// Type of action
	Type string `json:"type"`
}

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64, Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64, Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64, Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64, Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64, Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64, Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64, Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64, Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64, Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64, Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Coin defines model for Coin.
type Coin struct {

	// Int64 (10^8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64, Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64, Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64, System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64, Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistoryItemPool defines model for EarningsHistoryItemPool.
type EarningsHistoryItemPool struct {

	// Int64, Share of earnings sent to the pool during the time interval
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses struct {
	Current []InboundAddressesItem `json:"current"`
}

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string `json:"address"`
	Chain   string `json:"chain"`

	// indicate whether this chain has halted
	Halted bool   `json:"halted"`
	PubKey string `json:"pub_key"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                  int64 `json:"AsgardSize"`
	BadValidatorRate            int64 `json:"BadValidatorRate"`
	BlocksPerYear               int64 `json:"BlocksPerYear"`
	ChurnInterval               int64 `json:"ChurnInterval"`
	ChurnRetryInterval          int64 `json:"ChurnRetryInterval"`
	CliTxCost                   int64 `json:"CliTxCost"`
	DesiredValidatorSet         int64 `json:"DesiredValidatorSet"`
	DoubleSignMaxAge            int64 `json:"DoubleSignMaxAge"`
	EmissionCurve               int64 `json:"EmissionCurve"`
	FailKeygenSlashPoints       int64 `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints      int64 `json:"FailKeysignSlashPoints"`
	FundMigrationInterval       int64 `json:"FundMigrationInterval"`
	JailTimeKeygen              int64 `json:"JailTimeKeygen"`
	JailTimeKeysign             int64 `json:"JailTimeKeysign"`
	LackOfObservationPenalty    int64 `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks       int64 `json:"LiquidityLockUpBlocks"`
	MinimumBondInRune           int64 `json:"MinimumBondInRune"`
	MinimumNodesForBFT          int64 `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil    int64 `json:"MinimumNodesForYggdrasil"`
	NativeChainGasFee           int64 `json:"NativeChainGasFee"`
	NewPoolCycle                int64 `json:"NewPoolCycle"`
	ObservationDelayFlexibility int64 `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints          int64 `json:"ObserveSlashPoints"`
	OldValidatorRate            int64 `json:"OldValidatorRate"`
	OutboundTransactionFee      int64 `json:"OutboundTransactionFee"`
	SigningTransactionPeriod    int64 `json:"SigningTransactionPeriod"`
	YggFundLimit                int64 `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock struct {
	Current []LastblockItem `json:"current"`
}

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn string `json:"last_observed_in"`
	LastSignedOut  string `json:"last_signed_out"`
	Thorchain      string `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64, number of deposits during the time interval.
	AddLiqudityCount string `json:"addLiqudityCount"`

	// Int64 (10^8), total deposits in RUNE during the time interval.
	// Accounts for both asset (using the price at deposit time) and RUNE deposited into pools
	AddLiqudityVolume string `json:"addLiqudityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64 (10^8), total withdrawals in RUNE during the time interval. Accounts for
	// both asset (using the price at withdrawal time) and RUNE withdrawn from pools
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// Liquidity provider data for all the pools of a given member
	Pools []MemberPoolDetails `json:"pools"`
}

// MemberPoolDetails defines model for MemberPoolDetails.
type MemberPoolDetails struct {

	// Int64, total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// Int64, total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Int64, total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`
	PoolShareFactor         string `json:"poolShareFactor"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64, Total Rune pooled in all pools
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64, Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NetworkFees defines model for NetworkFees.
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolLegacyDetail defines model for PoolLegacyDetail.
type PoolLegacyDetail struct {
	Asset string `json:"asset"`

	// same as assetDepth from pool/stats
	AssetDepth string `json:"assetDepth"`

	// same as toAssetCount from pool/stats
	BuyAssetCount string `json:"buyAssetCount"`

	// same as toAssetVolume / toAssetCount from pool/stats
	BuyTxAverage string `json:"buyTxAverage"`

	// same as toAssetVolume from pool/stats
	BuyVolume string `json:"buyVolume"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// same as 2*runeDepth from pool/stats
	PoolDepth string `json:"poolDepth"`

	// same as totalFees / swapCount from pool/stats
	PoolFeeAverage string `json:"poolFeeAverage"`

	// same as totalFees from pool/stats
	PoolFeesTotal string `json:"poolFeesTotal"`

	// same as averageSlip from pool/stats
	PoolSlipAverage string `json:"poolSlipAverage"`

	// same as swapVolume / swapCount from pool/stats
	PoolTxAverage string `json:"poolTxAverage"`

	// same as units from pool/stats
	PoolUnits string `json:"poolUnits"`

	// Int64, same as buyVolume + sellVolume
	PoolVolume string `json:"poolVolume"`

	// same as assetPrice from pool/stats
	Price string `json:"price"`

	// same as runeDepth from pool/stats
	RuneDepth string `json:"runeDepth"`

	// same as toRuneCount from pool/stats
	SellAssetCount string `json:"sellAssetCount"`

	// same as toRuneVolume / toRuneCount from pool/stats
	SellTxAverage string `json:"sellTxAverage"`

	// same as toRuneVolume from pool/stats
	SellVolume string `json:"sellVolume"`

	// same as status from pool/stats
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune
	Volume24h string `json:"volume24h"`
}

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64, same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64, same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64, same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, Liquidity Units in the pool
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune
	Volume24h string `json:"volume24h"`
}

// Queue defines model for Queue.
type Queue struct {
	Outbound string `json:"outbound"`
	Swap     string `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Daily active users (unique addresses interacting)
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Daily transactions
	DailyTx string `json:"dailyTx"`

	// Monthly active users
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Monthly transactions
	MonthlyTx string `json:"monthlyTx"`

	// Total buying transactions
	TotalAssetBuys string `json:"totalAssetBuys"`

	// Total selling transactions
	TotalAssetSells string `json:"totalAssetSells"`

	// Total RUNE balances
	TotalDepth string `json:"totalDepth"`

	// Total staking transactions
	TotalStakeTx string `json:"totalStakeTx"`

	// Total staked (in RUNE Value)
	TotalStaked string `json:"totalStaked"`

	// Total transactions
	TotalTx string `json:"totalTx"`

	// Total unique swappers & members
	TotalUsers string `json:"totalUsers"`

	// Total (in RUNE Value) of all assets swapped since start
	TotalVolume string `json:"totalVolume"`

	// Total withdrawing transactions
	TotalWithdrawTx string `json:"totalWithdrawTx"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float, the average slip by swap. Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64, volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64, volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64, the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64, toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Int64 (10^8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), trade slip percentage
	TradeSlip string `json:"tradeSlip"`

	// Int64 (10^8), minimum output amount specified for the swap
	TradeTarget string `json:"tradeTarget"`
}

// Transaction defines model for Transaction.
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction memo
	Memo string `json:"memo"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolLegacyResponse defines model for PoolLegacyResponse.
type PoolLegacyResponse PoolLegacyDetail

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Address of sender or recipient of any in/out transaction related to the action
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action (swap, addLiquidity, withdraw, donate, refund)
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *string `json:"status,omitempty"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
