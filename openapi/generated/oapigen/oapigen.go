// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {

	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still
	// pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still
// pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity
	// deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// Balance defines model for Balance.
type Balance struct {
	Coins Coins `json:"coins"`

	// full timestamp (nanoseconds since 1970) of the block at which the returned balance snapshot was valid
	Date string `json:"date"`

	// height of the block at which the returned balance snapshot was valid
	Height string `json:"height"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// ChurnItem defines model for ChurnItem.
type ChurnItem struct {

	// full timestamp (nanoseconds since 1970) of the block at which the churn occurred
	Date string `json:"date"`

	// height of the block at which the churn occurred
	Height string `json:"height"`
}

// Churns defines model for Churns.
type Churns []ChurnItem

// Represents a digital currency amount
type Coin struct {

	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, The liquidity unit value index. Sqrt(assetDepth * runeDepth)/liquidity units
	Luvi string `json:"luvi"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval at time endTime
	EndAssetDepth string `json:"endAssetDepth"`

	// Int64, Liquidity Units in the pool at the end of the interval at time endTime
	EndLPUnits string `json:"endLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval at time endTime
	EndRuneDepth string `json:"endRuneDepth"`

	// Int64, Synth Units in the pool at the end of the interval at time endTime
	EndSynthUnits string `json:"endSynthUnits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, The liquidity unit value index increase between startTime and endTime
	LuviIncrease string `json:"luviIncrease"`

	// Float, The impermanent loss between the first and last depth item
	PriceShiftLoss string `json:"priceShiftLoss"`

	// Int64(e8), the amount of Asset in the pool at the start of the interval at time
	// startTime
	StartAssetDepth string `json:"startAssetDepth"`

	// Int64, Liquidity Units in the pool at the start of the interval at time startTime
	StartLPUnits string `json:"startLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the start of the interval at time startTime
	StartRuneDepth string `json:"startRuneDepth"`

	// Int64, Synth Units in the pool at the start of the interval at time startTime
	StartSynthUnits string `json:"startSynthUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of
	// liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {

	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync         bool     `json:"inSync"`
	LastAggregated HeightTS `json:"lastAggregated"`
	LastCommitted  HeightTS `json:"lastCommitted"`
	LastFetched    HeightTS `json:"lastFetched"`
	LastThorNode   HeightTS `json:"lastThorNode"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// HeightTS defines model for HeightTS.
type HeightTS struct {

	// Block height
	Height int `json:"height"`

	// Block timestamp (seconds since epoch)
	Timestamp int `json:"timestamp"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string  `json:"address"`
	Chain   string  `json:"chain"`
	GasRate *string `json:"gas_rate,omitempty"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                    int64  `json:"AsgardSize"`
	BadValidatorRate              int64  `json:"BadValidatorRate"`
	BadValidatorRedline           int    `json:"BadValidatorRedline"`
	BlocksPerYear                 int64  `json:"BlocksPerYear"`
	ChurnInterval                 int64  `json:"ChurnInterval"`
	ChurnRetryInterval            int64  `json:"ChurnRetryInterval"`
	DesiredValidatorSet           int64  `json:"DesiredValidatorSet"`
	DoubleSignMaxAge              int64  `json:"DoubleSignMaxAge"`
	EmissionCurve                 int64  `json:"EmissionCurve"`
	FailKeygenSlashPoints         int64  `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints        int64  `json:"FailKeysignSlashPoints"`
	FullImpLossProtectionBlocks   int64  `json:"FullImpLossProtectionBlocks"`
	FundMigrationInterval         int64  `json:"FundMigrationInterval"`
	IncentiveCurve                int64  `json:"IncentiveCurve"`
	JailTimeKeygen                int64  `json:"JailTimeKeygen"`
	JailTimeKeysign               int64  `json:"JailTimeKeysign"`
	LackOfObservationPenalty      int64  `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks         int64  `json:"LiquidityLockUpBlocks"`
	MaxAvailablePools             int64  `json:"MaxAvailablePools"`
	MaxSwapsPerBlock              int64  `json:"MaxSwapsPerBlock"`
	MinRunePoolDepth              int64  `json:"MinRunePoolDepth"`
	MinSlashPointsForBadValidator int64  `json:"MinSlashPointsForBadValidator"`
	MinSwapsPerBlock              int64  `json:"MinSwapsPerBlock"`
	MinimumBondInRune             int64  `json:"MinimumBondInRune"`
	MinimumNodesForBFT            int64  `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil      int64  `json:"MinimumNodesForYggdrasil"`
	NativeTransactionFee          int64  `json:"NativeTransactionFee"`
	NewPoolCycle                  *int64 `json:"NewPoolCycle,omitempty"`
	ObservationDelayFlexibility   int64  `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints            int64  `json:"ObserveSlashPoints"`
	OldValidatorRate              int64  `json:"OldValidatorRate"`
	OutboundTransactionFee        int64  `json:"OutboundTransactionFee"`
	PoolCycle                     int64  `json:"PoolCycle"`
	SigningTransactionPeriod      int64  `json:"SigningTransactionPeriod"`
	VirtualMultSynths             int64  `json:"VirtualMultSynths"`
	YggFundLimit                  int64  `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock []LastblockItem

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn int64  `json:"last_observed_in"`
	LastSignedOut  int64  `json:"last_signed_out"`
	Thorchain      int64  `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {

	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and
	// nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each
// outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// ObservedChain defines model for ObservedChain.
type ObservedChain struct {
	Chain  string `json:"chain"`
	Height int    `json:"height"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {

	// Float, Also called APR. Annual return estimated linearly (not compounded) from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// Due to Impermanent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	// It includes synth mint or burn.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Float, Also called APR. Annual return estimated linearly (not compounded) from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// Due to Impermanent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// PreflightStatus defines model for PreflightStatus.
type PreflightStatus struct {
	Code   int    `json:"code"`
	Reason string `json:"reason"`
	Status string `json:"status"`
}

// ProxiedNode defines model for ProxiedNode.
type ProxiedNode struct {
	ActiveBlockHeight int    `json:"active_block_height"`
	Bond              string `json:"bond"`
	BondAddress       string `json:"bond_address"`
	CurrentAward      string `json:"current_award"`
	ForcedToLeave     bool   `json:"forced_to_leave"`
	IpAddress         string `json:"ip_address"`
	Jail              struct {
		NodeAddress *string `json:"node_address,omitempty"`
	} `json:"jail"`
	LeaveHeight     int             `json:"leave_height"`
	NodeAddress     string          `json:"node_address"`
	ObserveChains   []ObservedChain `json:"observe_chains"`
	PreflightStatus PreflightStatus `json:"preflight_status"`
	PubKeySet       struct {
		Ed25519   string `json:"ed25519"`
		Secp256k1 string `json:"secp256k1"`
	} `json:"pub_key_set"`
	RequestedToLeave    bool     `json:"requested_to_leave"`
	SignerMembership    []string `json:"signer_membership"`
	SlashPoints         int      `json:"slash_points"`
	Status              string   `json:"status"`
	StatusSince         int      `json:"status_since"`
	ValidatorConsPubKey string   `json:"validator_cons_pub_key"`
	Version             string   `json:"version"`
}

// ProxiedNodes defines model for ProxiedNodes.
type ProxiedNodes []ProxiedNode

// Queue defines model for Queue.
type Queue struct {
	Internal int `json:"internal"`
	Outbound int `json:"outbound"`
	Swap     int `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Deprecated, it's always 0.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Deprecated, it's always 0.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps (including synths) since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps (including synths) in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps (including synths) in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps (including synths) denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Synth to Rune since beginning.
	SynthBurnCount string `json:"synthBurnCount"`

	// Int64, number of swaps from Rune to Synth since beginning.
	SynthMintCount string `json:"synthMintCount"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {

	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {

	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of
	// the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity
	// pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at
	// the end of the interval.
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the
	// native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means
	// totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership
	// withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// BalanceResponse defines model for BalanceResponse.
type BalanceResponse Balance

// ChurnsResponse defines model for ChurnsResponse.
type ChurnsResponse Churns

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ProxiedNodesResponse defines model for ProxiedNodesResponse.
type ProxiedNodesResponse ProxiedNodes

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// Affiliate address of the action (swap)
	Affiliate *string `json:"affiliate,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`
}

// GetBalanceParams defines parameters for GetBalance.
type GetBalanceParams struct {

	// Unix timestamp as seconds since 1970 (if provided, height must not be provided)
	Timestamp *int64 `json:"timestamp,omitempty"`

	// Block height (if provided, timestamp must not be provided)
	Height *int64 `json:"height,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {

	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolParams defines parameters for GetPool.
type GetPoolParams struct {

	// Specifies the base interval from which APY is extrapolated.
	// Default is 30d.
	Period *GetPoolParamsPeriod `json:"period,omitempty"`
}

// GetPoolParamsPeriod defines parameters for GetPool.
type GetPoolParamsPeriod string

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`

	// Specifies the base interval from which annualPercentageRate and poolAPY is extrapolated.
	// Default is 30d.
	Period *GetPoolsParamsPeriod `json:"period,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// GetPoolsParamsPeriod defines parameters for GetPools.
type GetPoolsParamsPeriod string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
