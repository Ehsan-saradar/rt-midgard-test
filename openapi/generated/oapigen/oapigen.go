// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {
	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {
	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {
	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Represents a digital currency amount
type Coin struct {
	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {
	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, The liquidity unit value index. Sqrt(assetDepth * runeDepth)/liquidity units
	Luvi string `json:"luvi"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {
	// Int64(e8), the amount of Asset in the pool at the end of the interval at time endTime
	EndAssetDepth string `json:"endAssetDepth"`

	// Int64, Liquidity Units in the pool at the end of the interval at time endTime
	EndLPUnits string `json:"endLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval at time endTime
	EndRuneDepth string `json:"endRuneDepth"`

	// Int64, Synth Units in the pool at the end of the interval at time endTime
	EndSynthUnits string `json:"endSynthUnits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, The liquidity unit value index increase between the first and last depth item
	LuviIncrease string `json:"luviIncrease"`

	// Float, The impermanent loss between the first and last depth item
	PriceShiftLoss string `json:"priceShiftLoss"`

	// Int64(e8), the amount of Asset in the pool at the start of the interval at time startTime
	StartAssetDepth string `json:"startAssetDepth"`

	// Int64, Liquidity Units in the pool at the start of the interval at time startTime
	StartLPUnits string `json:"startLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the start of the interval at time startTime
	StartRuneDepth string `json:"startRuneDepth"`

	// Int64, Synth Units in the pool at the start of the interval at time startTime
	StartSynthUnits string `json:"startSynthUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {
	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {
	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// FullMemberDetails defines model for FullMemberDetails.
type FullMemberDetails struct {
	// List details of all the liquidity providers identified with the given address
	Pools []FullMemberPool `json:"pools"`
}

// FullMemberPool defines model for FullMemberPool.
type FullMemberPool struct {
	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total units of the pool
	PoolUnits string `json:"poolUnits"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`

	// Int64, total units that belong the the member
	SharedUnits string `json:"sharedUnits"`
}

// Health defines model for Health.
type Health struct {
	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync         bool     `json:"inSync"`
	LastAggregated HeightTS `json:"lastAggregated"`
	LastCommitted  HeightTS `json:"lastCommitted"`
	LastFetched    HeightTS `json:"lastFetched"`
	LastThorNode   HeightTS `json:"lastThorNode"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// HeightTS defines model for HeightTS.
type HeightTS struct {
	// Block height
	Height int `json:"height"`

	// Block timestamp (seconds since epoch)
	Timestamp int `json:"timestamp"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string  `json:"address"`
	Chain   string  `json:"chain"`
	GasRate *string `json:"gas_rate,omitempty"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                    int64  `json:"AsgardSize"`
	BadValidatorRate              int64  `json:"BadValidatorRate"`
	BadValidatorRedline           int    `json:"BadValidatorRedline"`
	BlocksPerYear                 int64  `json:"BlocksPerYear"`
	ChurnInterval                 int64  `json:"ChurnInterval"`
	ChurnRetryInterval            int64  `json:"ChurnRetryInterval"`
	DesiredValidatorSet           int64  `json:"DesiredValidatorSet"`
	DoubleSignMaxAge              int64  `json:"DoubleSignMaxAge"`
	EmissionCurve                 int64  `json:"EmissionCurve"`
	FailKeygenSlashPoints         int64  `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints        int64  `json:"FailKeysignSlashPoints"`
	FullImpLossProtectionBlocks   int64  `json:"FullImpLossProtectionBlocks"`
	FundMigrationInterval         int64  `json:"FundMigrationInterval"`
	IncentiveCurve                int64  `json:"IncentiveCurve"`
	JailTimeKeygen                int64  `json:"JailTimeKeygen"`
	JailTimeKeysign               int64  `json:"JailTimeKeysign"`
	LackOfObservationPenalty      int64  `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks         int64  `json:"LiquidityLockUpBlocks"`
	MaxAvailablePools             int64  `json:"MaxAvailablePools"`
	MaxSwapsPerBlock              int64  `json:"MaxSwapsPerBlock"`
	MinRunePoolDepth              int64  `json:"MinRunePoolDepth"`
	MinSlashPointsForBadValidator int64  `json:"MinSlashPointsForBadValidator"`
	MinSwapsPerBlock              int64  `json:"MinSwapsPerBlock"`
	MinimumBondInRune             int64  `json:"MinimumBondInRune"`
	MinimumNodesForBFT            int64  `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil      int64  `json:"MinimumNodesForYggdrasil"`
	NativeTransactionFee          int64  `json:"NativeTransactionFee"`
	NewPoolCycle                  *int64 `json:"NewPoolCycle,omitempty"`
	ObservationDelayFlexibility   int64  `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints            int64  `json:"ObserveSlashPoints"`
	OldValidatorRate              int64  `json:"OldValidatorRate"`
	OutboundTransactionFee        int64  `json:"OutboundTransactionFee"`
	PoolCycle                     int64  `json:"PoolCycle"`
	SigningTransactionPeriod      int64  `json:"SigningTransactionPeriod"`
	VirtualMultSynths             int64  `json:"VirtualMultSynths"`
	YggFundLimit                  int64  `json:"YggFundLimit"`
}

// LPDetail defines model for LPDetail.
type LPDetail struct {
	// asset address
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, total asset earned
	AssetEarned string `json:"assetEarned"`

	// Float, current asset price in rune
	AssetPrice string `json:"assetPrice"`

	// Float, current asset price in usd
	AssetPriceUsd string `json:"assetPriceUsd"`

	// pool name
	Pool string `json:"pool"`

	// Int64(e8), pool units
	PoolUnits string `json:"poolUnits"`

	// Int64(e8), total block reward
	Rewards string `json:"rewards"`

	// rune address
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// Float, total rune earned
	RuneEarned string `json:"runeEarned"`

	// Int64(e8), current rune price in usd
	RunePriceUsd string `json:"runePriceUsd"`

	// Int64(e8), share units
	SharedUnits string        `json:"sharedUnits"`
	StakeDetail []StakeDetail `json:"stakeDetail"`

	// Int64(e8), total rune price in usd
	UsdEarned      string        `json:"usdEarned"`
	WithdrawDetail []StakeDetail `json:"withdrawDetail"`
}

// LPDetails defines model for LPDetails.
type LPDetails []LPDetail

// Lastblock defines model for Lastblock.
type Lastblock []LastblockItem

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn int64  `json:"last_observed_in"`
	LastSignedOut  int64  `json:"last_signed_out"`
	Thorchain      int64  `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {
	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {
	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {
	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {
	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// OHLCVHistory defines model for OHLCVHistory.
type OHLCVHistory struct {
	Intervals OHLCVHistoryIntervals `json:"intervals"`
	Meta      OHLCVHistoryMeta      `json:"meta"`
}

// OHLCVHistoryIntervals defines model for OHLCVHistoryIntervals.
type OHLCVHistoryIntervals []OHLCVHistoryItem

// OHLCVHistoryItem defines model for OHLCVHistoryItem.
type OHLCVHistoryItem struct {
	// Float, close price of asset in USD
	ClosePrice string `json:"closePrice"`

	// Int64, The end time of bucket in unix timestamp
	CloseTime string `json:"closeTime"`

	// Float, high price of asset in USD
	HighPrice string `json:"highPrice"`

	// Int64, The high time of bucket in unix timestamp
	HighTime string `json:"highTime"`

	// Int64, Liquidty is USD
	Liquidity string `json:"liquidity"`

	// Float, low price of asset in USD
	LowPrice string `json:"lowPrice"`

	// Int64, The low time of bucket in unix timestamp
	LowTime string `json:"lowTime"`

	// Float, open price of asset in USD
	OpenPrice string `json:"openPrice"`

	// Int64, The beginning time of bucket in unix timestamp
	OpenTime string `json:"openTime"`

	// Int64, Volume in USD
	Volume string `json:"volume"`
}

// OHLCVHistoryMeta defines model for OHLCVHistoryMeta.
type OHLCVHistoryMeta struct {
	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// ObservedChain defines model for ObservedChain.
type ObservedChain struct {
	Chain  string `json:"chain"`
	Height int    `json:"height"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {
	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`
	Asset                  string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Int64, number of unique adresses that initiated swaps transactions in the period.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// PreflightStatus defines model for PreflightStatus.
type PreflightStatus struct {
	Code   int    `json:"code"`
	Reason string `json:"reason"`
	Status string `json:"status"`
}

// ProxiedNode defines model for ProxiedNode.
type ProxiedNode struct {
	ActiveBlockHeight int    `json:"active_block_height"`
	Bond              string `json:"bond"`
	BondAddress       string `json:"bond_address"`
	CurrentAward      string `json:"current_award"`
	ForcedToLeave     bool   `json:"forced_to_leave"`
	IpAddress         string `json:"ip_address"`
	Jail              struct {
		NodeAddress *string `json:"node_address,omitempty"`
	} `json:"jail"`
	LeaveHeight     int             `json:"leave_height"`
	NodeAddress     string          `json:"node_address"`
	ObserveChains   []ObservedChain `json:"observe_chains"`
	PreflightStatus PreflightStatus `json:"preflight_status"`
	PubKeySet       struct {
		Ed25519   string `json:"ed25519"`
		Secp256k1 string `json:"secp256k1"`
	} `json:"pub_key_set"`
	RequestedToLeave    bool     `json:"requested_to_leave"`
	SignerMembership    []string `json:"signer_membership"`
	SlashPoints         int      `json:"slash_points"`
	Status              string   `json:"status"`
	StatusSince         int      `json:"status_since"`
	ValidatorConsPubKey string   `json:"validator_cons_pub_key"`
	Version             string   `json:"version"`
}

// ProxiedNodes defines model for ProxiedNodes.
type ProxiedNodes []ProxiedNode

// Queue defines model for Queue.
type Queue struct {
	Internal int `json:"internal"`
	Outbound int `json:"outbound"`
	Swap     int `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {
	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// StatsData defines model for StatsData.
type StatsData struct {
	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, unique users (addresses) initiating swaps in the last 24 hours.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, unique users (addresses) initiating swaps in the last 30 days.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Int64, unique users (addresses) initiating swaps since beginning.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {
	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {
	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {
	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {
	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {
	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at the end of the interval
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {
	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {
	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// StakeDetail defines model for stakeDetail.
type StakeDetail struct {
	// Int64(e8), asset amount
	AssetAmount string `json:"assetAmount"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, asset price in rune
	AssetPrice string `json:"assetPrice"`

	// Float, asset price in usd
	AssetPriceUsd string `json:"assetPriceUsd"`

	// Float, withdraw percentage
	BasisPoint string `json:"basisPoint"`

	// Int64, nano timestamp of the block
	Date string `json:"date"`

	// Int64, block height
	Height string `json:"height"`

	// Int64, total number of pool units
	PoolUnits string `json:"poolUnits"`

	// Int64(e8), rune amount
	RuneAmount string `json:"runeAmount"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// Float, rune price in usd
	RunePriceUsd string `json:"runePriceUsd"`

	// Int64, total number of units changed
	SharedUnits string `json:"sharedUnits"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// FullMembersResponse defines model for FullMembersResponse.
type FullMembersResponse FullMemberDetails

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LPDetailsResponse defines model for LPDetailsResponse.
type LPDetailsResponse LPDetails

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// OHLCVHistoryResponse defines model for OHLCVHistoryResponse.
type OHLCVHistoryResponse OHLCVHistory

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ProxiedNodesResponse defines model for ProxiedNodesResponse.
type ProxiedNodesResponse ProxiedNodes

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {
	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type      *string `json:"type,omitempty"`
	AssetType *string `json:"assetType,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`
}

// GetFullMembersAdressesParams defines parameters for GetFullMembersAdresses.
type GetFullMembersAdressesParams struct {
	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {
	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {
	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {
	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetOHLCVHistoryParams defines parameters for GetOHLCVHistory.
type GetOHLCVHistoryParams struct {
	// Interval of calculations
	Interval *GetOHLCVHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetOHLCVHistoryParamsInterval defines parameters for GetOHLCVHistory.
type GetOHLCVHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {
	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTSSwapHistoryParams defines parameters for GetTSSwapHistory.
type GetTSSwapHistoryParams struct {
	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetTSSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTSSwapHistoryParamsInterval defines parameters for GetTSSwapHistory.
type GetTSSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {
	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetLPDetailParams defines parameters for GetLPDetail.
type GetLPDetailParams struct {
	// Return information for given pools
	Pools *string `json:"pools,omitempty"`
}

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {
	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {
	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {
	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"BwAA//97JEsmXi0BAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
