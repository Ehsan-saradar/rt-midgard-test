// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64, Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64, Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64, Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64, Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64, Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64, Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64, Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64, Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64, Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64, Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64, Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64, Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64, System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64, Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistoryItemPool defines model for EarningsHistoryItemPool.
type EarningsHistoryItemPool struct {

	// Int64, Share of earnings sent to the pool during the time interval
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses struct {
	Current []InboundAddressesItem `json:"current"`
}

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string `json:"address"`
	Chain   string `json:"chain"`

	// indicate whether this chain has halted
	Halted bool   `json:"halted"`
	PubKey string `json:"pub_key"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                  int64 `json:"AsgardSize"`
	BadValidatorRate            int64 `json:"BadValidatorRate"`
	BlocksPerYear               int64 `json:"BlocksPerYear"`
	ChurnInterval               int64 `json:"ChurnInterval"`
	ChurnRetryInterval          int64 `json:"ChurnRetryInterval"`
	CliTxCost                   int64 `json:"CliTxCost"`
	DesiredValidatorSet         int64 `json:"DesiredValidatorSet"`
	DoubleSignMaxAge            int64 `json:"DoubleSignMaxAge"`
	EmissionCurve               int64 `json:"EmissionCurve"`
	FailKeygenSlashPoints       int64 `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints      int64 `json:"FailKeysignSlashPoints"`
	FundMigrationInterval       int64 `json:"FundMigrationInterval"`
	JailTimeKeygen              int64 `json:"JailTimeKeygen"`
	JailTimeKeysign             int64 `json:"JailTimeKeysign"`
	LackOfObservationPenalty    int64 `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks       int64 `json:"LiquidityLockUpBlocks"`
	MinimumBondInRune           int64 `json:"MinimumBondInRune"`
	MinimumNodesForBFT          int64 `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil    int64 `json:"MinimumNodesForYggdrasil"`
	NativeChainGasFee           int64 `json:"NativeChainGasFee"`
	NewPoolCycle                int64 `json:"NewPoolCycle"`
	ObservationDelayFlexibility int64 `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints          int64 `json:"ObserveSlashPoints"`
	OldValidatorRate            int64 `json:"OldValidatorRate"`
	OutboundTransactionFee      int64 `json:"OutboundTransactionFee"`
	SigningTransactionPeriod    int64 `json:"SigningTransactionPeriod"`
	YggFundLimit                int64 `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock struct {
	Current []LastblockItem `json:"current"`
}

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn string `json:"last_observed_in"`
	LastSignedOut  string `json:"last_signed_out"`
	Thorchain      string `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64, total deposits (liquidity additions) during the time interval
	Deposits string `json:"deposits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, total withdrawals during the time interval
	Withdrawals string `json:"withdrawals"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// Liquidity provider data for all the pools of a given member
	Pools []MemberPoolDetails `json:"pools"`
}

// MemberPoolDetails defines model for MemberPoolDetails.
type MemberPoolDetails struct {

	// Int64, total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// Int64, total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Int64, total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`
	PoolShareFactor         string `json:"poolShareFactor"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64, Total Rune pooled in all pools
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64, Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NodeKey defines model for NodeKey.
type NodeKey struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// NodeKeys defines model for NodeKeys.
type NodeKeys []NodeKey

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolLegacyDetail defines model for PoolLegacyDetail.
type PoolLegacyDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Int64, same as history/swaps:toAssetCount
	BuyAssetCount string `json:"buyAssetCount"`

	// Float, same as history/swaps:toRuneVolume/toRuneCount
	BuyTxAverage string `json:"buyTxAverage"`

	// Int64, same as history/swaps:toAssetVolume
	BuyVolume string `json:"buyVolume"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, same as assetDepth + runeDepth
	PoolDepth string `json:"poolDepth"`

	// Float, same as history/swaps:totalFees/totalCount
	PoolFeeAverage string `json:"poolFeeAverage"`

	// Int64, same as history/swaps:totalFees
	PoolFeesTotal string `json:"poolFeesTotal"`

	// Float, same as history/swaps:averageSlip
	PoolSlipAverage string `json:"poolSlipAverage"`

	// Float, same as history/swaps:totalVolume/totalCount
	PoolTxAverage string `json:"poolTxAverage"`

	// Int64, same as buyVolume + sellVolume
	PoolVolume string `json:"poolVolume"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// Int64, same as history/swaps:toRuneCount
	SellAssetCount string `json:"sellAssetCount"`

	// Float, same as history/swaps:toAssetVolume/toAssetCount
	SellTxAverage string `json:"sellTxAverage"`

	// Int64, same as history/swaps:toRuneVolume
	SellVolume string `json:"sellVolume"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64, Liquidity Units in the pool
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune
	Volume24h string `json:"volume24h"`
}

// Queue defines model for Queue.
type Queue struct {
	Outbound string `json:"outbound"`
	Swap     string `json:"swap"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Daily active users (unique addresses interacting)
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Daily transactions
	DailyTx string `json:"dailyTx"`

	// Monthly active users
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Monthly transactions
	MonthlyTx string `json:"monthlyTx"`

	// Total buying transactions
	TotalAssetBuys string `json:"totalAssetBuys"`

	// Total selling transactions
	TotalAssetSells string `json:"totalAssetSells"`

	// Total RUNE balances
	TotalDepth string `json:"totalDepth"`

	// Total staking transactions
	TotalStakeTx string `json:"totalStakeTx"`

	// Total staked (in RUNE Value)
	TotalStaked string `json:"totalStaked"`

	// Total transactions
	TotalTx string `json:"totalTx"`

	// Total unique swappers & members
	TotalUsers string `json:"totalUsers"`

	// Total (in RUNE Value) of all assets swapped since start
	TotalVolume string `json:"totalVolume"`

	// Total withdrawing transactions
	TotalWithdrawTx string `json:"totalWithdrawTx"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float, the average slip by swap. Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64, volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64, volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64, the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64, toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// TxDetails defines model for TxDetails.
type TxDetails struct {

	// Int64, Unix timestamp
	Date   string   `json:"date"`
	Events Event    `json:"events"`
	Height string   `json:"height"`
	In     Tx       `json:"in"`
	Out    []Tx     `json:"out"`
	Pools  []string `json:"pools"`
	Status string   `json:"status"`
	Type   string   `json:"type"`
}

// Coin defines model for coin.
type Coin struct {
	Amount string `json:"amount"`
	Asset  string `json:"asset"`
}

// Coins defines model for coins.
type Coins []Coin

// Event defines model for event.
type Event struct {
	Fee        string `json:"fee"`
	Slip       string `json:"slip"`
	StakeUnits string `json:"stakeUnits"`
}

// Option defines model for option.
type Option struct {
	Asymmetry           string `json:"asymmetry"`
	PriceTarget         string `json:"priceTarget"`
	WithdrawBasisPoints string `json:"withdrawBasisPoints"`
}

// Tx defines model for tx.
type Tx struct {
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`
	Memo    string `json:"memo"`
	Options Option `json:"options"`
	TxID    string `json:"txID"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodeKeyResponse defines model for NodeKeyResponse.
type NodeKeyResponse NodeKeys

// PoolLegacyResponse defines model for PoolLegacyResponse.
type PoolLegacyResponse PoolLegacyDetail

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// TxResponse defines model for TxResponse.
type TxResponse struct {

	// Int64, count of txs matching the filters.
	Count string      `json:"count"`
	Txs   []TxDetails `json:"txs"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *string `json:"status,omitempty"`
}

// GetTxDetailsParams defines parameters for GetTxDetails.
type GetTxDetailsParams struct {

	// Address of sender or recipient of any in/out tx in event
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx in event
	Txid *string `json:"txid,omitempty"`

	// Any asset used in event (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of event
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
