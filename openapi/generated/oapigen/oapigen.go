// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {
	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {
	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {
	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Represents a digital currency amount
type Coin struct {
	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {
	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, The liquidity unit value index. Sqrt(assetDepth * runeDepth)/liquidity units
	Luvi string `json:"luvi"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {
	// Int64(e8), the amount of Asset in the pool at the end of the interval at time endTime
	EndAssetDepth string `json:"endAssetDepth"`

	// Int64, Liquidity Units in the pool at the end of the interval at time endTime
	EndLiquidityUnits string `json:"endLiquidityUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval at time endTime
	EndRuneDepth string `json:"endRuneDepth"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, The liquidity unit value index increase between the first and last depth item
	LuviIncrease string `json:"luviIncrease"`

	// Float, The impermanent loss between the first and last depth item
	PriceShiftLoss string `json:"priceShiftLoss"`

	// Int64(e8), the amount of Asset in the pool at the start of the interval at time startTime
	StartAssetDepth string `json:"startAssetDepth"`

	// Int64, Liquidity Units in the pool at the start of the interval at time startTime
	StartLiquidityUnits string `json:"startLiquidityUnits"`

	// Int64(e8), the amount of Rune in the pool at the start of the interval at time startTime
	StartRuneDepth string `json:"startRuneDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {
	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {
	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// FullMemberDetails defines model for FullMemberDetails.
type FullMemberDetails struct {
	// List details of all the liquidity providers identified with the given address
	Pools []FullMemberPool `json:"pools"`
}

// FullMemberPool defines model for FullMemberPool.
type FullMemberPool struct {
	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total units of the pool
	PoolUnits string `json:"poolUnits"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`

	// Int64, total units that belong the the member
	SharedUnits string `json:"sharedUnits"`
}

// Health defines model for Health.
type Health struct {
	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync         bool     `json:"inSync"`
	LastAggregated HeightTS `json:"lastAggregated"`
	LastCommitted  HeightTS `json:"lastCommitted"`
	LastFetched    HeightTS `json:"lastFetched"`
	LastThorNode   HeightTS `json:"lastThorNode"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// HeightTS defines model for HeightTS.
type HeightTS struct {
	// Block height
	Height int `json:"height"`

	// Block timestamp (seconds since epoch)
	Timestamp int `json:"timestamp"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string  `json:"address"`
	Chain   string  `json:"chain"`
	GasRate *string `json:"gas_rate,omitempty"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                    int64  `json:"AsgardSize"`
	BadValidatorRate              int64  `json:"BadValidatorRate"`
	BadValidatorRedline           int    `json:"BadValidatorRedline"`
	BlocksPerYear                 int64  `json:"BlocksPerYear"`
	ChurnInterval                 int64  `json:"ChurnInterval"`
	ChurnRetryInterval            int64  `json:"ChurnRetryInterval"`
	DesiredValidatorSet           int64  `json:"DesiredValidatorSet"`
	DoubleSignMaxAge              int64  `json:"DoubleSignMaxAge"`
	EmissionCurve                 int64  `json:"EmissionCurve"`
	FailKeygenSlashPoints         int64  `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints        int64  `json:"FailKeysignSlashPoints"`
	FullImpLossProtectionBlocks   int64  `json:"FullImpLossProtectionBlocks"`
	FundMigrationInterval         int64  `json:"FundMigrationInterval"`
	IncentiveCurve                int64  `json:"IncentiveCurve"`
	JailTimeKeygen                int64  `json:"JailTimeKeygen"`
	JailTimeKeysign               int64  `json:"JailTimeKeysign"`
	LackOfObservationPenalty      int64  `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks         int64  `json:"LiquidityLockUpBlocks"`
	MaxAvailablePools             int64  `json:"MaxAvailablePools"`
	MaxSwapsPerBlock              int64  `json:"MaxSwapsPerBlock"`
	MinRunePoolDepth              int64  `json:"MinRunePoolDepth"`
	MinSlashPointsForBadValidator int64  `json:"MinSlashPointsForBadValidator"`
	MinSwapsPerBlock              int64  `json:"MinSwapsPerBlock"`
	MinimumBondInRune             int64  `json:"MinimumBondInRune"`
	MinimumNodesForBFT            int64  `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil      int64  `json:"MinimumNodesForYggdrasil"`
	NativeTransactionFee          int64  `json:"NativeTransactionFee"`
	NewPoolCycle                  *int64 `json:"NewPoolCycle,omitempty"`
	ObservationDelayFlexibility   int64  `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints            int64  `json:"ObserveSlashPoints"`
	OldValidatorRate              int64  `json:"OldValidatorRate"`
	OutboundTransactionFee        int64  `json:"OutboundTransactionFee"`
	PoolCycle                     int64  `json:"PoolCycle"`
	SigningTransactionPeriod      int64  `json:"SigningTransactionPeriod"`
	VirtualMultSynths             int64  `json:"VirtualMultSynths"`
	YggFundLimit                  int64  `json:"YggFundLimit"`
}

// LPDetail defines model for LPDetail.
type LPDetail struct {
	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, total asset earned
	AssetEarned string `json:"assetEarned"`

	// Float, current asset price in rune
	AssetPrice string `json:"assetPrice"`

	// Float, current asset price in usd
	AssetPriceUsd string `json:"assetPriceUsd"`

	// pool name
	Pool string `json:"pool"`

	// Int64(e8), pool units
	PoolUnits string `json:"poolUnits"`

	// Int64(e8), total block reward
	Rewards string `json:"rewards"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// Float, total rune earned
	RuneEarned string `json:"runeEarned"`

	// Int64(e8), current rune price in usd
	RunePriceUsd string `json:"runePriceUsd"`

	// Int64(e8), share units
	SharedUnits string        `json:"sharedUnits"`
	StakeDetail []StakeDetail `json:"stakeDetail"`

	// Int64(e8), total rune price in usd
	UsdEarned      string        `json:"usdEarned"`
	WithdrawDetail []StakeDetail `json:"withdrawDetail"`
}

// LPDetails defines model for LPDetails.
type LPDetails []LPDetail

// Lastblock defines model for Lastblock.
type Lastblock []LastblockItem

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn int64  `json:"last_observed_in"`
	LastSignedOut  int64  `json:"last_signed_out"`
	Thorchain      int64  `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {
	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {
	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {
	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {
	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// OHLCVHistory defines model for OHLCVHistory.
type OHLCVHistory struct {
	Intervals OHLCVHistoryIntervals `json:"intervals"`
	Meta      OHLCVHistoryMeta      `json:"meta"`
}

// OHLCVHistoryIntervals defines model for OHLCVHistoryIntervals.
type OHLCVHistoryIntervals []OHLCVHistoryItem

// OHLCVHistoryItem defines model for OHLCVHistoryItem.
type OHLCVHistoryItem struct {
	// Float, close price of asset in USD
	ClosePrice string `json:"closePrice"`

	// Int64, The end time of bucket in unix timestamp
	CloseTime string `json:"closeTime"`

	// Float, high price of asset in USD
	HighPrice string `json:"highPrice"`

	// Int64, The high time of bucket in unix timestamp
	HighTime string `json:"highTime"`

	// Int64, Liquidty is USD
	Liquidity string `json:"liquidity"`

	// Float, low price of asset in USD
	LowPrice string `json:"lowPrice"`

	// Int64, The low time of bucket in unix timestamp
	LowTime string `json:"lowTime"`

	// Float, open price of asset in USD
	OpenPrice string `json:"openPrice"`

	// Int64, The beginning time of bucket in unix timestamp
	OpenTime string `json:"openTime"`

	// Int64, Volume in USD
	Volume string `json:"volume"`
}

// OHLCVHistoryMeta defines model for OHLCVHistoryMeta.
type OHLCVHistoryMeta struct {
	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// ObservedChain defines model for ObservedChain.
type ObservedChain struct {
	Chain  string `json:"chain"`
	Height int    `json:"height"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {
	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`
	Asset                  string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Int64, number of unique adresses that initiated swaps transactions in the period.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// PreflightStatus defines model for PreflightStatus.
type PreflightStatus struct {
	Code   int    `json:"code"`
	Reason string `json:"reason"`
	Status string `json:"status"`
}

// ProxiedNode defines model for ProxiedNode.
type ProxiedNode struct {
	ActiveBlockHeight int    `json:"active_block_height"`
	Bond              string `json:"bond"`
	BondAddress       string `json:"bond_address"`
	CurrentAward      string `json:"current_award"`
	ForcedToLeave     bool   `json:"forced_to_leave"`
	IpAddress         string `json:"ip_address"`
	Jail              struct {
		NodeAddress *string `json:"node_address,omitempty"`
	} `json:"jail"`
	LeaveHeight     int             `json:"leave_height"`
	NodeAddress     string          `json:"node_address"`
	ObserveChains   []ObservedChain `json:"observe_chains"`
	PreflightStatus PreflightStatus `json:"preflight_status"`
	PubKeySet       struct {
		Ed25519   string `json:"ed25519"`
		Secp256k1 string `json:"secp256k1"`
	} `json:"pub_key_set"`
	RequestedToLeave    bool     `json:"requested_to_leave"`
	SignerMembership    []string `json:"signer_membership"`
	SlashPoints         int      `json:"slash_points"`
	Status              string   `json:"status"`
	StatusSince         int      `json:"status_since"`
	ValidatorConsPubKey string   `json:"validator_cons_pub_key"`
	Version             string   `json:"version"`
}

// ProxiedNodes defines model for ProxiedNodes.
type ProxiedNodes []ProxiedNode

// Queue defines model for Queue.
type Queue struct {
	Internal int `json:"internal"`
	Outbound int `json:"outbound"`
	Swap     int `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {
	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// StatsData defines model for StatsData.
type StatsData struct {
	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, unique users (addresses) initiating swaps in the last 24 hours.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, unique users (addresses) initiating swaps in the last 30 days.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Int64, unique users (addresses) initiating swaps since beginning.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {
	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {
	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {
	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {
	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {
	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at the end of the interval
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {
	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {
	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// StakeDetail defines model for stakeDetail.
type StakeDetail struct {
	// Int64(e8), asset amount
	AssetAmount string `json:"assetAmount"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, asset price in rune
	AssetPrice string `json:"assetPrice"`

	// Float, asset price in usd
	AssetPriceUsd string `json:"assetPriceUsd"`

	// Float, withdraw percentage
	BasisPoint string `json:"basisPoint"`

	// Int64, nano timestamp of the block
	Date string `json:"date"`

	// Int64, block height
	Height string `json:"height"`

	// Int64, total number of pool units
	PoolUnits string `json:"poolUnits"`

	// Int64(e8), rune amount
	RuneAmount string `json:"runeAmount"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// Float, rune price in usd
	RunePriceUsd string `json:"runePriceUsd"`

	// Int64, total number of units changed
	SharedUnits string `json:"sharedUnits"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// FullMembersResponse defines model for FullMembersResponse.
type FullMembersResponse FullMemberDetails

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LPDetailsResponse defines model for LPDetailsResponse.
type LPDetailsResponse LPDetails

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// OHLCVHistoryResponse defines model for OHLCVHistoryResponse.
type OHLCVHistoryResponse OHLCVHistory

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ProxiedNodesResponse defines model for ProxiedNodesResponse.
type ProxiedNodesResponse ProxiedNodes

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {
	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`
}

// GetFullMembersAdressesParams defines parameters for GetFullMembersAdresses.
type GetFullMembersAdressesParams struct {
	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {
	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {
	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {
	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetOHLCVHistoryParams defines parameters for GetOHLCVHistory.
type GetOHLCVHistoryParams struct {
	// Interval of calculations
	Interval *GetOHLCVHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetOHLCVHistoryParamsInterval defines parameters for GetOHLCVHistory.
type GetOHLCVHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {
	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTSSwapHistoryParams defines parameters for GetTSSwapHistory.
type GetTSSwapHistoryParams struct {
	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetTSSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTSSwapHistoryParamsInterval defines parameters for GetTSSwapHistory.
type GetTSSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {
	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetLPDetailParams defines parameters for GetLPDetail.
type GetLPDetailParams struct {
	// Return information for given pools
	Pools *string `json:"pools,omitempty"`

	// Type of staking. Default is symmetric.
	Type *GetLPDetailParamsType `json:"type,omitempty"`
}

// GetLPDetailParamsType defines parameters for GetLPDetail.
type GetLPDetailParamsType string

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {
	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {
	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {
	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"UCva+/r169f/DgAA//9FeOXv6SkBAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
