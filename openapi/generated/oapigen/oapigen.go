// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Action defines model for Action.
type Action struct {

	// Int64, Unix timestamp for when the action was registered
	Date string `json:"date"`

	// Int64, block height at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status string `json:"status"`

	// Type of action
	Type string `json:"type"`
}

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64, Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64, Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64, Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64, Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64, Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64, Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64, Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64, Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64, Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64, Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Coin defines model for Coin.
type Coin struct {

	// Int64 (10^8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64, Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64, Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64, System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64, Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistoryItemPool defines model for EarningsHistoryItemPool.
type EarningsHistoryItemPool struct {

	// Int64, Share of earnings sent to the pool during the time interval
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses struct {
	Current []InboundAddressesItem `json:"current"`
}

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string `json:"address"`
	Chain   string `json:"chain"`

	// indicate whether this chain has halted
	Halted bool   `json:"halted"`
	PubKey string `json:"pub_key"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                  int64 `json:"AsgardSize"`
	BadValidatorRate            int64 `json:"BadValidatorRate"`
	BlocksPerYear               int64 `json:"BlocksPerYear"`
	ChurnInterval               int64 `json:"ChurnInterval"`
	ChurnRetryInterval          int64 `json:"ChurnRetryInterval"`
	CliTxCost                   int64 `json:"CliTxCost"`
	DesiredValidatorSet         int64 `json:"DesiredValidatorSet"`
	DoubleSignMaxAge            int64 `json:"DoubleSignMaxAge"`
	EmissionCurve               int64 `json:"EmissionCurve"`
	FailKeygenSlashPoints       int64 `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints      int64 `json:"FailKeysignSlashPoints"`
	FundMigrationInterval       int64 `json:"FundMigrationInterval"`
	JailTimeKeygen              int64 `json:"JailTimeKeygen"`
	JailTimeKeysign             int64 `json:"JailTimeKeysign"`
	LackOfObservationPenalty    int64 `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks       int64 `json:"LiquidityLockUpBlocks"`
	MinimumBondInRune           int64 `json:"MinimumBondInRune"`
	MinimumNodesForBFT          int64 `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil    int64 `json:"MinimumNodesForYggdrasil"`
	NativeChainGasFee           int64 `json:"NativeChainGasFee"`
	NewPoolCycle                int64 `json:"NewPoolCycle"`
	ObservationDelayFlexibility int64 `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints          int64 `json:"ObserveSlashPoints"`
	OldValidatorRate            int64 `json:"OldValidatorRate"`
	OutboundTransactionFee      int64 `json:"OutboundTransactionFee"`
	SigningTransactionPeriod    int64 `json:"SigningTransactionPeriod"`
	YggFundLimit                int64 `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock struct {
	Current []LastblockItem `json:"current"`
}

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn string `json:"last_observed_in"`
	LastSignedOut  string `json:"last_signed_out"`
	Thorchain      string `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64 (10^8), total deposits in RUNE during the time interval.
	// Accounts for both asset (using the price at deposit time) and RUNE deposited into pools
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64 (10^8), total withdrawals in RUNE during the time interval. Accounts for
	// both asset (using the price at withdrawal time) and RUNE withdrawn from pools
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64, total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64, total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64, total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`
	PoolShareFactor         string `json:"poolShareFactor"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64, Total Rune pooled in all pools
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64, Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NetworkFees defines model for NetworkFees.
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolLegacyDetail defines model for PoolLegacyDetail.
type PoolLegacyDetail struct {
	Asset string `json:"asset"`

	// same as assetDepth from pool/stats
	AssetDepth string `json:"assetDepth"`

	// same as toAssetCount from pool/stats
	BuyAssetCount string `json:"buyAssetCount"`

	// same as toAssetVolume / toAssetCount from pool/stats
	BuyTxAverage string `json:"buyTxAverage"`

	// same as toAssetVolume from pool/stats
	BuyVolume string `json:"buyVolume"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// same as 2*runeDepth from pool/stats
	PoolDepth string `json:"poolDepth"`

	// same as totalFees / swapCount from pool/stats
	PoolFeeAverage string `json:"poolFeeAverage"`

	// same as totalFees from pool/stats
	PoolFeesTotal string `json:"poolFeesTotal"`

	// same as averageSlip from pool/stats
	PoolSlipAverage string `json:"poolSlipAverage"`

	// same as addLiquidityVolume from pool/stats
	PoolStakedTotal string `json:"poolStakedTotal"`

	// same as swapVolume / swapCount from pool/stats
	PoolTxAverage string `json:"poolTxAverage"`

	// same as units from pool/stats
	PoolUnits string `json:"poolUnits"`

	// Int64, same as buyVolume + sellVolume
	PoolVolume string `json:"poolVolume"`

	// same as assetPrice from pool/stats
	Price string `json:"price"`

	// same as runeDepth from pool/stats
	RuneDepth string `json:"runeDepth"`

	// same as toRuneCount from pool/stats
	SellAssetCount string `json:"sellAssetCount"`

	// same as toRuneVolume / toRuneCount from pool/stats
	SellTxAverage string `json:"sellTxAverage"`

	// same as toRuneVolume from pool/stats
	SellVolume string `json:"sellVolume"`

	// same as addLiquidityCount from pool/stats
	StakeTxCount string `json:"stakeTxCount"`

	// same as uniqueMemberCount from pool/stats
	StakersCount string `json:"stakersCount"`

	// same as addLiquidityCount + withdrawCount from pool/stats
	StakingTxCount string `json:"stakingTxCount"`

	// same as status from pool/stats
	Status string `json:"status"`

	// Int64, same as history/swaps:uniqueSwapperCount
	SwappersCount string `json:"swappersCount"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64, same as swapVolume pool/stats?period=24h
	Volume24h string `json:"volume24h"`

	// same as withdrawCount from pool/stats
	WithdrawTxCount string `json:"withdrawTxCount"`
}

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64, same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`
	Asset              string `json:"asset"`

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64, same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64, same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64, same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Int64, number of unique adresses that initiated swaps transactions in the period.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Liquidity Units in the pool
	Units string `json:"units"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64, same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// Queue defines model for Queue.
type Queue struct {
	Outbound string `json:"outbound"`
	Swap     string `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Daily active users (unique addresses interacting)
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Daily transactions
	DailyTx string `json:"dailyTx"`

	// Monthly active users
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Monthly transactions
	MonthlyTx string `json:"monthlyTx"`

	// Total buying transactions
	TotalAssetBuys string `json:"totalAssetBuys"`

	// Total selling transactions
	TotalAssetSells string `json:"totalAssetSells"`

	// Total RUNE balances
	TotalDepth string `json:"totalDepth"`

	// Total staking transactions
	TotalStakeTx string `json:"totalStakeTx"`

	// Total staked (in RUNE Value)
	TotalStaked string `json:"totalStaked"`

	// Total transactions
	TotalTx string `json:"totalTx"`

	// Total unique swappers & members
	TotalUsers string `json:"totalUsers"`

	// Total (in RUNE Value) of all assets swapped since start
	TotalVolume string `json:"totalVolume"`

	// Total withdrawing transactions
	TotalWithdrawTx string `json:"totalWithdrawTx"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float, the average slip by swap. Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float, the average slip for swaps to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64, the fees collected from swaps to asset denoted in rune
	ToAssetFees string `json:"toAssetFees"`

	// Int64, volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float, the average slip for swaps to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64, the fees collected from swaps to rune
	ToRuneFees string `json:"toRuneFees"`

	// Int64, volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64, the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64, toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Int64 (10^8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), trade slip percentage
	TradeSlip string `json:"tradeSlip"`

	// Int64 (10^8), minimum output amount specified for the swap
	TradeTarget string `json:"tradeTarget"`
}

// Transaction defines model for Transaction.
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction memo
	Memo string `json:"memo"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolLegacyResponse defines model for PoolLegacyResponse.
type PoolLegacyResponse PoolLegacyDetail

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Address of sender or recipient of any in/out transaction related to the action
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action (swap, addLiquidity, withdraw, donate, refund)
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *string `json:"period,omitempty"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *string `json:"status,omitempty"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
