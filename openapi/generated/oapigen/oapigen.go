// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {

	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Represents a digital currency amount
type Coin struct {

	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {

	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync         bool     `json:"inSync"`
	LastAggregated HeightTS `json:"lastAggregated"`
	LastCommitted  HeightTS `json:"lastCommitted"`
	LastFetched    HeightTS `json:"lastFetched"`
	LastThorNode   HeightTS `json:"lastThorNode"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// HeightTS defines model for HeightTS.
type HeightTS struct {

	// Block height
	Height int `json:"height"`

	// Block timestamp (seconds since epoch)
	Timestamp int `json:"timestamp"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string  `json:"address"`
	Chain   string  `json:"chain"`
	GasRate *string `json:"gas_rate,omitempty"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                    int64  `json:"AsgardSize"`
	BadValidatorRate              int64  `json:"BadValidatorRate"`
	BadValidatorRedline           int    `json:"BadValidatorRedline"`
	BlocksPerYear                 int64  `json:"BlocksPerYear"`
	ChurnInterval                 int64  `json:"ChurnInterval"`
	ChurnRetryInterval            int64  `json:"ChurnRetryInterval"`
	DesiredValidatorSet           int64  `json:"DesiredValidatorSet"`
	DoubleSignMaxAge              int64  `json:"DoubleSignMaxAge"`
	EmissionCurve                 int64  `json:"EmissionCurve"`
	FailKeygenSlashPoints         int64  `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints        int64  `json:"FailKeysignSlashPoints"`
	FullImpLossProtectionBlocks   int64  `json:"FullImpLossProtectionBlocks"`
	FundMigrationInterval         int64  `json:"FundMigrationInterval"`
	IncentiveCurve                int64  `json:"IncentiveCurve"`
	JailTimeKeygen                int64  `json:"JailTimeKeygen"`
	JailTimeKeysign               int64  `json:"JailTimeKeysign"`
	LackOfObservationPenalty      int64  `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks         int64  `json:"LiquidityLockUpBlocks"`
	MaxAvailablePools             int64  `json:"MaxAvailablePools"`
	MaxSwapsPerBlock              int64  `json:"MaxSwapsPerBlock"`
	MinRunePoolDepth              int64  `json:"MinRunePoolDepth"`
	MinSlashPointsForBadValidator int64  `json:"MinSlashPointsForBadValidator"`
	MinSwapsPerBlock              int64  `json:"MinSwapsPerBlock"`
	MinimumBondInRune             int64  `json:"MinimumBondInRune"`
	MinimumNodesForBFT            int64  `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil      int64  `json:"MinimumNodesForYggdrasil"`
	NativeTransactionFee          int64  `json:"NativeTransactionFee"`
	NewPoolCycle                  *int64 `json:"NewPoolCycle,omitempty"`
	ObservationDelayFlexibility   int64  `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints            int64  `json:"ObserveSlashPoints"`
	OldValidatorRate              int64  `json:"OldValidatorRate"`
	OutboundTransactionFee        int64  `json:"OutboundTransactionFee"`
	PoolCycle                     int64  `json:"PoolCycle"`
	SigningTransactionPeriod      int64  `json:"SigningTransactionPeriod"`
	VirtualMultSynths             int64  `json:"VirtualMultSynths"`
	YggFundLimit                  int64  `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock []LastblockItem

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn int64  `json:"last_observed_in"`
	LastSignedOut  int64  `json:"last_signed_out"`
	Thorchain      int64  `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {

	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// ObservedChain defines model for ObservedChain.
type ObservedChain struct {
	Chain  string `json:"chain"`
	Height int    `json:"height"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`
	Asset                  string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Int64, number of unique adresses that initiated swaps transactions in the period.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// PreflightStatus defines model for PreflightStatus.
type PreflightStatus struct {
	Code   int    `json:"code"`
	Reason string `json:"reason"`
	Status string `json:"status"`
}

// ProxiedNode defines model for ProxiedNode.
type ProxiedNode struct {
	ActiveBlockHeight int    `json:"active_block_height"`
	Bond              string `json:"bond"`
	BondAddress       string `json:"bond_address"`
	CurrentAward      string `json:"current_award"`
	ForcedToLeave     bool   `json:"forced_to_leave"`
	IpAddress         string `json:"ip_address"`
	Jail              struct {
		NodeAddress *string `json:"node_address,omitempty"`
	} `json:"jail"`
	LeaveHeight     int             `json:"leave_height"`
	NodeAddress     string          `json:"node_address"`
	ObserveChains   []ObservedChain `json:"observe_chains"`
	PreflightStatus PreflightStatus `json:"preflight_status"`
	PubKeySet       struct {
		Ed25519   string `json:"ed25519"`
		Secp256k1 string `json:"secp256k1"`
	} `json:"pub_key_set"`
	RequestedToLeave    bool     `json:"requested_to_leave"`
	SignerMembership    []string `json:"signer_membership"`
	SlashPoints         int      `json:"slash_points"`
	Status              string   `json:"status"`
	StatusSince         int      `json:"status_since"`
	ValidatorConsPubKey string   `json:"validator_cons_pub_key"`
	Version             string   `json:"version"`
}

// ProxiedNodes defines model for ProxiedNodes.
type ProxiedNodes []ProxiedNode

// Queue defines model for Queue.
type Queue struct {
	Internal int `json:"internal"`
	Outbound int `json:"outbound"`
	Swap     int `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, unique users (addresses) initiating swaps in the last 24 hours.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, unique users (addresses) initiating swaps in the last 30 days.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Int64, unique users (addresses) initiating swaps since beginning.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {

	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {

	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at the end of the interval
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ProxiedNodesResponse defines model for ProxiedNodesResponse.
type ProxiedNodesResponse ProxiedNodes

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {

	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
