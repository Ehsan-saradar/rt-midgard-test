// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {

	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Represents a digital currency amount
type Coin struct {

	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {

	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string  `json:"address"`
	Chain   string  `json:"chain"`
	GasRate *string `json:"gas_rate,omitempty"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                    int64  `json:"AsgardSize"`
	BadValidatorRate              int64  `json:"BadValidatorRate"`
	BadValidatorRedline           int    `json:"BadValidatorRedline"`
	BlocksPerYear                 int64  `json:"BlocksPerYear"`
	ChurnInterval                 int64  `json:"ChurnInterval"`
	ChurnRetryInterval            int64  `json:"ChurnRetryInterval"`
	DesiredValidatorSet           int64  `json:"DesiredValidatorSet"`
	DoubleSignMaxAge              int64  `json:"DoubleSignMaxAge"`
	EmissionCurve                 int64  `json:"EmissionCurve"`
	FailKeygenSlashPoints         int64  `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints        int64  `json:"FailKeysignSlashPoints"`
	FullImpLossProtectionBlocks   int64  `json:"FullImpLossProtectionBlocks"`
	FundMigrationInterval         int64  `json:"FundMigrationInterval"`
	IncentiveCurve                int64  `json:"IncentiveCurve"`
	JailTimeKeygen                int64  `json:"JailTimeKeygen"`
	JailTimeKeysign               int64  `json:"JailTimeKeysign"`
	LackOfObservationPenalty      int64  `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks         int64  `json:"LiquidityLockUpBlocks"`
	MaxAvailablePools             int64  `json:"MaxAvailablePools"`
	MaxSwapsPerBlock              int64  `json:"MaxSwapsPerBlock"`
	MinRunePoolDepth              int64  `json:"MinRunePoolDepth"`
	MinSlashPointsForBadValidator int64  `json:"MinSlashPointsForBadValidator"`
	MinSwapsPerBlock              int64  `json:"MinSwapsPerBlock"`
	MinimumBondInRune             int64  `json:"MinimumBondInRune"`
	MinimumNodesForBFT            int64  `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil      int64  `json:"MinimumNodesForYggdrasil"`
	NativeTransactionFee          int64  `json:"NativeTransactionFee"`
	NewPoolCycle                  *int64 `json:"NewPoolCycle,omitempty"`
	ObservationDelayFlexibility   int64  `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints            int64  `json:"ObserveSlashPoints"`
	OldValidatorRate              int64  `json:"OldValidatorRate"`
	OutboundTransactionFee        int64  `json:"OutboundTransactionFee"`
	PoolCycle                     int64  `json:"PoolCycle"`
	SigningTransactionPeriod      int64  `json:"SigningTransactionPeriod"`
	VirtualMultSynths             int64  `json:"VirtualMultSynths"`
	YggFundLimit                  int64  `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock struct {
	Current []LastblockItem `json:"current"`
}

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn int64  `json:"last_observed_in"`
	LastSignedOut  int64  `json:"last_signed_out"`
	Thorchain      int64  `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`
	PoolShareFactor         string `json:"poolShareFactor"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), Total Rune pooled in all pools
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// ObservedChain defines model for ObservedChain.
type ObservedChain struct {
	Chain  string `json:"chain"`
	Height int    `json:"height"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolLegacyDetail defines model for PoolLegacyDetail.
type PoolLegacyDetail struct {
	Asset string `json:"asset"`

	// same as assetDepth from pool/stats
	AssetDepth string `json:"assetDepth"`

	// same as addAssetLiquidityVolume from pool/stats
	AssetStakedTotal string `json:"assetStakedTotal"`

	// same as toAssetCount from pool/stats
	BuyAssetCount string `json:"buyAssetCount"`

	// same as toAssetFees / toAssetCount from pool/stats
	BuyFeeAverage string `json:"buyFeeAverage"`

	// same as toAssetFees from pool/stats
	BuyFeesTotal string `json:"buyFeesTotal"`

	// same as toAssetAverageSlip from pool/stats
	BuySlipAverage string `json:"buySlipAverage"`

	// same as toAssetVolume / toAssetCount from pool/stats
	BuyTxAverage string `json:"buyTxAverage"`

	// same as toAssetVolume from pool/stats
	BuyVolume string `json:"buyVolume"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// same as 2*runeDepth from pool/stats
	PoolDepth string `json:"poolDepth"`

	// same as totalFees / swapCount from pool/stats
	PoolFeeAverage string `json:"poolFeeAverage"`

	// same as totalFees from pool/stats
	PoolFeesTotal string `json:"poolFeesTotal"`

	// same as averageSlip from pool/stats
	PoolSlipAverage string `json:"poolSlipAverage"`

	// same as addLiquidityVolume from pool/stats
	PoolStakedTotal string `json:"poolStakedTotal"`

	// same as swapVolume / swapCount from pool/stats
	PoolTxAverage string `json:"poolTxAverage"`

	// same as units from pool/stats
	PoolUnits string `json:"poolUnits"`

	// Int64(e8), same as buyVolume + sellVolume
	PoolVolume string `json:"poolVolume"`

	// same as assetPrice from pool/stats
	Price string `json:"price"`

	// same as runeDepth from pool/stats
	RuneDepth string `json:"runeDepth"`

	// same as addRuneLiquidityVolume from pool/stats
	RuneStakedTotal string `json:"runeStakedTotal"`

	// same as toRuneCount from pool/stats
	SellAssetCount string `json:"sellAssetCount"`

	// same as toRuneFees / toRuneCount from pool/stats
	SellFeeAverage string `json:"sellFeeAverage"`

	// same as toRuneFees from pool/stats
	SellFeesTotal string `json:"sellFeesTotal"`

	// same as toRuneAverageSlip from pool/stats
	SellSlipAverage string `json:"sellSlipAverage"`

	// same as toRuneVolume / toRuneCount from pool/stats
	SellTxAverage string `json:"sellTxAverage"`

	// same as toRuneVolume from pool/stats
	SellVolume string `json:"sellVolume"`

	// same as addLiquidityCount from pool/stats
	StakeTxCount string `json:"stakeTxCount"`

	// same as uniqueMemberCount from pool/stats
	StakersCount string `json:"stakersCount"`

	// same as addLiquidityCount + withdrawCount from pool/stats
	StakingTxCount string `json:"stakingTxCount"`

	// same as status from pool/stats
	Status string `json:"status"`

	// Int64, same as history/swaps:uniqueSwapperCount
	SwappersCount string `json:"swappersCount"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64(e8), same as swapVolume pool/stats?period=24h
	Volume24h string `json:"volume24h"`

	// same as withdrawCount from pool/stats
	WithdrawTxCount string `json:"withdrawTxCount"`
}

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`
	Asset                  string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Int64, number of unique adresses that initiated swaps transactions in the period.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Liquidity Units in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// PreflightStatus defines model for PreflightStatus.
type PreflightStatus struct {
	Code   int    `json:"code"`
	Reason string `json:"reason"`
	Status string `json:"status"`
}

// ProxiedNode defines model for ProxiedNode.
type ProxiedNode struct {
	ActiveBlockHeight int    `json:"active_block_height"`
	Bond              string `json:"bond"`
	BondAddress       string `json:"bond_address"`
	CurrentAward      string `json:"current_award"`
	ForcedToLeave     bool   `json:"forced_to_leave"`
	IpAddress         string `json:"ip_address"`
	Jail              struct {
		NodeAddress *string `json:"node_address,omitempty"`
	} `json:"jail"`
	LeaveHeight     int             `json:"leave_height"`
	NodeAddress     string          `json:"node_address"`
	ObserveChains   []ObservedChain `json:"observe_chains"`
	PreflightStatus PreflightStatus `json:"preflight_status"`
	PubKeySet       struct {
		Ed25519   string `json:"ed25519"`
		Secp256k1 string `json:"secp256k1"`
	} `json:"pub_key_set"`
	RequestedToLeave    bool     `json:"requested_to_leave"`
	SignerMembership    []string `json:"signer_membership"`
	SlashPoints         int      `json:"slash_points"`
	Status              string   `json:"status"`
	StatusSince         int      `json:"status_since"`
	ValidatorConsPubKey string   `json:"validator_cons_pub_key"`
	Version             string   `json:"version"`
}

// ProxiedNodes defines model for ProxiedNodes.
type ProxiedNodes []ProxiedNode

// Queue defines model for Queue.
type Queue struct {
	Internal int `json:"internal"`
	Outbound int `json:"outbound"`
	Swap     int `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, unique users (addresses) initiating swaps in the last 24 hours.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, unique users (addresses) initiating swaps in the last 30 days.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Int64, unique users (addresses) initiating swaps since beginning.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip by swap.
	// Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps to asset denoted in rune
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps to rune
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64(e8), toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds at the end of the interval
	TotalBonds string `json:"totalBonds"`

	// Int64(e8), the total amount of Rune in all of the pools at the end of the interval
	TotalRuneDepth string `json:"totalRuneDepth"`

	// Int64(e8), total value locked in the chain (in rune).
	// This contains the liquidity pools (both assets and rune) and bonds of the nodes.
	TotalValueLocked string `json:"totalValueLocked"`
}

// Transaction data
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolLegacyResponse defines model for PoolLegacyResponse.
type PoolLegacyResponse PoolLegacyDetail

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ProxiedNodesResponse defines model for ProxiedNodesResponse.
type ProxiedNodesResponse ProxiedNodes

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {

	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
