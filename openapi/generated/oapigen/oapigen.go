// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64, Average bond of active nodes.
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64, Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64, Maxinum bond of active nodes.
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64, Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64, Median bond of active nodes.
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64, Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64, Minumum bond of active nodes.
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64, Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64, Total bond of active nodes.
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64, Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {
	StakeArray  []string `json:"stakeArray"`
	TotalStaked string   `json:"totalStaked"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`
	BondingROI string `json:"bondingROI"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks).
	PoolActivationCountdown string  `json:"poolActivationCountdown"`
	PoolShareFactor         string  `json:"poolShareFactor"`
	StakingROI              *string `json:"stakingROI,omitempty"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64, Total Rune pooled in all pools.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64, Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NodeKey defines model for NodeKey.
type NodeKey struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	Price string `json:"price"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Enabled, Bootstrap.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolSummary defines model for PoolSummary.
type PoolSummary struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Int64, unix timestamp (second).
	DateCreated string `json:"dateCreated"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	Price string `json:"price"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Daily active users (unique addresses interacting)
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Daily transactions
	DailyTx string `json:"dailyTx"`

	// Monthly active users
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Monthly transactions
	MonthlyTx string `json:"monthlyTx"`

	// Total buying transactions
	TotalAssetBuys string `json:"totalAssetBuys"`

	// Total selling transactions
	TotalAssetSells string `json:"totalAssetSells"`

	// Total RUNE balances
	TotalDepth string `json:"totalDepth"`

	// Total staking transactions
	TotalStakeTx string `json:"totalStakeTx"`

	// Total staked (in RUNE Value).
	TotalStaked string `json:"totalStaked"`

	// Total transactions
	TotalTx string `json:"totalTx"`

	// Total unique swappers & members
	TotalUsers string `json:"totalUsers"`

	// Total (in RUNE Value) of all assets swapped since start.
	TotalVolume string `json:"totalVolume"`

	// Total withdrawing transactions
	TotalWithdrawTx string `json:"totalWithdrawTx"`
}

// TxDetails defines model for TxDetails.
type TxDetails struct {

	// Int64, Unix timestamp.
	Date   string `json:"date"`
	Events Event  `json:"events"`
	Height string `json:"height"`
	In     Tx     `json:"in"`
	Out    []Tx   `json:"out"`
	Pool   string `json:"pool"`
	Status string `json:"status"`
	Type   string `json:"type"`
}

// Volume defines model for Volume.
type Volume struct {

	// Sum of "rune_amount" of buy swap events.
	BuyVolume string `json:"buyVolume"`

	// Sum of "rune_amount" of sell swap events.
	SellVolume string `json:"sellVolume"`

	// Int64, The beginning time of bucket in unix timestamp.
	Time string `json:"time"`

	// buyVolume + sellVolume
	TotalVolume string `json:"totalVolume"`
}

// Coin defines model for coin.
type Coin struct {
	Amount string `json:"amount"`
	Asset  string `json:"asset"`
}

// Coins defines model for coins.
type Coins []Coin

// Event defines model for event.
type Event struct {
	Fee        string `json:"fee"`
	Slip       string `json:"slip"`
	StakeUnits string `json:"stakeUnits"`
}

// Option defines model for option.
type Option struct {
	Asymmetry           string `json:"asymmetry"`
	PriceTarget         string `json:"priceTarget"`
	WithdrawBasisPoints string `json:"withdrawBasisPoints"`
}

// Tx defines model for tx.
type Tx struct {
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`
	Memo    string `json:"memo"`
	Options Option `json:"options"`
	TxID    string `json:"txID"`
}

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {

	// True means healthy, connected to database.
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain.
	InSync bool `json:"inSync"`

	// Int64, the current block count.
	ScannerHeight string `json:"scannerHeight"`
}

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse []string

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodeKeyResponse defines model for NodeKeyResponse.
type NodeKeyResponse []NodeKey

// PoolDetailResponse defines model for PoolDetailResponse.
type PoolDetailResponse PoolDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse []PoolSummary

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// TxResponse defines model for TxResponse.
type TxResponse struct {

	// Int64, count of txs matching the filters.
	Count string      `json:"count"`
	Txs   []TxDetails `json:"txs"`
}

// VolumeResponse defines model for VolumeResponse.
type VolumeResponse []Volume

// GetTotalVolumeParams defines parameters for GetTotalVolume.
type GetTotalVolumeParams struct {

	// Return volume for this single pool. Returns volume for all pools if missing.
	Pool *int64 `json:"pool,omitempty"`

	// Interval of calculations
	Interval string `json:"interval"`

	// Start time of the query as unix timestamp
	From int64 `json:"from"`

	// End time of the query as unix timestamp
	To int64 `json:"to"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Interval of calculations
	Status string `json:"status"`
}

// GetTxDetailsParams defines parameters for GetTxDetails.
type GetTxDetailsParams struct {

	// Address of sender or recipient of any in/out tx in event
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx in event
	Txid *string `json:"txid,omitempty"`

	// Any asset used in event (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of event
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"cHzxPAAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
