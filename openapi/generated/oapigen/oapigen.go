// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {
	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {
	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {
	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Represents a digital currency amount
type Coin struct {
	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {
	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {
	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {
	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {
	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {
	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync         bool     `json:"inSync"`
	LastAggregated HeightTS `json:"lastAggregated"`
	LastCommitted  HeightTS `json:"lastCommitted"`
	LastFetched    HeightTS `json:"lastFetched"`
	LastQueried    HeightTS `json:"lastQueried"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// HeightTS defines model for HeightTS.
type HeightTS struct {
	// Block height
	Height int `json:"height"`

	// Block timestamp (seconds since epoch)
	Timestamp int `json:"timestamp"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string  `json:"address"`
	Chain   string  `json:"chain"`
	GasRate *string `json:"gas_rate,omitempty"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                    int64  `json:"AsgardSize"`
	BadValidatorRate              int64  `json:"BadValidatorRate"`
	BadValidatorRedline           int    `json:"BadValidatorRedline"`
	BlocksPerYear                 int64  `json:"BlocksPerYear"`
	ChurnInterval                 int64  `json:"ChurnInterval"`
	ChurnRetryInterval            int64  `json:"ChurnRetryInterval"`
	DesiredValidatorSet           int64  `json:"DesiredValidatorSet"`
	DoubleSignMaxAge              int64  `json:"DoubleSignMaxAge"`
	EmissionCurve                 int64  `json:"EmissionCurve"`
	FailKeygenSlashPoints         int64  `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints        int64  `json:"FailKeysignSlashPoints"`
	FullImpLossProtectionBlocks   int64  `json:"FullImpLossProtectionBlocks"`
	FundMigrationInterval         int64  `json:"FundMigrationInterval"`
	IncentiveCurve                int64  `json:"IncentiveCurve"`
	JailTimeKeygen                int64  `json:"JailTimeKeygen"`
	JailTimeKeysign               int64  `json:"JailTimeKeysign"`
	LackOfObservationPenalty      int64  `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks         int64  `json:"LiquidityLockUpBlocks"`
	MaxAvailablePools             int64  `json:"MaxAvailablePools"`
	MaxSwapsPerBlock              int64  `json:"MaxSwapsPerBlock"`
	MinRunePoolDepth              int64  `json:"MinRunePoolDepth"`
	MinSlashPointsForBadValidator int64  `json:"MinSlashPointsForBadValidator"`
	MinSwapsPerBlock              int64  `json:"MinSwapsPerBlock"`
	MinimumBondInRune             int64  `json:"MinimumBondInRune"`
	MinimumNodesForBFT            int64  `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil      int64  `json:"MinimumNodesForYggdrasil"`
	NativeTransactionFee          int64  `json:"NativeTransactionFee"`
	NewPoolCycle                  *int64 `json:"NewPoolCycle,omitempty"`
	ObservationDelayFlexibility   int64  `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints            int64  `json:"ObserveSlashPoints"`
	OldValidatorRate              int64  `json:"OldValidatorRate"`
	OutboundTransactionFee        int64  `json:"OutboundTransactionFee"`
	PoolCycle                     int64  `json:"PoolCycle"`
	SigningTransactionPeriod      int64  `json:"SigningTransactionPeriod"`
	VirtualMultSynths             int64  `json:"VirtualMultSynths"`
	YggFundLimit                  int64  `json:"YggFundLimit"`
}

// LPDetails defines model for LPDetails.
type LPDetails struct {
	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, total asset earned
	AssetEarned string `json:"assetEarned"`

	// Float, current asset price in rune
	AssetPrice string `json:"assetPrice"`

	// Float, current asset price in usd
	AssetPriceUsd string `json:"assetPriceUsd"`

	// Int64(e8), pool units
	PoolUnits string `json:"poolUnits"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// Float, total rune earned
	RuneEarned string `json:"runeEarned"`

	// Int64(e8), current rune price in usd
	RunePriceUsd string `json:"runePriceUsd"`

	// Int64(e8), share units
	ShareUnits  string        `json:"shareUnits"`
	StakeDetail []StakeDetail `json:"stakeDetail"`

	// Float, total earned in usd
	UsdEarned      string        `json:"usdEarned"`
	WithdrawDetail []StakeDetail `json:"withdrawDetail"`
}

// Lastblock defines model for Lastblock.
type Lastblock []LastblockItem

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn int64  `json:"last_observed_in"`
	LastSignedOut  int64  `json:"last_signed_out"`
	Thorchain      int64  `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {
	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {
	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {
	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {
	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// OHLCVHistory defines model for OHLCVHistory.
type OHLCVHistory struct {
	Intervals OHLCVHistoryIntervals `json:"intervals"`
	Meta      OHLCVHistoryMeta      `json:"meta"`
}

// OHLCVHistoryIntervals defines model for OHLCVHistoryIntervals.
type OHLCVHistoryIntervals []OHLCVHistoryItem

// OHLCVHistoryItem defines model for OHLCVHistoryItem.
type OHLCVHistoryItem struct {
	// Float, close price of asset in USD
	ClosePrice string `json:"closePrice"`

	// Int64, The end time of bucket in unix timestamp
	CloseTime string `json:"closeTime"`

	// Float, high price of asset in USD
	HighPrice string `json:"highPrice"`

	// Int64, The high time of bucket in unix timestamp
	HighTime string `json:"highTime"`

	// Int64, Liquidty is USD
	Liquidity string `json:"liquidity"`

	// Float, low price of asset in USD
	LowPrice string `json:"lowPrice"`

	// Int64, The low time of bucket in unix timestamp
	LowTime string `json:"lowTime"`

	// Float, open price of asset in USD
	OpenPrice string `json:"openPrice"`

	// Int64, The beginning time of bucket in unix timestamp
	OpenTime string `json:"openTime"`

	// Int64, Volume in USD
	Volume string `json:"volume"`
}

// OHLCVHistoryMeta defines model for OHLCVHistoryMeta.
type OHLCVHistoryMeta struct {
	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// ObservedChain defines model for ObservedChain.
type ObservedChain struct {
	Chain  string `json:"chain"`
	Height int    `json:"height"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {
	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`
	Asset                  string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Int64, number of unique adresses that initiated swaps transactions in the period.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// PreflightStatus defines model for PreflightStatus.
type PreflightStatus struct {
	Code   int    `json:"code"`
	Reason string `json:"reason"`
	Status string `json:"status"`
}

// ProxiedNode defines model for ProxiedNode.
type ProxiedNode struct {
	ActiveBlockHeight int    `json:"active_block_height"`
	Bond              string `json:"bond"`
	BondAddress       string `json:"bond_address"`
	CurrentAward      string `json:"current_award"`
	ForcedToLeave     bool   `json:"forced_to_leave"`
	IpAddress         string `json:"ip_address"`
	Jail              struct {
		NodeAddress *string `json:"node_address,omitempty"`
	} `json:"jail"`
	LeaveHeight     int             `json:"leave_height"`
	NodeAddress     string          `json:"node_address"`
	ObserveChains   []ObservedChain `json:"observe_chains"`
	PreflightStatus PreflightStatus `json:"preflight_status"`
	PubKeySet       struct {
		Ed25519   string `json:"ed25519"`
		Secp256k1 string `json:"secp256k1"`
	} `json:"pub_key_set"`
	RequestedToLeave    bool     `json:"requested_to_leave"`
	SignerMembership    []string `json:"signer_membership"`
	SlashPoints         int      `json:"slash_points"`
	Status              string   `json:"status"`
	StatusSince         int      `json:"status_since"`
	ValidatorConsPubKey string   `json:"validator_cons_pub_key"`
	Version             string   `json:"version"`
}

// ProxiedNodes defines model for ProxiedNodes.
type ProxiedNodes []ProxiedNode

// Queue defines model for Queue.
type Queue struct {
	Internal int `json:"internal"`
	Outbound int `json:"outbound"`
	Swap     int `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {
	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// StatsData defines model for StatsData.
type StatsData struct {
	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, unique users (addresses) initiating swaps in the last 24 hours.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, unique users (addresses) initiating swaps in the last 30 days.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Int64, unique users (addresses) initiating swaps since beginning.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {
	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {
	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {
	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {
	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {
	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at the end of the interval
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {
	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {
	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// StakeDetail defines model for stakeDetail.
type StakeDetail struct {
	// Int64(e8), asset amount
	AssetAmount string `json:"assetAmount"`

	// Float, asset price in rune
	AssetPrice string `json:"assetPrice"`

	// Float, asset price in usd
	AssetPriceUsd string `json:"assetPriceUsd"`

	// Int64, nano timestamp of the block
	Date string `json:"date"`

	// Int64, block height
	Height string `json:"height"`

	// Int64(e8), rune amount
	RuneAmount string `json:"runeAmount"`

	// Float, rune price in usd
	RunePriceUsd string `json:"runePriceUsd"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LPDetailsResponse defines model for LPDetailsResponse.
type LPDetailsResponse LPDetails

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// OHLCVHistoryResponse defines model for OHLCVHistoryResponse.
type OHLCVHistoryResponse OHLCVHistory

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ProxiedNodesResponse defines model for ProxiedNodesResponse.
type ProxiedNodesResponse ProxiedNodes

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {
	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`
}

// GetFullMembersAdressesParams defines parameters for GetFullMembersAdresses.
type GetFullMembersAdressesParams struct {
	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {
	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {
	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {
	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetOHLCVHistoryParams defines parameters for GetOHLCVHistory.
type GetOHLCVHistoryParams struct {
	// Interval of calculations
	Interval *GetOHLCVHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetOHLCVHistoryParamsInterval defines parameters for GetOHLCVHistory.
type GetOHLCVHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {
	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTSSwapHistoryParams defines parameters for GetTSSwapHistory.
type GetTSSwapHistoryParams struct {
	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetTSSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTSSwapHistoryParamsInterval defines parameters for GetTSSwapHistory.
type GetTSSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {
	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetLPDetailParams defines parameters for GetLPDetail.
type GetLPDetailParams struct {
	// Return information for given pool
	Pool *string `json:"pool,omitempty"`
}

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {
	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {
	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {
	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/zLjJTFkGQEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
