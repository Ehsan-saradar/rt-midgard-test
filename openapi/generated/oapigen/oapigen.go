// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {
	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still
	// pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still
// pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {
	// Int64, amount of liquidity units assigned to the member as result of the liquidity
	// deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// Balance defines model for Balance.
type Balance struct {
	Coins Coins `json:"coins"`

	// full timestamp (nanoseconds since 1970) of the block at which the returned balance snapshot was valid
	Date string `json:"date"`

	// height of the block at which the returned balance snapshot was valid
	Height string `json:"height"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {
	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Represents a digital currency amount
type Coin struct {
	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {
	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, The liquidity unit value index. Sqrt(assetDepth * runeDepth)/liquidity units
	Luvi string `json:"luvi"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {
	// Int64(e8), the amount of Asset in the pool at the end of the interval at time endTime
	EndAssetDepth string `json:"endAssetDepth"`

	// Int64, Liquidity Units in the pool at the end of the interval at time endTime
	EndLPUnits string `json:"endLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval at time endTime
	EndRuneDepth string `json:"endRuneDepth"`

	// Int64, Synth Units in the pool at the end of the interval at time endTime
	EndSynthUnits string `json:"endSynthUnits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, The liquidity unit value index increase between startTime and endTime
	LuviIncrease string `json:"luviIncrease"`

	// Float, The impermanent loss between the first and last depth item
	PriceShiftLoss string `json:"priceShiftLoss"`

	// Int64(e8), the amount of Asset in the pool at the start of the interval at time
	// startTime
	StartAssetDepth string `json:"startAssetDepth"`

	// Int64, Liquidity Units in the pool at the start of the interval at time startTime
	StartLPUnits string `json:"startLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the start of the interval at time startTime
	StartRuneDepth string `json:"startRuneDepth"`

	// Int64, Synth Units in the pool at the start of the interval at time startTime
	StartSynthUnits string `json:"startSynthUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {
	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of
	// liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {
	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// FullMemberDetails defines model for FullMemberDetails.
type FullMemberDetails struct {
	// List details of all the liquidity providers identified with the given address
	Pools []FullMemberPool `json:"pools"`
}

// FullMemberPool defines model for FullMemberPool.
type FullMemberPool struct {
	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total units of the pool
	PoolUnits string `json:"poolUnits"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`

	// Int64, total units that belong the the member
	SharedUnits string `json:"sharedUnits"`
}

// Health defines model for Health.
type Health struct {
	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync         bool     `json:"inSync"`
	LastAggregated HeightTS `json:"lastAggregated"`
	LastCommitted  HeightTS `json:"lastCommitted"`
	LastFetched    HeightTS `json:"lastFetched"`
	LastThorNode   HeightTS `json:"lastThorNode"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// HeightTS defines model for HeightTS.
type HeightTS struct {
	// Block height
	Height int `json:"height"`

	// Block timestamp (seconds since epoch)
	Timestamp int `json:"timestamp"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string  `json:"address"`
	Chain   string  `json:"chain"`
	GasRate *string `json:"gas_rate,omitempty"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                    int64  `json:"AsgardSize"`
	BadValidatorRate              int64  `json:"BadValidatorRate"`
	BadValidatorRedline           int    `json:"BadValidatorRedline"`
	BlocksPerYear                 int64  `json:"BlocksPerYear"`
	ChurnInterval                 int64  `json:"ChurnInterval"`
	ChurnRetryInterval            int64  `json:"ChurnRetryInterval"`
	DesiredValidatorSet           int64  `json:"DesiredValidatorSet"`
	DoubleSignMaxAge              int64  `json:"DoubleSignMaxAge"`
	EmissionCurve                 int64  `json:"EmissionCurve"`
	FailKeygenSlashPoints         int64  `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints        int64  `json:"FailKeysignSlashPoints"`
	FullImpLossProtectionBlocks   int64  `json:"FullImpLossProtectionBlocks"`
	FundMigrationInterval         int64  `json:"FundMigrationInterval"`
	IncentiveCurve                int64  `json:"IncentiveCurve"`
	JailTimeKeygen                int64  `json:"JailTimeKeygen"`
	JailTimeKeysign               int64  `json:"JailTimeKeysign"`
	LackOfObservationPenalty      int64  `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks         int64  `json:"LiquidityLockUpBlocks"`
	MaxAvailablePools             int64  `json:"MaxAvailablePools"`
	MaxSwapsPerBlock              int64  `json:"MaxSwapsPerBlock"`
	MinRunePoolDepth              int64  `json:"MinRunePoolDepth"`
	MinSlashPointsForBadValidator int64  `json:"MinSlashPointsForBadValidator"`
	MinSwapsPerBlock              int64  `json:"MinSwapsPerBlock"`
	MinimumBondInRune             int64  `json:"MinimumBondInRune"`
	MinimumNodesForBFT            int64  `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil      int64  `json:"MinimumNodesForYggdrasil"`
	NativeTransactionFee          int64  `json:"NativeTransactionFee"`
	NewPoolCycle                  *int64 `json:"NewPoolCycle,omitempty"`
	ObservationDelayFlexibility   int64  `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints            int64  `json:"ObserveSlashPoints"`
	OldValidatorRate              int64  `json:"OldValidatorRate"`
	OutboundTransactionFee        int64  `json:"OutboundTransactionFee"`
	PoolCycle                     int64  `json:"PoolCycle"`
	SigningTransactionPeriod      int64  `json:"SigningTransactionPeriod"`
	VirtualMultSynths             int64  `json:"VirtualMultSynths"`
	YggFundLimit                  int64  `json:"YggFundLimit"`
}

// LPDetail defines model for LPDetail.
type LPDetail struct {
	// asset address
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, total asset earned
	AssetEarned string `json:"assetEarned"`

	// Float, current asset price in rune
	AssetPrice string `json:"assetPrice"`

	// Float, current asset price in usd
	AssetPriceUsd string `json:"assetPriceUsd"`

	// pool name
	Pool string `json:"pool"`

	// Int64(e8), pool units
	PoolUnits string `json:"poolUnits"`

	// Int64(e8), total block reward
	Rewards string `json:"rewards"`

	// rune address
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// Float, total rune earned
	RuneEarned string `json:"runeEarned"`

	// Int64(e8), current rune price in usd
	RunePriceUsd string `json:"runePriceUsd"`

	// Int64(e8), share units
	SharedUnits string        `json:"sharedUnits"`
	StakeDetail []StakeDetail `json:"stakeDetail"`

	// Int64(e8), total rune price in usd
	UsdEarned      string        `json:"usdEarned"`
	WithdrawDetail []StakeDetail `json:"withdrawDetail"`
}

// LPDetails defines model for LPDetails.
type LPDetails []LPDetail

// Lastblock defines model for Lastblock.
type Lastblock []LastblockItem

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn int64  `json:"last_observed_in"`
	LastSignedOut  int64  `json:"last_signed_out"`
	Thorchain      int64  `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {
	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {
	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {
	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and
	// nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each
// outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {
	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// OHLCVHistory defines model for OHLCVHistory.
type OHLCVHistory struct {
	Intervals OHLCVHistoryIntervals `json:"intervals"`
	Meta      OHLCVHistoryMeta      `json:"meta"`
}

// OHLCVHistoryIntervals defines model for OHLCVHistoryIntervals.
type OHLCVHistoryIntervals []OHLCVHistoryItem

// OHLCVHistoryItem defines model for OHLCVHistoryItem.
type OHLCVHistoryItem struct {
	// Float, close price of asset in USD
	ClosePrice string `json:"closePrice"`

	// Int64, The end time of bucket in unix timestamp
	CloseTime string `json:"closeTime"`

	// Float, high price of asset in USD
	HighPrice string `json:"highPrice"`

	// Int64, The high time of bucket in unix timestamp
	HighTime string `json:"highTime"`

	// Int64, Liquidty is USD
	Liquidity string `json:"liquidity"`

	// Float, low price of asset in USD
	LowPrice string `json:"lowPrice"`

	// Int64, The low time of bucket in unix timestamp
	LowTime string `json:"lowTime"`

	// Float, open price of asset in USD
	OpenPrice string `json:"openPrice"`

	// Int64, The beginning time of bucket in unix timestamp
	OpenTime string `json:"openTime"`

	// Int64, Volume in USD
	Volume string `json:"volume"`
}

// OHLCVHistoryMeta defines model for OHLCVHistoryMeta.
type OHLCVHistoryMeta struct {
	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// ObservedChain defines model for ObservedChain.
type ObservedChain struct {
	Chain  string `json:"chain"`
	Height int    `json:"height"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	// Float, Also called APR. Annual return estimated linearly (not compounded) from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// Due to Impermanent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	// It includes synth mint or burn.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {
	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Float, Also called APR. Annual return estimated linearly (not compounded) from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// Due to Impermanent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// PreflightStatus defines model for PreflightStatus.
type PreflightStatus struct {
	Code   int    `json:"code"`
	Reason string `json:"reason"`
	Status string `json:"status"`
}

// ProxiedNode defines model for ProxiedNode.
type ProxiedNode struct {
	ActiveBlockHeight int    `json:"active_block_height"`
	Bond              string `json:"bond"`
	BondAddress       string `json:"bond_address"`
	CurrentAward      string `json:"current_award"`
	ForcedToLeave     bool   `json:"forced_to_leave"`
	IpAddress         string `json:"ip_address"`
	Jail              struct {
		NodeAddress *string `json:"node_address,omitempty"`
	} `json:"jail"`
	LeaveHeight     int             `json:"leave_height"`
	NodeAddress     string          `json:"node_address"`
	ObserveChains   []ObservedChain `json:"observe_chains"`
	PreflightStatus PreflightStatus `json:"preflight_status"`
	PubKeySet       struct {
		Ed25519   string `json:"ed25519"`
		Secp256k1 string `json:"secp256k1"`
	} `json:"pub_key_set"`
	RequestedToLeave    bool     `json:"requested_to_leave"`
	SignerMembership    []string `json:"signer_membership"`
	SlashPoints         int      `json:"slash_points"`
	Status              string   `json:"status"`
	StatusSince         int      `json:"status_since"`
	ValidatorConsPubKey string   `json:"validator_cons_pub_key"`
	Version             string   `json:"version"`
}

// ProxiedNodes defines model for ProxiedNodes.
type ProxiedNodes []ProxiedNode

// Queue defines model for Queue.
type Queue struct {
	Internal int `json:"internal"`
	Outbound int `json:"outbound"`
	Swap     int `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {
	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// StatsData defines model for StatsData.
type StatsData struct {
	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, unique users (addresses) initiating swaps in the last 24 hours.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, unique users (addresses) initiating swaps in the last 30 days.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps (including synths) since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps (including synths) in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps (including synths) in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps (including synths) denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Synth to Rune since beginning.
	SynthBurnCount string `json:"synthBurnCount"`

	// Int64, number of swaps from Rune to Synth since beginning.
	SynthMintCount string `json:"synthMintCount"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Int64, unique users (addresses) initiating swaps since beginning.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {
	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {
	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {
	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {
	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {
	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of
	// the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity
	// pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at
	// the end of the interval.
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {
	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the
	// native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {
	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means
	// totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership
	// withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// StakeDetail defines model for stakeDetail.
type StakeDetail struct {
	// Int64(e8), asset amount
	AssetAmount string `json:"assetAmount"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, asset price in rune
	AssetPrice string `json:"assetPrice"`

	// Float, asset price in usd
	AssetPriceUsd string `json:"assetPriceUsd"`

	// Float, withdraw percentage
	BasisPoint string `json:"basisPoint"`

	// Int64, nano timestamp of the block
	Date string `json:"date"`

	// Int64, block height
	Height string `json:"height"`

	// Int64, total number of pool units
	PoolUnits string `json:"poolUnits"`

	// Int64(e8), rune amount
	RuneAmount string `json:"runeAmount"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// Float, rune price in usd
	RunePriceUsd string `json:"runePriceUsd"`

	// Int64, total number of units changed
	SharedUnits string `json:"sharedUnits"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// BalanceResponse defines model for BalanceResponse.
type BalanceResponse Balance

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// FullMembersResponse defines model for FullMembersResponse.
type FullMembersResponse FullMemberDetails

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LPDetailsResponse defines model for LPDetailsResponse.
type LPDetailsResponse LPDetails

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// OHLCVHistoryResponse defines model for OHLCVHistoryResponse.
type OHLCVHistoryResponse OHLCVHistory

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ProxiedNodesResponse defines model for ProxiedNodesResponse.
type ProxiedNodesResponse ProxiedNodes

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {
	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// Affiliate address of the action (swap)
	Affiliate *string `json:"affiliate,omitempty"`
	AssetType *string `json:"assetType,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`
}

// GetBalanceParams defines parameters for GetBalance.
type GetBalanceParams struct {
	// Unix timestamp as seconds since 1970 (if provided, height must not be provided)
	Timestamp *int64 `json:"timestamp,omitempty"`

	// Block height (if provided, timestamp must not be provided)
	Height *int64 `json:"height,omitempty"`
}

// GetFullMembersAdressesParams defines parameters for GetFullMembersAdresses.
type GetFullMembersAdressesParams struct {
	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {
	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {
	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {
	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetOHLCVHistoryParams defines parameters for GetOHLCVHistory.
type GetOHLCVHistoryParams struct {
	// Interval of calculations
	Interval *GetOHLCVHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetOHLCVHistoryParamsInterval defines parameters for GetOHLCVHistory.
type GetOHLCVHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {
	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTSSwapHistoryParams defines parameters for GetTSSwapHistory.
type GetTSSwapHistoryParams struct {
	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetTSSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTSSwapHistoryParamsInterval defines parameters for GetTSSwapHistory.
type GetTSSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {
	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetLPDetailParams defines parameters for GetLPDetail.
type GetLPDetailParams struct {
	// Return information for given pools
	Pools *string `json:"pools,omitempty"`
}

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {
	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolParams defines parameters for GetPool.
type GetPoolParams struct {
	// Specifies the base interval from which APY is extrapolated.
	// Default is 30d.
	Period *GetPoolParamsPeriod `json:"period,omitempty"`
}

// GetPoolParamsPeriod defines parameters for GetPool.
type GetPoolParamsPeriod string

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {
	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {
	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`

	// Specifies the base interval from which annualPercentageRate and poolAPY is extrapolated.
	// Default is 30d.
	Period *GetPoolsParamsPeriod `json:"period,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// GetPoolsParamsPeriod defines parameters for GetPools.
type GetPoolsParamsPeriod string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"PAEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
