// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {

	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Represents a digital currency amount
type Coin struct {

	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, The liquidity unit value index. Sqrt(assetDepth * runeDepth)/liquidity units
	Luvi string `json:"luvi"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval at time endTime
	EndAssetDepth string `json:"endAssetDepth"`

	// Int64, Liquidity Units in the pool at the end of the interval at time endTime
	EndLiquidityUnits string `json:"endLiquidityUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval at time endTime
	EndRuneDepth string `json:"endRuneDepth"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, The liquidity unit value index increase between the first and last depth item
	LuviIncrease string `json:"luviIncrease"`

	// Float, The impermanent loss between the first and last depth item
	PriceShiftLoss string `json:"priceShiftLoss"`

	// Int64(e8), the amount of Asset in the pool at the start of the interval at time startTime
	StartAssetDepth string `json:"startAssetDepth"`

	// Int64, Liquidity Units in the pool at the start of the interval at time startTime
	StartLiquidityUnits string `json:"startLiquidityUnits"`

	// Int64(e8), the amount of Rune in the pool at the start of the interval at time startTime
	StartRuneDepth string `json:"startRuneDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {

	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync         bool     `json:"inSync"`
	LastAggregated HeightTS `json:"lastAggregated"`
	LastCommitted  HeightTS `json:"lastCommitted"`
	LastFetched    HeightTS `json:"lastFetched"`
	LastThorNode   HeightTS `json:"lastThorNode"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// HeightTS defines model for HeightTS.
type HeightTS struct {

	// Block height
	Height int `json:"height"`

	// Block timestamp (seconds since epoch)
	Timestamp int `json:"timestamp"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string  `json:"address"`
	Chain   string  `json:"chain"`
	GasRate *string `json:"gas_rate,omitempty"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                    int64  `json:"AsgardSize"`
	BadValidatorRate              int64  `json:"BadValidatorRate"`
	BadValidatorRedline           int    `json:"BadValidatorRedline"`
	BlocksPerYear                 int64  `json:"BlocksPerYear"`
	ChurnInterval                 int64  `json:"ChurnInterval"`
	ChurnRetryInterval            int64  `json:"ChurnRetryInterval"`
	DesiredValidatorSet           int64  `json:"DesiredValidatorSet"`
	DoubleSignMaxAge              int64  `json:"DoubleSignMaxAge"`
	EmissionCurve                 int64  `json:"EmissionCurve"`
	FailKeygenSlashPoints         int64  `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints        int64  `json:"FailKeysignSlashPoints"`
	FullImpLossProtectionBlocks   int64  `json:"FullImpLossProtectionBlocks"`
	FundMigrationInterval         int64  `json:"FundMigrationInterval"`
	IncentiveCurve                int64  `json:"IncentiveCurve"`
	JailTimeKeygen                int64  `json:"JailTimeKeygen"`
	JailTimeKeysign               int64  `json:"JailTimeKeysign"`
	LackOfObservationPenalty      int64  `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks         int64  `json:"LiquidityLockUpBlocks"`
	MaxAvailablePools             int64  `json:"MaxAvailablePools"`
	MaxSwapsPerBlock              int64  `json:"MaxSwapsPerBlock"`
	MinRunePoolDepth              int64  `json:"MinRunePoolDepth"`
	MinSlashPointsForBadValidator int64  `json:"MinSlashPointsForBadValidator"`
	MinSwapsPerBlock              int64  `json:"MinSwapsPerBlock"`
	MinimumBondInRune             int64  `json:"MinimumBondInRune"`
	MinimumNodesForBFT            int64  `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil      int64  `json:"MinimumNodesForYggdrasil"`
	NativeTransactionFee          int64  `json:"NativeTransactionFee"`
	NewPoolCycle                  *int64 `json:"NewPoolCycle,omitempty"`
	ObservationDelayFlexibility   int64  `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints            int64  `json:"ObserveSlashPoints"`
	OldValidatorRate              int64  `json:"OldValidatorRate"`
	OutboundTransactionFee        int64  `json:"OutboundTransactionFee"`
	PoolCycle                     int64  `json:"PoolCycle"`
	SigningTransactionPeriod      int64  `json:"SigningTransactionPeriod"`
	VirtualMultSynths             int64  `json:"VirtualMultSynths"`
	YggFundLimit                  int64  `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock []LastblockItem

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn int64  `json:"last_observed_in"`
	LastSignedOut  int64  `json:"last_signed_out"`
	Thorchain      int64  `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {

	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// ObservedChain defines model for ObservedChain.
type ObservedChain struct {
	Chain  string `json:"chain"`
	Height int    `json:"height"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`
	Asset                  string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Int64, number of unique adresses that initiated swaps transactions in the period.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// PreflightStatus defines model for PreflightStatus.
type PreflightStatus struct {
	Code   int    `json:"code"`
	Reason string `json:"reason"`
	Status string `json:"status"`
}

// ProxiedNode defines model for ProxiedNode.
type ProxiedNode struct {
	ActiveBlockHeight int    `json:"active_block_height"`
	Bond              string `json:"bond"`
	BondAddress       string `json:"bond_address"`
	CurrentAward      string `json:"current_award"`
	ForcedToLeave     bool   `json:"forced_to_leave"`
	IpAddress         string `json:"ip_address"`
	Jail              struct {
		NodeAddress *string `json:"node_address,omitempty"`
	} `json:"jail"`
	LeaveHeight     int             `json:"leave_height"`
	NodeAddress     string          `json:"node_address"`
	ObserveChains   []ObservedChain `json:"observe_chains"`
	PreflightStatus PreflightStatus `json:"preflight_status"`
	PubKeySet       struct {
		Ed25519   string `json:"ed25519"`
		Secp256k1 string `json:"secp256k1"`
	} `json:"pub_key_set"`
	RequestedToLeave    bool     `json:"requested_to_leave"`
	SignerMembership    []string `json:"signer_membership"`
	SlashPoints         int      `json:"slash_points"`
	Status              string   `json:"status"`
	StatusSince         int      `json:"status_since"`
	ValidatorConsPubKey string   `json:"validator_cons_pub_key"`
	Version             string   `json:"version"`
}

// ProxiedNodes defines model for ProxiedNodes.
type ProxiedNodes []ProxiedNode

// Queue defines model for Queue.
type Queue struct {
	Internal int `json:"internal"`
	Outbound int `json:"outbound"`
	Swap     int `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, unique users (addresses) initiating swaps in the last 24 hours.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, unique users (addresses) initiating swaps in the last 30 days.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Int64, unique users (addresses) initiating swaps since beginning.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {

	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {

	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at the end of the interval
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ProxiedNodesResponse defines model for ProxiedNodesResponse.
type ProxiedNodesResponse ProxiedNodes

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {

	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"oVQPgfSODr59+/bt/wcAAP//fVcBAzr5AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
