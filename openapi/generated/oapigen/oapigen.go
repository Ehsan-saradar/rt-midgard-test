// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Action defines model for Action.
type Action struct {

	// Int64, Unix timestamp for when the action was registered
	Date string `json:"date"`

	// Int64, block height at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status string `json:"status"`

	// Type of action
	Type string `json:"type"`
}

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64, Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64, Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64, Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64, Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64, Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64, Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64, Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64, Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64, Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64, Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Coin defines model for Coin.
type Coin struct {

	// Int64 (10^8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64, Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64, Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64, System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64, Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistoryItemPool defines model for EarningsHistoryItemPool.
type EarningsHistoryItemPool struct {

	// Int64, Share of earnings sent to the pool during the time interval
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses struct {
	Current []InboundAddressesItem `json:"current"`
}

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string `json:"address"`
	Chain   string `json:"chain"`

	// indicate whether this chain has halted
	Halted bool   `json:"halted"`
	PubKey string `json:"pub_key"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                  int64 `json:"AsgardSize"`
	BadValidatorRate            int64 `json:"BadValidatorRate"`
	BlocksPerYear               int64 `json:"BlocksPerYear"`
	ChurnInterval               int64 `json:"ChurnInterval"`
	ChurnRetryInterval          int64 `json:"ChurnRetryInterval"`
	CliTxCost                   int64 `json:"CliTxCost"`
	DesiredValidatorSet         int64 `json:"DesiredValidatorSet"`
	DoubleSignMaxAge            int64 `json:"DoubleSignMaxAge"`
	EmissionCurve               int64 `json:"EmissionCurve"`
	FailKeygenSlashPoints       int64 `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints      int64 `json:"FailKeysignSlashPoints"`
	FundMigrationInterval       int64 `json:"FundMigrationInterval"`
	JailTimeKeygen              int64 `json:"JailTimeKeygen"`
	JailTimeKeysign             int64 `json:"JailTimeKeysign"`
	LackOfObservationPenalty    int64 `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks       int64 `json:"LiquidityLockUpBlocks"`
	MinimumBondInRune           int64 `json:"MinimumBondInRune"`
	MinimumNodesForBFT          int64 `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil    int64 `json:"MinimumNodesForYggdrasil"`
	NativeChainGasFee           int64 `json:"NativeChainGasFee"`
	NewPoolCycle                int64 `json:"NewPoolCycle"`
	ObservationDelayFlexibility int64 `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints          int64 `json:"ObserveSlashPoints"`
	OldValidatorRate            int64 `json:"OldValidatorRate"`
	OutboundTransactionFee      int64 `json:"OutboundTransactionFee"`
	SigningTransactionPeriod    int64 `json:"SigningTransactionPeriod"`
	YggFundLimit                int64 `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock struct {
	Current []LastblockItem `json:"current"`
}

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn string `json:"last_observed_in"`
	LastSignedOut  string `json:"last_signed_out"`
	Thorchain      string `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64 (10^8), total deposits (liquidity additions) in RUNE during the time interval. Accounts for both asset (using the price at deposit time) and RUNE deposited into pools
	Deposits string `json:"deposits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64 (10^8), total withdrawals in RUNE during the time interval. Accounts for both asset (using the price at withdrawal time) and RUNE withdrawn from pools
	Withdrawals string `json:"withdrawals"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// Liquidity provider data for all the pools of a given member
	Pools []MemberPoolDetails `json:"pools"`
}

// MemberPoolDetails defines model for MemberPoolDetails.
type MemberPoolDetails struct {

	// Int64, total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// Int64, total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Int64, total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`
	PoolShareFactor         string `json:"poolShareFactor"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64, Total Rune pooled in all pools
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64, Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NetworkFees defines model for NetworkFees.
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolLegacyDetail defines model for PoolLegacyDetail.
type PoolLegacyDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Int64, same as history/swaps:toAssetCount
	BuyAssetCount string `json:"buyAssetCount"`

	// Float, same as history/swaps:toRuneVolume/toRuneCount
	BuyTxAverage string `json:"buyTxAverage"`

	// Int64, same as history/swaps:toAssetVolume
	BuyVolume string `json:"buyVolume"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, same as assetDepth + runeDepth
	PoolDepth string `json:"poolDepth"`

	// Float, same as history/swaps:totalFees/totalCount
	PoolFeeAverage string `json:"poolFeeAverage"`

	// Int64, same as history/swaps:totalFees
	PoolFeesTotal string `json:"poolFeesTotal"`

	// Float, same as history/swaps:averageSlip
	PoolSlipAverage string `json:"poolSlipAverage"`

	// Float, same as history/swaps:totalVolume/totalCount
	PoolTxAverage string `json:"poolTxAverage"`

	// Int64, same as buyVolume + sellVolume
	PoolVolume string `json:"poolVolume"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// Int64, same as history/swaps:toRuneCount
	SellAssetCount string `json:"sellAssetCount"`

	// Float, same as history/swaps:toAssetVolume/toAssetCount
	SellTxAverage string `json:"sellTxAverage"`

	// Int64, same as history/swaps:toRuneVolume
	SellVolume string `json:"sellVolume"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64, Liquidity Units in the pool
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune
	Volume24h string `json:"volume24h"`
}

// Queue defines model for Queue.
type Queue struct {
	Outbound string `json:"outbound"`
	Swap     string `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Daily active users (unique addresses interacting)
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Daily transactions
	DailyTx string `json:"dailyTx"`

	// Monthly active users
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Monthly transactions
	MonthlyTx string `json:"monthlyTx"`

	// Total buying transactions
	TotalAssetBuys string `json:"totalAssetBuys"`

	// Total selling transactions
	TotalAssetSells string `json:"totalAssetSells"`

	// Total RUNE balances
	TotalDepth string `json:"totalDepth"`

	// Total staking transactions
	TotalStakeTx string `json:"totalStakeTx"`

	// Total staked (in RUNE Value)
	TotalStaked string `json:"totalStaked"`

	// Total transactions
	TotalTx string `json:"totalTx"`

	// Total unique swappers & members
	TotalUsers string `json:"totalUsers"`

	// Total (in RUNE Value) of all assets swapped since start
	TotalVolume string `json:"totalVolume"`

	// Total withdrawing transactions
	TotalWithdrawTx string `json:"totalWithdrawTx"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float, the average slip by swap. Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64, volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64, volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64, the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64, toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Int64 (10^8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), trade slip percentage
	TradeSlip string `json:"tradeSlip"`

	// Int64 (10^8), minimum output amount specified for the swap
	TradeTarget string `json:"tradeTarget"`
}

// Transaction defines model for Transaction.
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction memo
	Memo string `json:"memo"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolLegacyResponse defines model for PoolLegacyResponse.
type PoolLegacyResponse PoolLegacyDetail

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Address of sender or recipient of any in/out transaction related to the action
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action (swap, addLiquidity, withdraw, donate, refund)
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *string `json:"status,omitempty"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x97XIbt7Lgq6C4u7X2yZgiqQ/bqkrtSpZ14l1/aC0lW6njHAecaXJgzQCjAYYUk/Jr",
	"3Re4L3YLDcw3Zjik7eTmXOVPLA7QaDS6G41Gd+P3kS/iRHDgSo5Ofx+lIBPBJeAfZ75igsv39jf9ky+4",
	"Aq70P2mSRMynusnBJym4/k36IcRU/ytJRQKpYgYSNZD0P5mCGP/x31NYjE5H/+2gxODA9JcHZuTRZ2+k",
	"NgmMTkc0TelG/+2LzAwfgPRTlmC709Errk6OPMKzeA4pEQuSgswiJUlMlR8yviQqBLJkK+BkwSIFqRyP",
	"CuhSpYwvR58/e6MU7jKWQjA6/Ycdyyuw/6XoIOafwFejz7pHHZH3oLKUS0I5QZw1LrY/WYjUhcZnb/RC",
	"cKkoV/vRuo+SBWQXsjehSLkIgBStSM4AiNYFJCr8gUkl0s1Xx6wK3IUcfieUByRJmQ8kzJt6o5c05Ywv",
	"5bdCrQHfhR3YJlW0fgAaqfCrY2PA9jFbiC2IVFRlhs3esGBJ00Bj9YrPRcaDsyBIQUr4+izWHKCX017x",
	"AFuTM9u6znGvqVTzSPi3Xx3LAnIvekWrBlrsLmMBU5tvxXHNAVxI/n+mwiClaxpJFIsAEiGZqrHgG9AK",
	"8AIUZdHXX+kadBeKRi8SPRhlWj5IlE+MJKlYsQBSElBFkUkpkQn4bMF8EiPkcgbfCncn1qWijiJU0HHe",
	"1hu9BbUW6ddnRwt3yxbSpqfth0RE/ETwDUQaoe6Om5agJJtHzCe3sClwvBIieg1L6n99uSlBG6504fyu",
	"hWhgOBiZUHAgiRBRjug3QfFrISe/IXbO9T7LRUNjkaOmsfl/GWTw1bFBqL0KGlvUlfO1ot/AcEKoF8jB",
	"Q/TcMhJzGpHzl1fXa5oUrK//+FZ7RgW2C0fEA01Yj6xElMXgkQUAbh0yYkm5bXz27IgVq79tYhsrtmBP",
	"Ggu+JGumQpJCRBUERKWUy9xY9hpHgIAq6LTbf+TsnigWg1Q0TpD11yFwVMZ23DXVpsKSSQXaPG/Z7t4o",
	"BLYMu88GZls3jQhVZB0yP9xtBMZd0I09U518SRFRGWDkDTv83JSQXCegGBRF9tq64dl2n72RyBx0eZep",
	"Pxh1rURkGxHUbITxlYhWEBDGO0ZurUcTvjGAXWsUaBEDSdiiuuJMEj2JCPSERaq/5tMXTuLQFIhULIpI",
	"AjxgfKkPkcCzWB8XZeb7IJHzzcfKgbGJcxPDm00C5VGxCnRNE30EDYLCRBx5o7U1BUfeKBBcS5Y+uS4y",
	"HjjGbJxqzSLYVgXNkLkNo3hGVguBqrBc+wTsjc4qqL2p8GZd/As78EfOlOwUUhprhaUpURqOme5BqJRs",
	"yUvGNDYaQZnVR33dR/9e9rP28dZjfgM11xzPzZFkTdNAtuc2L7862XQueNDzOUGro+NzA9fqUDXANTDO",
	"KQgevAGVMt8xA7qClC5Bq/4V6JadC3RmWhI9dM6wKyAcDUYHu1vI14ryYL7ZCbQ0fbphx/SexVk8AOs3",
	"9J7xLB6MtYU8BOs3pukOWEPAKB+CNDYcjjM2H4RyHfB2jBkfSmdN5V3obCAPQroBeivWSigaDcD5Rrcb",
	"jDFCHYJvHewWbBtS3kTdcwiog5FcK+WSEscsnILq4innmjkFxq2ERFR6JFtq6FqrJ6V7FzvKe20Z629w",
	"T/VOPTpd0EhCAXsuRASUt0jYCcqF1gvhsuzeQ5KC1PYNoSRgS6YX1M/SFLi/sTtVy8y1P7u5gjyaTv75",
	"7LGnNzNQ5Azbjp1qUzdoQznDfoyTFz+cvXo7vv75zfm719pcjun2fc7A9HIUuwgx3EuPZHOYYT0rrJfr",
	"44pGGWyFXucVtL7Vx5Ojgb2R3rXuhioDu19j46rzvE7LOi5ebV7NoVyErjm/W1RiXEG6opHcxYf+quhk",
	"Dwm7dNaGW2uSCMSrYLNtJq+qeA9ioVpvBbGLnVpt2uaL5mxs1qmO0eovjMtCjvTP6GDpksGrlPkOe/0y",
	"ElR59mZCbxs5wDTjMCavxjDGf+ZjHtgWhdZojQY8uGFx9xH5JgQC+jzCYhxxnvm3Zsisdnh2wdaY7EKe",
	"9xrzLdSRiqZqK8ZzWDKODpLd8W5wYzlgSSyvuvTVedZWbxvbvgHXieVbLsh/CuK5yNK8+dpfNTUg7ayd",
	"mv1ROeyjoDoRGaqjnJi01ZSrmeOgtXwrAnjhNhIWWqtUj0KlSFbtUhJkaX6ljZyRE8DFavPG0bXPWLUX",
	"X9iWQMyUgmC3wQQ6PnJSdI53HdIUGbq4RtV2lj7a7z5B2DrYRiqICeO+iIEsgUNK+yY2Jq8UYRI/yCyu",
	"OyMWAOb2rUasr6HQ8+GHaZACoy+gNXqCdqJ1MeolwDZuqtPMI77gK0ita/H9j29f6p+iCPxdmazDi5gT",
	"orxfBOqH5uIij7xowt5X/q/snYzDAbmXXt9l7Qdti/WFamiBisy0RdbFWl5db+VLMETb5sRq0QPXBWpr",
	"1sMEja15f57PTZqdOc5xIYIWXT2ox20tOTyw1UVw0dEGfbQ2EE2oOZUuF3KaAYmBFvEgG5Q5bgRMCVJ0",
	"bR+e9R56veH+EKhjcqlP4PZHG2ii9aVxjPt5wFWW5PT2Q4rO5fao0qecQ/pD/80NwsBzt7Jq13db0Q06",
	"VyZcH6iYrovyrXCW1hpYXAYbEE2IbguiGXxmBxmCYoetYT7XnCejuZ+q6d3s+OnyZKL8+1V2FKwWUSJ/",
	"W96u7w6PguPV+iRZPp2dLBeHLlEwa1kDeX7zwnkdRyMFDv8Ys5cxZB2CCkFLD5OGR0hIJbH9vK0eH2+U",
	"ZPOPt7Cpo6NUKNIkm09pEKx5Asld8Jzf3cVLujmJP2WTzd3TWaI+ZX58+5wqulawOlod8ZP1LcDxZnZy",
	"92wCvr+c3N8ePt0eImhZO8fEK6heEMC9gDXvRGvpzqQWqmv2G9TmdjjxRtbZo+moTo5KBLX+WpoQmnMa",
	"/EQjFlAl0vf22rWAcTIQhpYzeQXpz0DTOoDD6fTw+TAoL8Is5bnFvQ8aCOA9qNJu34cgLyJ2c/9CSFXr",
	"PKzvBUi92AVBr6EOZTobBkZk8wiu2ZK/ofdny/qazI4GwXgZMymZ4C+ydNVY1EH9LymL/i9slsCvIyrD",
	"K8Es8xVwns4mu0CSbNkJahhZLjMevGHLFOMfvoRR/g9lkbZ9zPzqK7QzBD2vfUC8pv7tu8W7udTT0DO6",
	"Ak4jtdmDMIXX+rXwb39MjDjuwb5vjLf+XPDgFX+fcWjMy/63CywMDrsU6fnlTQ3Y0T5Afl4ug5RKFu3B",
	"z2+pPhO/0Cr471Regntuw0DBWpupLzZ+VIdyPH12NAxEZdkvIKKbywju2ZxFrLH+xztAgy7pmg4DEn35",
	"RpBHiVRCO7ooPQyg1oGMLyvwriBlImgo9mHAfl4utQp5zWKmdqZyYy+vbLqOPbS5JTY3N+deVd163FuJ",
	"Y2doKvouxd2phrvUaktLtpVejw7r0kkuHePUFT2y75LlhlD2C5hTYBwC0MnPPXzZ4DKXPVcGl3/xYaEA",
	"9cWnhDqkNmIOS/7tudPrQ6X6KAx9g4/NTtPj55POXiZm56ONP6t0mjx33q6HInXgNT0+ejbYFG9h20al",
	"OpCTcs1o/P3d4E1QO/vBWwD2doR3ozKYN524tN1gznZtV4bNX9h2WY7BCmW2w6PSsUiDgGFg3mPCOPoU",
	"e5y6Zz56DUxg9Vyo0F7JPcpk3sNc51GVD4YgHqO71wA3P2OMYu4//aPv8jj0pL+Bqrhd/ZDyJUjyaF1J",
	"HHlSEPLxTi6wb39jVUY10mggT1Qn9nUZoITc5IH8CyeLVMRdPDDISVudr1eKg1ljlwTX829aAtXhGH/d",
	"l4JjM17MVYBYEGodmTYhZ6CL3CBWyyXYsnF1e5DbsNz3/WdBAN3hV4ZB7KW7bllz/s435QTd9/55shUf",
	"NEKDKYaNE1AFlyyVW2biiI3X8Be6p2FxGwrb0E59l/d6aG0e7DWy3k33HXhgGDASrxkBrEKqyBwikYt3",
	"EQU83Gev2YqkIItwYZSEFBaQSqJEV/DEEF5D7bAjq2nYQznNpX2GjOK+fKiIUIvjW6zZZJjWOlap1JxV",
	"t4zXDY/61N/Y8O7Cm1px8M75fLr4NIvuPj0LVulxksULP/SfchUt7oLZ6uS34P5u/QnWi+ORtz1poDtm",
	"vRZ0vy1j3RUF/7mIyt/S+z22qvbDuP8BCUDVPkVWwJZ++dqUfT871ijPUHQm85tI0voCbqW06dgT/2D5",
	"/W2RxW+CVsnbrmjcZnBDbzxhta2NVagExPeHIpZNyyiHs6ufOwPDHk3Jd+RRGZ9P/mZuruQVpG8EV+FB",
	"I8b38WPyTzKdkSfTXrW5fUyp6C30DmoS68uYEtyK+8fncK/QvbHlpk63y1OstPGXewic2hknj8d5ZIdA",
	"9KnAEEgKsU22y41LVH20AEMeMW7HfNw1KN4MX1JfidTJs7KMYHZopSId0gY6E9Nuxxwl3XMXKcgHe9sb",
	"lK63NghyF29PYAZG9yXYWlvN2gTsPMkg5PeAh+lt8R6wQDs/b71tI6rKXytAoapjGovS1iMOorZp0phL",
	"m6e7mbLNOTUd0BDPX7p1qTtq5jUz5gi3qd0mxEhK4bM8E49ymxk2Ju84VFsSc3eaLiEoY15cyWtDTfmu",
	"oG5NW0eQZDA7Pp4+b0/Kfqikg9f38OYd7fJ+HSwOsxQmyfJ4oX/L7g838XM+OZmdPI1uU5DHR7+tP4VH",
	"/rPJ0TP4Lfx0PJkd3W2cdhUXAZyV19911DCPuHAAuU2MUKTTyWwziQ+zRC0nq1UWwCacTNLZgv/2dLK+",
	"exo82zyNs9nSeVgGP5kdn9xO24MXn/4UyjREsEqmKtZesa5OZkY1NNRnhHzj4KdKWrz7fOfUpl8e6T3+",
	"Y0O9x527X89Onod/XkHqA1f6nz8ziIJTQjnPqD7BqCzlBKRiMeoI48LAk9ka4FbaaEePKHqrv+DCaI2A",
	"7hB9/sGjGjUukfG3CBofd7iRnBm6NyFg+RrIz2UagkdgvByTsxVlEZ1H4OmdcAmBE3LWe6AsfSB4YNmK",
	"p0mYnx31T94czExbzPJa06SAjYsxOwqN/g7MgQ2JFAAX5rSMf48HZ+6UWA0LfC85rZLnm3VmuTZ8LoPE",
	"u1rdwi3ktfIcf6io//lJHfNsg1j1W3qSxkBoUcfnANnoVIlKVzfsm3urKTrn0gVa891PyE0H5o++YUzD",
	"/dC3ff+qSjBB9u7jwXz2JbuS70hVHp0wLwH2XTpFdW9pznKdy2YHkWib77x0dozOQ1TEkv3Qz7NMI5Z0",
	"Ad+fqRWNCp7eRpuBPF1wP/mOSIiibnb+JjlWEEVfoD965VrD3p/UFdk+2KaoKnTbZwbdJP8qxoQT8Jom",
	"CePLm/v9CN/HfHvbKX+2mfJnWCntpWgroKbWaOq+qhKvMWN1b6sphaZwNPbalgZvCWpz43cZW6bUVcse",
	"yo/u9QCISReXbm3WvIg05WSKUVyYNZzRLRR53ZkxoModNkVMqBTOTHv9e3HBZH3mW0+vFeAFbNeEylJe",
	"jnQKFm2MF/ZHaW8kGmVIdYvcVZrpNuRRxtldBrnnAKQxKHQbvnzsvm9j0ebmvgt6o3BWu0yG4Crcgucb",
	"06aGaQ8sFzI5iG3oGNe1Zu/zbOPSvyabMNugr3YwsGuIok5oWsIGg+vYh2/Ke7Q5jSj3+0t83IKLSBYd",
	"a1IOQgdhBX2gIEDfNaL2E40yeNwJrBunQbh0cI+BYPkada5m9A/ZZDI7KcphdsHs2twN0MbE8jqbuAFI",
	"O1ZAJOM+7tqp6hwnv7fqJkF+A7Z9aVqpQg09UMqsU/yqclSjbLlKdeLUWaHGpy2BagtFgynb9HCrvXoN",
	"i5byu4AFzSKlD+nXhSlV7iYvubaTtuvhNhgnNpVqhfuH01Wg7BxJV+27dxCdE4GhzpIWBm2PSbNJV6ku",
	"PEF1We140rDHZyz1ON+goI3JOVta8y+kKxNCgUbs2pZFlETGWjqxzR8d2vZHxJjVDitdw/j5Ic2QCk1i",
	"dPxoG9lauV2Qt5x0mlZ4G3bV7k6ddrceqzzb7TIJM4ASWwDvM4ca6GFzKI5J3YEv5WKR78iWE23ptug7",
	"DNmMfs3keNFWyUEfiPMW6tT4oMDa/vmoMcjjPUMHm2fuOmVqB9CmH65xqG7vUdagriqaLk04oN6jTRbp",
	"C+Y0kVPGM5LfZVJjGtSrCHTEw+55GlEpDTr0qMXvnEomSYLZBB6ZPMFEF4+sQ0iB4B/fTyeT//HYIwjL",
	"6Nqk8Fc6OUg3vNFz3FokzBZaIyJTSZZ7mfOS6fa6FznanOl2OSzVVqdKiTqCrmWvlnh1ZIsXH00JZK87",
	"J7lRrRh4UIv3amce57XJtt1eW4MgFv34YQvXCt2/uujvyQISUhmOybWIoV4g9pHM/FAzr7t+bKy5xDpe",
	"OGa8GL35mMR0Y7ZkSn6DVBCsHbb9ZgiRtbOt5h4bYrnWrxX85biS2cQxKGOnNd/k8Fmsbfon0/EEjweH",
	"/vf4PyDT8eSxR1hRajcUaz25TYwxHtTEGVfiqtdUjsnElhFAxRNtSNnceReh5bHMhvtCmS0FFf2EeIDA",
	"iCKx5pDKkCVluOUXxLJ2l7RNIRYrCMpQzq6atiXVvqYG7C+D61X4oE75+ojuR3EYX4i80Dn1TfJPjBeA",
	"owBW8n8X4RdjkRoPScuDm1eWuDJxEmdXr8hdBikDSW5+ePf+hQne4AGhfGPKB0gSMa7P0itGkW7nbJH+",
	"+79JZV+RgYSm6KwxmYFalOlcZMqIo42pUYLMgaRAA/T75O5i1LY2ZAN9K2M0RjVWCU0lyKqgE1gBVzbK",
	"Xi9uHWFt3QPWF4oxAAst1ifSzC0vWqERiemtyWJ4EkCiFSRXBQ2Ays24IFIgQBIuFAlFFBA/ZQpFrjLV",
	"MbkRhZ/K1G3Pi9VrnEzyI9x71sclQ5FFAY62qaAfsBR8FW1QMzGF58T2Qo280QpSadZyNp6MJ09olIR0",
	"PMNi5AlwmrDR6ehQf9J7BFUh8u7BanZQeSvKuUliuFRRkDsqqtCrEFjqrEU/Jme8UvK7rAA13+ALCyIl",
	"sUjhA2euWu45cCQeD7RtYkBVbpu1/jUMkW8udJPLMON6kA/cjuLeGcbkvX2wiqZAErpkPMcQ3SRiQY4n",
	"Y3Jp3oxC8HMg+HYABB+4EnalcnAfsJh3AjYDNBidjv4O6qyszU9TGoNCX9A/WlGOZhtBA99sy0IT1mcJ",
	"A1uNjG8I4wcoOxW276odv2/sNtPY4MS00qExnpTLeKXilYTWHtlSxRdNrO8HIDu7PJkdnRw+vXg5ffr8",
	"5OT4/OzwcDY7f3ZydHH+/PJwMplMLy8On54fvZxczGZnk/OTly9enpwdn0+ePrs4Oz/qmIG6Z8Fu6J/x",
	"TX6+CinWJktoWuwOlviPqjVhH9cmcv72fHzz7s278yfTl9Muutpz7Q5ovStlh/gijimRWsWau3jjStQw",
	"ZFnYnjzSxqpHqpH1XrG9ecQUs/fsDUB9EtizUQffSV5b1374PKy4afwiTPF1A86/lZumSjOojtTKOLdl",
	"kUenx5OicDJWbminovcgJRYLszYurIqPu6DVh8kvXv0VwNlk0mVWFO0Omk8F4psiWRxTbUXmDwkSrbrx",
	"k9bzgfA7dfz1mi6XkB68S4DrLfZwPCneijI0qZTxE34Wa3TGLpV3IXxzO9SeUSMws2PI+kiyMbMLOzi1",
	"ykPRpUSfaO33X/I5h0VVL+e0e19X0qJuH3rLZ5NrALPltuZua4jts56Np+zqkzYfyStt4xUzs1fgASQq",
	"lAe/a0P689aJovoyMVQ8yD1HGkD57t/4A9f7qqmlTFJIRGoMNnPDT80fYMqsY/RzkfH5gX/g1peqG+CZ",
	"AEtMqbUgsQhAnn7gfyP6RERyZy4pdkbClA0xkkRrNrS6NMFZDNblKMfkEn1fPNDWVYDnnjWLog+coBWp",
	"9/lyiynGwP2faoDjHAG9KTlwoEQyvowAxxmPbwSRQFM9SanPL1qyITAmCtxrw65wfkqcvgafgz0liZCS",
	"aWPWUPOUHMeMeyQUWeqRgGpVDHDrEbzb8MhdRlMFqUc2QFPEFH2Kp+Qf0/F4Opn8MiYXsGBcm55FskLh",
	"Ph+TC8H/p8qTTglblBNkkmCJC75EsNpGPlDilAhkEDRclWe8uRJ8wQOczFWOfibpEqxlVlntv5lghulE",
	"z0Wekl//V/7x+4BuzGUWzuD76eTXZnMyh4XeyDQafR3NX0p8Pz2ZPHs2Oz6ZGFiY+pLDogu9eHpaQ4Dp",
	"dhrcydNnk2cW3IVBSa0BbK6fZjIlsDipZjGyoCzSRMXtV4WU69NtSX40JPWeAFJBcKo58tc2Io2h3ZP7",
	"wK/KzQgP13YdcAE0iMqsDJ4hcFKmVRsxgoDEoOjYejH1MVeF8IGjCJUsb3Ua0hP3uvra+4Iv2DIzms7w",
	"gJadfGoo0UYUrKTk76ih3C70KHpNahN//rxrVesdScYViwgXaweIX3NOtrXs0HFb7cFzI700vt1meq04",
	"/BZb3WhSVIb5A7NM5kojD29mxqDAvcCaDTaiqNto2G5T58IsFsSnkZ9FND9dlEZbQLvMtEqxgXLQ/NUj",
	"rZdG3kgrJryJxTePAG7ze9eRN7LKaeSNtHZyPnvUxPhtW0nhhQWScEyuzZF3DoXcFXquOqfDiXtCeU3K",
	"Fgl7jLyXlZsyzfT2ECcbF1lj8mpBBI829lJHH2LZCrhHAnP3Kk3p5HUN0ZKVOwxlMeq1Erejf40sPmAC",
	"DbSstnGjpUVoR8T2Mlmdjxs3rLviCWKMVCM/VF7Mqxo91Xq0vfYOtGoUoyVTuPQfTJcH0+XBdHkwXf6y",
	"pkvz/Ygt1suDDfFgQ/yVbYgGu3eYEcXLBF32Q3H19tHW7NpqSKy73oLXKsNUcKpXv/rAX9l6CcxcFJVG",
	"R24p5PWgsBjAgwHyYIA8GCAPBshfzQBple7c1X9SvuMxJrm2rcQMmkJ5mnWMDHZYJta98uBOcZlCfxVL",
	"6MEQGmwINcWuwxIq0xtf2OKkXSaRCUDfZgZhiCiuYh6V7NnXpjAUU2sSl2/lwRR6MIUeTKEHU+hf2xSq",
	"ZlwNs4Ks8t3VBho/GEEP/qAHMwhqCX4dFtA1Zkw1rZ64rIe7LTAIMwWbcUF57WGbjp6bL2Xibks52Aq8",
	"Z/kjd/vM1sLomKn9Wg/6shgd/G6R/Tx8ymKBpzQmFfPRaimf9qwXLa9Ro3vutiLVFs34o4ljdEOuPKvH",
	"59NP94twtnx2fHe4mqjg7vhkwWF1f3Lv3yufh0rGfnZyFLuv40uYw2/kf9l/zWyVr96VI0Upd7t2vCwI",
	"vHv0ms08yLOCWmtiv1+Yz7vPy/bvmFE++kVe7Rjnk9cx7J8NiWx9zrcigErVRuN4pVaAnMGHecHWPaaj",
	"e3ZNBp9IromVloSD3zGSbrtEBWZdq8VxTm3YnS1+5mFBmPxAdXb185i4pndl9vde+UEZRSbfGpDckAi5",
	"Laz1q8iDnkPn7X9BJ0rMi78Och+g66g7krVUWWWuibGsbkIglcb5eiwYRIHNz8azplaiRd8P3BepQT/Q",
	"clUemUkkfJvp8RPDx0tCKCy64tyq1WWQsigKxLozTyBP5Zf/Cqtr6g92rDG+B1CuUc8KH0QIpzstBT97",
	"5KcpkWoTAZLFvjVC/Vusx61xpMq+WTUmVxFQCSTGh7ow4adKe4/4Ifi3H3iFKYJqWLFZS8Ok2xbSYPdf",
	"bTnJo9VUzwfL8lSXdj9LK1ecxuSQoPIa5LKL9lsFyCT02MNltLFHK5tyhG8q23pYLqu2+Ng+7BR5a6am",
	"lqlzJjOJWWSB62Sz94LInrVobFP9qrLXflhGYm6K5aiGe85sw1Gr/k37PGw12h5mve7ZMc2/G8QM8GKi",
	"Jplg/MmWu+qdb5jF1CQGxtQPGTfZh5h0mCcl2JS5eg5Ex5lfdxiU8bD3uK0TjW5LLhlyW54BcV3rUmRA",
	"FImfB361MI2TQHnpmjz4P5MmI65MR/SIFOVB0TbzKdcHbrGCNGWB6RKzmKVOKU3FPYOgrJKzD38UvbtE",
	"wQxSQbwcr00Ym4X4kVZfIO+oF2AyCcuTH7r0bGHU0nK134mHjih9dDK5tyZj0X6MsQKMCUAgC3T5cRVt",
	"CFtU8A6pJHEWKZZEQCjmjLpNXzvl1mPq+5C3CWQwlXP6lMO3qR1Vn27sktOUwcqUSgSZv0HP+ELkWcR+",
	"KqREJWQSkftIUr4VuddFS957MBHK8dqTv8uLEG7N0kksXOxRMSfRpYymZ4Q19fWhqmfypurhPhPHnoMn",
	"bcb5/Pnz5/8IAAD//0tjvuHipgAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
