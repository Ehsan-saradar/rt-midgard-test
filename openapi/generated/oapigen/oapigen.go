// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Action defines model for Action.
type Action struct {

	// Int64, Unix timestamp for when the action was registered
	Date string `json:"date"`

	// Int64, block height at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status string `json:"status"`

	// Type of action
	Type string `json:"type"`
}

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64, Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64, Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64, Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64, Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64, Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64, Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64, Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64, Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64, Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64, Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Coin defines model for Coin.
type Coin struct {

	// Int64 (10^8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64, the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Int64, the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64, Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64, Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64, System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64, Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistoryItemPool defines model for EarningsHistoryItemPool.
type EarningsHistoryItemPool struct {

	// Int64, Share of earnings sent to the pool during the time interval
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string `json:"address"`
	Chain   string `json:"chain"`

	// indicate whether this chain has halted
	Halted bool   `json:"halted"`
	PubKey string `json:"pub_key"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                  int64 `json:"AsgardSize"`
	BadValidatorRate            int64 `json:"BadValidatorRate"`
	BlocksPerYear               int64 `json:"BlocksPerYear"`
	ChurnInterval               int64 `json:"ChurnInterval"`
	ChurnRetryInterval          int64 `json:"ChurnRetryInterval"`
	CliTxCost                   int64 `json:"CliTxCost"`
	DesiredValidatorSet         int64 `json:"DesiredValidatorSet"`
	DoubleSignMaxAge            int64 `json:"DoubleSignMaxAge"`
	EmissionCurve               int64 `json:"EmissionCurve"`
	FailKeygenSlashPoints       int64 `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints      int64 `json:"FailKeysignSlashPoints"`
	FundMigrationInterval       int64 `json:"FundMigrationInterval"`
	JailTimeKeygen              int64 `json:"JailTimeKeygen"`
	JailTimeKeysign             int64 `json:"JailTimeKeysign"`
	LackOfObservationPenalty    int64 `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks       int64 `json:"LiquidityLockUpBlocks"`
	MinimumBondInRune           int64 `json:"MinimumBondInRune"`
	MinimumNodesForBFT          int64 `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil    int64 `json:"MinimumNodesForYggdrasil"`
	NativeChainGasFee           int64 `json:"NativeChainGasFee"`
	NewPoolCycle                int64 `json:"NewPoolCycle"`
	ObservationDelayFlexibility int64 `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints          int64 `json:"ObserveSlashPoints"`
	OldValidatorRate            int64 `json:"OldValidatorRate"`
	OutboundTransactionFee      int64 `json:"OutboundTransactionFee"`
	SigningTransactionPeriod    int64 `json:"SigningTransactionPeriod"`
	YggFundLimit                int64 `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock struct {
	Current []LastblockItem `json:"current"`
}

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn string `json:"last_observed_in"`
	LastSignedOut  string `json:"last_signed_out"`
	Thorchain      string `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64 (10^8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64 (10^8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64 (10^8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64 (10^8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64 (10^8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64 (10^8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64, total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64, total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64, total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`
	PoolShareFactor         string `json:"poolShareFactor"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64, Total Rune pooled in all pools
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64, Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NetworkFees defines model for NetworkFees.
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolLegacyDetail defines model for PoolLegacyDetail.
type PoolLegacyDetail struct {
	Asset string `json:"asset"`

	// same as assetDepth from pool/stats
	AssetDepth string `json:"assetDepth"`

	// same as addAssetLiquidityVolume from pool/stats
	AssetStakedTotal string `json:"assetStakedTotal"`

	// same as toAssetCount from pool/stats
	BuyAssetCount string `json:"buyAssetCount"`

	// same as toAssetFees / toAssetCount from pool/stats
	BuyFeeAverage string `json:"buyFeeAverage"`

	// same as toAssetFees from pool/stats
	BuyFeesTotal string `json:"buyFeesTotal"`

	// same as toAssetAverageSlip from pool/stats
	BuySlipAverage string `json:"buySlipAverage"`

	// same as toAssetVolume / toAssetCount from pool/stats
	BuyTxAverage string `json:"buyTxAverage"`

	// same as toAssetVolume from pool/stats
	BuyVolume string `json:"buyVolume"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// same as 2*runeDepth from pool/stats
	PoolDepth string `json:"poolDepth"`

	// same as totalFees / swapCount from pool/stats
	PoolFeeAverage string `json:"poolFeeAverage"`

	// same as totalFees from pool/stats
	PoolFeesTotal string `json:"poolFeesTotal"`

	// same as averageSlip from pool/stats
	PoolSlipAverage string `json:"poolSlipAverage"`

	// same as addLiquidityVolume from pool/stats
	PoolStakedTotal string `json:"poolStakedTotal"`

	// same as swapVolume / swapCount from pool/stats
	PoolTxAverage string `json:"poolTxAverage"`

	// same as units from pool/stats
	PoolUnits string `json:"poolUnits"`

	// Int64, same as buyVolume + sellVolume
	PoolVolume string `json:"poolVolume"`

	// same as assetPrice from pool/stats
	Price string `json:"price"`

	// same as runeDepth from pool/stats
	RuneDepth string `json:"runeDepth"`

	// same as addRuneLiquidityVolume from pool/stats
	RuneStakedTotal string `json:"runeStakedTotal"`

	// same as toRuneCount from pool/stats
	SellAssetCount string `json:"sellAssetCount"`

	// same as toRuneFees / toRuneCount from pool/stats
	SellFeeAverage string `json:"sellFeeAverage"`

	// same as toRuneFees from pool/stats
	SellFeesTotal string `json:"sellFeesTotal"`

	// same as toRuneAverageSlip from pool/stats
	SellSlipAverage string `json:"sellSlipAverage"`

	// same as toRuneVolume / toRuneCount from pool/stats
	SellTxAverage string `json:"sellTxAverage"`

	// same as toRuneVolume from pool/stats
	SellVolume string `json:"sellVolume"`

	// same as addLiquidityCount from pool/stats
	StakeTxCount string `json:"stakeTxCount"`

	// same as uniqueMemberCount from pool/stats
	StakersCount string `json:"stakersCount"`

	// same as addLiquidityCount + withdrawCount from pool/stats
	StakingTxCount string `json:"stakingTxCount"`

	// same as status from pool/stats
	Status string `json:"status"`

	// Int64, same as history/swaps:uniqueSwapperCount
	SwappersCount string `json:"swappersCount"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64, same as swapVolume pool/stats?period=24h
	Volume24h string `json:"volume24h"`

	// same as withdrawCount from pool/stats
	WithdrawTxCount string `json:"withdrawTxCount"`
}

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64, same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64, same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`
	Asset                  string `json:"asset"`

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64, same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64, same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64, same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64, same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64, same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Int64, number of unique adresses that initiated swaps transactions in the period.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Liquidity Units in the pool
	Units string `json:"units"`

	// Int64, same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64, same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64, same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// Queue defines model for Queue.
type Queue struct {
	Outbound string `json:"outbound"`
	Swap     string `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64 (10^8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, unique users (addresses) initiating swaps in the last 24 hours.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64, unique users (addresses) initiating swaps in the last 30 days.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64 (10^8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps since beginning.
	SwapCount string `json:"swapCount"`

	// Int64, number of swaps in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64, total volume of swaps denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Int64, unique users (addresses) initiating swaps since beginning.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64 (10^8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip by swap.
	// Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64, the fees collected from swaps to asset denoted in rune
	ToAssetFees string `json:"toAssetFees"`

	// Int64, volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64, the fees collected from swaps to rune
	ToRuneFees string `json:"toRuneFees"`

	// Int64, volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64, the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64, toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Int64 (10^8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), trade slip percentage
	TradeSlip string `json:"tradeSlip"`

	// Int64 (10^8), minimum output amount specified for the swap
	TradeTarget string `json:"tradeTarget"`
}

// Transaction defines model for Transaction.
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolLegacyResponse defines model for PoolLegacyResponse.
type PoolLegacyResponse PoolLegacyDetail

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Address of sender or recipient of any in/out transaction related to the action
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action (swap, addLiquidity, withdraw, donate, refund)
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *string `json:"period,omitempty"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *string `json:"status,omitempty"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
