// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/pkg/errors"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {

	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still
	// pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still
// pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity
	// deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// Balance defines model for Balance.
type Balance struct {
	Coins Coins `json:"coins"`

	// full timestamp (nanoseconds since 1970) of the block at which the returned balance snapshot was valid
	Date string `json:"date"`

	// height of the block at which the returned balance snapshot was valid
	Height string `json:"height"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// ChurnItem defines model for ChurnItem.
type ChurnItem struct {

	// full timestamp (nanoseconds since 1970) of the block at which the churn occurred
	Date string `json:"date"`

	// height of the block at which the churn occurred
	Height string `json:"height"`
}

// Churns defines model for Churns.
type Churns []ChurnItem

// Represents a digital currency amount
type Coin struct {

	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, The liquidity unit value index. Sqrt(assetDepth * runeDepth)/liquidity units
	Luvi string `json:"luvi"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval at time endTime
	EndAssetDepth string `json:"endAssetDepth"`

	// Int64, Liquidity Units in the pool at the end of the interval at time endTime
	EndLPUnits string `json:"endLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval at time endTime
	EndRuneDepth string `json:"endRuneDepth"`

	// Int64, Synth Units in the pool at the end of the interval at time endTime
	EndSynthUnits string `json:"endSynthUnits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, The liquidity unit value index increase between startTime and endTime
	LuviIncrease string `json:"luviIncrease"`

	// Float, The impermanent loss between the first and last depth item
	PriceShiftLoss string `json:"priceShiftLoss"`

	// Int64(e8), the amount of Asset in the pool at the start of the interval at time
	// startTime
	StartAssetDepth string `json:"startAssetDepth"`

	// Int64, Liquidity Units in the pool at the start of the interval at time startTime
	StartLPUnits string `json:"startLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the start of the interval at time startTime
	StartRuneDepth string `json:"startRuneDepth"`

	// Int64, Synth Units in the pool at the start of the interval at time startTime
	StartSynthUnits string `json:"startSynthUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of
	// liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {

	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync         bool     `json:"inSync"`
	LastAggregated HeightTS `json:"lastAggregated"`
	LastCommitted  HeightTS `json:"lastCommitted"`
	LastFetched    HeightTS `json:"lastFetched"`
	LastThorNode   HeightTS `json:"lastThorNode"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// HeightTS defines model for HeightTS.
type HeightTS struct {

	// Block height
	Height int `json:"height"`

	// Block timestamp (seconds since epoch)
	Timestamp int `json:"timestamp"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string  `json:"address"`
	Chain   string  `json:"chain"`
	GasRate *string `json:"gas_rate,omitempty"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                    int64  `json:"AsgardSize"`
	BadValidatorRate              int64  `json:"BadValidatorRate"`
	BadValidatorRedline           int    `json:"BadValidatorRedline"`
	BlocksPerYear                 int64  `json:"BlocksPerYear"`
	ChurnInterval                 int64  `json:"ChurnInterval"`
	ChurnRetryInterval            int64  `json:"ChurnRetryInterval"`
	DesiredValidatorSet           int64  `json:"DesiredValidatorSet"`
	DoubleSignMaxAge              int64  `json:"DoubleSignMaxAge"`
	EmissionCurve                 int64  `json:"EmissionCurve"`
	FailKeygenSlashPoints         int64  `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints        int64  `json:"FailKeysignSlashPoints"`
	FullImpLossProtectionBlocks   int64  `json:"FullImpLossProtectionBlocks"`
	FundMigrationInterval         int64  `json:"FundMigrationInterval"`
	IncentiveCurve                int64  `json:"IncentiveCurve"`
	JailTimeKeygen                int64  `json:"JailTimeKeygen"`
	JailTimeKeysign               int64  `json:"JailTimeKeysign"`
	LackOfObservationPenalty      int64  `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks         int64  `json:"LiquidityLockUpBlocks"`
	MaxAvailablePools             int64  `json:"MaxAvailablePools"`
	MaxSwapsPerBlock              int64  `json:"MaxSwapsPerBlock"`
	MinRunePoolDepth              int64  `json:"MinRunePoolDepth"`
	MinSlashPointsForBadValidator int64  `json:"MinSlashPointsForBadValidator"`
	MinSwapsPerBlock              int64  `json:"MinSwapsPerBlock"`
	MinimumBondInRune             int64  `json:"MinimumBondInRune"`
	MinimumNodesForBFT            int64  `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil      int64  `json:"MinimumNodesForYggdrasil"`
	NativeTransactionFee          int64  `json:"NativeTransactionFee"`
	NewPoolCycle                  *int64 `json:"NewPoolCycle,omitempty"`
	ObservationDelayFlexibility   int64  `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints            int64  `json:"ObserveSlashPoints"`
	OldValidatorRate              int64  `json:"OldValidatorRate"`
	OutboundTransactionFee        int64  `json:"OutboundTransactionFee"`
	PoolCycle                     int64  `json:"PoolCycle"`
	SigningTransactionPeriod      int64  `json:"SigningTransactionPeriod"`
	VirtualMultSynths             int64  `json:"VirtualMultSynths"`
	YggFundLimit                  int64  `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock []LastblockItem

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn int64  `json:"last_observed_in"`
	LastSignedOut  int64  `json:"last_signed_out"`
	Thorchain      int64  `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {

	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and
	// nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each
// outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// ObservedChain defines model for ObservedChain.
type ObservedChain struct {
	Chain  string `json:"chain"`
	Height int    `json:"height"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {

	// Float, Also called APR. Annual return estimated linearly (not compounded) from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// Due to Impermanent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	// It includes synth mint or burn.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Float, Also called APR. Annual return estimated linearly (not compounded) from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// Due to Impermanent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// PoolsStatus defines model for PoolsStatus.
type PoolsStatus struct {
	AdditionalProperties map[string]string `json:"-"`
}

// PreflightStatus defines model for PreflightStatus.
type PreflightStatus struct {
	Code   int    `json:"code"`
	Reason string `json:"reason"`
	Status string `json:"status"`
}

// ProxiedNode defines model for ProxiedNode.
type ProxiedNode struct {
	ActiveBlockHeight int    `json:"active_block_height"`
	Bond              string `json:"bond"`
	BondAddress       string `json:"bond_address"`
	CurrentAward      string `json:"current_award"`
	ForcedToLeave     bool   `json:"forced_to_leave"`
	IpAddress         string `json:"ip_address"`
	Jail              struct {
		NodeAddress *string `json:"node_address,omitempty"`
	} `json:"jail"`
	LeaveHeight     int             `json:"leave_height"`
	NodeAddress     string          `json:"node_address"`
	ObserveChains   []ObservedChain `json:"observe_chains"`
	PreflightStatus PreflightStatus `json:"preflight_status"`
	PubKeySet       struct {
		Ed25519   string `json:"ed25519"`
		Secp256k1 string `json:"secp256k1"`
	} `json:"pub_key_set"`
	RequestedToLeave    bool     `json:"requested_to_leave"`
	SignerMembership    []string `json:"signer_membership"`
	SlashPoints         int      `json:"slash_points"`
	Status              string   `json:"status"`
	StatusSince         int      `json:"status_since"`
	ValidatorConsPubKey string   `json:"validator_cons_pub_key"`
	Version             string   `json:"version"`
}

// ProxiedNodes defines model for ProxiedNodes.
type ProxiedNodes []ProxiedNode

// Queue defines model for Queue.
type Queue struct {
	Internal int `json:"internal"`
	Outbound int `json:"outbound"`
	Swap     int `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// Transaction memo of the refund action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Deprecated, it's always 0.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Deprecated, it's always 0.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps (including synths) since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps (including synths) in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps (including synths) in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps (including synths) denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Synth to Rune since beginning.
	SynthBurnCount string `json:"synthBurnCount"`

	// Int64, number of swaps from Rune to Synth since beginning.
	SynthMintCount string `json:"synthMintCount"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// Transaction memo of the swap action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {

	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {

	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of
	// the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity
	// pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at
	// the end of the interval.
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the
	// native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means
	// totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership
	// withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// Transaction memo of the withdraw action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// BalanceResponse defines model for BalanceResponse.
type BalanceResponse Balance

// ChurnsResponse defines model for ChurnsResponse.
type ChurnsResponse Churns

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// PoolsStatusResponse defines model for PoolsStatusResponse.
type PoolsStatusResponse PoolsStatus

// ProxiedNodesResponse defines model for ProxiedNodesResponse.
type ProxiedNodesResponse ProxiedNodes

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// Affiliate address of the action (swap)
	Affiliate *string `json:"affiliate,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`
}

// GetBalanceParams defines parameters for GetBalance.
type GetBalanceParams struct {

	// Unix timestamp as seconds since 1970 (if provided, height must not be provided)
	Timestamp *int64 `json:"timestamp,omitempty"`

	// Block height (if provided, timestamp must not be provided)
	Height *int64 `json:"height,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {

	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolParams defines parameters for GetPool.
type GetPoolParams struct {

	// Specifies the base interval from which APY is extrapolated.
	// Default is 30d.
	Period *GetPoolParamsPeriod `json:"period,omitempty"`
}

// GetPoolParamsPeriod defines parameters for GetPool.
type GetPoolParamsPeriod string

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`

	// Specifies the base interval from which annualPercentageRate and poolAPY is extrapolated.
	// Default is 30d.
	Period *GetPoolsParamsPeriod `json:"period,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// GetPoolsParamsPeriod defines parameters for GetPools.
type GetPoolsParamsPeriod string

// Getter for additional properties for PoolsStatus. Returns the specified
// element and whether it was found
func (a PoolsStatus) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PoolsStatus
func (a *PoolsStatus) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PoolsStatus to handle AdditionalProperties
func (a *PoolsStatus) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PoolsStatus to handle AdditionalProperties
func (a PoolsStatus) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x97XYbN7Lgq+Bwd85ISYcm9WVbe3zuSpZ9o73+0JWUzOaEWQXsBknY3UC7gRbF5Pi1",
	"9gX2xfagAPQn0GxSUu4ko/kxkdn4KBSqClWFqsLvg5AnKWeESTE4/n2QEZFyJgj84ySUlDNxaX5TP4Wc",
	"ScKk+hOnaUxDrJo8+yQ4U7+JcEESrP5KM56STFI9EtYjqT+pJAn88d8zMhscD/7bsxKCZ7q/eKZnHnwN",
	"BnKVksHxAGcZXql/hzzX00dEhBlNod3x4JzJo4MAsTyZkgzxGcqIyGMpUIJluKBsjuSCoDm9JQzNaCxJ",
	"JoaDYnQhM8rmg69fg0FGvuQ0I9Hg+GczV1BA/0vRgU8/kVAOvqoedUAuicwzJhBmCGBWsJj+aMYzFxhf",
	"g8EpjjELyVaY7sKjGdcFqF4CUtNgyhSGproxiojENNbgYgMsjqKMCKFgfb1QC3xwUPWwLkhPAI8VQBUO",
	"Yywk4mGYZxmJUAidEWVoGvPwM1oQOl9IhFmEJE2IkDhJAXbOhMRMPgL4dmTXCq4XPGM8IqhohSyjwfaf",
	"kVQuvqdC8mz14JBVB3cBB98BVWlGQ4IWtmkweIMzhXDxWKA1xndBR0yTKljfExzLxYNDo4ftYuoFtEBC",
	"Yplr/nhPoznOIgXVOZvynEUnmlPIw5NYc4JOSjtnEbRGJ6Z1neLeYSGBVR4cymLkTvCKVg2w6JecRlSu",
	"HovimhO4gPwHlYsow0scC2CLiKRcUFkjwfdEHTRnWlI+OJS10fsJ79guDKUZv6URyVCEJTZCXKQkpDMa",
	"ogRGLlfwWLA7oS4PxDgGIZ7YtsHgA5FLnj08OZpx1xzVbXyafoBEgI9Hj8DSMOrmsCkOSvNpTEP0mawK",
	"GC84jx8cRDWopkQXnB9bwFW1B84ISjmPLXBXEj/C0VuM7AcTPtdAGlqYxCNirEOd4TMAw6KrgOYKzpZH",
	"gcmM7YJJEFlAJEyrYHCR8TtKosch/ergnUcFtKgfE/+Zk/zhlWUYtRMUaFEH5ZLckkyQ6+8/Xn7AycMD",
	"1Ri/52mAUUwFbKntiJjq3TwOKmr94/Cm5kuQT33gnsd8imN0+ubiaonTQrCpfzyWRlAZ2yk5FBxgCAbo",
	"lsd5QgI0IwQUAxHTtKoUWFw/llrQGL8fSgsCcKkDiigA8h/fPRZ+y6GdrMUljq0kTOVCBEjCT1POIhFo",
	"Cw5+uMVxTpBSGUlUIv1rYMCoOCza3gFtgBdHE044m6MllQuUkRhLEiGZYSasnR80vBcRlsTvcsCMl0am",
	"Yjml2WjdFku0XNBwAT8ZIJZYCbM5FZJkJGr7IIKBNl69Exrb9gEmosw1iTYbqggpscQrEwyCfr6c63Ik",
	"l0MnIRIDn6/VK027r8GA5w70fMzlHwy6IlvRBgTOWkTZLY9vSYQo88zc2o/m+OYkduxRpHiRCERn1R2n",
	"AqlFxEQtmGfqq10+dyIHZwQJSeN4wlLCIsrmw4kCkbA8GRz/PBB5GKrjIRiYzxUXWBPsJpDXq5SUzq/q",
	"oEucDoIBjqLCGBsEg6UxugbBIOJMMVwwyMgsZ4pyxZLKcOGYvOGw0xtiWhX4A0LXRBNoXi54rEJ+bede",
	"MDipwPi+Qqd18VCYXj8wKoWXb3GiThGFktJWy1UPhIWgc1YSqTaLEPCvyOOC14t+E2ZsUtitbpw0oHMt",
	"03oJWysLOWVivedLNfoaeMTkLFfGXiEfd5S8FCRU4h0JykKCxi+fj3Y75FkGthCJCgelYDgVCy5BxN3i",
	"mCoaIXdYkf7gePDy4OjoxcGL0Xhk/7eJlF0rXjcFZ88HQ2OjCpI0JKqR79wv7bhZ4iwS7U2bll+dUkad",
	"rB2fUzAiPZ8bIFenqg1cG8a5BM6i90RmNHSsAN+SDM+JOs1viWrp4akd8mI3QCe6NWgMVuDcEsTAsHBs",
	"vBn9SmIWTVcbDy90P//4Cb6jSZ70hP49vqMsT3pDb0bvC/173XwD6ElEMesLPDTuDzs07w16ffD1kFO2",
	"Cd4V1jfBux69N/CN4ddCD0puT9ivCw25D+Qwcl+460OvgbohDZpLCByM7CAw1865uMixEiczu+jMuX9O",
	"ZnILKx6X9zstcXWlxJhUvQtl4VJZSupbcQzMcCxIMfaU85hg1kKhdygXWHBjdi5J0gbpsY5iuGcrrt3+",
	"yFO3Y+btDlgvRvvfUpcb4FDelVrUXuclSTMi1CgIo4jOqWI3WBMLV0ZFbNmf5ucuvsVCEIlOoOHQeeqp",
	"Bu0hTqAfZej19yfnH4ZXP70//fgOzXiWYLkWoXrMwMLnxKjVIPshVOHMiUsv8ylOugHfwNrR62wM9q+8",
	"OTro2RuQXeuusdKz+xU0rt4S13FZhyWoras5lQvRtVveFpYokyS7xbHY5LL4vOhkzPRNOitzqbVIGCSo",
	"QLNuJedVuHuRUK23hzVbbdoaqKJsaNbJdWB7F2ZdwUvqZ3BpYQl/E32aqj/t0r0sepHR0CG638Ycy8Dc",
	"0KtD386V5YwM0fmQDOFPC84z06KQKB2z/XB15p0QltKa9IerM7QzxYJEiOvlRoSkREj4opa+6xRChEXX",
	"NPH70q4NstQZpSac5uFnPWPO6F0llMMxdk8rvDhXEbS7x3bF+S314u26aq6DmW8cmJRF5G6Irr5kcqek",
	"MvQN7B78vfus4R9wGfnBoGi/AYVeKgrZfsVC4kyu3cApmVOm43S22EaxYnJxladpvPLOcqXaIAGN7rMc",
	"NUw3teiZ7kspeeccWuXWc+yUMKFvUZ2kd3tC0MMnVG5kyZNBVehVyasmmJpyo8V3NbTWt9MiwrDOOtn/",
	"nricbYRFJ48tnOGTol2DGzcDEha9u3gMYdOc3jP55eMKgN5IuHoMNuqJg8c7TfJbes7CjGBBthTyiJr+",
	"aErkkhCGCraDa61OvMKZe7WgM/mOC9EJAU1SkiVYqUEo5kIU0yl8zmgmdBwkBEzCHRtSipRXvj8sd8GQ",
	"vs2dsAIjbizA5wdgsk4oUB8gHpLZ7g/N/Vnu/jA8qh7Q67xq8EiDadvk3NrKBoG1kRs0jpuG3K2dAU1Z",
	"6DremvGu29tpjZE2NtWa/cFS2sZa8wLS12BzQtK22VzNHBcH8w88Iq/d7pKZkpmKOq1Lv2TVqg8VRXlm",
	"o8yBcrtUu2njKmadY9WEvEJ7RBIqJYk2m5DDRaxFR+ecVwucAeMVQdRCHRKSb7FQ0mvClZAkUQcfTwia",
	"E0Yy3LXAITqXiAotkfIE8dmElQfqjBAdgFvDmlcP2UgXKETeZrblPdEO99Mbob2Y+S0hfQisjr0AhZzd",
	"kswEQFz+8OGN+imOSdi1LR6VxB3tYFFSxhcRHC70YWMTXprL3FYwXJhY0qZwUMbKZq4MOJs7PRgdyunw",
	"YY/FTWix18FYJ5qGkKqwcluauEg9qIvVBrYtXfQ5G+wOttAD+CY1QupgEoer7l1vNmmIl5IZKkrS3wWy",
	"ru3t5KCOWCsWRBmwHtqB32uwom+tXNv18ZwjnA207Xo2GbR0uYl6nE0AnDkMrajagfgSekt2kZoHfyYM",
	"zTKeoB1G5lh/KJVKMWG4EqyiIyPU/lH5d4GEFYiidj6AnADa9Hu4HmZj1QK9V6O1KZRc6LG1jcm0J8/u",
	"Z86I+nO3hCFAYsGXzILSw0NjttNB3C68eFdS7n+Fcl2sanKfXBeJeOq0ga+znKCE4CItagWnDdNIlxwV",
	"Xdu3nkqpvFqxsM+oQ/QWx8L+aPKtlNIAgWsotPmdeWrDp8IFpsw5q7KBT+bzTFEwidbng9H5Ql5f2Z6v",
	"eaIVtk07viUyXGze7XrBMyV3N+knQswYyb7vDiEFLMGlozTKVei+JmhQZWVL6xMVG9qAvL7+JhpbG+Km",
	"TLO6Fm367pJPKymg5ZLUATLXqU/l+erpW7kjr9+Pk5SHi13HoL6r5nIq19paGX19jaZmR5/V5GzXNptM",
	"FkA1XmEwDTM5/rJ3+Hx+NJLh3W1+EN3O4lT8Nv+8/LJ/EB3eLo/S+fO9o/ls3yVbNRfWhjy9fu1qOcfi",
	"JjMBC2Xjw6O9Q3cIAY4ND9a3jpqoWLRcELkg6nCkQgsDtMACmX7B2piMYJDm05vPZFUHSMoFz9J8OsZR",
	"tGQpSb9EL9mXL8kcr46ST/lo9eX5Xio/5WHy+SWWeCnJ7cHtATtafibkcLV39OXFiIThfHT3ef+587jj",
	"uSRZfc7R3cvo4OXRGXn+4sX+89kh3pueHB28nh6M3hztheOXb0/D06Pns8NDvD6Z3UhFu7ag2PYCpW4S",
	"rV17t2jnRCh5fEV/q2/f/igYmCgC4JKjAycnnuLoRxzTCEueXTZJ4GiLMUgUU9YAxdlJ8bm4INlPBNdx",
	"frQ/Hu+/7De1DgCxmukWsMMAl0SWjpNtsHhGhNrlAgtXOtKjGGa8128Ynk9jckXn7D2+O5nXsbh30GuM",
	"NwkVgnL2Os9uG7vZq/9bTOP/IKs5YVcxFosLTg3VFeM83xttMpKgc+9Q/dDyNo/j8yR9x4W4yLgkEM+u",
	"6aeO5YOD0WjUE7icRe/pPIOEmvsQ0DkLCVPaeBvh456w/C9MY2U4arQ3hth0BIXubYZ4h8PPH2cfp0Jh",
	"QiHlgjAcy9UW+1Vowe94+PmH1LFT/UBSTHCLaYynMbmwvo9N1/Ue310tcaokDQCy1RiUKWVep5WaK4gt",
	"xqhwwVueVaXmtgM+wMJokiennEXnzFpeVfrV/9tkLEgWVct7e10b7GCbQX6az6MMCxpvIcg+gI1cSSB6",
	"S9zL6zcaWartf70K4/ooh+MXB/2GqPDWGYnx6m1M7uiUxrTBZIcbjEZ8knXcb5D4/qe/zfrqgel+A7rx",
	"fLC/17O/Oj8pm1fguSAZ5VHjYO832I80kzmO3+exvpba5vz6aT5Xx807mlC58U43lMiKtudQ3ty6WFPZ",
	"aqpNTi3IrdQ4dJSmyuFTIbwKQfcB7zuqWydv6xxtH4sdp5zv1HKdQo5DxXFGrBP5DgnuEshOwdohKD2C",
	"r1v8OMWJQzx4ub3KtR0c6OKnBn+4TKCyok1f87zo4bPL6w3aeXcO2/nDqfN+CAt5wzX2optGp/FhTzsG",
	"RtE5iDcmt7YiPV/2GkNZx224x4cHLzYXM9ZWba2uDWp1YufmNQv+bH/n3hxq40v31gBb37r7QelNok5Y",
	"HJTqaufyIJ3UXNU/QqmEHp508HALW2Op6654ws4I49ajnzOCcmFb6ns9LO040NVzTVdNPH7ds5pgUQKq",
	"A7p1c/VGCZ+ZUG4WmZBrO70DBztrkLDrh+yyeo/QGzqYtdd2/dExe5VAuPpZfoFpd9ZbWgmGsonoap0a",
	"KSYLaYkFSvGKRGhKQpwLfXfbCL6bsLSY1oMCRrpTeRiRlfulcIHZnAi0s6xUJfuuoIjdDS/x/9w35ZtQ",
	"g8UXyKVNxZHtzO4pjuw4XfLItukri4oxN2S9NmH35fZe2Oia8h6ir0L2PaVfDedu8dcvHN5zpnllp1Pc",
	"u84bN3E6d2idVGvhuElPWt40GN+lUtRrDrZOeE/0zzsKUcW6rk6lsl+7HKFANFIG04ySSNfeKYMXypuI",
	"XrqLBtUdDOSsCOJfr41HccSUnEQRifqKDLWEsoAHSMXpylZb9GVfnZT3bq4AD4MVlCvZO11VSoP487lM",
	"mZb1qaIQ5zHNJWLcAr8iMkBUMVAcoykxvy4XJpQcGDPFNEM4y+gt8UTiwfC2hCbrjb9SxkCUST8sRliS",
	"tzQTnXsVoB9qh0UROKNj40GOmYorpVpDWWUrfVMrK26rmSEWf8uJe+a5AfKahWbkAks0JTG3MryTotzB",
	"R4pjUEZEoTBBuFZGZorFJfcpHX25CcT6hsxkxnfzkh1wA1YCWdmDk2DozRlJE/x6TlJgbMJIjbO6Nx+5",
	"Q4+qSG3IK0fSV7nFQVV61nHZEFLNFbZkR4vBm2znl+t1Q7iOuPemvFKxmsod/5RNx7NPe/GXTy+i2+ww",
	"zZNZuAifMxnPvkR7t0e/RXdflp/IcnY4CNYX8PLXjKpVv1pXDN9VheprUR5rbQFJ1araDwpw9aiKWO1T",
	"lOda089uXtn3q2OPbFFe5zsButyHY9+KwqmVRGeBFAdAwRLN2RBUWAnn1/pf/5prumtHFoGRrx8KfXxd",
	"/ZVmikBniYJqWxPtXymT1F3doGxa5gmcXPzkNfPeDOdDNBqOxugVGv9tiN4ISRMsiRXsMEmuEatHK0Na",
	"awahCSWbsIyAqw4J+hsJEEmMZ141uCWBDjUTKCUZWhGc6ZrzUHIWAkRnOJQ8Q68mbOcfhHyOV9oPHfKE",
	"wOp0dQv0LRrv/p/DPfQdGrvlZiGcHmjxrtradURMWB0T6IERUbC/wYYOJFYnMQFL5Ju93fVoYeROwk3L",
	"973qS+7owEBtdxY1YdQguhbL0KcyQMkecPQDB0Xce3gFpp5aYt91MGa+dioUw6Ad+66DP0gaci7eAt48",
	"W45+Hg2H41/MnGpg49ehRi2QHIk0prKytyaR0rH/mEUTBiw/nLB3F3pf0Ksitecb1IAK/Y8JK+kZHb9C",
	"lbY7Y/Rds8Ou13ViaxXdS0RWSzttKiNN302EZK2SVIAETyynJSgBepsSQIyRpsalVCE3NzoajNBXS6IM",
	"LFWwDofo1PjzjNnFIt3I5PKa9CScFAljlE0YuSXZSlPqznSFIjKjjKo5TRqosW10hxQAhKGajNu1rkst",
	"RToX9dpIHCVpLJOafusfuKkeL600kepZ3KC79jHpIIr25jSW1RZJfgHS5vLaEdcQ+r/4dQ53HsE7Uy2b",
	"mar/OvVMCB5SWz0WM1PKdIg+MlJtiXSYaTYnUZH/NGGuiquT3pVnfZWQbDx4oyhCtHd4OH7ZXpf5UHks",
	"oK7uNiNa53fLaLafZ2SUzg9n6rf8bn+VvGSjo72j5/HnjIjDg9+WnxYH4YvRwQvy2+LT4Wjv4MvKaUcp",
	"ZvfaZVBQvbi7c2vjC56NR3urUbKfp3I+ur3NI7JajEbZ3oz99ny0/PI8erF6nuR7c6eoJGG6d3j0edye",
	"vPj0X4KZBhdW0VSFOij21UnPoG/2ve4DunHQk7l4j17bm9v1F9HuIO4yGL8MT7FRNz1ve80QrsVWHqFo",
	"2wyM5Ti+IFlImMRzcumsfWfUvpNYcBTiWInjk4vLITqB3qaoKyJGC4xQTBnBWbxCO8quL7XBXbCrJwwr",
	"7Y1yfeOxSqkac1U6d/ZHiGdoPBqhCK8E2gk5m9F5nuFpTKwDwgyQ4gwnRJIsmLCIzHAeQ07s/mh3aLXU",
	"scl+GY/+BgpjvDIADyfsLFeHDTqvXES940InzuoYBx0Ib09ZZPO3AvBaaAdspfeEQffSzwwybTwafauW",
	"Yp9sCRQamCQssiOLBV+i9yf/e+fk4jJAI++9o61D5/5y78ITwz+2stbwn6W01v3LX/kV+g4zCjbcwYCK",
	"Ah6vbtXQoxk7q6Vf63IXpWmnRggQUaxVhFYF6EqBHg0fuibV8GErTw3/oPpSznn0+xd7B+u3zjzZoK/P",
	"lfq/xGmxDhCQewcLrVVF2lFpwgpq13vDCTtXTBHGeUQEAthRQhVNZGjqMwo8RSpL4LetdOU8aEoWqdSb",
	"37wmVveh1/+cr77W1D7tmy8lPUgcj7aMitfRyup1NyZ24dh/k3qP4Jxe07YuXu8bobPZrJ3r3DT8ptfU",
	"7nvp9vRPOtOTztR5zfjXL0ZqS4fHNPXMeHSAdk6xoAKlEJMcoNF3kEwQoOWCZATBP16NR6O/OfgTzrzj",
	"yizuzf2TRK3dX7/886iXj6ZdOgde4nSzk04TFqhY3mNNtdniTKkM7T887qMOP6w27Pacgnw7eRzunrAm",
	"qpqz+fy50G67ja509Q+9tkBK5+i2jIhn8HuQUj3EzTGB4r4/bLcak/k2SzXbbq/Knt6Bt96porN36Hvs",
	"Uy3o0H0fsTXgtq/bdv2SEx2S0Q/jMWE7dgKjWf2bEgavLj5+fLfrn+NqidPUO8kZSTMSYijWA0WLcLxU",
	"Wujoj7K4HyKGeb2J4A483TImuf90Xo7YMCi5/4zd5LxBYHL/KX3TeRwShbeg2+ngc1VsU3e7JY3rXF9R",
	"GhonVl0mVpUWJ3c5T2GXrK9r4fWzrCYuqxKohyfmrxK73ZaOPkeRfdxZO3HgJhrHFzXnTjsZx97U/D44",
	"vX49PL1+PTgeYKu0DlyRWxcZmcXKdi2naz4ZGJFmsYV2smBGsHlEtrxY+vgf3Xp32fKS4GjVJ6pf85eZ",
	"LNCwORFYvkXti0m7gdvxG8c113hv/+DwyLXKqXltq4Rct33+4qWvtOuNsxYTlB7C09BdaElHANxg+2Zf",
	"czpXpxnPQhLdSH4TE6xDDBxF2lI3OOPRcG803B8ND5wFmj45XYuMR6R7dQfOLW1tFgDs2ggnpa2fduxa",
	"g0k6vYG7yf7u1/p1quvJWMs/NyVhd7+SXue3sjjVjfEJeSMBHJWr7la/7a29KXf3G6/nt54X16oPEXIt",
	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
