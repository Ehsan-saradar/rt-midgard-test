// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Action defines model for Action.
type Action struct {

	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status string `json:"status"`

	// Type of action
	Type string `json:"type"`
}

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Coin defines model for Coin.
type Coin struct {

	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistoryItemPool defines model for EarningsHistoryItemPool.
type EarningsHistoryItemPool struct {

	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string  `json:"address"`
	Chain   string  `json:"chain"`
	GasRate *string `json:"gas_rate,omitempty"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                    int64  `json:"AsgardSize"`
	BadValidatorRate              int64  `json:"BadValidatorRate"`
	BadValidatorRedline           int    `json:"BadValidatorRedline"`
	BlocksPerYear                 int64  `json:"BlocksPerYear"`
	ChurnInterval                 int64  `json:"ChurnInterval"`
	ChurnRetryInterval            int64  `json:"ChurnRetryInterval"`
	DesiredValidatorSet           int64  `json:"DesiredValidatorSet"`
	DoubleSignMaxAge              int64  `json:"DoubleSignMaxAge"`
	EmissionCurve                 int64  `json:"EmissionCurve"`
	FailKeygenSlashPoints         int64  `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints        int64  `json:"FailKeysignSlashPoints"`
	FullImpLossProtectionBlocks   int64  `json:"FullImpLossProtectionBlocks"`
	FundMigrationInterval         int64  `json:"FundMigrationInterval"`
	IncentiveCurve                int64  `json:"IncentiveCurve"`
	JailTimeKeygen                int64  `json:"JailTimeKeygen"`
	JailTimeKeysign               int64  `json:"JailTimeKeysign"`
	LackOfObservationPenalty      int64  `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks         int64  `json:"LiquidityLockUpBlocks"`
	MaxAvailablePools             int64  `json:"MaxAvailablePools"`
	MaxSwapsPerBlock              int64  `json:"MaxSwapsPerBlock"`
	MinRunePoolDepth              int64  `json:"MinRunePoolDepth"`
	MinSlashPointsForBadValidator int64  `json:"MinSlashPointsForBadValidator"`
	MinSwapsPerBlock              int64  `json:"MinSwapsPerBlock"`
	MinimumBondInRune             int64  `json:"MinimumBondInRune"`
	MinimumNodesForBFT            int64  `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil      int64  `json:"MinimumNodesForYggdrasil"`
	NativeTransactionFee          int64  `json:"NativeTransactionFee"`
	NewPoolCycle                  *int64 `json:"NewPoolCycle,omitempty"`
	ObservationDelayFlexibility   int64  `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints            int64  `json:"ObserveSlashPoints"`
	OldValidatorRate              int64  `json:"OldValidatorRate"`
	OutboundTransactionFee        int64  `json:"OutboundTransactionFee"`
	PoolCycle                     int64  `json:"PoolCycle"`
	SigningTransactionPeriod      int64  `json:"SigningTransactionPeriod"`
	VirtualMultSynths             int64  `json:"VirtualMultSynths"`
	YggFundLimit                  int64  `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock struct {
	Current []LastblockItem `json:"current"`
}

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn int64  `json:"last_observed_in"`
	LastSignedOut  int64  `json:"last_signed_out"`
	Thorchain      int64  `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`
	PoolShareFactor         string `json:"poolShareFactor"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), Total Rune pooled in all pools
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NetworkFees defines model for NetworkFees.
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// ObservedChain defines model for ObservedChain.
type ObservedChain struct {
	Chain  string `json:"chain"`
	Height int    `json:"height"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolLegacyDetail defines model for PoolLegacyDetail.
type PoolLegacyDetail struct {
	Asset string `json:"asset"`

	// same as assetDepth from pool/stats
	AssetDepth string `json:"assetDepth"`

	// same as addAssetLiquidityVolume from pool/stats
	AssetStakedTotal string `json:"assetStakedTotal"`

	// same as toAssetCount from pool/stats
	BuyAssetCount string `json:"buyAssetCount"`

	// same as toAssetFees / toAssetCount from pool/stats
	BuyFeeAverage string `json:"buyFeeAverage"`

	// same as toAssetFees from pool/stats
	BuyFeesTotal string `json:"buyFeesTotal"`

	// same as toAssetAverageSlip from pool/stats
	BuySlipAverage string `json:"buySlipAverage"`

	// same as toAssetVolume / toAssetCount from pool/stats
	BuyTxAverage string `json:"buyTxAverage"`

	// same as toAssetVolume from pool/stats
	BuyVolume string `json:"buyVolume"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// same as 2*runeDepth from pool/stats
	PoolDepth string `json:"poolDepth"`

	// same as totalFees / swapCount from pool/stats
	PoolFeeAverage string `json:"poolFeeAverage"`

	// same as totalFees from pool/stats
	PoolFeesTotal string `json:"poolFeesTotal"`

	// same as averageSlip from pool/stats
	PoolSlipAverage string `json:"poolSlipAverage"`

	// same as addLiquidityVolume from pool/stats
	PoolStakedTotal string `json:"poolStakedTotal"`

	// same as swapVolume / swapCount from pool/stats
	PoolTxAverage string `json:"poolTxAverage"`

	// same as units from pool/stats
	PoolUnits string `json:"poolUnits"`

	// Int64(e8), same as buyVolume + sellVolume
	PoolVolume string `json:"poolVolume"`

	// same as assetPrice from pool/stats
	Price string `json:"price"`

	// same as runeDepth from pool/stats
	RuneDepth string `json:"runeDepth"`

	// same as addRuneLiquidityVolume from pool/stats
	RuneStakedTotal string `json:"runeStakedTotal"`

	// same as toRuneCount from pool/stats
	SellAssetCount string `json:"sellAssetCount"`

	// same as toRuneFees / toRuneCount from pool/stats
	SellFeeAverage string `json:"sellFeeAverage"`

	// same as toRuneFees from pool/stats
	SellFeesTotal string `json:"sellFeesTotal"`

	// same as toRuneAverageSlip from pool/stats
	SellSlipAverage string `json:"sellSlipAverage"`

	// same as toRuneVolume / toRuneCount from pool/stats
	SellTxAverage string `json:"sellTxAverage"`

	// same as toRuneVolume from pool/stats
	SellVolume string `json:"sellVolume"`

	// same as addLiquidityCount from pool/stats
	StakeTxCount string `json:"stakeTxCount"`

	// same as uniqueMemberCount from pool/stats
	StakersCount string `json:"stakersCount"`

	// same as addLiquidityCount + withdrawCount from pool/stats
	StakingTxCount string `json:"stakingTxCount"`

	// same as status from pool/stats
	Status string `json:"status"`

	// Int64, same as history/swaps:uniqueSwapperCount
	SwappersCount string `json:"swappersCount"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64(e8), same as swapVolume pool/stats?period=24h
	Volume24h string `json:"volume24h"`

	// same as withdrawCount from pool/stats
	WithdrawTxCount string `json:"withdrawTxCount"`
}

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`
	Asset                  string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Int64, number of unique adresses that initiated swaps transactions in the period.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Liquidity Units in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// PreflightStatus defines model for PreflightStatus.
type PreflightStatus struct {
	Code   int    `json:"code"`
	Reason string `json:"reason"`
	Status string `json:"status"`
}

// ProxiedNode defines model for ProxiedNode.
type ProxiedNode struct {
	ActiveBlockHeight int    `json:"active_block_height"`
	Bond              string `json:"bond"`
	BondAddress       string `json:"bond_address"`
	CurrentAward      string `json:"current_award"`
	ForcedToLeave     bool   `json:"forced_to_leave"`
	IpAddress         string `json:"ip_address"`
	Jail              struct {
		NodeAddress *string `json:"node_address,omitempty"`
	} `json:"jail"`
	LeaveHeight     int             `json:"leave_height"`
	NodeAddress     string          `json:"node_address"`
	ObserveChains   []ObservedChain `json:"observe_chains"`
	PreflightStatus PreflightStatus `json:"preflight_status"`
	PubKeySet       struct {
		Ed25519   string `json:"ed25519"`
		Secp256k1 string `json:"secp256k1"`
	} `json:"pub_key_set"`
	RequestedToLeave    bool     `json:"requested_to_leave"`
	SignerMembership    []string `json:"signer_membership"`
	SlashPoints         int      `json:"slash_points"`
	Status              string   `json:"status"`
	StatusSince         int      `json:"status_since"`
	ValidatorConsPubKey string   `json:"validator_cons_pub_key"`
	Version             string   `json:"version"`
}

// ProxiedNodes defines model for ProxiedNodes.
type ProxiedNodes []ProxiedNode

// Queue defines model for Queue.
type Queue struct {
	Internal int `json:"internal"`
	Outbound int `json:"outbound"`
	Swap     int `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, unique users (addresses) initiating swaps in the last 24 hours.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64, unique users (addresses) initiating swaps in the last 30 days.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Int64, unique users (addresses) initiating swaps since beginning.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip by swap.
	// Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps to asset denoted in rune
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps to rune
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64(e8), toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// Transaction defines model for Transaction.
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolLegacyResponse defines model for PoolLegacyResponse.
type PoolLegacyResponse PoolLegacyDetail

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ProxiedNodesResponse defines model for ProxiedNodesResponse.
type ProxiedNodesResponse ProxiedNodes

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action (swap, addLiquidity, withdraw, donate, refund)
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *string `json:"period,omitempty"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *string `json:"status,omitempty"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAD///5izb0Y2wAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
