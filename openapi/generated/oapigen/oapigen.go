// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64, Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64, Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64, Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64, Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64, Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64, Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64, Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64, Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64, Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64, Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64, Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64, Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64, System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64, Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistoryItemPool defines model for EarningsHistoryItemPool.
type EarningsHistoryItemPool struct {

	// Int64, Share of earnings sent to the pool during the time interval
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses struct {
	Current []InboundAddressesItem `json:"current"`
}

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string `json:"address"`
	Chain   string `json:"chain"`

	// indicate whether this chain has halted
	Halted bool   `json:"halted"`
	PubKey string `json:"pub_key"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                  int64 `json:"AsgardSize"`
	BadValidatorRate            int64 `json:"BadValidatorRate"`
	BlocksPerYear               int64 `json:"BlocksPerYear"`
	ChurnInterval               int64 `json:"ChurnInterval"`
	ChurnRetryInterval          int64 `json:"ChurnRetryInterval"`
	CliTxCost                   int64 `json:"CliTxCost"`
	DesiredValidatorSet         int64 `json:"DesiredValidatorSet"`
	DoubleSignMaxAge            int64 `json:"DoubleSignMaxAge"`
	EmissionCurve               int64 `json:"EmissionCurve"`
	FailKeygenSlashPoints       int64 `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints      int64 `json:"FailKeysignSlashPoints"`
	FundMigrationInterval       int64 `json:"FundMigrationInterval"`
	JailTimeKeygen              int64 `json:"JailTimeKeygen"`
	JailTimeKeysign             int64 `json:"JailTimeKeysign"`
	LackOfObservationPenalty    int64 `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks       int64 `json:"LiquidityLockUpBlocks"`
	MinimumBondInRune           int64 `json:"MinimumBondInRune"`
	MinimumNodesForBFT          int64 `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil    int64 `json:"MinimumNodesForYggdrasil"`
	NativeChainGasFee           int64 `json:"NativeChainGasFee"`
	NewPoolCycle                int64 `json:"NewPoolCycle"`
	ObservationDelayFlexibility int64 `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints          int64 `json:"ObserveSlashPoints"`
	OldValidatorRate            int64 `json:"OldValidatorRate"`
	OutboundTransactionFee      int64 `json:"OutboundTransactionFee"`
	SigningTransactionPeriod    int64 `json:"SigningTransactionPeriod"`
	YggFundLimit                int64 `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock struct {
	Current []LastblockItem `json:"current"`
}

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn string `json:"last_observed_in"`
	LastSignedOut  string `json:"last_signed_out"`
	Thorchain      string `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64, total deposits (liquidity additions) during the time interval
	Deposits string `json:"deposits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, total withdrawals during the time interval
	Withdrawals string `json:"withdrawals"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// Liquidity provider data for all the pools of a given member
	Pools []MemberPoolDetails `json:"pools"`
}

// MemberPoolDetails defines model for MemberPoolDetails.
type MemberPoolDetails struct {

	// Int64, total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// Int64, total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Int64, total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`
	PoolShareFactor         string `json:"poolShareFactor"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64, Total Rune pooled in all pools
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64, Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NodeKey defines model for NodeKey.
type NodeKey struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// NodeKeys defines model for NodeKeys.
type NodeKeys []NodeKey

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolLegacyDetail defines model for PoolLegacyDetail.
type PoolLegacyDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Int64, same as history/swaps:toAssetCount
	BuyAssetCount string `json:"buyAssetCount"`

	// Float, same as history/swaps:toRuneVolume/toRuneCount
	BuyTxAverage string `json:"buyTxAverage"`

	// Int64, same as history/swaps:toAssetVolume
	BuyVolume string `json:"buyVolume"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, same as assetDepth + runeDepth
	PoolDepth string `json:"poolDepth"`

	// Float, same as history/swaps:totalFees/totalCount
	PoolFeeAverage string `json:"poolFeeAverage"`

	// Int64, same as history/swaps:totalFees
	PoolFeesTotal string `json:"poolFeesTotal"`

	// Float, same as history/swaps:averageSlip
	PoolSlipAverage string `json:"poolSlipAverage"`

	// Float, same as history/swaps:totalVolume/totalCount
	PoolTxAverage string `json:"poolTxAverage"`

	// Int64, same as buyVolume + sellVolume
	PoolVolume string `json:"poolVolume"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// Int64, same as history/swaps:toRuneCount
	SellAssetCount string `json:"sellAssetCount"`

	// Float, same as history/swaps:toAssetVolume/toAssetCount
	SellTxAverage string `json:"sellTxAverage"`

	// Int64, same as history/swaps:toRuneVolume
	SellVolume string `json:"sellVolume"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64, Liquidity Units in the pool
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune
	Volume24h string `json:"volume24h"`
}

// Queue defines model for Queue.
type Queue struct {
	Outbound string `json:"outbound"`
	Swap     string `json:"swap"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Daily active users (unique addresses interacting)
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Daily transactions
	DailyTx string `json:"dailyTx"`

	// Monthly active users
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Monthly transactions
	MonthlyTx string `json:"monthlyTx"`

	// Total buying transactions
	TotalAssetBuys string `json:"totalAssetBuys"`

	// Total selling transactions
	TotalAssetSells string `json:"totalAssetSells"`

	// Total RUNE balances
	TotalDepth string `json:"totalDepth"`

	// Total staking transactions
	TotalStakeTx string `json:"totalStakeTx"`

	// Total staked (in RUNE Value)
	TotalStaked string `json:"totalStaked"`

	// Total transactions
	TotalTx string `json:"totalTx"`

	// Total unique swappers & members
	TotalUsers string `json:"totalUsers"`

	// Total (in RUNE Value) of all assets swapped since start
	TotalVolume string `json:"totalVolume"`

	// Total withdrawing transactions
	TotalWithdrawTx string `json:"totalWithdrawTx"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float, the average slip by swap. Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64, volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64, volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64, the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64, toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// TxDetails defines model for TxDetails.
type TxDetails struct {

	// Int64, Unix timestamp
	Date     string   `json:"date"`
	Height   string   `json:"height"`
	In       []Tx     `json:"in"`
	Metadata Metadata `json:"metadata"`
	Out      []Tx     `json:"out"`
	Pools    []string `json:"pools"`
	Status   string   `json:"status"`
	Type     string   `json:"type"`
}

// Coin defines model for coin.
type Coin struct {
	Amount string `json:"amount"`
	Asset  string `json:"asset"`
}

// Coins defines model for coins.
type Coins []Coin

// Metadata defines model for metadata.
type Metadata struct {
	Swap *SwapMetadata `json:"swap,omitempty"`
}

// SwapMetadata defines model for swapMetadata.
type SwapMetadata struct {
	LiquidityFee string `json:"liquidityFee"`
	NetworkFees  []Coin `json:"networkFees"`
	TradeSlip    string `json:"tradeSlip"`
	TradeTarget  string `json:"tradeTarget"`
}

// Tx defines model for tx.
type Tx struct {
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`
	Memo    string `json:"memo"`
	TxID    string `json:"txID"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodeKeyResponse defines model for NodeKeyResponse.
type NodeKeyResponse NodeKeys

// PoolLegacyResponse defines model for PoolLegacyResponse.
type PoolLegacyResponse PoolLegacyDetail

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// TxResponse defines model for TxResponse.
type TxResponse struct {

	// Int64, count of txs matching the filters.
	Count string      `json:"count"`
	Txs   []TxDetails `json:"txs"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *string `json:"status,omitempty"`
}

// GetTxDetailsParams defines parameters for GetTxDetails.
type GetTxDetailsParams struct {

	// Address of sender or recipient of any in/out tx in event
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx in event
	Txid *string `json:"txid,omitempty"`

	// Any asset used in event (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of event
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
