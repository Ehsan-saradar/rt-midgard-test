// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64, Average bond of active nodes.
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64, Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64, Maxinum bond of active nodes.
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64, Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64, Median bond of active nodes.
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64, Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64, Minumum bond of active nodes.
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64, Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64, Total bond of active nodes.
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64, Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64, Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64, Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64, System income generated during the time interval. It is the sum of liquidity fees and block rewards.
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64, Total liquidity fees, converted to RUNE, collected during the time interval.
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistoryItemPool defines model for EarningsHistoryItemPool.
type EarningsHistoryItemPool struct {

	// Int64, Share of earnings sent to the pool during the time interval
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64, total deposits (liquidity additions) during the time interval
	Deposits string `json:"deposits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, total withdrawals during the time interval
	Withdrawals string `json:"withdrawals"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// Liquidity provider data for all the pools of a given member
	Pools []MemberPoolDetails `json:"pools"`
}

// MemberPoolDetails defines model for MemberPoolDetails.
type MemberPoolDetails struct {

	// Int64, total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// Int64, total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Int64, total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`
	BondingROI string `json:"bondingROI"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks).
	PoolActivationCountdown string  `json:"poolActivationCountdown"`
	PoolShareFactor         string  `json:"poolShareFactor"`
	StakingROI              *string `json:"stakingROI,omitempty"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64, Total Rune pooled in all pools.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64, Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NodeKey defines model for NodeKey.
type NodeKey struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Enabled, Bootstrap.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Daily active users (unique addresses interacting)
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Daily transactions
	DailyTx string `json:"dailyTx"`

	// Monthly active users
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Monthly transactions
	MonthlyTx string `json:"monthlyTx"`

	// Total buying transactions
	TotalAssetBuys string `json:"totalAssetBuys"`

	// Total selling transactions
	TotalAssetSells string `json:"totalAssetSells"`

	// Total RUNE balances
	TotalDepth string `json:"totalDepth"`

	// Total staking transactions
	TotalStakeTx string `json:"totalStakeTx"`

	// Total staked (in RUNE Value).
	TotalStaked string `json:"totalStaked"`

	// Total transactions
	TotalTx string `json:"totalTx"`

	// Total unique swappers & members
	TotalUsers string `json:"totalUsers"`

	// Total (in RUNE Value) of all assets swapped since start.
	TotalVolume string `json:"totalVolume"`

	// Total withdrawing transactions
	TotalWithdrawTx string `json:"totalWithdrawTx"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Int64, the average slip by swap. Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64, volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64, volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64, the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64, toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// TxDetails defines model for TxDetails.
type TxDetails struct {

	// Int64, Unix timestamp.
	Date   string `json:"date"`
	Events Event  `json:"events"`
	Height string `json:"height"`
	In     Tx     `json:"in"`
	Out    []Tx   `json:"out"`
	Pool   string `json:"pool"`
	Status string `json:"status"`
	Type   string `json:"type"`
}

// Coin defines model for coin.
type Coin struct {
	Amount string `json:"amount"`
	Asset  string `json:"asset"`
}

// Coins defines model for coins.
type Coins []Coin

// Event defines model for event.
type Event struct {
	Fee        string `json:"fee"`
	Slip       string `json:"slip"`
	StakeUnits string `json:"stakeUnits"`
}

// Option defines model for option.
type Option struct {
	Asymmetry           string `json:"asymmetry"`
	PriceTarget         string `json:"priceTarget"`
	WithdrawBasisPoints string `json:"withdrawBasisPoints"`
}

// Tx defines model for tx.
type Tx struct {
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`
	Memo    string `json:"memo"`
	Options Option `json:"options"`
	TxID    string `json:"txID"`
}

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse []string

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodeKeyResponse defines model for NodeKeyResponse.
type NodeKeyResponse []NodeKey

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse []PoolDetail

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// TxResponse defines model for TxResponse.
type TxResponse struct {

	// Int64, count of txs matching the filters.
	Count string      `json:"count"`
	Txs   []TxDetails `json:"txs"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval string `json:"interval"`

	// Start time of the query as unix timestamp
	From int64 `json:"from"`

	// End time of the query as unix timestamp
	To int64 `json:"to"`
}

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval string `json:"interval"`

	// Start time of the query as unix timestamp
	From int64 `json:"from"`

	// End time of the query as unix timestamp
	To int64 `json:"to"`
}

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing.
	Pool *int64 `json:"pool,omitempty"`

	// Interval of calculations
	Interval string `json:"interval"`

	// Start time of the query as unix timestamp
	From int64 `json:"from"`

	// End time of the query as unix timestamp
	To int64 `json:"to"`
}

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval string `json:"interval"`

	// Start time of the query as unix timestamp
	From int64 `json:"from"`

	// End time of the query as unix timestamp
	To int64 `json:"to"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Interval of calculations
	Status string `json:"status"`
}

// GetTxDetailsParams defines parameters for GetTxDetails.
type GetTxDetailsParams struct {

	// Address of sender or recipient of any in/out tx in event
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx in event
	Txid *string `json:"txid,omitempty"`

	// Any asset used in event (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of event
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+w823Lbuna/glH7kPQosuzYzt5+qhU7J57Gicd2TmfP6W4HIpckxCRAA6AsNePf6g/0",
	"xzpYAO/gRdrxmc7svNkiuLDuWDfi+ygQcSI4cK1GZ99HElQiuAL85wISvfrIlBZye+semN8DwTVwbf6k",
	"SRKxgGom+ME3Jbj5TQUriKn5658lLEZno386KDY5sE/VQRn46Pn5eTwKQQWSJQbW6MxuTigPSSJZAGSV",
	"LR2PLqnkjC/VS6FWg+/DDtySMlofgUZ6tRc2iRQJSM0s30Oq6ZxaENVt72UKJAbKFVnhbtsxCQTnEGgI",
	"iRYkf3U80tsERmejuRARUG4QZPxuy4MhUCfkA41U9uM1C5dUhoQpojSLIhJQHawYX5I0MZvqFZBgRRn3",
	"7qoCyjnIj8CWK93c/Irr0+OxhZFKCVyTeSSCBxKIlOsCotKS8eXIiELCY8okhKOzv49KBFc3ysn9PQch",
	"5t8g0D5x3oJOZU4+UZrqVJGFkBnthpBP7DFlIdPbl9K7+gY+TP+d6VUo6RONFBpHCIlQTFcU8RriOcgL",
	"0JRF6odjWYHuQ9Gy2eilpsxYCYkywkgixZqFIFFRkcGUqAQCtmABiRFyQcF+uDMNsWrqmQVJaBhKUGo0",
	"HsGGxklk9ELP+fxw8e0oevz2S7iWJ0kaL4JV8I7raPEYHq1P/zvcPD59g6fFSVMf8x+olNQrMnxAxILQ",
	"KEI9t3Qq8+5n0E9CPvxwITm4XbpOOWlKyr2H4kH8RAj/Bts/JohORO0GQ/i4E+I3QkQ/nKsGqFV8H35f",
	"GkiF1khQzwUHkggRZcipl+NpGc1+tp5n6mmwy1A2L95pqn+8+0CoFyilIa5jGYk5jcjs8ubuiSa5eM0/",
	"L+WGS7B9OCIeeDiNyVpEaQxjsgBAb6wilpQ98f3mB4QD9iBsOzjxqRGf3igSZwezcTMLFmmQauL1WRs1",
	"WJ3uNxeFUtS0qXoY50f2Ru107FJOciepJeWKBmaFwg0cGgbLmQkMbuGJylA1+TQvnpp/GzTPBQ87Hifo",
	"MVoe1wgtb1UBXAHTZMF4NBM8vAYtWeChgK5B0iWcB5qtwaxslfq5XUnM1ni04CuEixD8Aneg7zTl4Xy7",
	"E2xl37HAfbBjumFxGg9A+5puGE/j4Wg70EPQvrZLd0AbQkb5EKxx4Q5I4/pBOFch96PM+FBOGz7vxGkL",
	"ehDWNdi9aGuhaTQA6XuzbjjKCHYIwlW4PejWTL2O+9hjpR5d8snKZykeKrzG6tMqr9C8NuPzRJUEvOGK",
	"GNcg1zRSu+TxV/lLaAV6pyLANWBMUOU+AhmXsOmj5KqM96DjrfK2hrh5ytV2MGuarlsp0LisM8WlcXZc",
	"n5sXCOP4szk0vCoOPLxnMbRr9goI8JBoFoOBOk+DBws25WyDPytN48QHW6YcdsH4NuXQi7DSVOpelOew",
	"ZBzju90Rr2lIsWHBrXFZHGVC3YMbyQLoVaVrp8BVQb+kRP5fMM/HlnpFbH93UYO0s8eov48Gu4/TaEVk",
	"qN/wYtJ0Hb5lnsBvaRLh9/5IfxEJWonMCpssn5EkTGUW+6NmZAzwqdq8Fkp3nZtYjpN2LYGYaQ3hbpsJ",
	"HjK+zFjRut/dikpU6Ly8qoBrosUeBELvZlulISaMByIGsgQOknYRNiFXmjCFD1QaGzSLutYCwNbjKsz6",
	"IS4923+YC8lR+gPMNs59N2bnu34A6FOnKtOwfr0G6erXt18/X5qfosiWtFuF4cMC8W7unnGiqDkCDVa2",
	"3GH+81G4rwe4cRWeuhfY17PvIvxBB2NVUjU/ULKaptH6dGtc9VyZCIb424xZDX6gXKAisw5VrB3O+yt9",
	"FtXspPeJlwKMMXLVWrI1cFv66xOZW5RT4eNjo0mw/1lcB7XzYdwAsPdp3I7K0OPYj0vTEr3rmi0411Zp",
	"D43Rl+Xdl1eFV6NhyLB69Xq38+oF40oO7fVDDrrkkoMV5UtQ5NVTqc/0JqdzN5JePpwdj0p49siqTNFw",
	"KgY51TIS40J3LON96l7toTW0r+Ug+9TVRnO9JXt2m8jQOR7XVBt4pFnEigZCf8233eM3Yfmz5vMwhLBH",
	"eNalUrOy4qzn24LAZs3TvJQ1TPmgHTJJcrKQIh64T0g1fGBS9VDytaLM+fmwMG9aNbRbZNYGodHLgti2",
	"rT/RPXeO6P4b5y7jK+9yk8i8wr2kZjHRK6rJHCKRmWDeEx1+xhq1IhKUbX2swFqChAVIRbRoq3cM0TUT",
	"g+6qagb2UE1D+Hsomj9YKJlQQ+MbqllXmIYcy1yqU+Wz8azP3LTsvMRZPcJ7uudj92JHNux4+TlFlRUL",
	"Yqup5HNb9bme6nb5v0qHyWWupXZN56ulpUXOe37zW5OEDyahH5NXh+Qv5FXRPSL/YtNHdQPyWnC9OqgV",
	"n1+/Jv9JDo/Im8OOLPv2y5WX0bmk+1FSmj5AJ052OqsoQOAp0I0eh41+v0ol75kEMuvICtdgMIC7t+Z7",
	"yBzso6K6hKLL/FZAJMSus5xFG2h2NAdDXjHuNn3duiumER9ooIX08towsEMUqijNe1xn3pB3FXxi1413",
	"MCK3wS5WlG32ubOJY9wuhLcph54sH4vFCa42gZwJT1BH2hs5t6BArvvgRrDAyDBb3eclywbcyHbLTqom",
	"laYj8nC1yZQaLU2tb9fapmZVTLriUWrW7PXMbrCmWcAOj05ODn9t8tk9IEk6j1hAHmDrDeohSI5OTh8O",
	"mwDyR50g6hF1Dm+co+ajpzTU4g8jvYbxQm2ZUhehzZPaqVXjITOI5jSdkKsJTPDPbNODLLjFf9sdXYfX",
	"zurCNyAD4Nr8+RuDKDwjlPOUmkBJp5ITUJrFWORMFc7lmQDwCeBBuTLomFjHRfB8S3loMyMTZmFESIOg",
	"FcmXaifp1OMjTeJonkEW/hkIYwKT5YRccjqPIByTmRBaaUkTL+i0M3Atci0MjHoRtZNAR8fd1NsA0K7F",
	"VvQTTXLYKI2j45WJOikPbWCIXAqBCxuV4/+TXqOyBlHGalhLrFC1nPUZo3w2WcxyeWaYWbS1kctXBdLD",
	"6AuzIosfUrOGvEo5e0whG9IEZdXPrOHL1/78h0Xb+00b9MowkW/owUQ0PXhe2zUVTDtg+ZDJQPShY8M9",
	"I45ZuvVpve3HpFuMXwYDu4MoaoWmIIoGg2ux7/sir5nTiPKgI4K4M7Glj0kOHeeABqGDsMIuUBBiPIeo",
	"/Y1GKbxuD0DakRqETIv6WAhOsY29J0bT/yOdTo9O80ngNph/Q/ttA1qjLBsxRntWbq+QKMYDdJZSt9Oe",
	"ZXntPMgS1n7hNCb0a56gsFqvAZYtqcLaQkxV7lSVoaKpDZNqmkVNLZv88Dq+0ojo/vX3EpSdS+/ld/eu",
	"unsRGFpwb2DQTEPqS9oGHu8ilnRHDS7Awfna+RZ1e0JmbOlO0BVd2zKSojGQJ5s8UkVUbAwC1/yja+7/",
	"iOK3FqjI74cNCFtWYVSB8acJM1yc0Aa5zf840PVApgm7HLpIlyA19zJBze5E2A206AG8Dw0V0MNo0DTq",
	"JqEsLPIXUqa6DWBnN700h2CUHCcQSo3zgTj3cKeiBznW7t9XtU1e79k+qahxVR8qnK2rZU3C3lPBtbnL",
	"jsbnCYsZd9/XeDCwsu6f91hnH1d2eVNcZZav8upYAxLjfVD0xqwTqR7sxe0bdced1dw78jHgaYwiTYPA",
	"flAlYZFWZk3r9anSS080sSnGA2CGkf0li9pMmE3Tj8ajJS1tMB6FIp1HYE4Xz27+MjkuKiU1+LGiYZQt",
	"iY9yxucC86lJIKwMaqdYnBm+v1DQ/z1B5ocdpLathx/OiKhHsFbNGhQsAPzidgezt8AJeeunmzgDvPKG",
	"g+ujUjj7alZ4tnEM2oZbzfqISV7vqVy2VIGy2HVGFVM3gvEhaJeB+kGMS2j5iNEbDyHu+0MfmrmI+yTr",
	"osRYeMFYHvYCcqxGPK8u+vmBq9y241HxHaVFqNjW/+EP4wuRfQNFAxQTxFjMG4WwVv+qV0LiN8QTIW1m",
	"36j3ZJ8h39ji4vnNFXlMQTJQ5P7jl9v35m0snFC+td8jKxIxbnLANaN4Xs7YQv7v/yjtviuHhEosMiyE",
	"jG31n85FqnEtd18UakHmQCTQEOsVa8oiOo8Au6iuzok1gQkGdAarhEoFqpwlEbQ71603AUYVYRMhA04W",
	"xlgsxxPljbK0ZV84G0Ri+mAnFt6EkAAPDdCMB0DVdpIzKRSgCBearEQUkkAyzQIcI8tJnZB7kddXML3L",
	"v7IzOJ0rAwc2Y1ebUSuRRiHuti2hHzIJgY62ePQxjd/TNgU1Go/WIJWV5XRyOplaRQVOEzY6G72dTCdT",
	"4+6pXqHiHqyPDkKB36ovfcMrd090uQR58CUBblj+djLNvyO2giwNdIogjY3qT1BLza9M8KtwdDb6K+gL",
	"EdizpXTxwdF06qlut2xZ3cl9s5bGMTXOyuxALhwCuK/hE10qY1HV3383Lxq67UforaR3fgZrFNd9xJ5R",
	"lFVIrRga9NtbC1o44PMf+bqD2oUHTcId7JwwmwoehCY3VwffzdH83Esn5n+2Qs7DLCA3AIrLIazprWmU",
	"giISEiGtCdsKMbX/gP36B2c/y2OkTY0ofxhjdFLSGDQWd/7uRxI3Um6ugimiGF9GRbGY4VgjRS5zaqLt",
	"LCop/KuWKYxLn4A2fLEnALWToWJBAhoFaUSzegzuh4ZabFiacGrfNAvPTmIMj1YilRgfGThPAA9ZbWY0",
	"Hj2mVGqcUtgCld4wrGGzJvjP81wjEutMqGqmuj4SjOPsRN+6Nkvs6XERixvalyB9OF2WsvvdMcI5kz+C",
	"z+/7mJ33Wpaq8bVenlKzxPK8bKcRQmOGGu3LelwIuw2q/vVIj0391Ow/q2a3XexTVe58nl9ChMdum3bn",
	"PfL/cmOtvWr+1Ha7itF4O09Z+yaEXLkJEmbDrcIkpIOZTWfaQUmPeTQmunc9c4oJ8wnJKClVhuxIKFuQ",
	"mClzMk1aZO7OpD+kdT9t989qu623I1WN91Nj1LzPim31vs9ylf9WDjW2PQPGfYfVDzDecidomN06ul7M",
	"an9Gjj9ttMVGfbfmVM3zDnsgbSaZtasHpKb2PpdaZppNVrvhjsy4HFhv7OhuAjt37+yVp9ZvE2smqvmN",
	"XFVCD747ZJ+Hk2wvmNBMaRYokoAsPjSsfpJR4UYH7W7orce5fLUDBh7QlavO5nx++G2zWB0tfzl5fLue",
	"6vDx5HTBYb053QQbHfCVVnGQnh7H/ry1gDk8df19f5nV77CrZzn2ei382iW7PM5JkBeD6btXUSqXiXkE",
	"455f2Me7E1e/9a2pkBkG7qIsRxOO5u5HkQihNJXpPcqyyd896KndEuehp75/RpMxjoPvWN/pN7KwEHg2",
	"jHfmikFu4HKMA3RZAHB+89uE+Ei9sYdmp0Wh2Rq1n1QsaPZ5Nrn/cv1l9ubw8rDFSFw354VNpHLFXZPl",
	"5cvnSpcs2jvoStzfz53XoIPORun9ruzGxU8/MvHPe3n9YQnYkVAconYzoSZmShUW0X09y/1F0nXO2Oli",
	"y4xMBpjH7WfV7nK8IhMsAkfsg0TV0TWvZHCGcy+rr94P2CT2rxY7u0FOra2iT7JL7zqJXqUxtR2SmAYr",
	"xm0bBrsvWTXe9RCqxf+WQN28MKjUv/e+TSYU22ZV/7vKG3nV3zYLO9jRGlW53pKbX/CQXgw39BjguT3d",
	"MYYxhiGJkERCwBIG7r4RviWMH2CPbGOyKttQ3v82VZ9hF0HGLlnNxUD8jj6cHh2fvn13cXn47tfT05PZ",
	"+du3R0ezX06PL2a/fng7nU4PP1y8fTc7vpxeHB2dT2enl+8vT89PZtN3v1ycz47bIvoNC3fD+JxvXWMj",
	"VXaIxkry1fuP51efJ3e/Xc++fHrdf/jUuedOnx0w+cLBSDoWEkgg4tg4dKMo+KWADSwNDFSMBkM7pjns",
	"DEfL2IaXiW5KYzjqCV0ybjt+EYuZbmFK9myHlMtdozY6O5nmF62NzqZDcsMSUmKxsOLwYZU/3AWtLkz2",
	"OrRKl5TWazVKVw4QoyTLWmiRBxbVk+b5+fn5/wIAAP//+0ueIF1eAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
