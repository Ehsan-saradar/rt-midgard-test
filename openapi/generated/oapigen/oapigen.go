// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64, Average bond of active nodes.
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64, Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64, Maxinum bond of active nodes.
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64, Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64, Median bond of active nodes.
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64, Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64, Minumum bond of active nodes.
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64, Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64, Total bond of active nodes.
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64, Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64, Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64, Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64, System income generated during the time interval. It is the sum of liquidity fees and block rewards.
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64, Total liquidity fees, converted to RUNE, collected during the time interval.
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistoryItemPool defines model for EarningsHistoryItemPool.
type EarningsHistoryItemPool struct {

	// Int64, Share of earnings sent to the pool during the time interval
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64, total deposits (liquidity additions) during the time interval
	Deposits string `json:"deposits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, total withdrawals during the time interval
	Withdrawals string `json:"withdrawals"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// Liquidity provider data for all the pools of a given member
	Pools []MemberPoolDetails `json:"pools"`
}

// MemberPoolDetails defines model for MemberPoolDetails.
type MemberPoolDetails struct {

	// Int64, total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// Int64, total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Int64, total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`
	BondingROI string `json:"bondingROI"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks).
	PoolActivationCountdown string  `json:"poolActivationCountdown"`
	PoolShareFactor         string  `json:"poolShareFactor"`
	StakingROI              *string `json:"stakingROI,omitempty"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64, Total Rune pooled in all pools.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64, Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NodeKey defines model for NodeKey.
type NodeKey struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Enabled, Bootstrap.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Daily active users (unique addresses interacting)
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Daily transactions
	DailyTx string `json:"dailyTx"`

	// Monthly active users
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Monthly transactions
	MonthlyTx string `json:"monthlyTx"`

	// Total buying transactions
	TotalAssetBuys string `json:"totalAssetBuys"`

	// Total selling transactions
	TotalAssetSells string `json:"totalAssetSells"`

	// Total RUNE balances
	TotalDepth string `json:"totalDepth"`

	// Total staking transactions
	TotalStakeTx string `json:"totalStakeTx"`

	// Total staked (in RUNE Value).
	TotalStaked string `json:"totalStaked"`

	// Total transactions
	TotalTx string `json:"totalTx"`

	// Total unique swappers & members
	TotalUsers string `json:"totalUsers"`

	// Total (in RUNE Value) of all assets swapped since start.
	TotalVolume string `json:"totalVolume"`

	// Total withdrawing transactions
	TotalWithdrawTx string `json:"totalWithdrawTx"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Int64, the average slip by swap. Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64, volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64, volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64, the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64, toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// TxDetails defines model for TxDetails.
type TxDetails struct {

	// Int64, Unix timestamp.
	Date   string `json:"date"`
	Events Event  `json:"events"`
	Height string `json:"height"`
	In     Tx     `json:"in"`
	Out    []Tx   `json:"out"`
	Pool   string `json:"pool"`
	Status string `json:"status"`
	Type   string `json:"type"`
}

// Coin defines model for coin.
type Coin struct {
	Amount string `json:"amount"`
	Asset  string `json:"asset"`
}

// Coins defines model for coins.
type Coins []Coin

// Event defines model for event.
type Event struct {
	Fee        string `json:"fee"`
	Slip       string `json:"slip"`
	StakeUnits string `json:"stakeUnits"`
}

// Option defines model for option.
type Option struct {
	Asymmetry           string `json:"asymmetry"`
	PriceTarget         string `json:"priceTarget"`
	WithdrawBasisPoints string `json:"withdrawBasisPoints"`
}

// Tx defines model for tx.
type Tx struct {
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`
	Memo    string `json:"memo"`
	Options Option `json:"options"`
	TxID    string `json:"txID"`
}

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse []string

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodeKeyResponse defines model for NodeKeyResponse.
type NodeKeyResponse []NodeKey

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse []PoolDetail

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// TxResponse defines model for TxResponse.
type TxResponse struct {

	// Int64, count of txs matching the filters.
	Count string      `json:"count"`
	Txs   []TxDetails `json:"txs"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval string `json:"interval"`

	// Start time of the query as unix timestamp
	From int64 `json:"from"`

	// End time of the query as unix timestamp
	To int64 `json:"to"`
}

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval string `json:"interval"`

	// Start time of the query as unix timestamp
	From int64 `json:"from"`

	// End time of the query as unix timestamp
	To int64 `json:"to"`
}

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing.
	Pool *int64 `json:"pool,omitempty"`

	// Interval of calculations
	Interval string `json:"interval"`

	// Start time of the query as unix timestamp
	From int64 `json:"from"`

	// End time of the query as unix timestamp
	To int64 `json:"to"`
}

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval string `json:"interval"`

	// Start time of the query as unix timestamp
	From int64 `json:"from"`

	// End time of the query as unix timestamp
	To int64 `json:"to"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Interval of calculations
	Status string `json:"status"`
}

// GetTxDetailsParams defines parameters for GetTxDetails.
type GetTxDetailsParams struct {

	// Address of sender or recipient of any in/out tx in event
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx in event
	Txid *string `json:"txid,omitempty"`

	// Any asset used in event (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of event
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+w823Lbuna/glH7kPQosq3Yzt5+qhU7J57Gicd2TmfP6W4HIpckxCRAA6AsNePf6g/0",
	"xzpYAO/gRdrxmc7svNkiuLDuWDfi+ygQcSI4cK1GZ99HElQiuAL85wISvfrIlBZye+semN8DwTVwbf6k",
	"SRKxgGom+ME3Jbj5TQUriKn5658lLEZno386KDY5sE/VQRn46Pn5eTwKQQWSJQbW6MxuTigPSSJZAGSV",
	"LR2PLqnkjC/VS6FWg+/DDtySMlofgUZ6tRc2iRQJSM0s30Oq6ZxaENVt72UKJAbKFVnhbtsxCQTnEGgI",
	"iRYkf3U80tsERmejuRARUG4QZPxuy4MhUCfkA41U9uM1C5dUhoQpojSLIhJQHawYX5I0MZvqFZBgRRn3",
	"7qoCyjnIj8CWK93c/Irr0+OxhZFKCVyTeSSCBxKIlOsCotKS8eXIiELCY8okhKOzv49KBFc3ysn9PQch",
	"5t8g0D5x3oJOZU4+UZrqVJGFkBnthpBP7DFlIdPbl9K7+gY+TP+d6VUo6RONFBpHCIlQTFcU8RriOcgL",
	"0JRF6odjWYHuQ9Gy2eilpsxYCYkywkgixZqFIFFRkcGUqAQCtmABiRFyQcF+uDMNsWrqmQVJaBhKUGo0",
	"HsGGxklk9ELP+fxo8W0aPX77JVzLkySNF8EqeMd1tHgMp+vT/w43j0/f4Glx0tTH/AcqJfWKDB8QsSA0",
	"ilDPLZ3KvPsZ9JOQDz9cSA5ul65TTpqScu+heBA/EcK/wfaPCaITUbvBED7uhPiNENEP56oBahXfh9+X",
	"BlKhNRLUc8GBJEJEGXLq5XhaRrOfreeZehrsMpTNi3ea6h/vPhDqBUppiOtYRmJOIzK7vLl7okkuXvPP",
	"S7nhEmwfjogHHk5jshZRGsOYLADQG6uIJWVPfL/5AeGAPQjbDk58asSnN4rE2cFs3MyCRRqkmnh91kYN",
	"Vqf7zUWhFDVtqh7G+ZG9UTsdu5ST3ElqSbmigVmhcAOHhsFyZgKDW3iiMlRNPs2Lp+bfBs1zwcOOxwl6",
	"jJbHNULLW1UAV8A0WTAezQQPr0FLFngooGuQdAnngWZrMCtbpX5uVxKzNR4t+ArhIgS/wB3oO015ON/u",
	"BFvZdyxwH+yYblicxgPQvqYbxtN4ONoO9BC0r+3SHdCGkFE+BGtcuAPSuH4QzlXI/SgzPpTThs87cdqC",
	"HoR1DXYv2lpoGg1A+t6sG44ygh2CcBVuD7o1U6/jPvZYqUeXfLLyWYqHCq+x+rTKKzSvzfg8USUBb7gi",
	"xjXINY3ULnn8Vf4SWoHeqQhwDRgTVLmPQMYlbPoouSrjPeh4q7ytIW6ecrUdzJqm61YKNC7rTHFpnB3X",
	"5+YFwjj+bA4Nr4oDD+9ZDO2avQICPCSaxWCgztPgwYJNOdvgz0rTOPHBlimHXTC+TTn0Iqw0lboX5Tks",
	"Gcf4bnfEaxpSbFhwa1wWR5lQ9+BGsgB6VenaKXBV0C8pkf8XzPOxpV4R299d1CDt7DHq76PB7uM0WhEZ",
	"6je8mDRdh2+ZJ/BbmkT4vT/SX0SCViKzwibLZyQJU5nF/qgZGQN8qjavhdJd5yaW46RdSyBmWkO422aC",
	"h4wvM1a07ne3ohIVOi+vKuCaaLEHgdC72VZpiAnjgYiBLIGDpF2ETciVJkzhA5XGBs2irrUAsPW4CrN+",
	"iEvP9h/mQnKU/gCzjXPfjdn5rh8A+tSpyjSsX69Buvr17dfPl+anKLIl7VZh+LBAvJu7Z5woao5Ag5Ut",
	"d5j/fBTu6wFuXIWn7gX29ey7CH/QwViVVM0PlKymabQ+3RpXPVcmgiH+NmNWgx8oF6jIrEMVa4fz/kqf",
	"RTU76X3ipQBjjFy1lmwN3Jb++kTmFuVU+PjYaBLsfxbXQe18GDcA7H0at6My9Dj249K0RO+6ZgvOtVXa",
	"Q2P0ZXn35VXh1WgYMqxevd7tvHrBuJJDe/2Qgy655GBF+RIUefVU6jO9yencjaSXD2fHoxKePbIqUzSc",
	"ikFOtYzEuNAdy3ifuld7aA3taznIPnW10VxvyZ7dJjJ0jsc11QYeaRaxooHQX/Nt9/hNWP6s+TwMIewR",
	"nnWp1KysOOv5tiCwWfM0L2UNUz5oh0ySnCykiAfuE1INH5hUPZR8rShzfj4szJtWDe0WmbVBaPSyILZt",
	"6090z50juv/Gucv4yrvcJDKvcC+pWUz0imoyh0hkJpj3RIefsUatiARlWx8rsJYgYQFSES3a6h1DdM3E",
	"oLuqmoE9VNMQ/h6K5g8WSibU0PiGatYVpiHHMpfqVPlsPOszNy07L3FWj/Ce7vnYvdiRDTtefk5RZcWC",
	"2Goq+dxWfa6nul3+r9JhcplrqV3T+WppaZHznt/81iThg0nox+TVEfkLeVV0j8i/2PRR3YC8FlyvDmrF",
	"59evyX+Soyl5c9SRZd9+ufIyOpd0P0pK0wfoxMlOZxUFCDwFutHjsNHvV6nkPZNAZh1Z4RoMBnD31nwP",
	"mYN9VFSXUHSZ3wqIhNh1lrNoA82O5mDIK8bdpq9bd8U04gMNtJBeXhsGdohCFaV5j+vMG/Kugk/suvEO",
	"RuQ22MWKss0+dzZxjNuF8Dbl0JPlY7E4wdUmkDPhCepIeyPnFhTIdR/cCBYYGWar+7xk2YAb2W7ZSdWk",
	"0nREHq42mVKjpan17Vrb1KyKSVc8Ss2avZ7ZDdY0C9jh9OTk6Ncmn90DkqTziAXkAbbeoB6CZHpy+nDU",
	"BJA/6gRRj6hzeOMcNR89paEWfxjpNYwXasuUughtntROrRoPmUE0p+mEXE1ggn9mmx5kwS3+2+7oOrx2",
	"Vhe+ARkA1+bP3xhE4RmhnKfUBEo6lZyA0izGImeqcC7PBIBPAA/KlUHHxDougudbykObGZkwCyNCGgSt",
	"SL5UO0mnHh9pEkfzDLLwz0AYE5gsJ+SS03kE4ZjMhNBKS5p4QaedgWuRa2Fg1IuonQSaHndTbwNAuxZb",
	"0U80yWGjNKbHKxN1Uh7awBC5FAIXNirH/ye9RmUNoozVsJZYoWo56zNG+WyymOXyzDCzaGsjl68KpIfR",
	"F2ZFFj+kZg15lXL2mEI2pAnKqp9Zw5ev/fkPi7b3mzbolWEi39CDiWh68Ly2ayqYdsDyIZOB6EPHhntG",
	"HLN069N6249Jtxi/DAZ2B1HUCk1BFA0G12Lf90VeM6cR5UFHBHFnYksfkxw6zgENQgdhhV2gIMR4DlH7",
	"G41SeN0egLQjNQiZFvWxEJxiG3tPjKb/R3p4OD3NJ4HbYP4N7bcNaI2ybMQY7Vm5vUKiGA/QWUrdTnuW",
	"5bXzIEtY+4XTmNCveYLCar0GWLakCmsLMVW5U1WGiqY2TKppFjW1bPLD6/hKI6L7199LUHYuvZff3bvq",
	"7kVgaMG9gUEzDakvaRt4vItY0h01uAAH52vnW9TtCZmxpTtBV3Rty0iKxkCebPJIFVGxMQhc84+uuf8j",
	"it9aoCK/HzYgbFmFUQXGnybMcHFCG+Q2/+NA1wOZJuxy6CJdgtTcywQ1uxNhN9CiB/A+NFRAD6NB06ib",
	"hLKwyF9Imeo2gJ3d9NIcglFynEAoNc4H4tzDnYoe5Fi7f1/VNnm9Z/ukosZVfahwtq6WNQl7TwXX5i47",
	"Gp8nLGbcfV/jwcDKun/eY519XNnlTXGVWb7Kq2MNSIz3QdEbs06kerAXt2/UHXdWc+/Ix4CnMYo0DQL7",
	"QZWERVqZNa3Xp0ovPdHEphgPgBlG9pcsajNhNk0/Go+WtLTBeBSKdB6BOV08u/nL5LiolNTgx4qGUbYk",
	"PsoZnwvMpyaBsDKonWJxZvj+QkH/9wSZH3aQ2rYefjgjoh7BWjVrULAA8IvbHczeAifkrZ9u4gzwyhsO",
	"ro9K4eyrWeHZxjFoG2416yMmeb2nctlSBcpi1xlVTN0IxoegXQbqBzEuoeUjRm88hLjvD31o5iLuk6yL",
	"EmPhBWN52AvIsRrxvLro5weuctuOR8V3lBahYlv/hz+ML0T2DRQNUEwQYzFvFMJa/ateCYnfEE+EtJl9",
	"o96TfYZ8Y4uL5zdX5DEFyUCR+49fbt+bt7FwQvnWfo+sSMS4yQHXjOJ5OWML+b//o7T7rhwSKrHIsBAy",
	"ttV/OhepxrXcfVGoBZkDkUBDrFesKYvoPALsoro6J9YEJhjQGawSKhWocpZE0O5ct94EGFWETYQMOFkY",
	"Y7EcT5Q3ytKWfeFsEInpg51YeBNCAjw0QDMeAFXbSc6kUIAiXGiyElFIAsk0C3CMLCd1Qu5FXl/B9C7/",
	"ys7gdK4MHNiMXW1GrUQahbjbtoR+yCQEOtri0cc0fk/bFNRoPFqDVFaW08nh5PANjZIVnRxZhQVOEzY6",
	"G701j4zbp3qFCnywnh6EAr9ZX/qGWO6e6HIJ8uBLAtyw/u3kMP+e2Aq0NNgpgjQ2JjBBbTW/MsGvwtHZ",
	"6K+gL0Rgz5jSBQjTw0NPlbtly+pO7tu1NI6pcVpmB3LhEMB9Db/oUhnLqv7+u3nR0G0/Rm8lvfNzWKPA",
	"7mP2jKKsUmrF0aDf3l7QwgGfH8nXHdQuPmgS7mDnhNmU8CA0Obo6+G6O6OdeOjEPtJVyHmaBuQFQXBJh",
	"TXBNoxQUkZAIaU3ZVoqp/QfsV0A4A1oeJ21qRPkDGaOTksagscjzdz+SuJFy8xVMEcX4MiqKxgzHGyly",
	"mVMTdWfRSeFntUxhXPoUtOGTPYGonRAVCxLQKEgjmtVlcD802GLD0qRT+6ZZmHYSY5i0EqnEOMnAeQJ4",
	"yGo0o/HoMaVS47TCFqj0hmMNmzVJQJ7vGpFYp0JVM+X1kWAcaCf61sVZYk+Pi5jc0L4E6cPpspTl744R",
	"zpv8EXx+38fsvNezVI2v9RKVmiWW52Y7jRAas9RoX9bjQthtUPWvSHps6qdm/1k1u+2Cn6py53P9EiI8",
	"dtu0O++V/5cbb+1V86e2W1aMxtu5ytq3IeTKTZIwG3YVJiEdzGxK0w5MesyjMdm965lTTJpPSEZJqUJk",
	"R0PZgsRMmZNp0iJzdyb9Ia37abt/VtttvSWparyfGiPnfVZsq/h9lqv8t3Oose0dMO47rH6A8ZY7QsPs",
	"1tH1Ylb7M3L8aaMtNuq7PadqnnfYC2kzyaxtPSA1tfe61DLTbMLaDXlkxuXAemNHdyPYuXtnrzy1fqtY",
	"M1HNb+aqEnrw3SH7PJxke9GEZkqzQJEEZPHBYfXTjAo3Omh3w289zuWrHTTwgK5ceTbn86Nvm8Vquvzl",
	"5PHt+lCHjyenCw7rzekm2OiAr7SKg/T0OPbnrQXM4anr7/vLrH6XXT3Lsdds4Vcv2SVyToK8GFDfvYpS",
	"uVTMIxj3/MI+3p24+u1vTYXMMHAXZjmacER3P4pECKXpTO9Rlk0A70FP7bY4Dz31/TOajHEcfMf6Tr+R",
	"hYXAs6G8M1cMcoOXYxykywKA85vfJsRH6o09NDstCs3WqP2kYkGzz7PJ/ZfrL7M3R5dHLUbiujovbCKV",
	"q+6aLC9fQle6bNHeRVfi/n7uvAYddDZS73dlNy5++pGJf97T6w9LwI6G4jC1mw01MVOqsJju613uL5Ku",
	"c8ZOGVtmZDLAPG4/q3aX5BWZYBE4Yj8kqo6weSWDs5x7WX31nsAmsX+12NkNcmptFX2SXX7XSfQqjant",
	"lMQ0WDFu2zHYhcmq8a6HUC3+twTq5oVBpf69920yodg2q/rfVd7Iq/62adjBjtaoyvWY3ByDh/RiyKHH",
	"AM/t6Y4xjDEMSYQkEgKWMHD3jvAtYfwAe2Ubk1XZxvL+t6r6DLsIMnbJai4G4jf9cDo9Pn377uLy6N2v",
	"p6cns/O3b6fT2S+nxxezXz+8PTw8PPpw8fbd7Pjy8GI6PT+cnV6+vzw9P5kdvvvl4nx23BbRb1i4G8bn",
	"fOsaG6mywzRWkq/efzy/+jy5++169uXT6/7Dp849d/rsgMkXDkbSsZBAAhHHxqEbRcEvBmxgaWCgYjQY",
	"2jHVYWc5WsY3vEx00xrDUU/oknHb8YtYzHQLU7JnO6Rc7jq10dnJYX7h2ujscEhuWEJKLBZWHD6s8oe7",
	"oNWFyV6HVumy0nqtRunKAWKUZFkLLfLAonrSPD8/P/9fAAAA///v1TTuZV4AAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
