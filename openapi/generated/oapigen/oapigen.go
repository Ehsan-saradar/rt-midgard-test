// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {

	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Represents a digital currency amount
type Coin struct {

	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, The liquidity unit value index. Sqrt(assetDepth * runeDepth)/liquidity units
	Luvi string `json:"luvi"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval at time endTime
	EndAssetDepth string `json:"endAssetDepth"`

	// Int64, Liquidity Units in the pool at the end of the interval at time endTime
	EndLiquidityUnits string `json:"endLiquidityUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval at time endTime
	EndRuneDepth string `json:"endRuneDepth"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, The liquidity unit value index increase between the first and last depth item
	LuviIncrease string `json:"luviIncrease"`

	// Float, The impermanent loss between the first and last depth item
	PriceShiftLoss string `json:"priceShiftLoss"`

	// Int64(e8), the amount of Asset in the pool at the start of the interval at time startTime
	StartAssetDepth string `json:"startAssetDepth"`

	// Int64, Liquidity Units in the pool at the start of the interval at time startTime
	StartLiquidityUnits string `json:"startLiquidityUnits"`

	// Int64(e8), the amount of Rune in the pool at the start of the interval at time startTime
	StartRuneDepth string `json:"startRuneDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {

	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync         bool     `json:"inSync"`
	LastAggregated HeightTS `json:"lastAggregated"`
	LastCommitted  HeightTS `json:"lastCommitted"`
	LastFetched    HeightTS `json:"lastFetched"`
	LastThorNode   HeightTS `json:"lastThorNode"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// HeightTS defines model for HeightTS.
type HeightTS struct {

	// Block height
	Height int `json:"height"`

	// Block timestamp (seconds since epoch)
	Timestamp int `json:"timestamp"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string  `json:"address"`
	Chain   string  `json:"chain"`
	GasRate *string `json:"gas_rate,omitempty"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                    int64  `json:"AsgardSize"`
	BadValidatorRate              int64  `json:"BadValidatorRate"`
	BadValidatorRedline           int    `json:"BadValidatorRedline"`
	BlocksPerYear                 int64  `json:"BlocksPerYear"`
	ChurnInterval                 int64  `json:"ChurnInterval"`
	ChurnRetryInterval            int64  `json:"ChurnRetryInterval"`
	DesiredValidatorSet           int64  `json:"DesiredValidatorSet"`
	DoubleSignMaxAge              int64  `json:"DoubleSignMaxAge"`
	EmissionCurve                 int64  `json:"EmissionCurve"`
	FailKeygenSlashPoints         int64  `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints        int64  `json:"FailKeysignSlashPoints"`
	FullImpLossProtectionBlocks   int64  `json:"FullImpLossProtectionBlocks"`
	FundMigrationInterval         int64  `json:"FundMigrationInterval"`
	IncentiveCurve                int64  `json:"IncentiveCurve"`
	JailTimeKeygen                int64  `json:"JailTimeKeygen"`
	JailTimeKeysign               int64  `json:"JailTimeKeysign"`
	LackOfObservationPenalty      int64  `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks         int64  `json:"LiquidityLockUpBlocks"`
	MaxAvailablePools             int64  `json:"MaxAvailablePools"`
	MaxSwapsPerBlock              int64  `json:"MaxSwapsPerBlock"`
	MinRunePoolDepth              int64  `json:"MinRunePoolDepth"`
	MinSlashPointsForBadValidator int64  `json:"MinSlashPointsForBadValidator"`
	MinSwapsPerBlock              int64  `json:"MinSwapsPerBlock"`
	MinimumBondInRune             int64  `json:"MinimumBondInRune"`
	MinimumNodesForBFT            int64  `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil      int64  `json:"MinimumNodesForYggdrasil"`
	NativeTransactionFee          int64  `json:"NativeTransactionFee"`
	NewPoolCycle                  *int64 `json:"NewPoolCycle,omitempty"`
	ObservationDelayFlexibility   int64  `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints            int64  `json:"ObserveSlashPoints"`
	OldValidatorRate              int64  `json:"OldValidatorRate"`
	OutboundTransactionFee        int64  `json:"OutboundTransactionFee"`
	PoolCycle                     int64  `json:"PoolCycle"`
	SigningTransactionPeriod      int64  `json:"SigningTransactionPeriod"`
	VirtualMultSynths             int64  `json:"VirtualMultSynths"`
	YggFundLimit                  int64  `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock []LastblockItem

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn int64  `json:"last_observed_in"`
	LastSignedOut  int64  `json:"last_signed_out"`
	Thorchain      int64  `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {

	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// ObservedChain defines model for ObservedChain.
type ObservedChain struct {
	Chain  string `json:"chain"`
	Height int    `json:"height"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`
	Asset                  string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Int64, number of unique adresses that initiated swaps transactions in the period.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// PreflightStatus defines model for PreflightStatus.
type PreflightStatus struct {
	Code   int    `json:"code"`
	Reason string `json:"reason"`
	Status string `json:"status"`
}

// ProxiedNode defines model for ProxiedNode.
type ProxiedNode struct {
	ActiveBlockHeight int    `json:"active_block_height"`
	Bond              string `json:"bond"`
	BondAddress       string `json:"bond_address"`
	CurrentAward      string `json:"current_award"`
	ForcedToLeave     bool   `json:"forced_to_leave"`
	IpAddress         string `json:"ip_address"`
	Jail              struct {
		NodeAddress *string `json:"node_address,omitempty"`
	} `json:"jail"`
	LeaveHeight     int             `json:"leave_height"`
	NodeAddress     string          `json:"node_address"`
	ObserveChains   []ObservedChain `json:"observe_chains"`
	PreflightStatus PreflightStatus `json:"preflight_status"`
	PubKeySet       struct {
		Ed25519   string `json:"ed25519"`
		Secp256k1 string `json:"secp256k1"`
	} `json:"pub_key_set"`
	RequestedToLeave    bool     `json:"requested_to_leave"`
	SignerMembership    []string `json:"signer_membership"`
	SlashPoints         int      `json:"slash_points"`
	Status              string   `json:"status"`
	StatusSince         int      `json:"status_since"`
	ValidatorConsPubKey string   `json:"validator_cons_pub_key"`
	Version             string   `json:"version"`
}

// ProxiedNodes defines model for ProxiedNodes.
type ProxiedNodes []ProxiedNode

// Queue defines model for Queue.
type Queue struct {
	Internal int `json:"internal"`
	Outbound int `json:"outbound"`
	Swap     int `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, unique users (addresses) initiating swaps in the last 24 hours.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, unique users (addresses) initiating swaps in the last 30 days.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Int64, unique users (addresses) initiating swaps since beginning.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {

	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {

	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at the end of the interval
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ProxiedNodesResponse defines model for ProxiedNodesResponse.
type ProxiedNodesResponse ProxiedNodes

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {

	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"UaqHQHpHB9++ffv2/wMAAP//FgbJ5zn5AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
