// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {

	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Represents a digital currency amount
type Coin struct {

	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {

	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string  `json:"address"`
	Chain   string  `json:"chain"`
	GasRate *string `json:"gas_rate,omitempty"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                    int64  `json:"AsgardSize"`
	BadValidatorRate              int64  `json:"BadValidatorRate"`
	BadValidatorRedline           int    `json:"BadValidatorRedline"`
	BlocksPerYear                 int64  `json:"BlocksPerYear"`
	ChurnInterval                 int64  `json:"ChurnInterval"`
	ChurnRetryInterval            int64  `json:"ChurnRetryInterval"`
	DesiredValidatorSet           int64  `json:"DesiredValidatorSet"`
	DoubleSignMaxAge              int64  `json:"DoubleSignMaxAge"`
	EmissionCurve                 int64  `json:"EmissionCurve"`
	FailKeygenSlashPoints         int64  `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints        int64  `json:"FailKeysignSlashPoints"`
	FullImpLossProtectionBlocks   int64  `json:"FullImpLossProtectionBlocks"`
	FundMigrationInterval         int64  `json:"FundMigrationInterval"`
	IncentiveCurve                int64  `json:"IncentiveCurve"`
	JailTimeKeygen                int64  `json:"JailTimeKeygen"`
	JailTimeKeysign               int64  `json:"JailTimeKeysign"`
	LackOfObservationPenalty      int64  `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks         int64  `json:"LiquidityLockUpBlocks"`
	MaxAvailablePools             int64  `json:"MaxAvailablePools"`
	MaxSwapsPerBlock              int64  `json:"MaxSwapsPerBlock"`
	MinRunePoolDepth              int64  `json:"MinRunePoolDepth"`
	MinSlashPointsForBadValidator int64  `json:"MinSlashPointsForBadValidator"`
	MinSwapsPerBlock              int64  `json:"MinSwapsPerBlock"`
	MinimumBondInRune             int64  `json:"MinimumBondInRune"`
	MinimumNodesForBFT            int64  `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil      int64  `json:"MinimumNodesForYggdrasil"`
	NativeTransactionFee          int64  `json:"NativeTransactionFee"`
	NewPoolCycle                  *int64 `json:"NewPoolCycle,omitempty"`
	ObservationDelayFlexibility   int64  `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints            int64  `json:"ObserveSlashPoints"`
	OldValidatorRate              int64  `json:"OldValidatorRate"`
	OutboundTransactionFee        int64  `json:"OutboundTransactionFee"`
	PoolCycle                     int64  `json:"PoolCycle"`
	SigningTransactionPeriod      int64  `json:"SigningTransactionPeriod"`
	VirtualMultSynths             int64  `json:"VirtualMultSynths"`
	YggFundLimit                  int64  `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock struct {
	Current []LastblockItem `json:"current"`
}

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn int64  `json:"last_observed_in"`
	LastSignedOut  int64  `json:"last_signed_out"`
	Thorchain      int64  `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`
	PoolShareFactor         string `json:"poolShareFactor"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), Total Rune pooled in all pools
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// ObservedChain defines model for ObservedChain.
type ObservedChain struct {
	Chain  string `json:"chain"`
	Height int    `json:"height"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolLegacyDetail defines model for PoolLegacyDetail.
type PoolLegacyDetail struct {
	Asset string `json:"asset"`

	// same as assetDepth from pool/stats
	AssetDepth string `json:"assetDepth"`

	// same as addAssetLiquidityVolume from pool/stats
	AssetStakedTotal string `json:"assetStakedTotal"`

	// same as toAssetCount from pool/stats
	BuyAssetCount string `json:"buyAssetCount"`

	// same as toAssetFees / toAssetCount from pool/stats
	BuyFeeAverage string `json:"buyFeeAverage"`

	// same as toAssetFees from pool/stats
	BuyFeesTotal string `json:"buyFeesTotal"`

	// same as toAssetAverageSlip from pool/stats
	BuySlipAverage string `json:"buySlipAverage"`

	// same as toAssetVolume / toAssetCount from pool/stats
	BuyTxAverage string `json:"buyTxAverage"`

	// same as toAssetVolume from pool/stats
	BuyVolume string `json:"buyVolume"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// same as 2*runeDepth from pool/stats
	PoolDepth string `json:"poolDepth"`

	// same as totalFees / swapCount from pool/stats
	PoolFeeAverage string `json:"poolFeeAverage"`

	// same as totalFees from pool/stats
	PoolFeesTotal string `json:"poolFeesTotal"`

	// same as averageSlip from pool/stats
	PoolSlipAverage string `json:"poolSlipAverage"`

	// same as addLiquidityVolume from pool/stats
	PoolStakedTotal string `json:"poolStakedTotal"`

	// same as swapVolume / swapCount from pool/stats
	PoolTxAverage string `json:"poolTxAverage"`

	// same as units from pool/stats
	PoolUnits string `json:"poolUnits"`

	// Int64(e8), same as buyVolume + sellVolume
	PoolVolume string `json:"poolVolume"`

	// same as assetPrice from pool/stats
	Price string `json:"price"`

	// same as runeDepth from pool/stats
	RuneDepth string `json:"runeDepth"`

	// same as addRuneLiquidityVolume from pool/stats
	RuneStakedTotal string `json:"runeStakedTotal"`

	// same as toRuneCount from pool/stats
	SellAssetCount string `json:"sellAssetCount"`

	// same as toRuneFees / toRuneCount from pool/stats
	SellFeeAverage string `json:"sellFeeAverage"`

	// same as toRuneFees from pool/stats
	SellFeesTotal string `json:"sellFeesTotal"`

	// same as toRuneAverageSlip from pool/stats
	SellSlipAverage string `json:"sellSlipAverage"`

	// same as toRuneVolume / toRuneCount from pool/stats
	SellTxAverage string `json:"sellTxAverage"`

	// same as toRuneVolume from pool/stats
	SellVolume string `json:"sellVolume"`

	// same as addLiquidityCount from pool/stats
	StakeTxCount string `json:"stakeTxCount"`

	// same as uniqueMemberCount from pool/stats
	StakersCount string `json:"stakersCount"`

	// same as addLiquidityCount + withdrawCount from pool/stats
	StakingTxCount string `json:"stakingTxCount"`

	// same as status from pool/stats
	Status string `json:"status"`

	// Int64, same as history/swaps:uniqueSwapperCount
	SwappersCount string `json:"swappersCount"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64(e8), same as swapVolume pool/stats?period=24h
	Volume24h string `json:"volume24h"`

	// same as withdrawCount from pool/stats
	WithdrawTxCount string `json:"withdrawTxCount"`
}

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`
	Asset                  string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Int64, number of unique adresses that initiated swaps transactions in the period.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Liquidity Units in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// PreflightStatus defines model for PreflightStatus.
type PreflightStatus struct {
	Code   int    `json:"code"`
	Reason string `json:"reason"`
	Status string `json:"status"`
}

// ProxiedNode defines model for ProxiedNode.
type ProxiedNode struct {
	ActiveBlockHeight int    `json:"active_block_height"`
	Bond              string `json:"bond"`
	BondAddress       string `json:"bond_address"`
	CurrentAward      string `json:"current_award"`
	ForcedToLeave     bool   `json:"forced_to_leave"`
	IpAddress         string `json:"ip_address"`
	Jail              struct {
		NodeAddress *string `json:"node_address,omitempty"`
	} `json:"jail"`
	LeaveHeight     int             `json:"leave_height"`
	NodeAddress     string          `json:"node_address"`
	ObserveChains   []ObservedChain `json:"observe_chains"`
	PreflightStatus PreflightStatus `json:"preflight_status"`
	PubKeySet       struct {
		Ed25519   string `json:"ed25519"`
		Secp256k1 string `json:"secp256k1"`
	} `json:"pub_key_set"`
	RequestedToLeave    bool     `json:"requested_to_leave"`
	SignerMembership    []string `json:"signer_membership"`
	SlashPoints         int      `json:"slash_points"`
	Status              string   `json:"status"`
	StatusSince         int      `json:"status_since"`
	ValidatorConsPubKey string   `json:"validator_cons_pub_key"`
	Version             string   `json:"version"`
}

// ProxiedNodes defines model for ProxiedNodes.
type ProxiedNodes []ProxiedNode

// Queue defines model for Queue.
type Queue struct {
	Internal int `json:"internal"`
	Outbound int `json:"outbound"`
	Swap     int `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, unique users (addresses) initiating swaps in the last 24 hours.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, unique users (addresses) initiating swaps in the last 30 days.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Int64, unique users (addresses) initiating swaps since beginning.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip by swap.
	// Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps to asset denoted in rune
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps to rune
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64(e8), toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// Transaction data
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolLegacyResponse defines model for PoolLegacyResponse.
type PoolLegacyResponse PoolLegacyDetail

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ProxiedNodesResponse defines model for ProxiedNodesResponse.
type ProxiedNodesResponse ProxiedNodes

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/wUAAP//Kf1Uis3dAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
