// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {
	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {
	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {
	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Represents a digital currency amount
type Coin struct {
	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {
	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {
	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {
	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {
	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {
	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string  `json:"address"`
	Chain   string  `json:"chain"`
	GasRate *string `json:"gas_rate,omitempty"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                    int64  `json:"AsgardSize"`
	BadValidatorRate              int64  `json:"BadValidatorRate"`
	BadValidatorRedline           int    `json:"BadValidatorRedline"`
	BlocksPerYear                 int64  `json:"BlocksPerYear"`
	ChurnInterval                 int64  `json:"ChurnInterval"`
	ChurnRetryInterval            int64  `json:"ChurnRetryInterval"`
	DesiredValidatorSet           int64  `json:"DesiredValidatorSet"`
	DoubleSignMaxAge              int64  `json:"DoubleSignMaxAge"`
	EmissionCurve                 int64  `json:"EmissionCurve"`
	FailKeygenSlashPoints         int64  `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints        int64  `json:"FailKeysignSlashPoints"`
	FullImpLossProtectionBlocks   int64  `json:"FullImpLossProtectionBlocks"`
	FundMigrationInterval         int64  `json:"FundMigrationInterval"`
	IncentiveCurve                int64  `json:"IncentiveCurve"`
	JailTimeKeygen                int64  `json:"JailTimeKeygen"`
	JailTimeKeysign               int64  `json:"JailTimeKeysign"`
	LackOfObservationPenalty      int64  `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks         int64  `json:"LiquidityLockUpBlocks"`
	MaxAvailablePools             int64  `json:"MaxAvailablePools"`
	MaxSwapsPerBlock              int64  `json:"MaxSwapsPerBlock"`
	MinRunePoolDepth              int64  `json:"MinRunePoolDepth"`
	MinSlashPointsForBadValidator int64  `json:"MinSlashPointsForBadValidator"`
	MinSwapsPerBlock              int64  `json:"MinSwapsPerBlock"`
	MinimumBondInRune             int64  `json:"MinimumBondInRune"`
	MinimumNodesForBFT            int64  `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil      int64  `json:"MinimumNodesForYggdrasil"`
	NativeTransactionFee          int64  `json:"NativeTransactionFee"`
	NewPoolCycle                  *int64 `json:"NewPoolCycle,omitempty"`
	ObservationDelayFlexibility   int64  `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints            int64  `json:"ObserveSlashPoints"`
	OldValidatorRate              int64  `json:"OldValidatorRate"`
	OutboundTransactionFee        int64  `json:"OutboundTransactionFee"`
	PoolCycle                     int64  `json:"PoolCycle"`
	SigningTransactionPeriod      int64  `json:"SigningTransactionPeriod"`
	VirtualMultSynths             int64  `json:"VirtualMultSynths"`
	YggFundLimit                  int64  `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock []LastblockItem

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn int64  `json:"last_observed_in"`
	LastSignedOut  int64  `json:"last_signed_out"`
	Thorchain      int64  `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {
	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {
	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {
	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`
	PoolShareFactor         string `json:"poolShareFactor"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), Total Rune pooled in all pools
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {
	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// OHLCVHistory defines model for OHLCVHistory.
type OHLCVHistory struct {
	Intervals OHLCVHistoryIntervals `json:"intervals"`
	Meta      OHLCVHistoryMeta      `json:"meta"`
}

// OHLCVHistoryIntervals defines model for OHLCVHistoryIntervals.
type OHLCVHistoryIntervals []OHLCVHistoryItem

// OHLCVHistoryItem defines model for OHLCVHistoryItem.
type OHLCVHistoryItem struct {
	// Float, close price of asset in USD
	ClosePrice string `json:"closePrice"`

	// Int64, The end time of bucket in unix timestamp
	CloseTime string `json:"closeTime"`

	// Float, high price of asset in USD
	HighPrice string `json:"highPrice"`

	// Int64, The high time of bucket in unix timestamp
	HighTime string `json:"highTime"`

	// Int64, Liquidty is USD
	Liquidity string `json:"liquidity"`

	// Float, low price of asset in USD
	LowPrice string `json:"lowPrice"`

	// Int64, The low time of bucket in unix timestamp
	LowTime string `json:"lowTime"`

	// Float, open price of asset in USD
	OpenPrice string `json:"openPrice"`

	// Int64, The beginning time of bucket in unix timestamp
	OpenTime string `json:"openTime"`

	// Int64, Volume in USD
	Volume string `json:"volume"`
}

// OHLCVHistoryMeta defines model for OHLCVHistoryMeta.
type OHLCVHistoryMeta struct {
	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// ObservedChain defines model for ObservedChain.
type ObservedChain struct {
	Chain  string `json:"chain"`
	Height int    `json:"height"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {
	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`
	Asset                  string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Int64, number of unique adresses that initiated swaps transactions in the period.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// PreflightStatus defines model for PreflightStatus.
type PreflightStatus struct {
	Code   int    `json:"code"`
	Reason string `json:"reason"`
	Status string `json:"status"`
}

// ProxiedNode defines model for ProxiedNode.
type ProxiedNode struct {
	ActiveBlockHeight int    `json:"active_block_height"`
	Bond              string `json:"bond"`
	BondAddress       string `json:"bond_address"`
	CurrentAward      string `json:"current_award"`
	ForcedToLeave     bool   `json:"forced_to_leave"`
	IpAddress         string `json:"ip_address"`
	Jail              struct {
		NodeAddress *string `json:"node_address,omitempty"`
	} `json:"jail"`
	LeaveHeight     int             `json:"leave_height"`
	NodeAddress     string          `json:"node_address"`
	ObserveChains   []ObservedChain `json:"observe_chains"`
	PreflightStatus PreflightStatus `json:"preflight_status"`
	PubKeySet       struct {
		Ed25519   string `json:"ed25519"`
		Secp256k1 string `json:"secp256k1"`
	} `json:"pub_key_set"`
	RequestedToLeave    bool     `json:"requested_to_leave"`
	SignerMembership    []string `json:"signer_membership"`
	SlashPoints         int      `json:"slash_points"`
	Status              string   `json:"status"`
	StatusSince         int      `json:"status_since"`
	ValidatorConsPubKey string   `json:"validator_cons_pub_key"`
	Version             string   `json:"version"`
}

// ProxiedNodes defines model for ProxiedNodes.
type ProxiedNodes []ProxiedNode

// Queue defines model for Queue.
type Queue struct {
	Internal int `json:"internal"`
	Outbound int `json:"outbound"`
	Swap     int `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {
	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// StatsData defines model for StatsData.
type StatsData struct {
	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, unique users (addresses) initiating swaps in the last 24 hours.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, unique users (addresses) initiating swaps in the last 30 days.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Int64, unique users (addresses) initiating swaps since beginning.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {
	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {
	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {
	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {
	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {
	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at the end of the interval
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {
	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {
	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// OHLCVHistoryResponse defines model for OHLCVHistoryResponse.
type OHLCVHistoryResponse OHLCVHistory

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ProxiedNodesResponse defines model for ProxiedNodesResponse.
type ProxiedNodesResponse ProxiedNodes

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {
	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {
	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {
	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {
	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetOHLCVHistoryParams defines parameters for GetOHLCVHistory.
type GetOHLCVHistoryParams struct {
	// Interval of calculations
	Interval *GetOHLCVHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetOHLCVHistoryParamsInterval defines parameters for GetOHLCVHistory.
type GetOHLCVHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {
	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {
	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {
	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {
	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {
	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"b8n+eE+FLK7rOtVCmiVOBKKRcpemlET6Sm95eF2eQ/SyXDSq/mQQ713D9vnafARPTsFZFJGor8pQUyiv",
	"BoJWnKxsBZe2ROmz8tTNd8BvqIJypXsnK+fSYXvqtbkAuv5WB5zzT3KJGLfIr4gMEFUCFMdoQsyvyznR",
	"ah8EM8U0QzjL6IKIFrNCgbdleVhv+pU6BrIM+lExwpK8oZnoXKsA/VjZLIrEianqqfWYuctZGjWUOUvZ",
	"NrTy4bYaWbkw2w7cMyUdiFe/wirnWKIJibnV4Z0c5U8+URKDMiIKcwnSdTIyVSIueZvR0VeaQK1vKEwG",
	"vl+WLMANRAl0ZQ9JAtCbC5Jm+PWSpNDYRJBqe3VvOfInn7hErekrT4J4ucSBqz2rtKwpqfoMG7qjIeB1",
	"sWvX61U3uEq4D+bidjEb54R/wib706/j+O7ri2iRHaV5Mg3n4QmT8fQuGi+Of4vu75ZfyXJ6NAjW1wVo",
	"v41euVe/rvCj7377t+Li/dq6NKqV2w+u9vcotuL2KS7+r+lnF6/s+82zRrbQl7cmpr77WV3AtZTWHTvy",
	"vo1a/FiY0fqaqS5a1Cepu/MSoNvW5Gc7V9277w+WTcvM7rPLn1u9s5199B3aKW/eo7/rPCVxSbIPnMn5",
	"Xu1W7u4u+r9of4y+3+/cT9aPKSS+JZ2D6vqUZS49mF/d4zNyLyH8vyYvS7VzSqpMbHjcu23B5CHUDOwQ",
	"8VYFqr3djCSmCo91NbVjW4BBO5SZMVsTNSHr+w0OzXmqz+u1d449Wqko7mWuJiPdbsMyJKrnJlJgB/vY",
	"eZVc7fkkWpsb+aXchlLoofw05RFUKn40oH8mEN7tk9tOpuD92x7rtjJXDhtp0K6uqS1OU594iNukTW0+",
	"Td5uZ84mB1V0QU1Mf2nXqf482femyBgzlRL1tQoheEht0R3MTBGYIfrEiNsS6SS6bEaiMr/fV6emr//W",
	"diNb0dZzSSwaHx3tv2xOynxwqitW9/J6st7sfhlND/KMjNLZ0VT9lt8frJKXbHQ8Pj6JbzMijg5/W36d",
	"H4YvRocvyG/zr0ej8eHdymskMh61G51QhK44lvCbGnOe7Y/Gq1FykKdyNlos8ois5qNRNp6y305Gy7uT",
	"6MXqJMnHM28IjYTp+Oj4dr85ePHpP4UyNRF0yeRiHRTr6mVmUEd9TzKAbzz8VCmDuf2pjwtm4xMft/P2",
	"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",
	"EEiv6ODbt2/f/iMAAP//JpBqJej+AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
