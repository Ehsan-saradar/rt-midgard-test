// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Action defines model for Action.
type Action struct {

	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status string `json:"status"`

	// Type of action
	Type string `json:"type"`
}

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Coin defines model for Coin.
type Coin struct {

	// Int64 (10^8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistoryItemPool defines model for EarningsHistoryItemPool.
type EarningsHistoryItemPool struct {

	// Int64 (10^8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64 (10^8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64 (10^8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64 (10^8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64 (10^8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string  `json:"address"`
	Chain   string  `json:"chain"`
	GasRate *string `json:"gas_rate,omitempty"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                  int64 `json:"AsgardSize"`
	BadValidatorRate            int64 `json:"BadValidatorRate"`
	BlocksPerYear               int64 `json:"BlocksPerYear"`
	ChurnInterval               int64 `json:"ChurnInterval"`
	ChurnRetryInterval          int64 `json:"ChurnRetryInterval"`
	CliTxCost                   int64 `json:"CliTxCost"`
	DesiredValidatorSet         int64 `json:"DesiredValidatorSet"`
	DoubleSignMaxAge            int64 `json:"DoubleSignMaxAge"`
	EmissionCurve               int64 `json:"EmissionCurve"`
	FailKeygenSlashPoints       int64 `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints      int64 `json:"FailKeysignSlashPoints"`
	FundMigrationInterval       int64 `json:"FundMigrationInterval"`
	JailTimeKeygen              int64 `json:"JailTimeKeygen"`
	JailTimeKeysign             int64 `json:"JailTimeKeysign"`
	LackOfObservationPenalty    int64 `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks       int64 `json:"LiquidityLockUpBlocks"`
	MinimumBondInRune           int64 `json:"MinimumBondInRune"`
	MinimumNodesForBFT          int64 `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil    int64 `json:"MinimumNodesForYggdrasil"`
	NativeChainGasFee           int64 `json:"NativeChainGasFee"`
	NewPoolCycle                int64 `json:"NewPoolCycle"`
	ObservationDelayFlexibility int64 `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints          int64 `json:"ObserveSlashPoints"`
	OldValidatorRate            int64 `json:"OldValidatorRate"`
	OutboundTransactionFee      int64 `json:"OutboundTransactionFee"`
	SigningTransactionPeriod    int64 `json:"SigningTransactionPeriod"`
	YggFundLimit                int64 `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock struct {
	Current []LastblockItem `json:"current"`
}

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn string `json:"last_observed_in"`
	LastSignedOut  string `json:"last_signed_out"`
	Thorchain      string `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64 (10^8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64 (10^8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64 (10^8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`
	PoolShareFactor         string `json:"poolShareFactor"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), Total Rune pooled in all pools
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NetworkFees defines model for NetworkFees.
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// ObservedChain defines model for ObservedChain.
type ObservedChain struct {
	Chain  string `json:"chain"`
	Height int    `json:"height"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolLegacyDetail defines model for PoolLegacyDetail.
type PoolLegacyDetail struct {
	Asset string `json:"asset"`

	// same as assetDepth from pool/stats
	AssetDepth string `json:"assetDepth"`

	// same as addAssetLiquidityVolume from pool/stats
	AssetStakedTotal string `json:"assetStakedTotal"`

	// same as toAssetCount from pool/stats
	BuyAssetCount string `json:"buyAssetCount"`

	// same as toAssetFees / toAssetCount from pool/stats
	BuyFeeAverage string `json:"buyFeeAverage"`

	// same as toAssetFees from pool/stats
	BuyFeesTotal string `json:"buyFeesTotal"`

	// same as toAssetAverageSlip from pool/stats
	BuySlipAverage string `json:"buySlipAverage"`

	// same as toAssetVolume / toAssetCount from pool/stats
	BuyTxAverage string `json:"buyTxAverage"`

	// same as toAssetVolume from pool/stats
	BuyVolume string `json:"buyVolume"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// same as 2*runeDepth from pool/stats
	PoolDepth string `json:"poolDepth"`

	// same as totalFees / swapCount from pool/stats
	PoolFeeAverage string `json:"poolFeeAverage"`

	// same as totalFees from pool/stats
	PoolFeesTotal string `json:"poolFeesTotal"`

	// same as averageSlip from pool/stats
	PoolSlipAverage string `json:"poolSlipAverage"`

	// same as addLiquidityVolume from pool/stats
	PoolStakedTotal string `json:"poolStakedTotal"`

	// same as swapVolume / swapCount from pool/stats
	PoolTxAverage string `json:"poolTxAverage"`

	// same as units from pool/stats
	PoolUnits string `json:"poolUnits"`

	// Int64(e8), same as buyVolume + sellVolume
	PoolVolume string `json:"poolVolume"`

	// same as assetPrice from pool/stats
	Price string `json:"price"`

	// same as runeDepth from pool/stats
	RuneDepth string `json:"runeDepth"`

	// same as addRuneLiquidityVolume from pool/stats
	RuneStakedTotal string `json:"runeStakedTotal"`

	// same as toRuneCount from pool/stats
	SellAssetCount string `json:"sellAssetCount"`

	// same as toRuneFees / toRuneCount from pool/stats
	SellFeeAverage string `json:"sellFeeAverage"`

	// same as toRuneFees from pool/stats
	SellFeesTotal string `json:"sellFeesTotal"`

	// same as toRuneAverageSlip from pool/stats
	SellSlipAverage string `json:"sellSlipAverage"`

	// same as toRuneVolume / toRuneCount from pool/stats
	SellTxAverage string `json:"sellTxAverage"`

	// same as toRuneVolume from pool/stats
	SellVolume string `json:"sellVolume"`

	// same as addLiquidityCount from pool/stats
	StakeTxCount string `json:"stakeTxCount"`

	// same as uniqueMemberCount from pool/stats
	StakersCount string `json:"stakersCount"`

	// same as addLiquidityCount + withdrawCount from pool/stats
	StakingTxCount string `json:"stakingTxCount"`

	// same as status from pool/stats
	Status string `json:"status"`

	// Int64, same as history/swaps:uniqueSwapperCount
	SwappersCount string `json:"swappersCount"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64(e8), same as swapVolume pool/stats?period=24h
	Volume24h string `json:"volume24h"`

	// same as withdrawCount from pool/stats
	WithdrawTxCount string `json:"withdrawTxCount"`
}

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`
	Asset                  string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Int64, number of unique adresses that initiated swaps transactions in the period.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Liquidity Units in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// PreflightStatus defines model for PreflightStatus.
type PreflightStatus struct {
	Code   int    `json:"code"`
	Reason string `json:"reason"`
	Status string `json:"status"`
}

// ProxiedNode defines model for ProxiedNode.
type ProxiedNode struct {
	ActiveBlockHeight int    `json:"active_block_height"`
	Bond              string `json:"bond"`
	BondAddress       string `json:"bond_address"`
	CurrentAward      string `json:"current_award"`
	ForcedToLeave     bool   `json:"forced_to_leave"`
	IpAddress         string `json:"ip_address"`
	Jail              struct {
		NodeAddress *string `json:"node_address,omitempty"`
	} `json:"jail"`
	LeaveHeight     int             `json:"leave_height"`
	NodeAddress     string          `json:"node_address"`
	ObserveChains   []ObservedChain `json:"observe_chains"`
	PreflightStatus PreflightStatus `json:"preflight_status"`
	PubKeySet       struct {
		Ed25519   string `json:"ed25519"`
		Secp256k1 string `json:"secp256k1"`
	} `json:"pub_key_set"`
	RequestedToLeave    bool     `json:"requested_to_leave"`
	SignerMembership    []string `json:"signer_membership"`
	SlashPoints         int      `json:"slash_points"`
	Status              string   `json:"status"`
	StatusSince         int      `json:"status_since"`
	ValidatorConsPubKey string   `json:"validator_cons_pub_key"`
	Version             string   `json:"version"`
}

// ProxiedNodes defines model for ProxiedNodes.
type ProxiedNodes []ProxiedNode

// Queue defines model for Queue.
type Queue struct {
	Internal int `json:"internal"`
	Outbound int `json:"outbound"`
	Swap     int `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64 (10^8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, unique users (addresses) initiating swaps in the last 24 hours.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64, unique users (addresses) initiating swaps in the last 30 days.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64 (10^8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Int64(10^8), total amount of rune bonded to the network by node operators
	TotalBond string `json:"totalBond"`

	// Int64, unique users (addresses) initiating swaps since beginning.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64 (10^8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip by swap.
	// Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps to asset denoted in rune
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps to rune
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64(e8), toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Int64 (10^8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), trade slip percentage
	TradeSlip string `json:"tradeSlip"`

	// Int64 (10^8), minimum output amount specified for the swap
	TradeTarget string `json:"tradeTarget"`
}

// Transaction defines model for Transaction.
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolLegacyResponse defines model for PoolLegacyResponse.
type PoolLegacyResponse PoolLegacyDetail

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ProxiedNodesResponse defines model for ProxiedNodesResponse.
type ProxiedNodesResponse ProxiedNodes

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action (swap, addLiquidity, withdraw, donate, refund)
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *string `json:"period,omitempty"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *string `json:"status,omitempty"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
