// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// AssetSummary defines model for AssetSummary.
type AssetSummary struct {
	Asset string `json:"asset"`

	// Int64, unix timestamp (second).
	DateCreated string `json:"dateCreated"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	PriceRune string `json:"priceRune"`
}

// NodeKey defines model for NodeKey.
type NodeKey struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	Price string `json:"price"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Enabled, Bootstrap.
	Status string `json:"status"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Two4HVolume string `json:"two4HVolume"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`
}

// Volume defines model for Volume.
type Volume struct {

	// Sum of "rune_amount" of buy swap events.
	BuyVolume string `json:"buyVolume"`

	// Sum of "rune_amount" of sell swap events.
	SellVolume string `json:"sellVolume"`

	// Int65, The beginning time of bucket in unix timestamp.
	Time string `json:"time"`

	// buyVolume + sellVolume
	TotalVolume string `json:"totalVolume"`
}

// AssetsSummaryResponse defines model for AssetsSummaryResponse.
type AssetsSummaryResponse []AssetSummary

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {

	// True means healthy, connected to database.
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain.
	InSync bool `json:"inSync"`

	// Int64, the current block count.
	ScannerHeight string `json:"scannerHeight"`
}

// NodeKeyResponse defines model for NodeKeyResponse.
type NodeKeyResponse []NodeKey

// PoolDetailResponse defines model for PoolDetailResponse.
type PoolDetailResponse PoolDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse []string

// VolumeResponse defines model for VolumeResponse.
type VolumeResponse []Volume

// GetAssetInfoParams defines parameters for GetAssetInfo.
type GetAssetInfoParams struct {

	// One or more comma separated unique asset (CHAIN.SYMBOL)
	Asset string `json:"asset"`
}

// GetTotalVolumeParams defines parameters for GetTotalVolume.
type GetTotalVolumeParams struct {

	// Interval of calculations
	Interval string `json:"interval"`

	// Start time of the query as unix timestamp
	From int64 `json:"from"`

	// End time of the query as unix timestamp
	To int64 `json:"to"`

	// Return volume for this single pool. Returns volume for all pools if missing.
	Pool *int64 `json:"pool,omitempty"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xYbW/byBH+KwO2H+5QhnJydoD6U+UkVwu92EbsFghywWFEjsQ9L3fpfZEjBP5b/QP9",
	"Y8XskhQpUbLje/kmkcvZZ2aemXl2vya5rmqtSDmbnH5NDNlaK0vhz9RacvbaVxWa9YfmDb/ItXKkHP/E",
	"upYiRye0mvxqteJnNi+pQv4lHFXB1F8NLZLT5C+TzXaTuMxOwjbNLslDmrh1TclpgsbgOnl4eEiTgmxu",
	"RM2bJKfJlF8AY0ChhFqCFJVwVEBBDoW0sNAGaq2lzdjcOaF05bPg10bXZJyI4SjQ4RyjiSGiG+MJKkJl",
	"oQy7rVPGpyhnWE5D+2mWdO7NtZaEihEKdb1W+VPMZvAjSts+fC+KJZoChAXrhJSQo8tLjoiveVdXEuQl",
	"CjW+rc1RKTLnJJal2919ptzr4zQa8caQcjCXOr+FXHvleiatM0ItE06UoTsvDBXJ6adNuLZ36hz+3JnQ",
	"818pd2PJ/kDOG2UBVRMDsA6dt6AXrf/sy4Uu6F/0B5K02eAp/OxBjn71uXpB7l6b28AINnaltXwbePss",
	"7Icgb0yPobzcgdYvH60olFAL0f62yG4x5ak1rheAoQeFQv6Plr6iPy7F0f5T0P2THMQsc5Kxxeq0Qwmr",
	"YIYLTy2JkYdSC1t0TbXtdjs9Jrg7GrECHb0xhI6ra0+teiW+gBMVWYdVDd9ZyrUqvh+p1TSpjcjpg1cj",
	"7exHqdGlEFZ0OQChwHhFGcwyysJPwIpbAUyaFfHv450hOjl0qQ9oty90Bb4bMSpenZy8/PuuF80LqP1c",
	"ihxuaT0WBkt5/erk9e3LXQPdq4Mmtnzb2Es7aGP+9IrzG0gQ3ryl2pUH+3WTF72AaZs6fswFPc4FreX0",
	"6uNeJkxXZHBJcEUmJ+X450dBsjgFVMqjBBOLgawTFacTvA2DGa2De6JbC0LluqIUHN7ym1B+XhUglCND",
	"ljE6DZjvGy4NP/4EsqYJL/+WIDNpH41xHFsjQ76kMNIC+NZCCpQtM3incC6pSOFMa2edwXrUtLvXx+dN",
	"9zqEeNCf9ALsPda2BR5y9eq4ZOGAqoCF0VX0rCClOadChf+jELwSzu7d/Cdx50Uh3Br+zeseidWebtH3",
	"clAJ/YS1NNlwuot8C3KsGjfBG1bi3K/3xfXaVxzDn8Pmv0Qy/Jzwo7lfh9ACrXi+jLOBpPx2y/zVo6a5",
	"/49n4iQFZtuclkKFic9LI+L8NhbNcIKM22cW7cPeBQz+Bj0fH8txwJz2wj2I0HDPcdUo1EK3kgDz0D2p",
	"Ct01KWhl/+FKbaIW1ibO050qbOX0Vez206sZ3HkygizcnF9+eMNfh9JAtY662oIU6pYKWAkMjD4TC/O/",
	"/1oXltWGajTEdF9oUwVtAjjX3oW1qlGCTsOcwBAWQq4BVygkV308xUQo3pKxWUgeo6rRWLLgDCqLeTAb",
	"+BBEZSzcIWDrNONwJVWcZAwZfmGjb61OZyAV3lJ8WVBNqmCjbQwI7TrrglRosqC0g1LLAnIjnMhR9l3N",
	"4EbH9o65g3vhSjh7d3XN7GVMU8t26EsavQNbai+LsNu6B78QhnIn14GKwknO+26ikjRZkbExl0fZ6+yI",
	"U6xrUliL5DT5ITvKjrgpoCtDYU9WLydKF7HKlzRy/Dms4nVBPVXAzYXbRvB7VkSFeBHMp8Mj9aujo30y",
	"tFs32T7MBAXZKsYgPnf25yWT1atJlMt7nYqKI/TybUoi2JpysRB5q7mhDQEp7Zfl4Bs+0wpbS1zzh+QG",
	"k3eFRmhvQ2IjAxaYk01ZBEhfRGXgeOiHZp2NRS8IlxkXNWfNYEWOjE1OP227dKkItIFKG2JVUTEc/iCo",
	"ECXuPDXAvntzPp1dZNcf359d/vQ9y7MvWNVMqE/J2cVZdnP5/vLsxct3rNzC/zfTixdHL4+54QjeKVAz",
	"SROFVTgdNHNp08ec8ZT2Th3bPe/zc8gwfgmzS4mo9GabHHWcKHS+lxDX97hckplc1qS4tfyQHXU8iJle",
	"kqIYzULnvmrHzk7C3up8H9u3ZPWeLYc72REX3zYAontp4nDJjEiGzz+3fsf7gucVODfo5r6h9ajVZ9Or",
	"2WgA4j3Tswp+64pq1/PGdueZ4I6+noSx+Muqm8UH/RyoP6HaNFOjwVcoM5gtgigDEXv7ZolpjPBQQinb",
	"67WRMNz0RvUjpTtr9uXI5ihzL4Mlm4wXXAvzYM2R8hVz4qQSTJFSexNOmmyHTyJJmlRahTzdeTSO+PWa",
	"0PR0xUak7JSLQ+M62cRsiPMK7ZZy2uMCz+aD8GP1RmdfH290E/u+JDOG6Z0qfgMip39vPM3FSEM0Jowr",
	"hQU+EMpG83eTpbeoYxWIBVTC8vpsD+hwM/VtMJ/Ve7dunHbrMpAd2oujpjqDF09pO7h9kc0xCEfL0PPB",
	"+rrWxlExWmjhWu5Z7WZ4obdvlET7A6cmXwOyh0eda68Se0faUyj4hGabo3oazpox/ylMrz5msM/J5prk",
	"kWYS+hbzI+uP9p3JHujEMvBPH+QjN727oS8OCbR4IdskpBmjWXvZeTAfpa8wHgUqzEuh4nkjHDPacdyI",
	"5eH0HyVeoxmeNOyfu/FIaDbbtnP/evDF54eHh4f/BwAA//9KT4t+0BoAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
