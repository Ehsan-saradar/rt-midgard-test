// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Action defines model for Action.
type Action struct {

	// Int64, Unix timestamp for when the action was registered
	Date string `json:"date"`

	// Int64, block height at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status string `json:"status"`

	// Type of action
	Type string `json:"type"`
}

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64, Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64, Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64, Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64, Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64, Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64, Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64, Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64, Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64, Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64, Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Coin defines model for Coin.
type Coin struct {

	// Int64 (10^8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64, the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Int64, the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64, Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64, Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64, System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64, Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistoryItemPool defines model for EarningsHistoryItemPool.
type EarningsHistoryItemPool struct {

	// Int64 (10^8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64 (10^8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64 (10^8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64 (10^8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64 (10^8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string `json:"address"`
	Chain   string `json:"chain"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                  int64 `json:"AsgardSize"`
	BadValidatorRate            int64 `json:"BadValidatorRate"`
	BlocksPerYear               int64 `json:"BlocksPerYear"`
	ChurnInterval               int64 `json:"ChurnInterval"`
	ChurnRetryInterval          int64 `json:"ChurnRetryInterval"`
	CliTxCost                   int64 `json:"CliTxCost"`
	DesiredValidatorSet         int64 `json:"DesiredValidatorSet"`
	DoubleSignMaxAge            int64 `json:"DoubleSignMaxAge"`
	EmissionCurve               int64 `json:"EmissionCurve"`
	FailKeygenSlashPoints       int64 `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints      int64 `json:"FailKeysignSlashPoints"`
	FundMigrationInterval       int64 `json:"FundMigrationInterval"`
	JailTimeKeygen              int64 `json:"JailTimeKeygen"`
	JailTimeKeysign             int64 `json:"JailTimeKeysign"`
	LackOfObservationPenalty    int64 `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks       int64 `json:"LiquidityLockUpBlocks"`
	MinimumBondInRune           int64 `json:"MinimumBondInRune"`
	MinimumNodesForBFT          int64 `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil    int64 `json:"MinimumNodesForYggdrasil"`
	NativeChainGasFee           int64 `json:"NativeChainGasFee"`
	NewPoolCycle                int64 `json:"NewPoolCycle"`
	ObservationDelayFlexibility int64 `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints          int64 `json:"ObserveSlashPoints"`
	OldValidatorRate            int64 `json:"OldValidatorRate"`
	OutboundTransactionFee      int64 `json:"OutboundTransactionFee"`
	SigningTransactionPeriod    int64 `json:"SigningTransactionPeriod"`
	YggFundLimit                int64 `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock struct {
	Current []LastblockItem `json:"current"`
}

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn string `json:"last_observed_in"`
	LastSignedOut  string `json:"last_signed_out"`
	Thorchain      string `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64 (10^8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64 (10^8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64 (10^8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64 (10^8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64 (10^8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64 (10^8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64, total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64, total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64, total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`
	PoolShareFactor         string `json:"poolShareFactor"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64, Total Rune pooled in all pools
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64, Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NetworkFees defines model for NetworkFees.
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolLegacyDetail defines model for PoolLegacyDetail.
type PoolLegacyDetail struct {
	Asset string `json:"asset"`

	// same as assetDepth from pool/stats
	AssetDepth string `json:"assetDepth"`

	// same as addAssetLiquidityVolume from pool/stats
	AssetStakedTotal string `json:"assetStakedTotal"`

	// same as toAssetCount from pool/stats
	BuyAssetCount string `json:"buyAssetCount"`

	// same as toAssetFees / toAssetCount from pool/stats
	BuyFeeAverage string `json:"buyFeeAverage"`

	// same as toAssetFees from pool/stats
	BuyFeesTotal string `json:"buyFeesTotal"`

	// same as toAssetAverageSlip from pool/stats
	BuySlipAverage string `json:"buySlipAverage"`

	// same as toAssetVolume / toAssetCount from pool/stats
	BuyTxAverage string `json:"buyTxAverage"`

	// same as toAssetVolume from pool/stats
	BuyVolume string `json:"buyVolume"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// same as 2*runeDepth from pool/stats
	PoolDepth string `json:"poolDepth"`

	// same as totalFees / swapCount from pool/stats
	PoolFeeAverage string `json:"poolFeeAverage"`

	// same as totalFees from pool/stats
	PoolFeesTotal string `json:"poolFeesTotal"`

	// same as averageSlip from pool/stats
	PoolSlipAverage string `json:"poolSlipAverage"`

	// same as addLiquidityVolume from pool/stats
	PoolStakedTotal string `json:"poolStakedTotal"`

	// same as swapVolume / swapCount from pool/stats
	PoolTxAverage string `json:"poolTxAverage"`

	// same as units from pool/stats
	PoolUnits string `json:"poolUnits"`

	// Int64, same as buyVolume + sellVolume
	PoolVolume string `json:"poolVolume"`

	// same as assetPrice from pool/stats
	Price string `json:"price"`

	// same as runeDepth from pool/stats
	RuneDepth string `json:"runeDepth"`

	// same as addRuneLiquidityVolume from pool/stats
	RuneStakedTotal string `json:"runeStakedTotal"`

	// same as toRuneCount from pool/stats
	SellAssetCount string `json:"sellAssetCount"`

	// same as toRuneFees / toRuneCount from pool/stats
	SellFeeAverage string `json:"sellFeeAverage"`

	// same as toRuneFees from pool/stats
	SellFeesTotal string `json:"sellFeesTotal"`

	// same as toRuneAverageSlip from pool/stats
	SellSlipAverage string `json:"sellSlipAverage"`

	// same as toRuneVolume / toRuneCount from pool/stats
	SellTxAverage string `json:"sellTxAverage"`

	// same as toRuneVolume from pool/stats
	SellVolume string `json:"sellVolume"`

	// same as addLiquidityCount from pool/stats
	StakeTxCount string `json:"stakeTxCount"`

	// same as uniqueMemberCount from pool/stats
	StakersCount string `json:"stakersCount"`

	// same as addLiquidityCount + withdrawCount from pool/stats
	StakingTxCount string `json:"stakingTxCount"`

	// same as status from pool/stats
	Status string `json:"status"`

	// Int64, same as history/swaps:uniqueSwapperCount
	SwappersCount string `json:"swappersCount"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64, same as swapVolume pool/stats?period=24h
	Volume24h string `json:"volume24h"`

	// same as withdrawCount from pool/stats
	WithdrawTxCount string `json:"withdrawTxCount"`
}

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64, same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64, same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`
	Asset                  string `json:"asset"`

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64, same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64, same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64, same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64, same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64, same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Int64, number of unique adresses that initiated swaps transactions in the period.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Liquidity Units in the pool
	Units string `json:"units"`

	// Int64, same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64, same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64, same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// Queue defines model for Queue.
type Queue struct {
	Outbound string `json:"outbound"`
	Swap     string `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64 (10^8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, unique users (addresses) initiating swaps in the last 24 hours.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64, unique users (addresses) initiating swaps in the last 30 days.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64 (10^8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps since beginning.
	SwapCount string `json:"swapCount"`

	// Int64, number of swaps in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64, total volume of swaps denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Int64, unique users (addresses) initiating swaps since beginning.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64 (10^8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip by swap.
	// Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64, the fees collected from swaps to asset denoted in rune
	ToAssetFees string `json:"toAssetFees"`

	// Int64, volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64, the fees collected from swaps to rune
	ToRuneFees string `json:"toRuneFees"`

	// Int64, volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64, the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64, toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Int64 (10^8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), trade slip percentage
	TradeSlip string `json:"tradeSlip"`

	// Int64 (10^8), minimum output amount specified for the swap
	TradeTarget string `json:"tradeTarget"`
}

// Transaction defines model for Transaction.
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolLegacyResponse defines model for PoolLegacyResponse.
type PoolLegacyResponse PoolLegacyDetail

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Address of sender or recipient of any in/out transaction related to the action
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action (swap, addLiquidity, withdraw, donate, refund)
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *string `json:"period,omitempty"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *string `json:"status,omitempty"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
