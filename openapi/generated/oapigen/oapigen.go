// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64, Average bond of active nodes.
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64, Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64, Maxinum bond of active nodes.
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64, Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64, Median bond of active nodes.
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64, Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64, Minumum bond of active nodes.
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64, Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64, Total bond of active nodes.
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64, Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// ConstantsSchema defines model for ConstantsSchema.
type ConstantsSchema struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64, Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64, Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64, System income generated during the time interval. It is the sum of liquidity fees and block rewards.
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64, Total liquidity fees, converted to RUNE, collected during the time interval.
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistoryItemPool defines model for EarningsHistoryItemPool.
type EarningsHistoryItemPool struct {

	// Int64, Share of earnings sent to the pool during the time interval
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`
}

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string `json:"address"`
	Chain   string `json:"chain"`

	// indicate whether this chain has halted
	Halted bool   `json:"halted"`
	PubKey string `json:"pub_key"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                  int64 `json:"AsgardSize"`
	BadValidatorRate            int64 `json:"BadValidatorRate"`
	BlocksPerYear               int64 `json:"BlocksPerYear"`
	ChurnInterval               int64 `json:"ChurnInterval"`
	ChurnRetryInterval          int64 `json:"ChurnRetryInterval"`
	CliTxCost                   int64 `json:"CliTxCost"`
	DesiredValidatorSet         int64 `json:"DesiredValidatorSet"`
	DoubleSignMaxAge            int64 `json:"DoubleSignMaxAge"`
	EmissionCurve               int64 `json:"EmissionCurve"`
	FailKeygenSlashPoints       int64 `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints      int64 `json:"FailKeysignSlashPoints"`
	FundMigrationInterval       int64 `json:"FundMigrationInterval"`
	JailTimeKeygen              int64 `json:"JailTimeKeygen"`
	JailTimeKeysign             int64 `json:"JailTimeKeysign"`
	LackOfObservationPenalty    int64 `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks       int64 `json:"LiquidityLockUpBlocks"`
	MinimumBondInRune           int64 `json:"MinimumBondInRune"`
	MinimumNodesForBFT          int64 `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil    int64 `json:"MinimumNodesForYggdrasil"`
	NativeChainGasFee           int64 `json:"NativeChainGasFee"`
	NewPoolCycle                int64 `json:"NewPoolCycle"`
	ObservationDelayFlexibility int64 `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints          int64 `json:"ObserveSlashPoints"`
	OldValidatorRate            int64 `json:"OldValidatorRate"`
	OutboundTransactionFee      int64 `json:"OutboundTransactionFee"`
	SigningTransactionPeriod    int64 `json:"SigningTransactionPeriod"`
	YggFundLimit                int64 `json:"YggFundLimit"`
}

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn string `json:"last_observed_in"`
	LastSignedOut  string `json:"last_signed_out"`
	Thorchain      string `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64, total deposits (liquidity additions) during the time interval
	Deposits string `json:"deposits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, total withdrawals during the time interval
	Withdrawals string `json:"withdrawals"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// Liquidity provider data for all the pools of a given member
	Pools []MemberPoolDetails `json:"pools"`
}

// MemberPoolDetails defines model for MemberPoolDetails.
type MemberPoolDetails struct {

	// Int64, total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// Int64, total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Int64, total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`
	BondingROI string `json:"bondingROI"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks).
	PoolActivationCountdown string  `json:"poolActivationCountdown"`
	PoolShareFactor         string  `json:"poolShareFactor"`
	StakingROI              *string `json:"stakingROI,omitempty"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64, Total Rune pooled in all pools.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64, Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NodeKey defines model for NodeKey.
type NodeKey struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Daily active users (unique addresses interacting)
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Daily transactions
	DailyTx string `json:"dailyTx"`

	// Monthly active users
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Monthly transactions
	MonthlyTx string `json:"monthlyTx"`

	// Total buying transactions
	TotalAssetBuys string `json:"totalAssetBuys"`

	// Total selling transactions
	TotalAssetSells string `json:"totalAssetSells"`

	// Total RUNE balances
	TotalDepth string `json:"totalDepth"`

	// Total staking transactions
	TotalStakeTx string `json:"totalStakeTx"`

	// Total staked (in RUNE Value).
	TotalStaked string `json:"totalStaked"`

	// Total transactions
	TotalTx string `json:"totalTx"`

	// Total unique swappers & members
	TotalUsers string `json:"totalUsers"`

	// Total (in RUNE Value) of all assets swapped since start.
	TotalVolume string `json:"totalVolume"`

	// Total withdrawing transactions
	TotalWithdrawTx string `json:"totalWithdrawTx"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Int64, the average slip by swap. Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64, volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64, volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64, the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64, toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// TxDetails defines model for TxDetails.
type TxDetails struct {

	// Int64, Unix timestamp.
	Date   string `json:"date"`
	Events Event  `json:"events"`
	Height string `json:"height"`
	In     Tx     `json:"in"`
	Out    []Tx   `json:"out"`
	Pool   string `json:"pool"`
	Status string `json:"status"`
	Type   string `json:"type"`
}

// Coin defines model for coin.
type Coin struct {
	Amount string `json:"amount"`
	Asset  string `json:"asset"`
}

// Coins defines model for coins.
type Coins []Coin

// Event defines model for event.
type Event struct {
	Fee        string `json:"fee"`
	Slip       string `json:"slip"`
	StakeUnits string `json:"stakeUnits"`
}

// Option defines model for option.
type Option struct {
	Asymmetry           string `json:"asymmetry"`
	PriceTarget         string `json:"priceTarget"`
	WithdrawBasisPoints string `json:"withdrawBasisPoints"`
}

// Tx defines model for tx.
type Tx struct {
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`
	Memo    string `json:"memo"`
	Options Option `json:"options"`
	TxID    string `json:"txID"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse ConstantsSchema

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse struct {
	Current []InboundAddressesItem `json:"current"`
}

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse struct {
	Current []LastblockItem `json:"current"`
}

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse []string

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodeKeyResponse defines model for NodeKeyResponse.
type NodeKeyResponse []NodeKey

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse []PoolDetail

// QueueResponse defines model for QueueResponse.
type QueueResponse struct {
	Outbound string `json:"outbound"`
	Swap     string `json:"swap"`
}

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// TxResponse defines model for TxResponse.
type TxResponse struct {

	// Int64, count of txs matching the filters.
	Count string      `json:"count"`
	Txs   []TxDetails `json:"txs"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval string `json:"interval"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval string `json:"interval"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval string `json:"interval"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval string `json:"interval"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status.
	Status *string `json:"status,omitempty"`
}

// GetTxDetailsParams defines parameters for GetTxDetails.
type GetTxDetailsParams struct {

	// Address of sender or recipient of any in/out tx in event
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx in event
	Txid *string `json:"txid,omitempty"`

	// Any asset used in event (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of event
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
