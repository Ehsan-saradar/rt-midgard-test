// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Action defines model for Action.
type Action struct {

	// Int64, Unix timestamp for when the action was registered
	Date string `json:"date"`

	// Int64, block height at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status string `json:"status"`

	// Type of action
	Type string `json:"type"`
}

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64, Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64, Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64, Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64, Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64, Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64, Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64, Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64, Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64, Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64, Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Coin defines model for Coin.
type Coin struct {

	// Int64 (10^8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64, Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64, Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64, System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64, Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistoryItemPool defines model for EarningsHistoryItemPool.
type EarningsHistoryItemPool struct {

	// Int64, Share of earnings sent to the pool during the time interval
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses struct {
	Current []InboundAddressesItem `json:"current"`
}

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string `json:"address"`
	Chain   string `json:"chain"`

	// indicate whether this chain has halted
	Halted bool   `json:"halted"`
	PubKey string `json:"pub_key"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                  int64 `json:"AsgardSize"`
	BadValidatorRate            int64 `json:"BadValidatorRate"`
	BlocksPerYear               int64 `json:"BlocksPerYear"`
	ChurnInterval               int64 `json:"ChurnInterval"`
	ChurnRetryInterval          int64 `json:"ChurnRetryInterval"`
	CliTxCost                   int64 `json:"CliTxCost"`
	DesiredValidatorSet         int64 `json:"DesiredValidatorSet"`
	DoubleSignMaxAge            int64 `json:"DoubleSignMaxAge"`
	EmissionCurve               int64 `json:"EmissionCurve"`
	FailKeygenSlashPoints       int64 `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints      int64 `json:"FailKeysignSlashPoints"`
	FundMigrationInterval       int64 `json:"FundMigrationInterval"`
	JailTimeKeygen              int64 `json:"JailTimeKeygen"`
	JailTimeKeysign             int64 `json:"JailTimeKeysign"`
	LackOfObservationPenalty    int64 `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks       int64 `json:"LiquidityLockUpBlocks"`
	MinimumBondInRune           int64 `json:"MinimumBondInRune"`
	MinimumNodesForBFT          int64 `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil    int64 `json:"MinimumNodesForYggdrasil"`
	NativeChainGasFee           int64 `json:"NativeChainGasFee"`
	NewPoolCycle                int64 `json:"NewPoolCycle"`
	ObservationDelayFlexibility int64 `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints          int64 `json:"ObserveSlashPoints"`
	OldValidatorRate            int64 `json:"OldValidatorRate"`
	OutboundTransactionFee      int64 `json:"OutboundTransactionFee"`
	SigningTransactionPeriod    int64 `json:"SigningTransactionPeriod"`
	YggFundLimit                int64 `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock struct {
	Current []LastblockItem `json:"current"`
}

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn string `json:"last_observed_in"`
	LastSignedOut  string `json:"last_signed_out"`
	Thorchain      string `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64 (10^8), total deposits (liquidity additions) in RUNE during the time interval. Accounts for both asset (using the price at deposit time) and RUNE deposited into pools
	Deposits string `json:"deposits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64 (10^8), total withdrawals in RUNE during the time interval. Accounts for both asset (using the price at withdrawal time) and RUNE withdrawn from pools
	Withdrawals string `json:"withdrawals"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// Liquidity provider data for all the pools of a given member
	Pools []MemberPoolDetails `json:"pools"`
}

// MemberPoolDetails defines model for MemberPoolDetails.
type MemberPoolDetails struct {

	// Int64, total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// Int64, total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Int64, total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`
	PoolShareFactor         string `json:"poolShareFactor"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64, Total Rune pooled in all pools
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64, Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NetworkFees defines model for NetworkFees.
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolLegacyDetail defines model for PoolLegacyDetail.
type PoolLegacyDetail struct {
	Asset string `json:"asset"`

	// same as assetDepth from pool/stats
	AssetDepth string `json:"assetDepth"`

	// same as toAssetCount from pool/stats
	BuyAssetCount string `json:"buyAssetCount"`

	// same as toAssetVolume / toAssetCount from pool/stats
	BuyTxAverage string `json:"buyTxAverage"`

	// same as toAssetVolume from pool/stats
	BuyVolume string `json:"buyVolume"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// same as 2*runeDepth from pool/stats
	PoolDepth string `json:"poolDepth"`

	// same as totalFees / swapCount from pool/stats
	PoolFeeAverage string `json:"poolFeeAverage"`

	// same as totalFees from pool/stats
	PoolFeesTotal string `json:"poolFeesTotal"`

	// same as averageSlip from pool/stats
	PoolSlipAverage string `json:"poolSlipAverage"`

	// same as swapVolume / swapCount from pool/stats
	PoolTxAverage string `json:"poolTxAverage"`

	// same as units from pool/stats
	PoolUnits string `json:"poolUnits"`

	// Int64, same as buyVolume + sellVolume
	PoolVolume string `json:"poolVolume"`

	// same as assetPrice from pool/stats
	Price string `json:"price"`

	// same as runeDepth from pool/stats
	RuneDepth string `json:"runeDepth"`

	// same as toRuneCount from pool/stats
	SellAssetCount string `json:"sellAssetCount"`

	// same as toRuneVolume / toRuneCount from pool/stats
	SellTxAverage string `json:"sellTxAverage"`

	// same as toRuneVolume from pool/stats
	SellVolume string `json:"sellVolume"`

	// same as status from pool/stats
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune
	Volume24h string `json:"volume24h"`
}

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, same as buyVolume + sellVolume
	PoolVolume string `json:"poolVolume"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64, same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64, same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64, same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, Liquidity Units in the pool
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune
	Volume24h string `json:"volume24h"`
}

// Queue defines model for Queue.
type Queue struct {
	Outbound string `json:"outbound"`
	Swap     string `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Daily active users (unique addresses interacting)
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Daily transactions
	DailyTx string `json:"dailyTx"`

	// Monthly active users
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Monthly transactions
	MonthlyTx string `json:"monthlyTx"`

	// Total buying transactions
	TotalAssetBuys string `json:"totalAssetBuys"`

	// Total selling transactions
	TotalAssetSells string `json:"totalAssetSells"`

	// Total RUNE balances
	TotalDepth string `json:"totalDepth"`

	// Total staking transactions
	TotalStakeTx string `json:"totalStakeTx"`

	// Total staked (in RUNE Value)
	TotalStaked string `json:"totalStaked"`

	// Total transactions
	TotalTx string `json:"totalTx"`

	// Total unique swappers & members
	TotalUsers string `json:"totalUsers"`

	// Total (in RUNE Value) of all assets swapped since start
	TotalVolume string `json:"totalVolume"`

	// Total withdrawing transactions
	TotalWithdrawTx string `json:"totalWithdrawTx"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float, the average slip by swap. Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64, volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64, volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64, the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64, toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Int64 (10^8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), trade slip percentage
	TradeSlip string `json:"tradeSlip"`

	// Int64 (10^8), minimum output amount specified for the swap
	TradeTarget string `json:"tradeTarget"`
}

// Transaction defines model for Transaction.
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction memo
	Memo string `json:"memo"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolLegacyResponse defines model for PoolLegacyResponse.
type PoolLegacyResponse PoolLegacyDetail

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Address of sender or recipient of any in/out transaction related to the action
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action (swap, addLiquidity, withdraw, donate, refund)
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *string `json:"status,omitempty"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"7jNx7Dl40macr1+/fv3/AQAA//+Mv0x+J68AAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
