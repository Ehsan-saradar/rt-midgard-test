// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {
	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still
	// pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still
// pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {
	// Int64, amount of liquidity units assigned to the member as result of the liquidity
	// deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// Balance defines model for Balance.
type Balance struct {
	Coins Coins `json:"coins"`

	// full timestamp (nanoseconds since 1970) of the block at which the returned balance snapshot was valid
	Date string `json:"date"`

	// height of the block at which the returned balance snapshot was valid
	Height string `json:"height"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {
	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Represents a digital currency amount
type Coin struct {
	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {
	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, The liquidity unit value index. Sqrt(assetDepth * runeDepth)/liquidity units
	Luvi string `json:"luvi"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {
	// Int64(e8), the amount of Asset in the pool at the end of the interval at time endTime
	EndAssetDepth string `json:"endAssetDepth"`

	// Int64, Liquidity Units in the pool at the end of the interval at time endTime
	EndLPUnits string `json:"endLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval at time endTime
	EndRuneDepth string `json:"endRuneDepth"`

	// Int64, Synth Units in the pool at the end of the interval at time endTime
	EndSynthUnits string `json:"endSynthUnits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, The liquidity unit value index increase between the first and last depth item
	LuviIncrease string `json:"luviIncrease"`

	// Float, The impermanent loss between the first and last depth item
	PriceShiftLoss string `json:"priceShiftLoss"`

	// Int64(e8), the amount of Asset in the pool at the start of the interval at time
	// startTime
	StartAssetDepth string `json:"startAssetDepth"`

	// Int64, Liquidity Units in the pool at the start of the interval at time startTime
	StartLPUnits string `json:"startLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the start of the interval at time startTime
	StartRuneDepth string `json:"startRuneDepth"`

	// Int64, Synth Units in the pool at the start of the interval at time startTime
	StartSynthUnits string `json:"startSynthUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {
	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of
	// liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {
	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// FullMemberDetails defines model for FullMemberDetails.
type FullMemberDetails struct {
	// List details of all the liquidity providers identified with the given address
	Pools []FullMemberPool `json:"pools"`
}

// FullMemberPool defines model for FullMemberPool.
type FullMemberPool struct {
	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total units of the pool
	PoolUnits string `json:"poolUnits"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`

	// Int64, total units that belong the the member
	SharedUnits string `json:"sharedUnits"`
}

// Health defines model for Health.
type Health struct {
	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync         bool     `json:"inSync"`
	LastAggregated HeightTS `json:"lastAggregated"`
	LastCommitted  HeightTS `json:"lastCommitted"`
	LastFetched    HeightTS `json:"lastFetched"`
	LastThorNode   HeightTS `json:"lastThorNode"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// HeightTS defines model for HeightTS.
type HeightTS struct {
	// Block height
	Height int `json:"height"`

	// Block timestamp (seconds since epoch)
	Timestamp int `json:"timestamp"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string  `json:"address"`
	Chain   string  `json:"chain"`
	GasRate *string `json:"gas_rate,omitempty"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                    int64  `json:"AsgardSize"`
	BadValidatorRate              int64  `json:"BadValidatorRate"`
	BadValidatorRedline           int    `json:"BadValidatorRedline"`
	BlocksPerYear                 int64  `json:"BlocksPerYear"`
	ChurnInterval                 int64  `json:"ChurnInterval"`
	ChurnRetryInterval            int64  `json:"ChurnRetryInterval"`
	DesiredValidatorSet           int64  `json:"DesiredValidatorSet"`
	DoubleSignMaxAge              int64  `json:"DoubleSignMaxAge"`
	EmissionCurve                 int64  `json:"EmissionCurve"`
	FailKeygenSlashPoints         int64  `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints        int64  `json:"FailKeysignSlashPoints"`
	FullImpLossProtectionBlocks   int64  `json:"FullImpLossProtectionBlocks"`
	FundMigrationInterval         int64  `json:"FundMigrationInterval"`
	IncentiveCurve                int64  `json:"IncentiveCurve"`
	JailTimeKeygen                int64  `json:"JailTimeKeygen"`
	JailTimeKeysign               int64  `json:"JailTimeKeysign"`
	LackOfObservationPenalty      int64  `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks         int64  `json:"LiquidityLockUpBlocks"`
	MaxAvailablePools             int64  `json:"MaxAvailablePools"`
	MaxSwapsPerBlock              int64  `json:"MaxSwapsPerBlock"`
	MinRunePoolDepth              int64  `json:"MinRunePoolDepth"`
	MinSlashPointsForBadValidator int64  `json:"MinSlashPointsForBadValidator"`
	MinSwapsPerBlock              int64  `json:"MinSwapsPerBlock"`
	MinimumBondInRune             int64  `json:"MinimumBondInRune"`
	MinimumNodesForBFT            int64  `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil      int64  `json:"MinimumNodesForYggdrasil"`
	NativeTransactionFee          int64  `json:"NativeTransactionFee"`
	NewPoolCycle                  *int64 `json:"NewPoolCycle,omitempty"`
	ObservationDelayFlexibility   int64  `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints            int64  `json:"ObserveSlashPoints"`
	OldValidatorRate              int64  `json:"OldValidatorRate"`
	OutboundTransactionFee        int64  `json:"OutboundTransactionFee"`
	PoolCycle                     int64  `json:"PoolCycle"`
	SigningTransactionPeriod      int64  `json:"SigningTransactionPeriod"`
	VirtualMultSynths             int64  `json:"VirtualMultSynths"`
	YggFundLimit                  int64  `json:"YggFundLimit"`
}

// LPDetail defines model for LPDetail.
type LPDetail struct {
	// asset address
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, total asset earned
	AssetEarned string `json:"assetEarned"`

	// Float, current asset price in rune
	AssetPrice string `json:"assetPrice"`

	// Float, current asset price in usd
	AssetPriceUsd string `json:"assetPriceUsd"`

	// pool name
	Pool string `json:"pool"`

	// Int64(e8), pool units
	PoolUnits string `json:"poolUnits"`

	// Int64(e8), total block reward
	Rewards string `json:"rewards"`

	// rune address
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// Float, total rune earned
	RuneEarned string `json:"runeEarned"`

	// Int64(e8), current rune price in usd
	RunePriceUsd string `json:"runePriceUsd"`

	// Int64(e8), share units
	SharedUnits string        `json:"sharedUnits"`
	StakeDetail []StakeDetail `json:"stakeDetail"`

	// Int64(e8), total rune price in usd
	UsdEarned      string        `json:"usdEarned"`
	WithdrawDetail []StakeDetail `json:"withdrawDetail"`
}

// LPDetails defines model for LPDetails.
type LPDetails []LPDetail

// Lastblock defines model for Lastblock.
type Lastblock []LastblockItem

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn int64  `json:"last_observed_in"`
	LastSignedOut  int64  `json:"last_signed_out"`
	Thorchain      int64  `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {
	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {
	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {
	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and
	// nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each
// outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {
	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// OHLCVHistory defines model for OHLCVHistory.
type OHLCVHistory struct {
	Intervals OHLCVHistoryIntervals `json:"intervals"`
	Meta      OHLCVHistoryMeta      `json:"meta"`
}

// OHLCVHistoryIntervals defines model for OHLCVHistoryIntervals.
type OHLCVHistoryIntervals []OHLCVHistoryItem

// OHLCVHistoryItem defines model for OHLCVHistoryItem.
type OHLCVHistoryItem struct {
	// Float, close price of asset in USD
	ClosePrice string `json:"closePrice"`

	// Int64, The end time of bucket in unix timestamp
	CloseTime string `json:"closeTime"`

	// Float, high price of asset in USD
	HighPrice string `json:"highPrice"`

	// Int64, The high time of bucket in unix timestamp
	HighTime string `json:"highTime"`

	// Int64, Liquidty is USD
	Liquidity string `json:"liquidity"`

	// Float, low price of asset in USD
	LowPrice string `json:"lowPrice"`

	// Int64, The low time of bucket in unix timestamp
	LowTime string `json:"lowTime"`

	// Float, open price of asset in USD
	OpenPrice string `json:"openPrice"`

	// Int64, The beginning time of bucket in unix timestamp
	OpenTime string `json:"openTime"`

	// Int64, Volume in USD
	Volume string `json:"volume"`
}

// OHLCVHistoryMeta defines model for OHLCVHistoryMeta.
type OHLCVHistoryMeta struct {
	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// ObservedChain defines model for ObservedChain.
type ObservedChain struct {
	Chain  string `json:"chain"`
	Height int    `json:"height"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	// Float, Also called APR. Annual return estimated from last 30 days income
	// (linearly, not compounded). E.g. 0.1 means 10% yearly return.
	// Due to Impermantent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	// It includes synth mint or burn.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {
	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Float, Also called APR. Estimated annual return (linearly, not compounded).
	// Always estimated from last 30 days (doesn't take period into account).
	// E.g. 0.1 means 10% yearly return.
	// Due to Impermantent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// PreflightStatus defines model for PreflightStatus.
type PreflightStatus struct {
	Code   int    `json:"code"`
	Reason string `json:"reason"`
	Status string `json:"status"`
}

// ProxiedNode defines model for ProxiedNode.
type ProxiedNode struct {
	ActiveBlockHeight int    `json:"active_block_height"`
	Bond              string `json:"bond"`
	BondAddress       string `json:"bond_address"`
	CurrentAward      string `json:"current_award"`
	ForcedToLeave     bool   `json:"forced_to_leave"`
	IpAddress         string `json:"ip_address"`
	Jail              struct {
		NodeAddress *string `json:"node_address,omitempty"`
	} `json:"jail"`
	LeaveHeight     int             `json:"leave_height"`
	NodeAddress     string          `json:"node_address"`
	ObserveChains   []ObservedChain `json:"observe_chains"`
	PreflightStatus PreflightStatus `json:"preflight_status"`
	PubKeySet       struct {
		Ed25519   string `json:"ed25519"`
		Secp256k1 string `json:"secp256k1"`
	} `json:"pub_key_set"`
	RequestedToLeave    bool     `json:"requested_to_leave"`
	SignerMembership    []string `json:"signer_membership"`
	SlashPoints         int      `json:"slash_points"`
	Status              string   `json:"status"`
	StatusSince         int      `json:"status_since"`
	ValidatorConsPubKey string   `json:"validator_cons_pub_key"`
	Version             string   `json:"version"`
}

// ProxiedNodes defines model for ProxiedNodes.
type ProxiedNodes []ProxiedNode

// Queue defines model for Queue.
type Queue struct {
	Internal int `json:"internal"`
	Outbound int `json:"outbound"`
	Swap     int `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {
	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// StatsData defines model for StatsData.
type StatsData struct {
	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Deprecated, it's always 0.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Deprecated, it's always 0.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps (including synths) since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps (including synths) in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps (including synths) in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps (including synths) denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Synth to Rune since beginning.
	SynthBurnCount string `json:"synthBurnCount"`

	// Int64, number of swaps from Rune to Synth since beginning.
	SynthMintCount string `json:"synthMintCount"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {
	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {
	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {
	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {
	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {
	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of
	// the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity
	// pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at
	// the end of the interval.
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {
	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the
	// native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {
	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means
	// totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership
	// withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// StakeDetail defines model for stakeDetail.
type StakeDetail struct {
	// Int64(e8), asset amount
	AssetAmount string `json:"assetAmount"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, asset price in rune
	AssetPrice string `json:"assetPrice"`

	// Float, asset price in usd
	AssetPriceUsd string `json:"assetPriceUsd"`

	// Float, withdraw percentage
	BasisPoint string `json:"basisPoint"`

	// Int64, nano timestamp of the block
	Date string `json:"date"`

	// Int64, block height
	Height string `json:"height"`

	// Int64, total number of pool units
	PoolUnits string `json:"poolUnits"`

	// Int64(e8), rune amount
	RuneAmount string `json:"runeAmount"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// Float, rune price in usd
	RunePriceUsd string `json:"runePriceUsd"`

	// Int64, total number of units changed
	SharedUnits string `json:"sharedUnits"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// BalanceResponse defines model for BalanceResponse.
type BalanceResponse Balance

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// FullMembersResponse defines model for FullMembersResponse.
type FullMembersResponse FullMemberDetails

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LPDetailsResponse defines model for LPDetailsResponse.
type LPDetailsResponse LPDetails

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// OHLCVHistoryResponse defines model for OHLCVHistoryResponse.
type OHLCVHistoryResponse OHLCVHistory

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ProxiedNodesResponse defines model for ProxiedNodesResponse.
type ProxiedNodesResponse ProxiedNodes

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {
	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// Affiliate address of the action (swap)
	Affiliate *string `json:"affiliate,omitempty"`
	AssetType *string `json:"assetType,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`
}

// GetBalanceParams defines parameters for GetBalance.
type GetBalanceParams struct {
	// Unix timestamp as seconds since 1970 (if provided, height must not be provided)
	Timestamp *int64 `json:"timestamp,omitempty"`

	// Block height (if provided, timestamp must not be provided)
	Height *int64 `json:"height,omitempty"`
}

// GetFullMembersAdressesParams defines parameters for GetFullMembersAdresses.
type GetFullMembersAdressesParams struct {
	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {
	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {
	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {
	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetOHLCVHistoryParams defines parameters for GetOHLCVHistory.
type GetOHLCVHistoryParams struct {
	// Interval of calculations
	Interval *GetOHLCVHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetOHLCVHistoryParamsInterval defines parameters for GetOHLCVHistory.
type GetOHLCVHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {
	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTSSwapHistoryParams defines parameters for GetTSSwapHistory.
type GetTSSwapHistoryParams struct {
	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetTSSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTSSwapHistoryParamsInterval defines parameters for GetTSSwapHistory.
type GetTSSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {
	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetLPDetailParams defines parameters for GetLPDetail.
type GetLPDetailParams struct {
	// Return information for given pools
	Pools *string `json:"pools,omitempty"`
}

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {
	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolParams defines parameters for GetPool.
type GetPoolParams struct {
	// Specifies the base interval from which APY is extrapolated.
	// Default is 30d.
	Period *GetPoolParamsPeriod `json:"period,omitempty"`
}

// GetPoolParamsPeriod defines parameters for GetPool.
type GetPoolParamsPeriod string

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {
	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {
	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`

	// Specifies the base interval from which APY is extrapolated.
	// Default is 30d.
	Period *GetPoolsParamsPeriod `json:"period,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// GetPoolsParamsPeriod defines parameters for GetPools.
type GetPoolsParamsPeriod string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"gNrR3tevX7/+/wAAAP//Soz5ds87AQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
