// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {

	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still
	// pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still
// pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity
	// deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// Balance defines model for Balance.
type Balance struct {
	Coins Coins `json:"coins"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Represents a digital currency amount
type Coin struct {

	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, The liquidity unit value index. Sqrt(assetDepth * runeDepth)/liquidity units
	Luvi string `json:"luvi"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval at time endTime
	EndAssetDepth string `json:"endAssetDepth"`

	// Int64, Liquidity Units in the pool at the end of the interval at time endTime
	EndLPUnits string `json:"endLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval at time endTime
	EndRuneDepth string `json:"endRuneDepth"`

	// Int64, Synth Units in the pool at the end of the interval at time endTime
	EndSynthUnits string `json:"endSynthUnits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, The liquidity unit value index increase between the first and last depth item
	LuviIncrease string `json:"luviIncrease"`

	// Float, The impermanent loss between the first and last depth item
	PriceShiftLoss string `json:"priceShiftLoss"`

	// Int64(e8), the amount of Asset in the pool at the start of the interval at time
	// startTime
	StartAssetDepth string `json:"startAssetDepth"`

	// Int64, Liquidity Units in the pool at the start of the interval at time startTime
	StartLPUnits string `json:"startLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the start of the interval at time startTime
	StartRuneDepth string `json:"startRuneDepth"`

	// Int64, Synth Units in the pool at the start of the interval at time startTime
	StartSynthUnits string `json:"startSynthUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of
	// liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {

	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync         bool     `json:"inSync"`
	LastAggregated HeightTS `json:"lastAggregated"`
	LastCommitted  HeightTS `json:"lastCommitted"`
	LastFetched    HeightTS `json:"lastFetched"`
	LastThorNode   HeightTS `json:"lastThorNode"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// HeightTS defines model for HeightTS.
type HeightTS struct {

	// Block height
	Height int `json:"height"`

	// Block timestamp (seconds since epoch)
	Timestamp int `json:"timestamp"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string  `json:"address"`
	Chain   string  `json:"chain"`
	GasRate *string `json:"gas_rate,omitempty"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                    int64  `json:"AsgardSize"`
	BadValidatorRate              int64  `json:"BadValidatorRate"`
	BadValidatorRedline           int    `json:"BadValidatorRedline"`
	BlocksPerYear                 int64  `json:"BlocksPerYear"`
	ChurnInterval                 int64  `json:"ChurnInterval"`
	ChurnRetryInterval            int64  `json:"ChurnRetryInterval"`
	DesiredValidatorSet           int64  `json:"DesiredValidatorSet"`
	DoubleSignMaxAge              int64  `json:"DoubleSignMaxAge"`
	EmissionCurve                 int64  `json:"EmissionCurve"`
	FailKeygenSlashPoints         int64  `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints        int64  `json:"FailKeysignSlashPoints"`
	FullImpLossProtectionBlocks   int64  `json:"FullImpLossProtectionBlocks"`
	FundMigrationInterval         int64  `json:"FundMigrationInterval"`
	IncentiveCurve                int64  `json:"IncentiveCurve"`
	JailTimeKeygen                int64  `json:"JailTimeKeygen"`
	JailTimeKeysign               int64  `json:"JailTimeKeysign"`
	LackOfObservationPenalty      int64  `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks         int64  `json:"LiquidityLockUpBlocks"`
	MaxAvailablePools             int64  `json:"MaxAvailablePools"`
	MaxSwapsPerBlock              int64  `json:"MaxSwapsPerBlock"`
	MinRunePoolDepth              int64  `json:"MinRunePoolDepth"`
	MinSlashPointsForBadValidator int64  `json:"MinSlashPointsForBadValidator"`
	MinSwapsPerBlock              int64  `json:"MinSwapsPerBlock"`
	MinimumBondInRune             int64  `json:"MinimumBondInRune"`
	MinimumNodesForBFT            int64  `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil      int64  `json:"MinimumNodesForYggdrasil"`
	NativeTransactionFee          int64  `json:"NativeTransactionFee"`
	NewPoolCycle                  *int64 `json:"NewPoolCycle,omitempty"`
	ObservationDelayFlexibility   int64  `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints            int64  `json:"ObserveSlashPoints"`
	OldValidatorRate              int64  `json:"OldValidatorRate"`
	OutboundTransactionFee        int64  `json:"OutboundTransactionFee"`
	PoolCycle                     int64  `json:"PoolCycle"`
	SigningTransactionPeriod      int64  `json:"SigningTransactionPeriod"`
	VirtualMultSynths             int64  `json:"VirtualMultSynths"`
	YggFundLimit                  int64  `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock []LastblockItem

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn int64  `json:"last_observed_in"`
	LastSignedOut  int64  `json:"last_signed_out"`
	Thorchain      int64  `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {

	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and
	// nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each
// outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// ObservedChain defines model for ObservedChain.
type ObservedChain struct {
	Chain  string `json:"chain"`
	Height int    `json:"height"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {

	// Float, Also called APR. Annual return estimated from last 30 days income
	// (linearly, not compounded). E.g. 0.1 means 10% yearly return.
	// Due to Impermantent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	// It includes synth mint or burn.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Float, Also called APR. Estimated annual return (linearly, not compounded).
	// Always estimated from last 30 days (doesn't take period into account).
	// E.g. 0.1 means 10% yearly return.
	// Due to Impermantent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// PreflightStatus defines model for PreflightStatus.
type PreflightStatus struct {
	Code   int    `json:"code"`
	Reason string `json:"reason"`
	Status string `json:"status"`
}

// ProxiedNode defines model for ProxiedNode.
type ProxiedNode struct {
	ActiveBlockHeight int    `json:"active_block_height"`
	Bond              string `json:"bond"`
	BondAddress       string `json:"bond_address"`
	CurrentAward      string `json:"current_award"`
	ForcedToLeave     bool   `json:"forced_to_leave"`
	IpAddress         string `json:"ip_address"`
	Jail              struct {
		NodeAddress *string `json:"node_address,omitempty"`
	} `json:"jail"`
	LeaveHeight     int             `json:"leave_height"`
	NodeAddress     string          `json:"node_address"`
	ObserveChains   []ObservedChain `json:"observe_chains"`
	PreflightStatus PreflightStatus `json:"preflight_status"`
	PubKeySet       struct {
		Ed25519   string `json:"ed25519"`
		Secp256k1 string `json:"secp256k1"`
	} `json:"pub_key_set"`
	RequestedToLeave    bool     `json:"requested_to_leave"`
	SignerMembership    []string `json:"signer_membership"`
	SlashPoints         int      `json:"slash_points"`
	Status              string   `json:"status"`
	StatusSince         int      `json:"status_since"`
	ValidatorConsPubKey string   `json:"validator_cons_pub_key"`
	Version             string   `json:"version"`
}

// ProxiedNodes defines model for ProxiedNodes.
type ProxiedNodes []ProxiedNode

// Queue defines model for Queue.
type Queue struct {
	Internal int `json:"internal"`
	Outbound int `json:"outbound"`
	Swap     int `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Deprecated, it's always 0.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Deprecated, it's always 0.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps (including synths) since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps (including synths) in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps (including synths) in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps (including synths) denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Synth to Rune since beginning.
	SynthBurnCount string `json:"synthBurnCount"`

	// Int64, number of swaps from Rune to Synth since beginning.
	SynthMintCount string `json:"synthMintCount"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {

	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {

	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of
	// the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity
	// pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at
	// the end of the interval.
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the
	// native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means
	// totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership
	// withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// BalanceResponse defines model for BalanceResponse.
type BalanceResponse Balance

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ProxiedNodesResponse defines model for ProxiedNodesResponse.
type ProxiedNodesResponse ProxiedNodes

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// Affiliate address of the action (swap)
	Affiliate *string `json:"affiliate,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {

	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolParams defines parameters for GetPool.
type GetPoolParams struct {

	// Specifies the base interval from which APY is extrapolated.
	// Default is 30d.
	Period *GetPoolParamsPeriod `json:"period,omitempty"`
}

// GetPoolParamsPeriod defines parameters for GetPool.
type GetPoolParamsPeriod string

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`

	// Specifies the base interval from which APY is extrapolated.
	// Default is 30d.
	Period *GetPoolsParamsPeriod `json:"period,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// GetPoolsParamsPeriod defines parameters for GetPools.
type GetPoolsParamsPeriod string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
