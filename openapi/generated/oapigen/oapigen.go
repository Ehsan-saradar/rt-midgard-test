// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Action defines model for Action.
type Action struct {

	// Int64, Unix timestamp for when the action was registered
	Date string `json:"date"`

	// Int64, block height at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status string `json:"status"`

	// Type of action
	Type string `json:"type"`
}

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64, Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64, Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64, Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64, Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64, Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64, Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64, Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64, Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64, Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64, Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Coin defines model for Coin.
type Coin struct {

	// Int64 (10^8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64, Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64, Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64, System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64, Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistoryItemPool defines model for EarningsHistoryItemPool.
type EarningsHistoryItemPool struct {

	// Int64, Share of earnings sent to the pool during the time interval
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses struct {
	Current []InboundAddressesItem `json:"current"`
}

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string `json:"address"`
	Chain   string `json:"chain"`

	// indicate whether this chain has halted
	Halted bool   `json:"halted"`
	PubKey string `json:"pub_key"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                  int64 `json:"AsgardSize"`
	BadValidatorRate            int64 `json:"BadValidatorRate"`
	BlocksPerYear               int64 `json:"BlocksPerYear"`
	ChurnInterval               int64 `json:"ChurnInterval"`
	ChurnRetryInterval          int64 `json:"ChurnRetryInterval"`
	CliTxCost                   int64 `json:"CliTxCost"`
	DesiredValidatorSet         int64 `json:"DesiredValidatorSet"`
	DoubleSignMaxAge            int64 `json:"DoubleSignMaxAge"`
	EmissionCurve               int64 `json:"EmissionCurve"`
	FailKeygenSlashPoints       int64 `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints      int64 `json:"FailKeysignSlashPoints"`
	FundMigrationInterval       int64 `json:"FundMigrationInterval"`
	JailTimeKeygen              int64 `json:"JailTimeKeygen"`
	JailTimeKeysign             int64 `json:"JailTimeKeysign"`
	LackOfObservationPenalty    int64 `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks       int64 `json:"LiquidityLockUpBlocks"`
	MinimumBondInRune           int64 `json:"MinimumBondInRune"`
	MinimumNodesForBFT          int64 `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil    int64 `json:"MinimumNodesForYggdrasil"`
	NativeChainGasFee           int64 `json:"NativeChainGasFee"`
	NewPoolCycle                int64 `json:"NewPoolCycle"`
	ObservationDelayFlexibility int64 `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints          int64 `json:"ObserveSlashPoints"`
	OldValidatorRate            int64 `json:"OldValidatorRate"`
	OutboundTransactionFee      int64 `json:"OutboundTransactionFee"`
	SigningTransactionPeriod    int64 `json:"SigningTransactionPeriod"`
	YggFundLimit                int64 `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock struct {
	Current []LastblockItem `json:"current"`
}

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn string `json:"last_observed_in"`
	LastSignedOut  string `json:"last_signed_out"`
	Thorchain      string `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64 (10^8), total deposits in RUNE during the time interval.
	// Accounts for both asset (using the price at deposit time) and RUNE deposited into pools
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64 (10^8), total withdrawals in RUNE during the time interval. Accounts for
	// both asset (using the price at withdrawal time) and RUNE withdrawn from pools
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// Liquidity provider data for all the pools of a given member
	Pools []MemberPoolDetails `json:"pools"`
}

// MemberPoolDetails defines model for MemberPoolDetails.
type MemberPoolDetails struct {

	// Int64, total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// Int64, total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Int64, total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`
	PoolShareFactor         string `json:"poolShareFactor"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64, Total Rune pooled in all pools
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64, Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NetworkFees defines model for NetworkFees.
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolLegacyDetail defines model for PoolLegacyDetail.
type PoolLegacyDetail struct {
	Asset string `json:"asset"`

	// same as assetDepth from pool/stats
	AssetDepth string `json:"assetDepth"`

	// same as toAssetCount from pool/stats
	BuyAssetCount string `json:"buyAssetCount"`

	// same as toAssetVolume / toAssetCount from pool/stats
	BuyTxAverage string `json:"buyTxAverage"`

	// same as toAssetVolume from pool/stats
	BuyVolume string `json:"buyVolume"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// same as 2*runeDepth from pool/stats
	PoolDepth string `json:"poolDepth"`

	// same as totalFees / swapCount from pool/stats
	PoolFeeAverage string `json:"poolFeeAverage"`

	// same as totalFees from pool/stats
	PoolFeesTotal string `json:"poolFeesTotal"`

	// same as averageSlip from pool/stats
	PoolSlipAverage string `json:"poolSlipAverage"`

	// same as swapVolume / swapCount from pool/stats
	PoolTxAverage string `json:"poolTxAverage"`

	// same as units from pool/stats
	PoolUnits string `json:"poolUnits"`

	// Int64, same as buyVolume + sellVolume
	PoolVolume string `json:"poolVolume"`

	// same as assetPrice from pool/stats
	Price string `json:"price"`

	// same as runeDepth from pool/stats
	RuneDepth string `json:"runeDepth"`

	// same as toRuneCount from pool/stats
	SellAssetCount string `json:"sellAssetCount"`

	// same as toRuneVolume / toRuneCount from pool/stats
	SellTxAverage string `json:"sellTxAverage"`

	// same as toRuneVolume from pool/stats
	SellVolume string `json:"sellVolume"`

	// same as status from pool/stats
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune
	Volume24h string `json:"volume24h"`
}

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64, same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`
	Asset              string `json:"asset"`

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64, same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64, same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64, same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, Liquidity Units in the pool
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune
	Volume24h string `json:"volume24h"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64, same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// Queue defines model for Queue.
type Queue struct {
	Outbound string `json:"outbound"`
	Swap     string `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Daily active users (unique addresses interacting)
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Daily transactions
	DailyTx string `json:"dailyTx"`

	// Monthly active users
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Monthly transactions
	MonthlyTx string `json:"monthlyTx"`

	// Total buying transactions
	TotalAssetBuys string `json:"totalAssetBuys"`

	// Total selling transactions
	TotalAssetSells string `json:"totalAssetSells"`

	// Total RUNE balances
	TotalDepth string `json:"totalDepth"`

	// Total staking transactions
	TotalStakeTx string `json:"totalStakeTx"`

	// Total staked (in RUNE Value)
	TotalStaked string `json:"totalStaked"`

	// Total transactions
	TotalTx string `json:"totalTx"`

	// Total unique swappers & members
	TotalUsers string `json:"totalUsers"`

	// Total (in RUNE Value) of all assets swapped since start
	TotalVolume string `json:"totalVolume"`

	// Total withdrawing transactions
	TotalWithdrawTx string `json:"totalWithdrawTx"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float, the average slip by swap. Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64, volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64, volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64, the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64, toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Int64 (10^8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), trade slip percentage
	TradeSlip string `json:"tradeSlip"`

	// Int64 (10^8), minimum output amount specified for the swap
	TradeTarget string `json:"tradeTarget"`
}

// Transaction defines model for Transaction.
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction memo
	Memo string `json:"memo"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolLegacyResponse defines model for PoolLegacyResponse.
type PoolLegacyResponse PoolLegacyDetail

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Address of sender or recipient of any in/out transaction related to the action
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action (swap, addLiquidity, withdraw, donate, refund)
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *string `json:"status,omitempty"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
