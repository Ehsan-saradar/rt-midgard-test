// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Action defines model for Action.
type Action struct {

	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status string `json:"status"`

	// Type of action
	Type string `json:"type"`
}

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Coin defines model for Coin.
type Coin struct {

	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistoryItemPool defines model for EarningsHistoryItemPool.
type EarningsHistoryItemPool struct {

	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string  `json:"address"`
	Chain   string  `json:"chain"`
	GasRate *string `json:"gas_rate,omitempty"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                    int64  `json:"AsgardSize"`
	BadValidatorRate              int64  `json:"BadValidatorRate"`
	BadValidatorRedline           int    `json:"BadValidatorRedline"`
	BlocksPerYear                 int64  `json:"BlocksPerYear"`
	ChurnInterval                 int64  `json:"ChurnInterval"`
	ChurnRetryInterval            int64  `json:"ChurnRetryInterval"`
	DesiredValidatorSet           int64  `json:"DesiredValidatorSet"`
	DoubleSignMaxAge              int64  `json:"DoubleSignMaxAge"`
	EmissionCurve                 int64  `json:"EmissionCurve"`
	FailKeygenSlashPoints         int64  `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints        int64  `json:"FailKeysignSlashPoints"`
	FullImpLossProtectionBlocks   int64  `json:"FullImpLossProtectionBlocks"`
	FundMigrationInterval         int64  `json:"FundMigrationInterval"`
	IncentiveCurve                int64  `json:"IncentiveCurve"`
	JailTimeKeygen                int64  `json:"JailTimeKeygen"`
	JailTimeKeysign               int64  `json:"JailTimeKeysign"`
	LackOfObservationPenalty      int64  `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks         int64  `json:"LiquidityLockUpBlocks"`
	MaxAvailablePools             int64  `json:"MaxAvailablePools"`
	MaxSwapsPerBlock              int64  `json:"MaxSwapsPerBlock"`
	MinRunePoolDepth              int64  `json:"MinRunePoolDepth"`
	MinSlashPointsForBadValidator int64  `json:"MinSlashPointsForBadValidator"`
	MinSwapsPerBlock              int64  `json:"MinSwapsPerBlock"`
	MinimumBondInRune             int64  `json:"MinimumBondInRune"`
	MinimumNodesForBFT            int64  `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil      int64  `json:"MinimumNodesForYggdrasil"`
	NativeTransactionFee          int64  `json:"NativeTransactionFee"`
	NewPoolCycle                  *int64 `json:"NewPoolCycle,omitempty"`
	ObservationDelayFlexibility   int64  `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints            int64  `json:"ObserveSlashPoints"`
	OldValidatorRate              int64  `json:"OldValidatorRate"`
	OutboundTransactionFee        int64  `json:"OutboundTransactionFee"`
	PoolCycle                     int64  `json:"PoolCycle"`
	SigningTransactionPeriod      int64  `json:"SigningTransactionPeriod"`
	VirtualMultSynths             int64  `json:"VirtualMultSynths"`
	YggFundLimit                  int64  `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock struct {
	Current []LastblockItem `json:"current"`
}

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn int64  `json:"last_observed_in"`
	LastSignedOut  int64  `json:"last_signed_out"`
	Thorchain      int64  `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`
	PoolShareFactor         string `json:"poolShareFactor"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), Total Rune pooled in all pools
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NetworkFees defines model for NetworkFees.
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// ObservedChain defines model for ObservedChain.
type ObservedChain struct {
	Chain  string `json:"chain"`
	Height int    `json:"height"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolLegacyDetail defines model for PoolLegacyDetail.
type PoolLegacyDetail struct {
	Asset string `json:"asset"`

	// same as assetDepth from pool/stats
	AssetDepth string `json:"assetDepth"`

	// same as addAssetLiquidityVolume from pool/stats
	AssetStakedTotal string `json:"assetStakedTotal"`

	// same as toAssetCount from pool/stats
	BuyAssetCount string `json:"buyAssetCount"`

	// same as toAssetFees / toAssetCount from pool/stats
	BuyFeeAverage string `json:"buyFeeAverage"`

	// same as toAssetFees from pool/stats
	BuyFeesTotal string `json:"buyFeesTotal"`

	// same as toAssetAverageSlip from pool/stats
	BuySlipAverage string `json:"buySlipAverage"`

	// same as toAssetVolume / toAssetCount from pool/stats
	BuyTxAverage string `json:"buyTxAverage"`

	// same as toAssetVolume from pool/stats
	BuyVolume string `json:"buyVolume"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// same as 2*runeDepth from pool/stats
	PoolDepth string `json:"poolDepth"`

	// same as totalFees / swapCount from pool/stats
	PoolFeeAverage string `json:"poolFeeAverage"`

	// same as totalFees from pool/stats
	PoolFeesTotal string `json:"poolFeesTotal"`

	// same as averageSlip from pool/stats
	PoolSlipAverage string `json:"poolSlipAverage"`

	// same as addLiquidityVolume from pool/stats
	PoolStakedTotal string `json:"poolStakedTotal"`

	// same as swapVolume / swapCount from pool/stats
	PoolTxAverage string `json:"poolTxAverage"`

	// same as units from pool/stats
	PoolUnits string `json:"poolUnits"`

	// Int64(e8), same as buyVolume + sellVolume
	PoolVolume string `json:"poolVolume"`

	// same as assetPrice from pool/stats
	Price string `json:"price"`

	// same as runeDepth from pool/stats
	RuneDepth string `json:"runeDepth"`

	// same as addRuneLiquidityVolume from pool/stats
	RuneStakedTotal string `json:"runeStakedTotal"`

	// same as toRuneCount from pool/stats
	SellAssetCount string `json:"sellAssetCount"`

	// same as toRuneFees / toRuneCount from pool/stats
	SellFeeAverage string `json:"sellFeeAverage"`

	// same as toRuneFees from pool/stats
	SellFeesTotal string `json:"sellFeesTotal"`

	// same as toRuneAverageSlip from pool/stats
	SellSlipAverage string `json:"sellSlipAverage"`

	// same as toRuneVolume / toRuneCount from pool/stats
	SellTxAverage string `json:"sellTxAverage"`

	// same as toRuneVolume from pool/stats
	SellVolume string `json:"sellVolume"`

	// same as addLiquidityCount from pool/stats
	StakeTxCount string `json:"stakeTxCount"`

	// same as uniqueMemberCount from pool/stats
	StakersCount string `json:"stakersCount"`

	// same as addLiquidityCount + withdrawCount from pool/stats
	StakingTxCount string `json:"stakingTxCount"`

	// same as status from pool/stats
	Status string `json:"status"`

	// Int64, same as history/swaps:uniqueSwapperCount
	SwappersCount string `json:"swappersCount"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64(e8), same as swapVolume pool/stats?period=24h
	Volume24h string `json:"volume24h"`

	// same as withdrawCount from pool/stats
	WithdrawTxCount string `json:"withdrawTxCount"`
}

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`
	Asset                  string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Int64, number of unique adresses that initiated swaps transactions in the period.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Liquidity Units in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// PreflightStatus defines model for PreflightStatus.
type PreflightStatus struct {
	Code   int    `json:"code"`
	Reason string `json:"reason"`
	Status string `json:"status"`
}

// ProxiedNode defines model for ProxiedNode.
type ProxiedNode struct {
	ActiveBlockHeight int    `json:"active_block_height"`
	Bond              string `json:"bond"`
	BondAddress       string `json:"bond_address"`
	CurrentAward      string `json:"current_award"`
	ForcedToLeave     bool   `json:"forced_to_leave"`
	IpAddress         string `json:"ip_address"`
	Jail              struct {
		NodeAddress *string `json:"node_address,omitempty"`
	} `json:"jail"`
	LeaveHeight     int             `json:"leave_height"`
	NodeAddress     string          `json:"node_address"`
	ObserveChains   []ObservedChain `json:"observe_chains"`
	PreflightStatus PreflightStatus `json:"preflight_status"`
	PubKeySet       struct {
		Ed25519   string `json:"ed25519"`
		Secp256k1 string `json:"secp256k1"`
	} `json:"pub_key_set"`
	RequestedToLeave    bool     `json:"requested_to_leave"`
	SignerMembership    []string `json:"signer_membership"`
	SlashPoints         int      `json:"slash_points"`
	Status              string   `json:"status"`
	StatusSince         int      `json:"status_since"`
	ValidatorConsPubKey string   `json:"validator_cons_pub_key"`
	Version             string   `json:"version"`
}

// ProxiedNodes defines model for ProxiedNodes.
type ProxiedNodes []ProxiedNode

// Queue defines model for Queue.
type Queue struct {
	Internal int `json:"internal"`
	Outbound int `json:"outbound"`
	Swap     int `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, unique users (addresses) initiating swaps in the last 24 hours.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, unique users (addresses) initiating swaps in the last 30 days.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Int64, unique users (addresses) initiating swaps since beginning.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip by swap.
	// Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps to asset denoted in rune
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps to rune
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64(e8), toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// Transaction defines model for Transaction.
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolLegacyResponse defines model for PoolLegacyResponse.
type PoolLegacyResponse PoolLegacyDetail

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ProxiedNodesResponse defines model for ProxiedNodesResponse.
type ProxiedNodesResponse ProxiedNodes

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action (swap, addLiquidity, withdraw, donate, refund)
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *string `json:"period,omitempty"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *string `json:"status,omitempty"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
