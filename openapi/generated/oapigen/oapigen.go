// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {

	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still
	// pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still
// pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity
	// deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// Represents a digital currency amount
type Coin struct {

	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, The liquidity unit value index. Sqrt(assetDepth * runeDepth)/liquidity units
	Luvi string `json:"luvi"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval at time endTime
	EndAssetDepth string `json:"endAssetDepth"`

	// Int64, Liquidity Units in the pool at the end of the interval at time endTime
	EndLPUnits string `json:"endLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval at time endTime
	EndRuneDepth string `json:"endRuneDepth"`

	// Int64, Synth Units in the pool at the end of the interval at time endTime
	EndSynthUnits string `json:"endSynthUnits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, The liquidity unit value index increase between the first and last depth item
	LuviIncrease string `json:"luviIncrease"`

	// Float, The impermanent loss between the first and last depth item
	PriceShiftLoss string `json:"priceShiftLoss"`

	// Int64(e8), the amount of Asset in the pool at the start of the interval at time
	// startTime
	StartAssetDepth string `json:"startAssetDepth"`

	// Int64, Liquidity Units in the pool at the start of the interval at time startTime
	StartLPUnits string `json:"startLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the start of the interval at time startTime
	StartRuneDepth string `json:"startRuneDepth"`

	// Int64, Synth Units in the pool at the start of the interval at time startTime
	StartSynthUnits string `json:"startSynthUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of
	// liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {

	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync         bool     `json:"inSync"`
	LastAggregated HeightTS `json:"lastAggregated"`
	LastCommitted  HeightTS `json:"lastCommitted"`
	LastFetched    HeightTS `json:"lastFetched"`
	LastThorNode   HeightTS `json:"lastThorNode"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// HeightTS defines model for HeightTS.
type HeightTS struct {

	// Block height
	Height int `json:"height"`

	// Block timestamp (seconds since epoch)
	Timestamp int `json:"timestamp"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {

	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and
	// nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each
// outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income,
	// taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	// Doesn't include synth mint or burn.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`
	Asset                  string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income,
	// taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Deprecated, it's always 0.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Deprecated, it's always 0.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Synth to Rune since beginning.
	SynthBurnCount string `json:"synthBurnCount"`

	// Int64, number of swaps from Rune to Synth since beginning.
	SynthMintCount string `json:"synthMintCount"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {

	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {

	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of
	// the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity
	// pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at
	// the end of the interval.
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the
	// native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means
	// totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership
	// withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// Affiliate address of the action (swap)
	AffiliateAddress *string `json:"affiliate_address,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {

	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
