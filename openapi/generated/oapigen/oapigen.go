// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {

	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still
	// pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still
// pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity
	// deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Represents a digital currency amount
type Coin struct {

	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, The liquidity unit value index. Sqrt(assetDepth * runeDepth)/liquidity units
	Luvi string `json:"luvi"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval at time endTime
	EndAssetDepth string `json:"endAssetDepth"`

	// Int64, Liquidity Units in the pool at the end of the interval at time endTime
	EndLPUnits string `json:"endLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval at time endTime
	EndRuneDepth string `json:"endRuneDepth"`

	// Int64, Synth Units in the pool at the end of the interval at time endTime
	EndSynthUnits string `json:"endSynthUnits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, The liquidity unit value index increase between the first and last depth item
	LuviIncrease string `json:"luviIncrease"`

	// Float, The impermanent loss between the first and last depth item
	PriceShiftLoss string `json:"priceShiftLoss"`

	// Int64(e8), the amount of Asset in the pool at the start of the interval at time
	// startTime
	StartAssetDepth string `json:"startAssetDepth"`

	// Int64, Liquidity Units in the pool at the start of the interval at time startTime
	StartLPUnits string `json:"startLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the start of the interval at time startTime
	StartRuneDepth string `json:"startRuneDepth"`

	// Int64, Synth Units in the pool at the start of the interval at time startTime
	StartSynthUnits string `json:"startSynthUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of
	// liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {

	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync         bool     `json:"inSync"`
	LastAggregated HeightTS `json:"lastAggregated"`
	LastCommitted  HeightTS `json:"lastCommitted"`
	LastFetched    HeightTS `json:"lastFetched"`
	LastThorNode   HeightTS `json:"lastThorNode"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// HeightTS defines model for HeightTS.
type HeightTS struct {

	// Block height
	Height int `json:"height"`

	// Block timestamp (seconds since epoch)
	Timestamp int `json:"timestamp"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string  `json:"address"`
	Chain   string  `json:"chain"`
	GasRate *string `json:"gas_rate,omitempty"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                    int64  `json:"AsgardSize"`
	BadValidatorRate              int64  `json:"BadValidatorRate"`
	BadValidatorRedline           int    `json:"BadValidatorRedline"`
	BlocksPerYear                 int64  `json:"BlocksPerYear"`
	ChurnInterval                 int64  `json:"ChurnInterval"`
	ChurnRetryInterval            int64  `json:"ChurnRetryInterval"`
	DesiredValidatorSet           int64  `json:"DesiredValidatorSet"`
	DoubleSignMaxAge              int64  `json:"DoubleSignMaxAge"`
	EmissionCurve                 int64  `json:"EmissionCurve"`
	FailKeygenSlashPoints         int64  `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints        int64  `json:"FailKeysignSlashPoints"`
	FullImpLossProtectionBlocks   int64  `json:"FullImpLossProtectionBlocks"`
	FundMigrationInterval         int64  `json:"FundMigrationInterval"`
	IncentiveCurve                int64  `json:"IncentiveCurve"`
	JailTimeKeygen                int64  `json:"JailTimeKeygen"`
	JailTimeKeysign               int64  `json:"JailTimeKeysign"`
	LackOfObservationPenalty      int64  `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks         int64  `json:"LiquidityLockUpBlocks"`
	MaxAvailablePools             int64  `json:"MaxAvailablePools"`
	MaxSwapsPerBlock              int64  `json:"MaxSwapsPerBlock"`
	MinRunePoolDepth              int64  `json:"MinRunePoolDepth"`
	MinSlashPointsForBadValidator int64  `json:"MinSlashPointsForBadValidator"`
	MinSwapsPerBlock              int64  `json:"MinSwapsPerBlock"`
	MinimumBondInRune             int64  `json:"MinimumBondInRune"`
	MinimumNodesForBFT            int64  `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil      int64  `json:"MinimumNodesForYggdrasil"`
	NativeTransactionFee          int64  `json:"NativeTransactionFee"`
	NewPoolCycle                  *int64 `json:"NewPoolCycle,omitempty"`
	ObservationDelayFlexibility   int64  `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints            int64  `json:"ObserveSlashPoints"`
	OldValidatorRate              int64  `json:"OldValidatorRate"`
	OutboundTransactionFee        int64  `json:"OutboundTransactionFee"`
	PoolCycle                     int64  `json:"PoolCycle"`
	SigningTransactionPeriod      int64  `json:"SigningTransactionPeriod"`
	VirtualMultSynths             int64  `json:"VirtualMultSynths"`
	YggFundLimit                  int64  `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock []LastblockItem

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn int64  `json:"last_observed_in"`
	LastSignedOut  int64  `json:"last_signed_out"`
	Thorchain      int64  `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {

	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and
	// nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each
// outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// ObservedChain defines model for ObservedChain.
type ObservedChain struct {
	Chain  string `json:"chain"`
	Height int    `json:"height"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income,
	// taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`
	Asset                  string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income,
	// taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Int64, number of unique adresses that initiated swaps transactions in the period.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// PreflightStatus defines model for PreflightStatus.
type PreflightStatus struct {
	Code   int    `json:"code"`
	Reason string `json:"reason"`
	Status string `json:"status"`
}

// ProxiedNode defines model for ProxiedNode.
type ProxiedNode struct {
	ActiveBlockHeight int    `json:"active_block_height"`
	Bond              string `json:"bond"`
	BondAddress       string `json:"bond_address"`
	CurrentAward      string `json:"current_award"`
	ForcedToLeave     bool   `json:"forced_to_leave"`
	IpAddress         string `json:"ip_address"`
	Jail              struct {
		NodeAddress *string `json:"node_address,omitempty"`
	} `json:"jail"`
	LeaveHeight     int             `json:"leave_height"`
	NodeAddress     string          `json:"node_address"`
	ObserveChains   []ObservedChain `json:"observe_chains"`
	PreflightStatus PreflightStatus `json:"preflight_status"`
	PubKeySet       struct {
		Ed25519   string `json:"ed25519"`
		Secp256k1 string `json:"secp256k1"`
	} `json:"pub_key_set"`
	RequestedToLeave    bool     `json:"requested_to_leave"`
	SignerMembership    []string `json:"signer_membership"`
	SlashPoints         int      `json:"slash_points"`
	Status              string   `json:"status"`
	StatusSince         int      `json:"status_since"`
	ValidatorConsPubKey string   `json:"validator_cons_pub_key"`
	Version             string   `json:"version"`
}

// ProxiedNodes defines model for ProxiedNodes.
type ProxiedNodes []ProxiedNode

// Queue defines model for Queue.
type Queue struct {
	Internal int `json:"internal"`
	Outbound int `json:"outbound"`
	Swap     int `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, unique users (addresses) initiating swaps in the last 24 hours.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, unique users (addresses) initiating swaps in the last 30 days.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Int64, unique users (addresses) initiating swaps since beginning.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {

	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {

	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of
	// the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity
	// pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at
	// the end of the interval.
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the
	// native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means
	// totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership
	// withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ProxiedNodesResponse defines model for ProxiedNodesResponse.
type ProxiedNodesResponse ProxiedNodes

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// Affiliate address of the action (swap)
	AffiliateAddress *string `json:"affiliate_address,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {

	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
