// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Action defines model for Action.
type Action struct {

	// Int64, Unix timestamp for when the action was registered
	Date string `json:"date"`

	// Int64, block height at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status string `json:"status"`

	// Type of action
	Type string `json:"type"`
}

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64, Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64, Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64, Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64, Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64, Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64, Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64, Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64, Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64, Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64, Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Coin defines model for Coin.
type Coin struct {

	// Int64 (10^8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64, Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64, Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64, System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64, Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistoryItemPool defines model for EarningsHistoryItemPool.
type EarningsHistoryItemPool struct {

	// Int64, Share of earnings sent to the pool during the time interval
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses struct {
	Current []InboundAddressesItem `json:"current"`
}

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string `json:"address"`
	Chain   string `json:"chain"`

	// indicate whether this chain has halted
	Halted bool   `json:"halted"`
	PubKey string `json:"pub_key"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                  int64 `json:"AsgardSize"`
	BadValidatorRate            int64 `json:"BadValidatorRate"`
	BlocksPerYear               int64 `json:"BlocksPerYear"`
	ChurnInterval               int64 `json:"ChurnInterval"`
	ChurnRetryInterval          int64 `json:"ChurnRetryInterval"`
	CliTxCost                   int64 `json:"CliTxCost"`
	DesiredValidatorSet         int64 `json:"DesiredValidatorSet"`
	DoubleSignMaxAge            int64 `json:"DoubleSignMaxAge"`
	EmissionCurve               int64 `json:"EmissionCurve"`
	FailKeygenSlashPoints       int64 `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints      int64 `json:"FailKeysignSlashPoints"`
	FundMigrationInterval       int64 `json:"FundMigrationInterval"`
	JailTimeKeygen              int64 `json:"JailTimeKeygen"`
	JailTimeKeysign             int64 `json:"JailTimeKeysign"`
	LackOfObservationPenalty    int64 `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks       int64 `json:"LiquidityLockUpBlocks"`
	MinimumBondInRune           int64 `json:"MinimumBondInRune"`
	MinimumNodesForBFT          int64 `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil    int64 `json:"MinimumNodesForYggdrasil"`
	NativeChainGasFee           int64 `json:"NativeChainGasFee"`
	NewPoolCycle                int64 `json:"NewPoolCycle"`
	ObservationDelayFlexibility int64 `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints          int64 `json:"ObserveSlashPoints"`
	OldValidatorRate            int64 `json:"OldValidatorRate"`
	OutboundTransactionFee      int64 `json:"OutboundTransactionFee"`
	SigningTransactionPeriod    int64 `json:"SigningTransactionPeriod"`
	YggFundLimit                int64 `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock struct {
	Current []LastblockItem `json:"current"`
}

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn string `json:"last_observed_in"`
	LastSignedOut  string `json:"last_signed_out"`
	Thorchain      string `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64 (10^8), total deposits (liquidity additions) in RUNE during the time interval. Accounts for both asset (using the price at deposit time) and RUNE deposited into pools
	Deposits string `json:"deposits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64 (10^8), total withdrawals in RUNE during the time interval. Accounts for both asset (using the price at withdrawal time) and RUNE withdrawn from pools
	Withdrawals string `json:"withdrawals"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// Liquidity provider data for all the pools of a given member
	Pools []MemberPoolDetails `json:"pools"`
}

// MemberPoolDetails defines model for MemberPoolDetails.
type MemberPoolDetails struct {

	// Int64, total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// Int64, total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Int64, total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`
	PoolShareFactor         string `json:"poolShareFactor"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64, Total Rune pooled in all pools
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64, Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NetworkFees defines model for NetworkFees.
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolLegacyDetail defines model for PoolLegacyDetail.
type PoolLegacyDetail struct {
	Asset string `json:"asset"`

	// same as assetDepth from pool/stats
	AssetDepth string `json:"assetDepth"`

	// same as toAssetCount from pool/stats
	BuyAssetCount string `json:"buyAssetCount"`

	// Float, same as history/swaps:toRuneVolume/toRuneCount
	BuyTxAverage string `json:"buyTxAverage"`

	// same as toAssetVolume from pool/stats
	BuyVolume string `json:"buyVolume"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, same as assetDepth + runeDepth
	PoolDepth string `json:"poolDepth"`

	// Float, same as history/swaps:totalFees/totalCount
	PoolFeeAverage string `json:"poolFeeAverage"`

	// same as totalFees from pool/stats
	PoolFeesTotal string `json:"poolFeesTotal"`

	// same as averageSlip from pool/stats
	PoolSlipAverage string `json:"poolSlipAverage"`

	// Float, same as history/swaps:totalVolume/totalCount
	PoolTxAverage string `json:"poolTxAverage"`

	// same as units from pool/stats
	PoolUnits string `json:"poolUnits"`

	// Int64, same as buyVolume + sellVolume
	PoolVolume string `json:"poolVolume"`

	// same as assetPrice from pool/stats
	Price string `json:"price"`

	// same as runeDepth from pool/stats
	RuneDepth string `json:"runeDepth"`

	// same as toRuneCount from pool/stats
	SellAssetCount string `json:"sellAssetCount"`

	// Float, same as history/swaps:toAssetVolume/toAssetCount
	SellTxAverage string `json:"sellTxAverage"`

	// same as toRuneVolume from pool/stats
	SellVolume string `json:"sellVolume"`

	// same as status from pool/stats
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune
	Volume24h string `json:"volume24h"`
}

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Float, same as history/swaps:toRuneVolume/toRuneCount
	BuyTxAverage string `json:"buyTxAverage"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, same as assetDepth + runeDepth
	PoolDepth string `json:"poolDepth"`

	// Float, same as history/swaps:totalFees/totalCount
	PoolFeeAverage string `json:"poolFeeAverage"`

	// Float, same as history/swaps:totalVolume/totalCount
	PoolTxAverage string `json:"poolTxAverage"`

	// Int64, same as buyVolume + sellVolume
	PoolVolume string `json:"poolVolume"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// Float, same as history/swaps:toAssetVolume/toAssetCount
	SellTxAverage string `json:"sellTxAverage"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64, same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64, same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, Liquidity Units in the pool
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune
	Volume24h string `json:"volume24h"`
}

// Queue defines model for Queue.
type Queue struct {
	Outbound string `json:"outbound"`
	Swap     string `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Daily active users (unique addresses interacting)
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Daily transactions
	DailyTx string `json:"dailyTx"`

	// Monthly active users
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Monthly transactions
	MonthlyTx string `json:"monthlyTx"`

	// Total buying transactions
	TotalAssetBuys string `json:"totalAssetBuys"`

	// Total selling transactions
	TotalAssetSells string `json:"totalAssetSells"`

	// Total RUNE balances
	TotalDepth string `json:"totalDepth"`

	// Total staking transactions
	TotalStakeTx string `json:"totalStakeTx"`

	// Total staked (in RUNE Value)
	TotalStaked string `json:"totalStaked"`

	// Total transactions
	TotalTx string `json:"totalTx"`

	// Total unique swappers & members
	TotalUsers string `json:"totalUsers"`

	// Total (in RUNE Value) of all assets swapped since start
	TotalVolume string `json:"totalVolume"`

	// Total withdrawing transactions
	TotalWithdrawTx string `json:"totalWithdrawTx"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float, the average slip by swap. Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64, volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64, volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64, the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64, toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Int64 (10^8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), trade slip percentage
	TradeSlip string `json:"tradeSlip"`

	// Int64 (10^8), minimum output amount specified for the swap
	TradeTarget string `json:"tradeTarget"`
}

// Transaction defines model for Transaction.
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction memo
	Memo string `json:"memo"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolLegacyResponse defines model for PoolLegacyResponse.
type PoolLegacyResponse PoolLegacyDetail

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Address of sender or recipient of any in/out transaction related to the action
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action (swap, addLiquidity, withdraw, donate, refund)
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *string `json:"status,omitempty"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
