// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64, Average bond of active nodes.
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64, Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64, Maxinum bond of active nodes.
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64, Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64, Median bond of active nodes.
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64, Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64, Minumum bond of active nodes.
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64, Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64, Total bond of active nodes.
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64, Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryInterval  `json:"meta"`
}

// EarningsHistoryInterval defines model for EarningsHistoryInterval.
type EarningsHistoryInterval struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64, Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64, Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64, System income generated during the time interval. It is the sum of liquidity fees and block rewards.
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64, Total liquidity fees, converted to RUNE, collected during the time interval.
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryIntervalPool `json:"pools"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistoryIntervalPool defines model for EarningsHistoryIntervalPool.
type EarningsHistoryIntervalPool struct {

	// Int64, Share of earnings sent to the pool during the time interval
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryInterval

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// Liquidity provider data for all the pools of a given member
	Pools []MemberPoolDetails `json:"pools"`
}

// MemberPoolDetails defines model for MemberPoolDetails.
type MemberPoolDetails struct {

	// Int64, total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// Int64, total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Int64, total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`
	BondingROI string `json:"bondingROI"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks).
	PoolActivationCountdown string  `json:"poolActivationCountdown"`
	PoolShareFactor         string  `json:"poolShareFactor"`
	StakingROI              *string `json:"stakingROI,omitempty"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64, Total Rune pooled in all pools.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64, Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NodeKey defines model for NodeKey.
type NodeKey struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Enabled, Bootstrap.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Daily active users (unique addresses interacting)
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Daily transactions
	DailyTx string `json:"dailyTx"`

	// Monthly active users
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Monthly transactions
	MonthlyTx string `json:"monthlyTx"`

	// Total buying transactions
	TotalAssetBuys string `json:"totalAssetBuys"`

	// Total selling transactions
	TotalAssetSells string `json:"totalAssetSells"`

	// Total RUNE balances
	TotalDepth string `json:"totalDepth"`

	// Total staking transactions
	TotalStakeTx string `json:"totalStakeTx"`

	// Total staked (in RUNE Value).
	TotalStaked string `json:"totalStaked"`

	// Total transactions
	TotalTx string `json:"totalTx"`

	// Total unique swappers & members
	TotalUsers string `json:"totalUsers"`

	// Total (in RUNE Value) of all assets swapped since start.
	TotalVolume string `json:"totalVolume"`

	// Total withdrawing transactions
	TotalWithdrawTx string `json:"totalWithdrawTx"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Int64, the average slip by swap. Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64, volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64, volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64, the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64, toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// TxDetails defines model for TxDetails.
type TxDetails struct {

	// Int64, Unix timestamp.
	Date   string `json:"date"`
	Events Event  `json:"events"`
	Height string `json:"height"`
	In     Tx     `json:"in"`
	Out    []Tx   `json:"out"`
	Pool   string `json:"pool"`
	Status string `json:"status"`
	Type   string `json:"type"`
}

// Coin defines model for coin.
type Coin struct {
	Amount string `json:"amount"`
	Asset  string `json:"asset"`
}

// Coins defines model for coins.
type Coins []Coin

// Event defines model for event.
type Event struct {
	Fee        string `json:"fee"`
	Slip       string `json:"slip"`
	StakeUnits string `json:"stakeUnits"`
}

// Option defines model for option.
type Option struct {
	Asymmetry           string `json:"asymmetry"`
	PriceTarget         string `json:"priceTarget"`
	WithdrawBasisPoints string `json:"withdrawBasisPoints"`
}

// Tx defines model for tx.
type Tx struct {
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`
	Memo    string `json:"memo"`
	Options Option `json:"options"`
	TxID    string `json:"txID"`
}

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse []string

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodeKeyResponse defines model for NodeKeyResponse.
type NodeKeyResponse []NodeKey

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse []PoolDetail

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// TxResponse defines model for TxResponse.
type TxResponse struct {

	// Int64, count of txs matching the filters.
	Count string      `json:"count"`
	Txs   []TxDetails `json:"txs"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval string `json:"interval"`

	// Start time of the query as unix timestamp
	From int64 `json:"from"`

	// End time of the query as unix timestamp
	To int64 `json:"to"`
}

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval string `json:"interval"`

	// Start time of the query as unix timestamp
	From int64 `json:"from"`

	// End time of the query as unix timestamp
	To int64 `json:"to"`
}

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return stats for this single pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval string `json:"interval"`

	// Start time of the query as unix timestamp
	From int64 `json:"from"`

	// End time of the query as unix timestamp
	To int64 `json:"to"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Interval of calculations
	Status string `json:"status"`
}

// GetTxDetailsParams defines parameters for GetTxDetails.
type GetTxDetailsParams struct {

	// Address of sender or recipient of any in/out tx in event
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx in event
	Txid *string `json:"txid,omitempty"`

	// Any asset used in event (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of event
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
