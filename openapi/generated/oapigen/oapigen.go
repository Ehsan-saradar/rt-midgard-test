// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {

	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Represents a digital currency amount
type Coin struct {

	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {

	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string  `json:"address"`
	Chain   string  `json:"chain"`
	GasRate *string `json:"gas_rate,omitempty"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                    int64  `json:"AsgardSize"`
	BadValidatorRate              int64  `json:"BadValidatorRate"`
	BadValidatorRedline           int    `json:"BadValidatorRedline"`
	BlocksPerYear                 int64  `json:"BlocksPerYear"`
	ChurnInterval                 int64  `json:"ChurnInterval"`
	ChurnRetryInterval            int64  `json:"ChurnRetryInterval"`
	DesiredValidatorSet           int64  `json:"DesiredValidatorSet"`
	DoubleSignMaxAge              int64  `json:"DoubleSignMaxAge"`
	EmissionCurve                 int64  `json:"EmissionCurve"`
	FailKeygenSlashPoints         int64  `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints        int64  `json:"FailKeysignSlashPoints"`
	FullImpLossProtectionBlocks   int64  `json:"FullImpLossProtectionBlocks"`
	FundMigrationInterval         int64  `json:"FundMigrationInterval"`
	IncentiveCurve                int64  `json:"IncentiveCurve"`
	JailTimeKeygen                int64  `json:"JailTimeKeygen"`
	JailTimeKeysign               int64  `json:"JailTimeKeysign"`
	LackOfObservationPenalty      int64  `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks         int64  `json:"LiquidityLockUpBlocks"`
	MaxAvailablePools             int64  `json:"MaxAvailablePools"`
	MaxSwapsPerBlock              int64  `json:"MaxSwapsPerBlock"`
	MinRunePoolDepth              int64  `json:"MinRunePoolDepth"`
	MinSlashPointsForBadValidator int64  `json:"MinSlashPointsForBadValidator"`
	MinSwapsPerBlock              int64  `json:"MinSwapsPerBlock"`
	MinimumBondInRune             int64  `json:"MinimumBondInRune"`
	MinimumNodesForBFT            int64  `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil      int64  `json:"MinimumNodesForYggdrasil"`
	NativeTransactionFee          int64  `json:"NativeTransactionFee"`
	NewPoolCycle                  *int64 `json:"NewPoolCycle,omitempty"`
	ObservationDelayFlexibility   int64  `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints            int64  `json:"ObserveSlashPoints"`
	OldValidatorRate              int64  `json:"OldValidatorRate"`
	OutboundTransactionFee        int64  `json:"OutboundTransactionFee"`
	PoolCycle                     int64  `json:"PoolCycle"`
	SigningTransactionPeriod      int64  `json:"SigningTransactionPeriod"`
	VirtualMultSynths             int64  `json:"VirtualMultSynths"`
	YggFundLimit                  int64  `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock []LastblockItem

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn int64  `json:"last_observed_in"`
	LastSignedOut  int64  `json:"last_signed_out"`
	Thorchain      int64  `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`
	PoolShareFactor         string `json:"poolShareFactor"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), Total Rune pooled in all pools
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// OHLCVHistory defines model for OHLCVHistory.
type OHLCVHistory struct {
	Intervals OHLCVHistoryIntervals `json:"intervals"`
	Meta      OHLCVHistoryMeta      `json:"meta"`
}

// OHLCVHistoryIntervals defines model for OHLCVHistoryIntervals.
type OHLCVHistoryIntervals []OHLCVHistoryItem

// OHLCVHistoryItem defines model for OHLCVHistoryItem.
type OHLCVHistoryItem struct {

	// Float, close price of asset in USD
	ClosePrice string `json:"closePrice"`

	// Int64, The end time of bucket in unix timestamp
	CloseTime string `json:"closeTime"`

	// Float, high price of asset in USD
	HighPrice string `json:"highPrice"`

	// Int64, The high time of bucket in unix timestamp
	HighTime string `json:"highTime"`

	// Int64, Liquidty is USD
	Liquidity string `json:"liquidity"`

	// Float, low price of asset in USD
	LowPrice string `json:"lowPrice"`

	// Int64, The low time of bucket in unix timestamp
	LowTime string `json:"lowTime"`

	// Float, open price of asset in USD
	OpenPrice string `json:"openPrice"`

	// Int64, The beginning time of bucket in unix timestamp
	OpenTime string `json:"openTime"`

	// Int64, Volume in USD
	Volume string `json:"volume"`
}

// OHLCVHistoryMeta defines model for OHLCVHistoryMeta.
type OHLCVHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// ObservedChain defines model for ObservedChain.
type ObservedChain struct {
	Chain  string `json:"chain"`
	Height int    `json:"height"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`
	Asset                  string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Int64, number of unique adresses that initiated swaps transactions in the period.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// PreflightStatus defines model for PreflightStatus.
type PreflightStatus struct {
	Code   int    `json:"code"`
	Reason string `json:"reason"`
	Status string `json:"status"`
}

// ProxiedNode defines model for ProxiedNode.
type ProxiedNode struct {
	ActiveBlockHeight int    `json:"active_block_height"`
	Bond              string `json:"bond"`
	BondAddress       string `json:"bond_address"`
	CurrentAward      string `json:"current_award"`
	ForcedToLeave     bool   `json:"forced_to_leave"`
	IpAddress         string `json:"ip_address"`
	Jail              struct {
		NodeAddress *string `json:"node_address,omitempty"`
	} `json:"jail"`
	LeaveHeight     int             `json:"leave_height"`
	NodeAddress     string          `json:"node_address"`
	ObserveChains   []ObservedChain `json:"observe_chains"`
	PreflightStatus PreflightStatus `json:"preflight_status"`
	PubKeySet       struct {
		Ed25519   string `json:"ed25519"`
		Secp256k1 string `json:"secp256k1"`
	} `json:"pub_key_set"`
	RequestedToLeave    bool     `json:"requested_to_leave"`
	SignerMembership    []string `json:"signer_membership"`
	SlashPoints         int      `json:"slash_points"`
	Status              string   `json:"status"`
	StatusSince         int      `json:"status_since"`
	ValidatorConsPubKey string   `json:"validator_cons_pub_key"`
	Version             string   `json:"version"`
}

// ProxiedNodes defines model for ProxiedNodes.
type ProxiedNodes []ProxiedNode

// Queue defines model for Queue.
type Queue struct {
	Internal int `json:"internal"`
	Outbound int `json:"outbound"`
	Swap     int `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, unique users (addresses) initiating swaps in the last 24 hours.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, unique users (addresses) initiating swaps in the last 30 days.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Int64, unique users (addresses) initiating swaps since beginning.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {

	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {

	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at the end of the interval
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// OHLCVHistoryResponse defines model for OHLCVHistoryResponse.
type OHLCVHistoryResponse OHLCVHistory

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ProxiedNodesResponse defines model for ProxiedNodesResponse.
type ProxiedNodesResponse ProxiedNodes

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`
}

// GetOHLCVHistoryParams defines parameters for GetOHLCVHistory.
type GetOHLCVHistoryParams struct {

	// Interval of calculations
	Interval *GetOHLCVHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetOHLCVHistoryParamsInterval defines parameters for GetOHLCVHistory.
type GetOHLCVHistoryParamsInterval string

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {

	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9f3PjNrLgV0Hp7mrtDSPL8q8ZV6Xe2eOZnbk3P3zjSa5S65wDkZCEMQnQBChZSc3X",
	"ui9wX+wVGgAJkiBFyXbey8b7x2YsAo1Go7vR3Wg0fh+EPEk5I0yKwenvg4yIlDNB4I+zUFLOxGfzm/op",
	"5EwSJtU/cZrGNMSqyd5XwZn6TYRzkmD1rzTjKckk1ZCwhqT+SSVJ4B//PSPTwengv+2VGOzp/mJPjzz4",
	"FgzkKiWD0wHOMrxSf4c818NHRIQZTaHd6eAdk8eHAWJ5MiEZ4lOUEZHHUqAEy3BO2QzJOUEzuiAMTWks",
	"SSaGgwK6kBlls8G3b8EgI3c5zUg0OP2nGSsosP+l6MAnX0koB99Ujyoin4nMMyYQZghwVriY/mjKMx8a",
	"34LBK86ExExuR+suShaQfch+mfOM8YigohWyDABoXZBUzt9SIXm2enTMXOA+5OA7wixCaUZDgua2aTB4",
	"jTNG2Uw8FWo1+D7siGniovWW4FjOHx0bDbaL2ebQAgmJZa7Z7AONZjiLFFbv2ITnLDqLoowIQR6fxeoD",
	"dHLaOxZBa3RmWlc57j0WchLz8PbRsSwgd6JXtKqhRe9yGlG5eiqOqw/gQ/L/UDmPMrzEsQCxiEjKBZUV",
	"FvxAlAK8IBLT+PFXugLdh6LWi0gNhqmSDxTbiaE04wsakQxFWGJgUoxESkI6pSFKAHI5g6fC3Yt1qajj",
	"GBR0YtsGg49ELnn2+Oxo4K7ZQpr0NP2AiIAfj55ApAHq5rgpCUrzSUxDdEtWBY6f3r5/9dNTSY4L3Icx",
	"fHdF5JLz+NGxUEC1XHhxaJAq0jIEYsAZQSnnsUXuSuInMAQKyO1owucKSkOLk3hCinkZ7czKpELDkguw",
	"yfg9JdHT8L0LvHOfgBbVPeJ/5yQnj44RQO1EBVpUUflMFiQT5MvbT58/4uTxkarB77kVYBRTIdWa2o6I",
	"qd71vQBrQ0JN5GlEQYsBKKc+eM9iPsExOn99ebXEaaHV1B9PpdQc2F5BVXiAdxKgBY/zhARoSghYBSKm",
	"qavuLK2fyiaowe9H0oIBfLaAYgrA/Kf3T0XfErRXtLjEsVU8qZyLAEn4acJZJAIgs/5hgeOcIGUvkqgk",
	"+rfAoOF40U2XVXuFxU6AE85maEnlHGUkxpJESGaYCet8BjWXOsKStPvBmHEkaUKExEmqRE6ZNdqwxRIt",
	"5zScw08GiSVWymxGhSTK9204xsFgTuhs3u5468+PMRBlvkG0z+ASpKQSdwYYBP0CDF9KSL4oQ0IkBjlf",
	"a1Sadt+CAc895PmUyz8YdcW2ookIbOKIsgWPFyRClLWM3FiPOnztZPrWKFKySASiU3fFqUBqEjFRE+aZ",
	"+mqnz73EwRlBQtI4RilhEWWz4SAYEJYng9N/DkQehmpvCAbmoxOUqeNcx/DLKiVlOMYFusTpIBjgKCrc",
	"sEEwWBp3axAMIs6UtAWDjExzpthWLKkM557BayEkvRqmVUE84HLNMYEW5ELAHN5rhpuCwZmD4weHSau6",
	"oXC6fmRUilahxYnaQhRJSi8tVz0QFoLOWMmh2iFCILwijwtBL/sZZ3RtTK2Gmm+O59r/X+IsEs25Tcqv",
	"Xn5VOrrjcwrWf8vnGq7uUBXAFTDeKXAWfSAyo6FnBnhBMjwjal9YENWyZYF2yIvdAJ3p1rD3WO5dEMTA",
	"RPXwvoF+JTGLJquNwQvdrx1+gu9pkic9sf+A7ynLk97YG+h9sf+gm2+APYkoZn2Rh8b9cYfmvVGvAl+P",
	"OWWb0F1RfRO6a+i9ka+BX4s9mEs9cf9S2Fp9MAfIffGugl6DdU0b1KcQeATZw2C+lfNJkWcmXmH28Zl3",
	"/bzC5FdWPC6PCRrq6kqpMal6FzvPZ2Vzq2/kHqutfXA6xbEgBewJ5zHBrEHCVlA+tF5xnyn4maQZEcog",
	"QhhFdEbVgoZ5lhEWrsyO1rCVzc9dnIGFIBKdQcOhV6+qBk0QZ9CPMvTq7dm7j8Ornz+cf3qvPJoEr98M",
	"NczA4tdGhf7nZkAzj9HWsbxqrW7Aj1kLvcooYKvLm+PDnr2B2JXumio9u19BY/c4q0rLKi5BZV71oXyE",
	"rhxHNahEmSTZAsdik1Otd0Un41Js0llZd41JApDAwWbdTN65ePdioUpvSRIfOzXaNG0cxdnQrFPqwE8o",
	"rNBCltTP4H5jCf8mWl+rf9qpt4roZUZDj/H/JuZYBuYoUW0rdqwsZ2SI3g3JEP5p0dkzLQqN0jHaj1cX",
	"rQPCVBqD/nh1gXYmWCgnSE83IiQlQsIXNfVdrxIiLPpCk3a//4shlnL91YCTPLzVI+aM3pcRAR/snk5D",
	"obkRtHvAcilyb8oin9USbT+kkDiTayk4ITPKIE61DR3Fisn5VZ6m8ap1lCvVBglo9JDpKDDdy6VHeuhS",
	"5Z1jaKtKj7FT4oS+Q1We2t0ag5oaLJexFInA1Tkuc1X0Ql1sG2xfIWp1MS0Z1uncD8Tnkz+l6D49W/dY",
	"AB9Z6okU2++rNUgbb631/rCzbbO7tiLSd4P1YtLcY33NPKGE2UcekVd+83aqtiC1+tbJL/Wo61WhKM9s",
	"hhRwRpcmmNSCM+tcLZNLAe0RSaiUJNpsQA5xPkuOzjGv5jgDxi6yc5SngCTfYqKk14ArIUmCKAt5QtCM",
	"MJLhrgkO0TuJqIAPIk+qobcpITqxo0K0xzAD7PAbGgIPpDnEPjeieTHyG0L6cFeVdgEKOVuQzETWP//4",
	"8bX6KY5JuCnTtQTRLUHKYyuCw7nezmxyXx32tjrh0mQE1PWC2tg2szrBZuo0Njv24uE1e8wdZxNO7LXp",
	"V1mmpp8cKW4qEh+jB1WNWqO25Ys+24JdwQZ5gN6kwkgdnOnxqt73FpKaailFwTHD/iaQjUJspwL1QWgx",
	"IcpA8NAO/F7BFX1nddpum8x5TknBZapmzkJLn0PRY1sC5Mw+aBXVDhxd0AXZRWocfEsYmmY8QTuMzLD+",
	"UJqt4pph5xhkgmPMQrV+VP5NIGHVoahsDaAngDf98qT47HEWVk2wNU5aGULphR5LWxtsB1bErmfOiPrn",
	"bolDgMScL1k7Kp4TMmuWv68Jc5MqrfMoV9/hW5+gmmzahimlJFEpSc+5YZYTlBBcJNquYKdhmuSSo6Jr",
	"MwCqrMmrFQv7QB2iNzgW9keTwausBX0aGtpM9jy1x3LhHFPmHVWEmDGSve0+tQcYEDuVxugI/dGO2po5",
	"E64OVEzXR/lGnnBfi7nesc1k9rZr2swmvcgNXw8mYSb378ZHJ7PjkQzvF/lhtJjGqfhtdru8OziMjhbL",
	"43R2Mj6eTQ980qVXogLy/MsrX8sZFjeZyd0oGx8dj49G3rwLHEviOdSg5rgdLedEzolSj1RohkBzLJDp",
	"F6wN0QeDNJ/c3JJVFSEp5zxL88k+jqIlS0l6F71kd3fJDK+Ok6/5aHV3Mk7l1zxMbl9iiZeSLA4Xh+x4",
	"eUvI0Wp8fPdiRMJwNrq/PTjxKjyeS5JVxxzdv4wOXx5fkJMXLw5Opkd4PDk7Pnw1ORy9Ph6H+y/fnIfn",
	"xyfToyO8/uqGkQw7t6BY9oKkfhatxKgbvHMmlExe0d+qy3cwCgYm5K9WRh4flgiqzXymU5vPcfQTjmmE",
	"Jc8+11ngeAsYJIopq6Hi7aRkW1yS7GeCqzQ/PtjfP3jZb+hX8zxj1t/dBncA8JnI0mvehooXRKhVLqhw",
	"pY9lCjD7435geD6JyRWdsQ/4/mxWpeL4sBeM1wkVgnL2Ks8WtdXs1f8NpvG/k9WMsKsYi/klp4brCjgn",
	"49EmkASdtYLqR5Y3eRy/S9L3XIjLjEsCuTKaf6pUPjwcjUY9kctZ9IHOMsjUewgDvWMhYcoeaxJ8vycu",
	"/wvTWLkOmuw1EJtCUOTeBsR7HN5+mn6aCEUJRZRLwnAsV1usV2EJvefh7Y+pZ6X6oaSEYIFpjCcxubTe",
	"76bz+oDvr5Y4VZoGENkKBmXKoNPp4eZwYAsYjhS84ZmrNbcF+AgTo0menHMWvWPW9nb5V/9vE1iQha6m",
	"9+ZLBdjhNkB+ns2iDAsab6HIPoKX5GQmviH+6fWDRpZq+V+twrgK5Wj/xWE/EI5sXZAYr97E5J5OaExr",
	"Qna0ATTSpln3+wGJH77723TSHpTuB9BP58ODcc/+av+kbObgc0kyyqPaxt4P2E80kzmOP+SxhGOrbfav",
	"n2cztd28pwmVG690zYh0rD2P8ea3xerGVt1s8lpBfqPGY6PUTY42E6LVIOje4Nu26sbO29hHm9tixy7X",
	"tmv5diHPpuLZI9apfI8G9ylkr2LtUJQtiq9b/XjViUc9tEq7K7UdEuiTp5p8+Fyg8p5sX/e86NHml1cb",
	"NJwqn+/88dx7PoCFvOGaetFNrdP+UU8/BqDo/OYbk7TvaM+XvWAo77iJ9/7R4YvN1Yz1VRuza6LqDuxd",
	"vPo14u0PXOugNj5xbQDY+si1HZXeLOrFxcOpvna+CNJZJVz5E9zB6hFLhSinsMnyXQeF1+yCMG5jujkj",
	"KBe2pT7ZwdLCga4tBzXupYZXPWtnFBfLO7BbN1ZvkvCpybtikcmPssN7aLCzhgi77Zh9dmPJvbGDUXst",
	"1x+drkWTlGQJVnxe3csvMe1Ogk5xVlzgsJdc1Dw1UcydrSUWKMUrEqEJCXEu9OldOSaKuRDXLC2GbSEB",
	"I915t4xI54QhnGM2IwLtLJ1aB98XHLG70SHun/ukdBNesNQCrbSpMrKd2QOVkYXTpY1sm76aqIC5oeA1",
	"2bqvrPeiRteQD1B8DtP31H0VmvuVX7/UuZYdrVVzepW9b7fxM6d3hdbptAaN6/yktU1N8H0GRbWOSWN/",
	"b8n+eE+FLK7rOtVCmiVOBKKRcpemlET6Sm95eF2eQ/SyXDSq/mQQ713D9vnafARPTsFZFJGor8pQUyiv",
	"BoJWnKxsBZe2ROmz8tTNd8BvqIJypXsnK+fSYStEWw6H9ca7lG043e+HfYQleUMz0UmjAP1YUdJFwsJU",
	"9dT6w9yhLI0JyhwStg2tfKetRlauw7YD90wFB+LVr47KOZZoQmJudWfnSvqTPhSnooyIwkyBNJmMTJVo",
	"Sd622fflYp0DshkTG/h+HtZ6fCMWVl024WDAeQsG9mdbuLOpCagnI7qkbeCqi/okGnLZEJ46S7frqqpr",
	"V6XNB3MZuUDYObWesMn+9Os4vvv6IlpkR2meTMN5eMJkPL2Lxovj36L7u+VXspweDYL1d93bb1hX7oqv",
	"K2bou7P9rbhMvrbWimrl9oPr6j0KiLh9isvsa/rZxSv7fvOskS1e5a3zqO8zVhdwLaV1x45cZqNyPham",
	"ob46qQvx9ElU7rzY5rY1OcfO9e3uO3Fl0zJb+ezy51aPY2cffYd2ytvk6O8690ZckuwDZ3K+V7tpuruL",
	"/i/aH6Pv9zt19foxhcS3pHNQXXOxzA8Hk6J7fEbuJYS01+QaqXZOmZCJDfl6twSYPIRPgR0i3qojtQeX",
	"kcRUlrHuk3bWCjBohzIzZmvyIWQyv8GhOSP0eXL2Hq1HKxUFq8x1W6TbbVhaQ/XcRArsYB87r0er/ZRE",
	"a/P9vpRuUAo9lO+hrNxKFYsG9M8EQpZ98rXJFDxa22PdbuXKYSO119U1tcVp6hMPcZu0qc2nydvtzNnk",
	"oIouqInpL+061Z/7+d4UzmKm+p++KiAED6ktJIOZKWwyRJ8YcVsinRiWzUhU5qz7aq/09Unabhkr2nou",
	"PkXjo6P9l81JmQ9OxcDqXl5PQJvdL6PpQZ6RUTo7mqrf8vuDVfKSjY7HxyfxbUbE0eFvy6/zw/DF6PAF",
	"+W3+9Wg0PrxbeQ0wxqN2gw4KqxWhdr+pMefZ/mi8GiUHeSpno8Uij8hqPhpl4yn77WS0vDuJXqxOknw8",
	"84aFSJiOj45v95uDF5/+UyhTE0GXTC7WQbGuXmYGddQ3Og984+GnSmnH7U8yXDAbn2K4nbe/ku1HoS99",
	"Kr1bTi4abZrHbDEXpPt2NDTxX1f2Jr2q5k8W4J7T2bwbXdWiP7aq9VpkAeSDbk+vuTgtV0odt6AY82X3",
	"jGO+7D/hmC/XzlcB3Ga6PCWsG1XVoj+uqvUTB8kXXYHZAJnTjzYUa1Jf4OtKgcNjJfVdWgWuELoc7ix9",
	"gajLU+t0yvOV45Is5gD9lT2dX59s4E/ULyselilINrOq54m+AeFD0ykY7A/Jej2GxymrMfxji2cM/6tU",
	"z3h4hYthq8Pa4Xzb29eXJAsJk+qfP1MSR6cIM5bjGGVQVBsRIWkC5rw+6YEI7pKQW2FukQVI4lv1BWwE",
	"ZbyD1aEmDiFdHIat9H6MYhvDFkXgrQepxF99IzaGqyAEiAxnQ1TkeAXKgZ2RaPjYhTSGj1suY/gHFcUY",
	"tm9c48P1S2eK0uqdjE+RWOK0mAew0/hwrp3FSIeQTX5D5aRx2LtuVYnZttU3rOw4pTEfpyCHW168r53t",
	"FnFvWtj1AuqPkhYkcEIQLp5w2Csmf2NSIU7bj2YfkOvTa9jGSe5DE342G7Vznptm8/Qa2n/Q3V4J7om2",
	"579maStb6jCmacuIx4do5xwLKlAKSbMBGn0P2e4BWs5JRhD88cP+aPQ/PCsOuvDUHeXPm1T1cEPmL23H",
	"PJkZ4wW8xOlmylhzKuzlrZpXtdlC7Tmg2/XbQ+yuxzW7/EcOoDDP/hB14RmsHaXtVtnp2g56bUWITui2",
	"ckIL8AfwUTWnyzOAEr0/aqnqY7UitN1ClT1bAW+9TEXnVtAPWKRKip3/CG9rxG1fv3t0lxOdrNGP4jFh",
	"O3YA8wTXvyk18MPlp0/vd9vHuFriNF03SJlUqjshbB+gg4wlyqjUZ2naaao8SWBVElysadmTn8AbfIxU",
	"3/WGrz8/c8vU3f7DtYrShrm7/UfsloMN8nf7D9k2XIs/XfjAnT5zq6e9uedc3wNq2qZiZ9T2uaoyde0c",
	"r1h6N27fDlH1BKo7YEXPuqrLDST8q+QyN/WnN86RkWlMZ3N5VRiwtYC3OZR36wE077NlBJsHlMq4+Kd/",
	"7zaUy5afCY5WfSL4mrvNYIHGzT+r4h22tiSzG0gHufFE6ffHB4dHx75ZTsz7ACXmuu3Ji5dtpSdvvOWC",
	"oDoOnoT+WkC6otINtq+M1IfzdZryLCTRjeQ3McE6mcZTSyr1o7M/Go5Hw4PR8NBbQ+irN1zFeES6Z3fo",
	"XdLGYgHCvoXwctr6Yb1pZuZe5A0crWxwdF45DfI9l2Tl56Zk7O4XAqvyVtZPujFRodbsF09xpfvVb+O1",
	"2SH+fvvr5a1nsobqQ4Rcy31wDzW7MZbZXFvzG2S3xVjMb9Jm+YTDsY9PfHpG50S2a6UbQVnoK4fgG2Bh",
	"b1vfhJyJm/YqWHgSehdpQTJB60pzNDw4Go56pdXclGlFhWp0eakVRaPIAq8mrKmtGml8q+jlgKZGqgl6",
	"RRuVxKits1E+daXYkGePIK7ZFzYI6zubiYcv9Qub/vQiVqtT5GUkm0q3vqXN3O5qVRdi/TZZMUZQIuYj",
	"UC1bvKn0q1mGPV4ohqYVC6H+IIv6vbh2UryQtob/HeAFbP+Eak+Ntt8LqLwqWkmYS1bmp7VKqnwatDPl",
	"f+Ob1CB9ZTrE8DGvT7cO4ndUI0zjldakPwpz08I7DeMn56oR2sG2quKu9ZUpm3lPGNGc55kYPm58vR4l",
	"R2WQHKWYwmOCLRNOOJPzp5zywQhFeCUeEK+2RTidi6hOHKAd8mNfbx5uF8EuGV4Tpw+3F1DXHWzXgdeO",
	"s7uBH4yi3lhXlzQaPiDu7j+Ir52z9yQTleG8R/J+edzBoCaNPvKz3fVpP8nC8QjxrHjLOPMf9/cMadcJ",
	"WGYUSG6ONftMsU9Q1juUHkLy/tTcIF7YXxX0GXjbi++bQd9k12gfocctcjfqVOHQRsX0SgCpIvM1Ka1G",
	"kDpDTY0dzKvjW8JQ3lhPIxizLnrTFRxqD9bU3zBr2BgXZIrzWNpUk7r/85rhSUzWW1dNMF5snEfGt8+u",
	"d6BsnFzv9t26OpAXgb6+QQMDj0lYa9L2nuujnW9BCgE4WSRCBjjamax0ce7da8anqBlMVaJdi6UGCGK+",
	"HyiTzV8/k4iQxPl9eM3OqdVpc7zQV7ch1q2xQVggkeA41m3+E2re/HUquvgW7tGYy/KUiKmuFwDrec1g",
	"U83M/g0YEElDndqzKXe0kM5Oq3sfDK0p04KMHqJzgLUnmlCdofp6AszfsS/aRt8xuVW7aybZYzuum4id",
	"4zr2Y2buK3rHboj2H8M5dXQl1/bl43GOnlhP3mlBZw3v6CEeg3vaxu/DPRqLbfmnbeQe/PNE2TW9tc4j",
	"6ppeLkzJLU3xa30Xp29SzgYqpqZYHpat06lUequSp0neWcsJT6A7+jiYPkaooPKArJ8efNCiIh6UD+Rl",
	"gy00QpGH2FqBwZE09B1yyI2+Q9Ut3/7gavKtk5IcOSyGNX9U7IDqoO15VmVWZMeo16wiiMXAxZ+17b86",
	"uPltp0b43a0rt3XnZFTNLc8uWlnf9dkgNcvGt1tVCdmZv1E11pobcDXDo3f+iNd2bjWN6vkma4vHVUrr",
	"NJxB9z263g+R2eoMSpktcVp9cqulquaWxzgKvl+ZA24b5WEqVEGHp0VGeFvM9IuaYHcl0ERX2UY8l2ku",
	"izfaUhLqOnr2hMmciG1yvlRZFIcGFdx8a22PlFpLBRImM0p6FgvUZ51w+UrOCS1KWBEBk8OmQqAdtG85",
	"Dtv+NZPZyhfBIPcpzTq81befPkN+hHkDzBTpoczcWijO1TQcr/LkS6Zfc6qOAD//TQCIx6+iUb+TDTgU",
	"0w2KxelaWU20rkfCauUKTZU3bqhVe4LN8yJYtX9Xp5ZbxBYX7zR+ev/wEF4JZOMIntN16wCeb/i+8bv6",
	"+E3mr7X4Qy/J/3XiVXrPx3EOBZnWVWEsrqqWh1YTziKBdiZczm3xMaUnTdWm3Q3fqy/Rec/D215FIReq",
	"NYqhuT0K1NV/HIf9y5wKRO5yHAv0q1M+CoYCU1DiWFMAfvo1UHs6lSjkyYQyIuoFY+GJZHjzGeZvpgav",
	"VQ/bnBk7NT10x9SsdelS3BT20rM15NZ1oBUWME1b9cu58CQ66H/NPnJJTvUDhFQguVS8DH7ebJaRGZak",
	"KKNuisvZkmLDB5i9NSr0MNycJzJ8z3EWH6HaaPPt3bYd4YqwqFKOsrkVcJOyuK6oFqhdef/uohs/GqE5",
	"FvMhuuIJqd5U2BF5qFbUW99LoARHRWaBOSaG1d9FCV5pBxuj30jGNYOsvwkOyLqPK+q5+sjfKC3pqXux",
	"ShJi9uPq9C9ISBMco53v94cjdJ2PRgfhD/AfgvaHo90A2QcxBZrzpZrVKoHKcTiu3MnEMVpiMUQj88wq",
	"MFK8QmVzbyawMorLl58eaDiX5jLIUiGXCCwYMadpWel1oyyaVgWPo4iqX4ryfnAJleey6yKqk2LzgEuo",
	"pYqvVwrOSMIXNhZSVstV3Fs+r1xdu8f0hWqc3Lg8UXJjdf2DmnPRvhpNKfgGDwJPuU7MZxKHOmM6gQzt",
	"QUQW4n8WZeeGPNMJW40LqfZt4EtdH+7s8h26y4mydR1jHurKs5X1OmLK1M62oBhoek6n2f//f0JCszQj",
	"Kc6IQAq3LNEVM/FE8QdoClNLUHI0ISgjOKLxCmF7+xWcF1OqDtIlhmBQKKxSnMENK0d5kYXiL/2Avlr4",
	"KsLKUNO7ZALbEFgd3ws9N/vssEIkwbe6Lv/3EUmVBmayoAHBYjUsiBRxIhDjEs15HKEwoxKUgjPVIfrC",
	"9XaGQ10lvEiQUTjpZ8DIfWCSQcSc53EEo60c9COakVDGK1CaVIJ701woJ1X2dDAeHg0PbPkrnNLB6eBg",
	"OIL04RSb98/2FuM9o77Vn14vGpxNq+MxlN62VedphjIS6yKRzk4wRGe2XqTas2eEkQwaTVaIM4J4hhKe",
	"kWtGmWcbKUraK6IpY8eCcioZuGuekIRrprA/4JWVccrUgNfMjOjfuIboM7QWCGdKe80os9iC7cKn6Gg0",
	"RG9oLNUKKfATgnCaxpRE10xys1oWHNgdauvR75xFg9PBP4g8M2RW1M9wQiSkCv6zTu1XPEkwEkpkAImY",
	"CjlEZ9YxnCKhLQKuSB/SlBKt/5QwUrYHUuUQxyzPtS3Kjp2b/9tWtlae5wCmrNQVTkjpucKb3UodepL2",
	"vwUNJX5Rx/y+5CcX3wqy4zfH48Pjg5OL1/snL4+Pj87PDg7G4/MXx4cX5y/fHIxGo/03Fwcn54evRxfj",
	"8dno/Pj1q9fHZ0fno5MXF2fnhy0zkPeQe7MB+mdsZSPecMlTVOo0mAXYefX27N3H4dXPH871NdPKO2TD",
	"L58+fDr/fv/1fhtd7eW9/mh9KiVMeQYVbjJ5ZwqGsJWYObtmO2KJU9jJi8SjoNgZAxRxJRGByb8OTOLf",
	"bo2LAEaldnkLpdUMNppSmbpmlYSuBkGiAEU6HUmRHx45940Yw4N07pCNZ9QSfE+TPBmcHo2CgYkWtqTQ",
	"17EzGkOtNp9OBZEVpNpw0k3XINWFxy/KxBApZ+a1+/Fo1GaiFO32jBb6bH4AQ0XkSYKVXTwwX5FS+fBJ",
	"7Q8RD1v3hqslns1ItvcpJUxtyQfDkQ2qhpoipfKPeJgnCp2hTz1e8FAn6zdnVCtg2zJkdSRRm9mFGRxb",
	"gxPPlPYdXLnIDn6xc54THOusau+0PwP3Ka8WaeMLgb1lioTPCdL9kZ2N1Ql6i27M/a0ebZv11F1bllN/",
	"RO+UTVjMzFwrhgKPe78rz+Db2nmCPtNlfYwfr/1tYQw8GpLhNVNbMHh2SjxTnmn7Ttc3qXr4UCTaCSxd",
	"MxNFUw3AyVE+KJJLjhIeEXF6zf6OlIuHbBAPFZsootJoA4GUqgMjTdGbJsREmcQQvYHjSRYpYywCR25J",
	"4/iaITA6lUlQ7jnFGGAqYAVwaBFQu5QHB4wEZbOYwDjD4ReOBMGZmqRQDpkSbPtYD7lXdmAR7xIwfQXe",
	"gj1FKReCKttXU/MUHSWUBXDzIUARVqqZkNsAQV5qgO5ynEmSBWhFcAaYwnnzKfrn/nB4OBr9MkQXZAoB",
	"olKRFlHTIbrg7G/SPi+E6LScIBUIXoSFvN2/g0m9J/kp4qnx9yiTgQ7gCRJyFsFkLi36ucAzYgw6Z7X/",
	"rrPg9/XFhlP067/Zjz9EeKX87vExzOCH/dGv9eZoQqZqZ1NodHXUf0n+w/7x6MWL8dHxSMOClwIsLDxV",
	"i6em1QeYaqfAHZ+8GL0w4C40SnJJiHk3BQ5guOE4sw8ISLiSxjoAnylQP7mfGV8OFT9+YvHKed3ncDQq",
	"1woMVLv1narWvzaRrqHpJ8Q1uyx3LYgsmDWDxVIgHArYQyXmvMxmsUAJkXhoYmfKu5Zzcs1g8qV42Mij",
	"oj1sg1U+CTmb0lmulaLmFyVndmog/VpsjFQpn1A5EiDjUzWKWr/KxF++bOOAakeUM0ljRX0PiF8t15tg",
	"rV5Cpweztn9p0/ut/0q18TUugNa6oDiFOZikwioYe5GGassDtg1jUdjnd4q4g8xysplBbgVfcSmOwzzG",
	"1mkpzbwItxl2TtC8HJQwZcD8c6B02CAYKCUGWfaqn1JjNr9+EAyMIhsEA6XJnAhHO8YfmwoN8k+AhEN0",
	"pb3pCSlktNCJ7pwORv4JhTazoU7CDmvwtXOco5je+Iaids4xRO+miCtZ1yKm/GS6ICxoKAUX0ZKVW0xr",
	"3m1Qrkf/Cli8xwRqaBlt40dLidCGiG1l3bpS1mIT/YNIU1oFAjXQA+0oYzJAb+lsHqD3fBmgVzEXxNbt",
	"3gXPQ1fNqdtR2g56NqSeDalnQ+rZkHo2pJ7akIKLgc+G1LMh9WxIPaEh5UpZiyGlX/NTCg3yIpCVybqB",
	"RHDGKJuJtbaRbWiO72xCZpGi+WzmPJs5z2bOs5nzlzBzXhtl2NPSebY3nu2NP7O9UWP3FpPDtmq1NRq1",
	"ctcaHWX2lw7BFOWulMrQNyaApM529M68/0t14k9poFirAq5b2CzUZ2Pl2Vh5NlaejZV/ZWOlSPjZNi6j",
	"FS1EZJDVzCJPKun8SnaNvLZYMSZs8xym8ZlNfxar6dlo6m001cWuxWoqH2p6pY2iVvNJFy9ZZzLBzVxY",
	"RVsFIIACBIG+rqs0iS9m82w2PZtNz2bTs9n0bDZZs8ktkdjPYjKKelN7afhsMD3HmZ5NJlKpyNliLV1B",
	"NaM2C0ku4vU5PuWVS53bYy+Bwy3swGwGvlvhLWdd+nkvfQtc3zhHP5g3v87hYvd3aIz+bn65VOPC2dyz",
	"DfVsQT1bUM8W1L+wBeUUqHk+IHs2XP6FDZeS01vsFo+RUDdidAWEvd/NXd1vfa63QaUjuHYssaRC0rAM",
	"1NSqzeidLhMIC8FD/dwp6D1besxWYNDDe28B6gcJdUG0dSJt70TDfX0Zzn24DNFrKudgSECytcKc2Qxs",
	"09/c5wYcKyw5mLDJ/tf76Xw8e3F0d7AYyeju6HjKyOL++D68lyGbS5GE+fFh4s8jLC9F908l3Io7XLK1",
	"3e3UbZAtNldlCtGfF2o3HWtV5oz3adZaGWFnRQO1zYJeEHO+ZIizkICuUAtE/iaQrhdkaheaxdF1Jqor",
	"ds10QTs9RqBhKlwqPZUdqtYVBmu5k69pIs4Mhj29cBjPTBClGRGESfdFna3d7Qesffeq1270mpIb211v",
	"NWVObB2jBk3N9wv9efP5mP4t87GjA/hiPvbFtu7ZQC0Fpcs+8ojYmiK3ZGW4zDCBVy/pN+G2mo7q2TYZ",
	"9a26NIpH9n4Hdl+vn50KkJb3TgufEy6TBGh8OC+i9GeXPw+Rb3qXmjM7mR/EuvH4mbeGQU0LmhIGT6wD",
	"1RxaU1XLSpngIHvJvQfnke1X3csNsCxeo0NwX6CSXtHYrseUkjgylaXB+YbN0fa9ZiHPNPqRkqsyyoBi",
	"HprSMT9RQfVI87ojr3RglNE4jviyteiIfaRF/Bda3aDJzupbKEVR000RUXWzJDQBBPBY9TvpoISH1+yi",
	"LLRwMIrqdU30S0BeXQxQvOb8vuqje56oFvr9oJfw/wfHR/BATxz7bPit+RaWqIV5IaBTMl+Fdbfbtq3a",
	"0Luo2li5PpsTbSy0ln10bRzjQca29KCp5EMFKp4g9a1F8bG5FkUZKP3U6Axq8YlcQFGm6FHXoIv+NSXd",
	"rSg6d89ZzCc4dlIfyng9bELKrHZKE3mPDYw8bxH97GCzf2jENPBiorrWxvCreZyzc77zPMG6zlaCwzll",
	"upgX1PCyNTtMJapqiZCWoxHVoVdBkK3HbQR+VVv0hgK3rSkQUtRR2wvdB7e8BLJPctk7nbnQxaXK6l4B",
	"Erx0S02zEDNlv/IFyTIa6S4JTWjmlVL9DG35+tc2/FH0bhMFPYiDeDlekzCmuNdN4SG0EuidKQNW+hJg",
	"vOtQh2O3WdM+gGhTSjIdQDLFv6w7B/Wldf4nmsLjw0zGK0SnDt5zLFCSx5KmMUEYSrD5DT8zZYNh4cts",
	"Rd46kN5UtvQph29SW+2NUP65S04zShZ6GyVCmoLclE25LcoXZlz5XEU18S6SvC8G3Cp3xfbuTYRyvObk",
	"+zkAuhayhgs9HGNKV4nkmfq9Y9Lb+wEugN5z1sM153tnX5XuPV/osfl89fPV28wXevaeqB7HnaiyDfZi",
	"zm/zdO939cdm4aqOavj18JQiU6M2fjPUXCnWv84ewi6sakF6W3jdY0sb+/uJHaXaswNt8URbl78eMCoW",
	"J7Ors1U8sXhzu2M9yvhZ63KI89VZ0WqzcKGDwUwxi/yTBv9qj5i32Xd0QdwYSDn7yQplGgTSKzr49u3b",
	"t/8IAAD//751nKe8/QAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
