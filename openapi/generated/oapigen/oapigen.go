// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {

	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Represents a digital currency amount
type Coin struct {

	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {

	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string  `json:"address"`
	Chain   string  `json:"chain"`
	GasRate *string `json:"gas_rate,omitempty"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                    int64  `json:"AsgardSize"`
	BadValidatorRate              int64  `json:"BadValidatorRate"`
	BadValidatorRedline           int    `json:"BadValidatorRedline"`
	BlocksPerYear                 int64  `json:"BlocksPerYear"`
	ChurnInterval                 int64  `json:"ChurnInterval"`
	ChurnRetryInterval            int64  `json:"ChurnRetryInterval"`
	DesiredValidatorSet           int64  `json:"DesiredValidatorSet"`
	DoubleSignMaxAge              int64  `json:"DoubleSignMaxAge"`
	EmissionCurve                 int64  `json:"EmissionCurve"`
	FailKeygenSlashPoints         int64  `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints        int64  `json:"FailKeysignSlashPoints"`
	FullImpLossProtectionBlocks   int64  `json:"FullImpLossProtectionBlocks"`
	FundMigrationInterval         int64  `json:"FundMigrationInterval"`
	IncentiveCurve                int64  `json:"IncentiveCurve"`
	JailTimeKeygen                int64  `json:"JailTimeKeygen"`
	JailTimeKeysign               int64  `json:"JailTimeKeysign"`
	LackOfObservationPenalty      int64  `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks         int64  `json:"LiquidityLockUpBlocks"`
	MaxAvailablePools             int64  `json:"MaxAvailablePools"`
	MaxSwapsPerBlock              int64  `json:"MaxSwapsPerBlock"`
	MinRunePoolDepth              int64  `json:"MinRunePoolDepth"`
	MinSlashPointsForBadValidator int64  `json:"MinSlashPointsForBadValidator"`
	MinSwapsPerBlock              int64  `json:"MinSwapsPerBlock"`
	MinimumBondInRune             int64  `json:"MinimumBondInRune"`
	MinimumNodesForBFT            int64  `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil      int64  `json:"MinimumNodesForYggdrasil"`
	NativeTransactionFee          int64  `json:"NativeTransactionFee"`
	NewPoolCycle                  *int64 `json:"NewPoolCycle,omitempty"`
	ObservationDelayFlexibility   int64  `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints            int64  `json:"ObserveSlashPoints"`
	OldValidatorRate              int64  `json:"OldValidatorRate"`
	OutboundTransactionFee        int64  `json:"OutboundTransactionFee"`
	PoolCycle                     int64  `json:"PoolCycle"`
	SigningTransactionPeriod      int64  `json:"SigningTransactionPeriod"`
	VirtualMultSynths             int64  `json:"VirtualMultSynths"`
	YggFundLimit                  int64  `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock []LastblockItem

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn int64  `json:"last_observed_in"`
	LastSignedOut  int64  `json:"last_signed_out"`
	Thorchain      int64  `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`
	PoolShareFactor         string `json:"poolShareFactor"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), Total Rune pooled in all pools
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// ObservedChain defines model for ObservedChain.
type ObservedChain struct {
	Chain  string `json:"chain"`
	Height int    `json:"height"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`
	Asset                  string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Int64, number of unique adresses that initiated swaps transactions in the period.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// PreflightStatus defines model for PreflightStatus.
type PreflightStatus struct {
	Code   int    `json:"code"`
	Reason string `json:"reason"`
	Status string `json:"status"`
}

// ProxiedNode defines model for ProxiedNode.
type ProxiedNode struct {
	ActiveBlockHeight int    `json:"active_block_height"`
	Bond              string `json:"bond"`
	BondAddress       string `json:"bond_address"`
	CurrentAward      string `json:"current_award"`
	ForcedToLeave     bool   `json:"forced_to_leave"`
	IpAddress         string `json:"ip_address"`
	Jail              struct {
		NodeAddress *string `json:"node_address,omitempty"`
	} `json:"jail"`
	LeaveHeight     int             `json:"leave_height"`
	NodeAddress     string          `json:"node_address"`
	ObserveChains   []ObservedChain `json:"observe_chains"`
	PreflightStatus PreflightStatus `json:"preflight_status"`
	PubKeySet       struct {
		Ed25519   string `json:"ed25519"`
		Secp256k1 string `json:"secp256k1"`
	} `json:"pub_key_set"`
	RequestedToLeave    bool     `json:"requested_to_leave"`
	SignerMembership    []string `json:"signer_membership"`
	SlashPoints         int      `json:"slash_points"`
	Status              string   `json:"status"`
	StatusSince         int      `json:"status_since"`
	ValidatorConsPubKey string   `json:"validator_cons_pub_key"`
	Version             string   `json:"version"`
}

// ProxiedNodes defines model for ProxiedNodes.
type ProxiedNodes []ProxiedNode

// Queue defines model for Queue.
type Queue struct {
	Internal int `json:"internal"`
	Outbound int `json:"outbound"`
	Swap     int `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, unique users (addresses) initiating swaps in the last 24 hours.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, unique users (addresses) initiating swaps in the last 30 days.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Int64, unique users (addresses) initiating swaps since beginning.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip by swap.
	// Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps to asset denoted in rune
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps to rune
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64(e8), toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {

	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {

	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at the end of the interval
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ProxiedNodesResponse defines model for ProxiedNodesResponse.
type ProxiedNodesResponse ProxiedNodes

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {

	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
