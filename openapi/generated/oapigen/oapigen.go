// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {

	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Represents a digital currency amount
type Coin struct {

	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {

	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string  `json:"address"`
	Chain   string  `json:"chain"`
	GasRate *string `json:"gas_rate,omitempty"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                    int64  `json:"AsgardSize"`
	BadValidatorRate              int64  `json:"BadValidatorRate"`
	BadValidatorRedline           int    `json:"BadValidatorRedline"`
	BlocksPerYear                 int64  `json:"BlocksPerYear"`
	ChurnInterval                 int64  `json:"ChurnInterval"`
	ChurnRetryInterval            int64  `json:"ChurnRetryInterval"`
	DesiredValidatorSet           int64  `json:"DesiredValidatorSet"`
	DoubleSignMaxAge              int64  `json:"DoubleSignMaxAge"`
	EmissionCurve                 int64  `json:"EmissionCurve"`
	FailKeygenSlashPoints         int64  `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints        int64  `json:"FailKeysignSlashPoints"`
	FullImpLossProtectionBlocks   int64  `json:"FullImpLossProtectionBlocks"`
	FundMigrationInterval         int64  `json:"FundMigrationInterval"`
	IncentiveCurve                int64  `json:"IncentiveCurve"`
	JailTimeKeygen                int64  `json:"JailTimeKeygen"`
	JailTimeKeysign               int64  `json:"JailTimeKeysign"`
	LackOfObservationPenalty      int64  `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks         int64  `json:"LiquidityLockUpBlocks"`
	MaxAvailablePools             int64  `json:"MaxAvailablePools"`
	MaxSwapsPerBlock              int64  `json:"MaxSwapsPerBlock"`
	MinRunePoolDepth              int64  `json:"MinRunePoolDepth"`
	MinSlashPointsForBadValidator int64  `json:"MinSlashPointsForBadValidator"`
	MinSwapsPerBlock              int64  `json:"MinSwapsPerBlock"`
	MinimumBondInRune             int64  `json:"MinimumBondInRune"`
	MinimumNodesForBFT            int64  `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil      int64  `json:"MinimumNodesForYggdrasil"`
	NativeTransactionFee          int64  `json:"NativeTransactionFee"`
	NewPoolCycle                  *int64 `json:"NewPoolCycle,omitempty"`
	ObservationDelayFlexibility   int64  `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints            int64  `json:"ObserveSlashPoints"`
	OldValidatorRate              int64  `json:"OldValidatorRate"`
	OutboundTransactionFee        int64  `json:"OutboundTransactionFee"`
	PoolCycle                     int64  `json:"PoolCycle"`
	SigningTransactionPeriod      int64  `json:"SigningTransactionPeriod"`
	VirtualMultSynths             int64  `json:"VirtualMultSynths"`
	YggFundLimit                  int64  `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock []LastblockItem

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn int64  `json:"last_observed_in"`
	LastSignedOut  int64  `json:"last_signed_out"`
	Thorchain      int64  `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`
	PoolShareFactor         string `json:"poolShareFactor"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), Total Rune pooled in all pools
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// ObservedChain defines model for ObservedChain.
type ObservedChain struct {
	Chain  string `json:"chain"`
	Height int    `json:"height"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolLegacyDetail defines model for PoolLegacyDetail.
type PoolLegacyDetail struct {
	Asset string `json:"asset"`

	// same as assetDepth from pool/stats
	AssetDepth string `json:"assetDepth"`

	// same as addAssetLiquidityVolume from pool/stats
	AssetStakedTotal string `json:"assetStakedTotal"`

	// same as toAssetCount from pool/stats
	BuyAssetCount string `json:"buyAssetCount"`

	// same as toAssetFees / toAssetCount from pool/stats
	BuyFeeAverage string `json:"buyFeeAverage"`

	// same as toAssetFees from pool/stats
	BuyFeesTotal string `json:"buyFeesTotal"`

	// same as toAssetAverageSlip from pool/stats
	BuySlipAverage string `json:"buySlipAverage"`

	// same as toAssetVolume / toAssetCount from pool/stats
	BuyTxAverage string `json:"buyTxAverage"`

	// same as toAssetVolume from pool/stats
	BuyVolume string `json:"buyVolume"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// same as 2*runeDepth from pool/stats
	PoolDepth string `json:"poolDepth"`

	// same as totalFees / swapCount from pool/stats
	PoolFeeAverage string `json:"poolFeeAverage"`

	// same as totalFees from pool/stats
	PoolFeesTotal string `json:"poolFeesTotal"`

	// same as averageSlip from pool/stats
	PoolSlipAverage string `json:"poolSlipAverage"`

	// same as addLiquidityVolume from pool/stats
	PoolStakedTotal string `json:"poolStakedTotal"`

	// same as swapVolume / swapCount from pool/stats
	PoolTxAverage string `json:"poolTxAverage"`

	// same as units from pool/stats
	PoolUnits string `json:"poolUnits"`

	// Int64(e8), same as buyVolume + sellVolume
	PoolVolume string `json:"poolVolume"`

	// same as assetPrice from pool/stats
	Price string `json:"price"`

	// same as runeDepth from pool/stats
	RuneDepth string `json:"runeDepth"`

	// same as addRuneLiquidityVolume from pool/stats
	RuneStakedTotal string `json:"runeStakedTotal"`

	// same as toRuneCount from pool/stats
	SellAssetCount string `json:"sellAssetCount"`

	// same as toRuneFees / toRuneCount from pool/stats
	SellFeeAverage string `json:"sellFeeAverage"`

	// same as toRuneFees from pool/stats
	SellFeesTotal string `json:"sellFeesTotal"`

	// same as toRuneAverageSlip from pool/stats
	SellSlipAverage string `json:"sellSlipAverage"`

	// same as toRuneVolume / toRuneCount from pool/stats
	SellTxAverage string `json:"sellTxAverage"`

	// same as toRuneVolume from pool/stats
	SellVolume string `json:"sellVolume"`

	// same as addLiquidityCount from pool/stats
	StakeTxCount string `json:"stakeTxCount"`

	// same as uniqueMemberCount from pool/stats
	StakersCount string `json:"stakersCount"`

	// same as addLiquidityCount + withdrawCount from pool/stats
	StakingTxCount string `json:"stakingTxCount"`

	// same as status from pool/stats
	Status string `json:"status"`

	// Int64, same as history/swaps:uniqueSwapperCount
	SwappersCount string `json:"swappersCount"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64(e8), same as swapVolume pool/stats?period=24h
	Volume24h string `json:"volume24h"`

	// same as withdrawCount from pool/stats
	WithdrawTxCount string `json:"withdrawTxCount"`
}

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`
	Asset                  string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Int64, number of unique adresses that initiated swaps transactions in the period.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// PreflightStatus defines model for PreflightStatus.
type PreflightStatus struct {
	Code   int    `json:"code"`
	Reason string `json:"reason"`
	Status string `json:"status"`
}

// ProxiedNode defines model for ProxiedNode.
type ProxiedNode struct {
	ActiveBlockHeight int    `json:"active_block_height"`
	Bond              string `json:"bond"`
	BondAddress       string `json:"bond_address"`
	CurrentAward      string `json:"current_award"`
	ForcedToLeave     bool   `json:"forced_to_leave"`
	IpAddress         string `json:"ip_address"`
	Jail              struct {
		NodeAddress *string `json:"node_address,omitempty"`
	} `json:"jail"`
	LeaveHeight     int             `json:"leave_height"`
	NodeAddress     string          `json:"node_address"`
	ObserveChains   []ObservedChain `json:"observe_chains"`
	PreflightStatus PreflightStatus `json:"preflight_status"`
	PubKeySet       struct {
		Ed25519   string `json:"ed25519"`
		Secp256k1 string `json:"secp256k1"`
	} `json:"pub_key_set"`
	RequestedToLeave    bool     `json:"requested_to_leave"`
	SignerMembership    []string `json:"signer_membership"`
	SlashPoints         int      `json:"slash_points"`
	Status              string   `json:"status"`
	StatusSince         int      `json:"status_since"`
	ValidatorConsPubKey string   `json:"validator_cons_pub_key"`
	Version             string   `json:"version"`
}

// ProxiedNodes defines model for ProxiedNodes.
type ProxiedNodes []ProxiedNode

// Queue defines model for Queue.
type Queue struct {
	Internal int `json:"internal"`
	Outbound int `json:"outbound"`
	Swap     int `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, unique users (addresses) initiating swaps in the last 24 hours.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, unique users (addresses) initiating swaps in the last 30 days.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Int64, unique users (addresses) initiating swaps since beginning.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip by swap.
	// Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps to asset denoted in rune
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps to rune
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64(e8), toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {

	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {

	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at the end of the interval
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolLegacyResponse defines model for PoolLegacyResponse.
type PoolLegacyResponse PoolLegacyDetail

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ProxiedNodesResponse defines model for ProxiedNodesResponse.
type ProxiedNodesResponse ProxiedNodes

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {

	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
