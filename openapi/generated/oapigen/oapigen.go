// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64, Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64, Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64, Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64, Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64, Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64, Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64, Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64, Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64, Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64, Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64, Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64, Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64, System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64, Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistoryItemPool defines model for EarningsHistoryItemPool.
type EarningsHistoryItemPool struct {

	// Int64, Share of earnings sent to the pool during the time interval
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses struct {
	Current []InboundAddressesItem `json:"current"`
}

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string `json:"address"`
	Chain   string `json:"chain"`

	// indicate whether this chain has halted
	Halted bool   `json:"halted"`
	PubKey string `json:"pub_key"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                  int64 `json:"AsgardSize"`
	BadValidatorRate            int64 `json:"BadValidatorRate"`
	BlocksPerYear               int64 `json:"BlocksPerYear"`
	ChurnInterval               int64 `json:"ChurnInterval"`
	ChurnRetryInterval          int64 `json:"ChurnRetryInterval"`
	CliTxCost                   int64 `json:"CliTxCost"`
	DesiredValidatorSet         int64 `json:"DesiredValidatorSet"`
	DoubleSignMaxAge            int64 `json:"DoubleSignMaxAge"`
	EmissionCurve               int64 `json:"EmissionCurve"`
	FailKeygenSlashPoints       int64 `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints      int64 `json:"FailKeysignSlashPoints"`
	FundMigrationInterval       int64 `json:"FundMigrationInterval"`
	JailTimeKeygen              int64 `json:"JailTimeKeygen"`
	JailTimeKeysign             int64 `json:"JailTimeKeysign"`
	LackOfObservationPenalty    int64 `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks       int64 `json:"LiquidityLockUpBlocks"`
	MinimumBondInRune           int64 `json:"MinimumBondInRune"`
	MinimumNodesForBFT          int64 `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil    int64 `json:"MinimumNodesForYggdrasil"`
	NativeChainGasFee           int64 `json:"NativeChainGasFee"`
	NewPoolCycle                int64 `json:"NewPoolCycle"`
	ObservationDelayFlexibility int64 `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints          int64 `json:"ObserveSlashPoints"`
	OldValidatorRate            int64 `json:"OldValidatorRate"`
	OutboundTransactionFee      int64 `json:"OutboundTransactionFee"`
	SigningTransactionPeriod    int64 `json:"SigningTransactionPeriod"`
	YggFundLimit                int64 `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock struct {
	Current []LastblockItem `json:"current"`
}

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn string `json:"last_observed_in"`
	LastSignedOut  string `json:"last_signed_out"`
	Thorchain      string `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64, total deposits (liquidity additions) during the time interval
	Deposits string `json:"deposits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, total withdrawals during the time interval
	Withdrawals string `json:"withdrawals"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// Liquidity provider data for all the pools of a given member
	Pools []MemberPoolDetails `json:"pools"`
}

// MemberPoolDetails defines model for MemberPoolDetails.
type MemberPoolDetails struct {

	// Int64, total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// Int64, total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Int64, total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`
	PoolShareFactor         string `json:"poolShareFactor"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64, Total Rune pooled in all pools
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64, Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NodeKey defines model for NodeKey.
type NodeKey struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// NodeKeys defines model for NodeKeys.
type NodeKeys []NodeKey

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolLegacyDetail defines model for PoolLegacyDetail.
type PoolLegacyDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Int64, same as history/swaps:toAssetCount
	BuyAssetCount string `json:"buyAssetCount"`

	// Float, same as history/swaps:toRuneVolume/toRuneCount
	BuyTxAverage string `json:"buyTxAverage"`

	// Int64, same as history/swaps:toAssetVolume
	BuyVolume string `json:"buyVolume"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, same as assetDepth + runeDepth
	PoolDepth string `json:"poolDepth"`

	// Float, same as history/swaps:totalFees/totalCount
	PoolFeeAverage string `json:"poolFeeAverage"`

	// Int64, same as history/swaps:totalFees
	PoolFeesTotal string `json:"poolFeesTotal"`

	// Float, same as history/swaps:averageSlip
	PoolSlipAverage string `json:"poolSlipAverage"`

	// Float, same as history/swaps:totalVolume/totalCount
	PoolTxAverage string `json:"poolTxAverage"`

	// Int64, same as buyVolume + sellVolume
	PoolVolume string `json:"poolVolume"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// Int64, same as history/swaps:toRuneCount
	SellAssetCount string `json:"sellAssetCount"`

	// Float, same as history/swaps:toAssetVolume/toAssetCount
	SellTxAverage string `json:"sellTxAverage"`

	// Int64, same as history/swaps:toRuneVolume
	SellVolume string `json:"sellVolume"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64, Liquidity Units in the pool
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune
	Volume24h string `json:"volume24h"`
}

// Queue defines model for Queue.
type Queue struct {
	Outbound string `json:"outbound"`
	Swap     string `json:"swap"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Daily active users (unique addresses interacting)
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Daily transactions
	DailyTx string `json:"dailyTx"`

	// Monthly active users
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Monthly transactions
	MonthlyTx string `json:"monthlyTx"`

	// Total buying transactions
	TotalAssetBuys string `json:"totalAssetBuys"`

	// Total selling transactions
	TotalAssetSells string `json:"totalAssetSells"`

	// Total RUNE balances
	TotalDepth string `json:"totalDepth"`

	// Total staking transactions
	TotalStakeTx string `json:"totalStakeTx"`

	// Total staked (in RUNE Value)
	TotalStaked string `json:"totalStaked"`

	// Total transactions
	TotalTx string `json:"totalTx"`

	// Total unique swappers & members
	TotalUsers string `json:"totalUsers"`

	// Total (in RUNE Value) of all assets swapped since start
	TotalVolume string `json:"totalVolume"`

	// Total withdrawing transactions
	TotalWithdrawTx string `json:"totalWithdrawTx"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float, the average slip by swap. Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64, volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64, volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64, the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64, toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// TxDetails defines model for TxDetails.
type TxDetails struct {

	// Int64, Unix timestamp
	Date   string   `json:"date"`
	Events Event    `json:"events"`
	Height string   `json:"height"`
	In     []Tx     `json:"in"`
	Out    []Tx     `json:"out"`
	Pools  []string `json:"pools"`
	Status string   `json:"status"`
	Type   string   `json:"type"`
}

// Coin defines model for coin.
type Coin struct {
	Amount string `json:"amount"`
	Asset  string `json:"asset"`
}

// Coins defines model for coins.
type Coins []Coin

// Event defines model for event.
type Event struct {
	Fee        string `json:"fee"`
	Slip       string `json:"slip"`
	StakeUnits string `json:"stakeUnits"`
}

// Tx defines model for tx.
type Tx struct {
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`
	Memo    string `json:"memo"`
	TxID    string `json:"txID"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodeKeyResponse defines model for NodeKeyResponse.
type NodeKeyResponse NodeKeys

// PoolLegacyResponse defines model for PoolLegacyResponse.
type PoolLegacyResponse PoolLegacyDetail

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// TxResponse defines model for TxResponse.
type TxResponse struct {

	// Int64, count of txs matching the filters.
	Count string      `json:"count"`
	Txs   []TxDetails `json:"txs"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *string `json:"status,omitempty"`
}

// GetTxDetailsParams defines parameters for GetTxDetails.
type GetTxDetailsParams struct {

	// Address of sender or recipient of any in/out tx in event
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx in event
	Txid *string `json:"txid,omitempty"`

	// Any asset used in event (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of event
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"vo3kXJgAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
