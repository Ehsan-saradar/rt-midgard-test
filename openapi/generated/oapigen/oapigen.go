// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64, Average bond of active nodes.
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64, Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64, Maxinum bond of active nodes.
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64, Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64, Median bond of active nodes.
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64, Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64, Minumum bond of active nodes.
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64, Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64, Total bond of active nodes.
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64, Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64, Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64, Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64, System income generated during the time interval. It is the sum of liquidity fees and block rewards.
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64, Total liquidity fees, converted to RUNE, collected during the time interval.
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistoryItemPool defines model for EarningsHistoryItemPool.
type EarningsHistoryItemPool struct {

	// Int64, Share of earnings sent to the pool during the time interval
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64, total deposits (liquidity additions) during the time interval
	Deposits string `json:"deposits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, total withdrawals during the time interval
	Withdrawals string `json:"withdrawals"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// Liquidity provider data for all the pools of a given member
	Pools []MemberPoolDetails `json:"pools"`
}

// MemberPoolDetails defines model for MemberPoolDetails.
type MemberPoolDetails struct {

	// Int64, total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// Int64, total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Int64, total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`
	BondingROI string `json:"bondingROI"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks).
	PoolActivationCountdown string  `json:"poolActivationCountdown"`
	PoolShareFactor         string  `json:"poolShareFactor"`
	StakingROI              *string `json:"stakingROI,omitempty"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64, Total Rune pooled in all pools.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64, Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NodeKey defines model for NodeKey.
type NodeKey struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Daily active users (unique addresses interacting)
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Daily transactions
	DailyTx string `json:"dailyTx"`

	// Monthly active users
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Monthly transactions
	MonthlyTx string `json:"monthlyTx"`

	// Total buying transactions
	TotalAssetBuys string `json:"totalAssetBuys"`

	// Total selling transactions
	TotalAssetSells string `json:"totalAssetSells"`

	// Total RUNE balances
	TotalDepth string `json:"totalDepth"`

	// Total staking transactions
	TotalStakeTx string `json:"totalStakeTx"`

	// Total staked (in RUNE Value).
	TotalStaked string `json:"totalStaked"`

	// Total transactions
	TotalTx string `json:"totalTx"`

	// Total unique swappers & members
	TotalUsers string `json:"totalUsers"`

	// Total (in RUNE Value) of all assets swapped since start.
	TotalVolume string `json:"totalVolume"`

	// Total withdrawing transactions
	TotalWithdrawTx string `json:"totalWithdrawTx"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Int64, the average slip by swap. Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64, volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64, volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64, the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64, toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// TxDetails defines model for TxDetails.
type TxDetails struct {

	// Int64, Unix timestamp.
	Date   string `json:"date"`
	Events Event  `json:"events"`
	Height string `json:"height"`
	In     Tx     `json:"in"`
	Out    []Tx   `json:"out"`
	Pool   string `json:"pool"`
	Status string `json:"status"`
	Type   string `json:"type"`
}

// Coin defines model for coin.
type Coin struct {
	Amount string `json:"amount"`
	Asset  string `json:"asset"`
}

// Coins defines model for coins.
type Coins []Coin

// Event defines model for event.
type Event struct {
	Fee        string `json:"fee"`
	Slip       string `json:"slip"`
	StakeUnits string `json:"stakeUnits"`
}

// Option defines model for option.
type Option struct {
	Asymmetry           string `json:"asymmetry"`
	PriceTarget         string `json:"priceTarget"`
	WithdrawBasisPoints string `json:"withdrawBasisPoints"`
}

// Tx defines model for tx.
type Tx struct {
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`
	Memo    string `json:"memo"`
	Options Option `json:"options"`
	TxID    string `json:"txID"`
}

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse []string

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodeKeyResponse defines model for NodeKeyResponse.
type NodeKeyResponse []NodeKey

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse []PoolDetail

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// TxResponse defines model for TxResponse.
type TxResponse struct {

	// Int64, count of txs matching the filters.
	Count string      `json:"count"`
	Txs   []TxDetails `json:"txs"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval string `json:"interval"`

	// Start time of the query as unix timestamp
	From int64 `json:"from"`

	// End time of the query as unix timestamp
	To int64 `json:"to"`
}

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval string `json:"interval"`

	// Start time of the query as unix timestamp
	From int64 `json:"from"`

	// End time of the query as unix timestamp
	To int64 `json:"to"`
}

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing.
	Pool *int64 `json:"pool,omitempty"`

	// Interval of calculations
	Interval string `json:"interval"`

	// Start time of the query as unix timestamp
	From int64 `json:"from"`

	// End time of the query as unix timestamp
	To int64 `json:"to"`
}

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval string `json:"interval"`

	// Start time of the query as unix timestamp
	From int64 `json:"from"`

	// End time of the query as unix timestamp
	To int64 `json:"to"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Interval of calculations
	Status string `json:"status"`
}

// GetTxDetailsParams defines parameters for GetTxDetails.
type GetTxDetailsParams struct {

	// Address of sender or recipient of any in/out tx in event
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx in event
	Txid *string `json:"txid,omitempty"`

	// Any asset used in event (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of event
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
