// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64, Average bond of active nodes.
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64, Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64, Maxinum bond of active nodes.
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64, Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64, Median bond of active nodes.
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64, Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64, Minumum bond of active nodes.
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64, Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64, Total bond of active nodes.
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64, Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64, Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64, Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64, System income generated during the time interval. It is the sum of liquidity fees and block rewards.
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64, Total liquidity fees, converted to RUNE, collected during the time interval.
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistoryItemPool defines model for EarningsHistoryItemPool.
type EarningsHistoryItemPool struct {

	// Int64, Share of earnings sent to the pool during the time interval
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64, total deposits (liquidity additions) during the time interval
	Deposits string `json:"deposits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, total withdrawals during the time interval
	Withdrawals string `json:"withdrawals"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// Liquidity provider data for all the pools of a given member
	Pools []MemberPoolDetails `json:"pools"`
}

// MemberPoolDetails defines model for MemberPoolDetails.
type MemberPoolDetails struct {

	// Int64, total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// Int64, total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Int64, total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`
	BondingROI string `json:"bondingROI"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks).
	PoolActivationCountdown string  `json:"poolActivationCountdown"`
	PoolShareFactor         string  `json:"poolShareFactor"`
	StakingROI              *string `json:"stakingROI,omitempty"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64, Total Rune pooled in all pools.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64, Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NodeKey defines model for NodeKey.
type NodeKey struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Daily active users (unique addresses interacting)
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Daily transactions
	DailyTx string `json:"dailyTx"`

	// Monthly active users
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Monthly transactions
	MonthlyTx string `json:"monthlyTx"`

	// Total buying transactions
	TotalAssetBuys string `json:"totalAssetBuys"`

	// Total selling transactions
	TotalAssetSells string `json:"totalAssetSells"`

	// Total RUNE balances
	TotalDepth string `json:"totalDepth"`

	// Total staking transactions
	TotalStakeTx string `json:"totalStakeTx"`

	// Total staked (in RUNE Value).
	TotalStaked string `json:"totalStaked"`

	// Total transactions
	TotalTx string `json:"totalTx"`

	// Total unique swappers & members
	TotalUsers string `json:"totalUsers"`

	// Total (in RUNE Value) of all assets swapped since start.
	TotalVolume string `json:"totalVolume"`

	// Total withdrawing transactions
	TotalWithdrawTx string `json:"totalWithdrawTx"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Int64, the average slip by swap. Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64, volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64, volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64, the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64, toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// TxDetails defines model for TxDetails.
type TxDetails struct {

	// Int64, Unix timestamp.
	Date   string `json:"date"`
	Events Event  `json:"events"`
	Height string `json:"height"`
	In     Tx     `json:"in"`
	Out    []Tx   `json:"out"`
	Pool   string `json:"pool"`
	Status string `json:"status"`
	Type   string `json:"type"`
}

// Coin defines model for coin.
type Coin struct {
	Amount string `json:"amount"`
	Asset  string `json:"asset"`
}

// Coins defines model for coins.
type Coins []Coin

// Event defines model for event.
type Event struct {
	Fee        string `json:"fee"`
	Slip       string `json:"slip"`
	StakeUnits string `json:"stakeUnits"`
}

// Option defines model for option.
type Option struct {
	Asymmetry           string `json:"asymmetry"`
	PriceTarget         string `json:"priceTarget"`
	WithdrawBasisPoints string `json:"withdrawBasisPoints"`
}

// Tx defines model for tx.
type Tx struct {
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`
	Memo    string `json:"memo"`
	Options Option `json:"options"`
	TxID    string `json:"txID"`
}

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse []string

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodeKeyResponse defines model for NodeKeyResponse.
type NodeKeyResponse []NodeKey

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse []PoolDetail

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// TxResponse defines model for TxResponse.
type TxResponse struct {

	// Int64, count of txs matching the filters.
	Count string      `json:"count"`
	Txs   []TxDetails `json:"txs"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval string `json:"interval"`

	// Start time of the query as unix timestamp
	From int64 `json:"from"`

	// End time of the query as unix timestamp
	To int64 `json:"to"`
}

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval string `json:"interval"`

	// Start time of the query as unix timestamp
	From int64 `json:"from"`

	// End time of the query as unix timestamp
	To int64 `json:"to"`
}

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing.
	Pool *int64 `json:"pool,omitempty"`

	// Interval of calculations
	Interval string `json:"interval"`

	// Start time of the query as unix timestamp
	From int64 `json:"from"`

	// End time of the query as unix timestamp
	To int64 `json:"to"`
}

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval string `json:"interval"`

	// Start time of the query as unix timestamp
	From int64 `json:"from"`

	// End time of the query as unix timestamp
	To int64 `json:"to"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Interval of calculations
	Status string `json:"status"`
}

// GetTxDetailsParams defines parameters for GetTxDetails.
type GetTxDetailsParams struct {

	// Address of sender or recipient of any in/out tx in event
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx in event
	Txid *string `json:"txid,omitempty"`

	// Any asset used in event (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of event
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
