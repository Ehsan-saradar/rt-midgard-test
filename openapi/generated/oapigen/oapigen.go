// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {

	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still
	// pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still
// pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity
	// deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// Balance defines model for Balance.
type Balance struct {
	Coins Coins `json:"coins"`

	// full timestamp (nanoseconds since 1970) of the block at which the returned balance snapshot was valid
	Date string `json:"date"`

	// height of the block at which the returned balance snapshot was valid
	Height string `json:"height"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Represents a digital currency amount
type Coin struct {

	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, The liquidity unit value index. Sqrt(assetDepth * runeDepth)/liquidity units
	Luvi string `json:"luvi"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval at time endTime
	EndAssetDepth string `json:"endAssetDepth"`

	// Int64, Liquidity Units in the pool at the end of the interval at time endTime
	EndLPUnits string `json:"endLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval at time endTime
	EndRuneDepth string `json:"endRuneDepth"`

	// Int64, Synth Units in the pool at the end of the interval at time endTime
	EndSynthUnits string `json:"endSynthUnits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, The liquidity unit value index increase between the first and last depth item
	LuviIncrease string `json:"luviIncrease"`

	// Float, The impermanent loss between the first and last depth item
	PriceShiftLoss string `json:"priceShiftLoss"`

	// Int64(e8), the amount of Asset in the pool at the start of the interval at time
	// startTime
	StartAssetDepth string `json:"startAssetDepth"`

	// Int64, Liquidity Units in the pool at the start of the interval at time startTime
	StartLPUnits string `json:"startLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the start of the interval at time startTime
	StartRuneDepth string `json:"startRuneDepth"`

	// Int64, Synth Units in the pool at the start of the interval at time startTime
	StartSynthUnits string `json:"startSynthUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of
	// liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {

	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync         bool     `json:"inSync"`
	LastAggregated HeightTS `json:"lastAggregated"`
	LastCommitted  HeightTS `json:"lastCommitted"`
	LastFetched    HeightTS `json:"lastFetched"`
	LastThorNode   HeightTS `json:"lastThorNode"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// HeightTS defines model for HeightTS.
type HeightTS struct {

	// Block height
	Height int `json:"height"`

	// Block timestamp (seconds since epoch)
	Timestamp int `json:"timestamp"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string  `json:"address"`
	Chain   string  `json:"chain"`
	GasRate *string `json:"gas_rate,omitempty"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                    int64  `json:"AsgardSize"`
	BadValidatorRate              int64  `json:"BadValidatorRate"`
	BadValidatorRedline           int    `json:"BadValidatorRedline"`
	BlocksPerYear                 int64  `json:"BlocksPerYear"`
	ChurnInterval                 int64  `json:"ChurnInterval"`
	ChurnRetryInterval            int64  `json:"ChurnRetryInterval"`
	DesiredValidatorSet           int64  `json:"DesiredValidatorSet"`
	DoubleSignMaxAge              int64  `json:"DoubleSignMaxAge"`
	EmissionCurve                 int64  `json:"EmissionCurve"`
	FailKeygenSlashPoints         int64  `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints        int64  `json:"FailKeysignSlashPoints"`
	FullImpLossProtectionBlocks   int64  `json:"FullImpLossProtectionBlocks"`
	FundMigrationInterval         int64  `json:"FundMigrationInterval"`
	IncentiveCurve                int64  `json:"IncentiveCurve"`
	JailTimeKeygen                int64  `json:"JailTimeKeygen"`
	JailTimeKeysign               int64  `json:"JailTimeKeysign"`
	LackOfObservationPenalty      int64  `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks         int64  `json:"LiquidityLockUpBlocks"`
	MaxAvailablePools             int64  `json:"MaxAvailablePools"`
	MaxSwapsPerBlock              int64  `json:"MaxSwapsPerBlock"`
	MinRunePoolDepth              int64  `json:"MinRunePoolDepth"`
	MinSlashPointsForBadValidator int64  `json:"MinSlashPointsForBadValidator"`
	MinSwapsPerBlock              int64  `json:"MinSwapsPerBlock"`
	MinimumBondInRune             int64  `json:"MinimumBondInRune"`
	MinimumNodesForBFT            int64  `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil      int64  `json:"MinimumNodesForYggdrasil"`
	NativeTransactionFee          int64  `json:"NativeTransactionFee"`
	NewPoolCycle                  *int64 `json:"NewPoolCycle,omitempty"`
	ObservationDelayFlexibility   int64  `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints            int64  `json:"ObserveSlashPoints"`
	OldValidatorRate              int64  `json:"OldValidatorRate"`
	OutboundTransactionFee        int64  `json:"OutboundTransactionFee"`
	PoolCycle                     int64  `json:"PoolCycle"`
	SigningTransactionPeriod      int64  `json:"SigningTransactionPeriod"`
	VirtualMultSynths             int64  `json:"VirtualMultSynths"`
	YggFundLimit                  int64  `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock []LastblockItem

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn int64  `json:"last_observed_in"`
	LastSignedOut  int64  `json:"last_signed_out"`
	Thorchain      int64  `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {

	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and
	// nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each
// outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// ObservedChain defines model for ObservedChain.
type ObservedChain struct {
	Chain  string `json:"chain"`
	Height int    `json:"height"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {

	// Float, Also called APR. Annual return estimated from last 30 days income
	// (linearly, not compounded). E.g. 0.1 means 10% yearly return.
	// Due to Impermantent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	// It includes synth mint or burn.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Float, Also called APR. Estimated annual return (linearly, not compounded).
	// Always estimated from last 30 days (doesn't take period into account).
	// E.g. 0.1 means 10% yearly return.
	// Due to Impermantent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// PreflightStatus defines model for PreflightStatus.
type PreflightStatus struct {
	Code   int    `json:"code"`
	Reason string `json:"reason"`
	Status string `json:"status"`
}

// ProxiedNode defines model for ProxiedNode.
type ProxiedNode struct {
	ActiveBlockHeight int    `json:"active_block_height"`
	Bond              string `json:"bond"`
	BondAddress       string `json:"bond_address"`
	CurrentAward      string `json:"current_award"`
	ForcedToLeave     bool   `json:"forced_to_leave"`
	IpAddress         string `json:"ip_address"`
	Jail              struct {
		NodeAddress *string `json:"node_address,omitempty"`
	} `json:"jail"`
	LeaveHeight     int             `json:"leave_height"`
	NodeAddress     string          `json:"node_address"`
	ObserveChains   []ObservedChain `json:"observe_chains"`
	PreflightStatus PreflightStatus `json:"preflight_status"`
	PubKeySet       struct {
		Ed25519   string `json:"ed25519"`
		Secp256k1 string `json:"secp256k1"`
	} `json:"pub_key_set"`
	RequestedToLeave    bool     `json:"requested_to_leave"`
	SignerMembership    []string `json:"signer_membership"`
	SlashPoints         int      `json:"slash_points"`
	Status              string   `json:"status"`
	StatusSince         int      `json:"status_since"`
	ValidatorConsPubKey string   `json:"validator_cons_pub_key"`
	Version             string   `json:"version"`
}

// ProxiedNodes defines model for ProxiedNodes.
type ProxiedNodes []ProxiedNode

// Queue defines model for Queue.
type Queue struct {
	Internal int `json:"internal"`
	Outbound int `json:"outbound"`
	Swap     int `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Deprecated, it's always 0.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Deprecated, it's always 0.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps (including synths) since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps (including synths) in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps (including synths) in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps (including synths) denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Synth to Rune since beginning.
	SynthBurnCount string `json:"synthBurnCount"`

	// Int64, number of swaps from Rune to Synth since beginning.
	SynthMintCount string `json:"synthMintCount"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {

	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {

	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of
	// the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity
	// pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at
	// the end of the interval.
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the
	// native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means
	// totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership
	// withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// BalanceResponse defines model for BalanceResponse.
type BalanceResponse Balance

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ProxiedNodesResponse defines model for ProxiedNodesResponse.
type ProxiedNodesResponse ProxiedNodes

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// Affiliate address of the action (swap)
	Affiliate *string `json:"affiliate,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`
}

// GetBalanceParams defines parameters for GetBalance.
type GetBalanceParams struct {

	// Unix timestamp as seconds since 1970 (if provided, height must not be provided)
	Timestamp *int64 `json:"timestamp,omitempty"`

	// Block height (if provided, timestamp must not be provided)
	Height *int64 `json:"height,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {

	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolParams defines parameters for GetPool.
type GetPoolParams struct {

	// Specifies the base interval from which APY is extrapolated.
	// Default is 30d.
	Period *GetPoolParamsPeriod `json:"period,omitempty"`
}

// GetPoolParamsPeriod defines parameters for GetPool.
type GetPoolParamsPeriod string

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`

	// Specifies the base interval from which APY is extrapolated.
	// Default is 30d.
	Period *GetPoolsParamsPeriod `json:"period,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// GetPoolsParamsPeriod defines parameters for GetPools.
type GetPoolsParamsPeriod string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
