// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {
	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still
	// pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still
// pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {
	// Int64, amount of liquidity units assigned to the member as result of the liquidity
	// deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {
	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Represents a digital currency amount
type Coin struct {
	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {
	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, The liquidity unit value index. Sqrt(assetDepth * runeDepth)/liquidity units
	Luvi string `json:"luvi"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {
	// Int64(e8), the amount of Asset in the pool at the end of the interval at time endTime
	EndAssetDepth string `json:"endAssetDepth"`

	// Int64, Liquidity Units in the pool at the end of the interval at time endTime
	EndLPUnits string `json:"endLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval at time endTime
	EndRuneDepth string `json:"endRuneDepth"`

	// Int64, Synth Units in the pool at the end of the interval at time endTime
	EndSynthUnits string `json:"endSynthUnits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, The liquidity unit value index increase between the first and last depth item
	LuviIncrease string `json:"luviIncrease"`

	// Float, The impermanent loss between the first and last depth item
	PriceShiftLoss string `json:"priceShiftLoss"`

	// Int64(e8), the amount of Asset in the pool at the start of the interval at time
	// startTime
	StartAssetDepth string `json:"startAssetDepth"`

	// Int64, Liquidity Units in the pool at the start of the interval at time startTime
	StartLPUnits string `json:"startLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the start of the interval at time startTime
	StartRuneDepth string `json:"startRuneDepth"`

	// Int64, Synth Units in the pool at the start of the interval at time startTime
	StartSynthUnits string `json:"startSynthUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {
	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of
	// liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {
	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// FullMemberDetails defines model for FullMemberDetails.
type FullMemberDetails struct {
	// List details of all the liquidity providers identified with the given address
	Pools []FullMemberPool `json:"pools"`
}

// FullMemberPool defines model for FullMemberPool.
type FullMemberPool struct {
	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total units of the pool
	PoolUnits string `json:"poolUnits"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`

	// Int64, total units that belong the the member
	SharedUnits string `json:"sharedUnits"`
}

// Health defines model for Health.
type Health struct {
	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync         bool     `json:"inSync"`
	LastAggregated HeightTS `json:"lastAggregated"`
	LastCommitted  HeightTS `json:"lastCommitted"`
	LastFetched    HeightTS `json:"lastFetched"`
	LastThorNode   HeightTS `json:"lastThorNode"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// HeightTS defines model for HeightTS.
type HeightTS struct {
	// Block height
	Height int `json:"height"`

	// Block timestamp (seconds since epoch)
	Timestamp int `json:"timestamp"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string  `json:"address"`
	Chain   string  `json:"chain"`
	GasRate *string `json:"gas_rate,omitempty"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                    int64  `json:"AsgardSize"`
	BadValidatorRate              int64  `json:"BadValidatorRate"`
	BadValidatorRedline           int    `json:"BadValidatorRedline"`
	BlocksPerYear                 int64  `json:"BlocksPerYear"`
	ChurnInterval                 int64  `json:"ChurnInterval"`
	ChurnRetryInterval            int64  `json:"ChurnRetryInterval"`
	DesiredValidatorSet           int64  `json:"DesiredValidatorSet"`
	DoubleSignMaxAge              int64  `json:"DoubleSignMaxAge"`
	EmissionCurve                 int64  `json:"EmissionCurve"`
	FailKeygenSlashPoints         int64  `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints        int64  `json:"FailKeysignSlashPoints"`
	FullImpLossProtectionBlocks   int64  `json:"FullImpLossProtectionBlocks"`
	FundMigrationInterval         int64  `json:"FundMigrationInterval"`
	IncentiveCurve                int64  `json:"IncentiveCurve"`
	JailTimeKeygen                int64  `json:"JailTimeKeygen"`
	JailTimeKeysign               int64  `json:"JailTimeKeysign"`
	LackOfObservationPenalty      int64  `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks         int64  `json:"LiquidityLockUpBlocks"`
	MaxAvailablePools             int64  `json:"MaxAvailablePools"`
	MaxSwapsPerBlock              int64  `json:"MaxSwapsPerBlock"`
	MinRunePoolDepth              int64  `json:"MinRunePoolDepth"`
	MinSlashPointsForBadValidator int64  `json:"MinSlashPointsForBadValidator"`
	MinSwapsPerBlock              int64  `json:"MinSwapsPerBlock"`
	MinimumBondInRune             int64  `json:"MinimumBondInRune"`
	MinimumNodesForBFT            int64  `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil      int64  `json:"MinimumNodesForYggdrasil"`
	NativeTransactionFee          int64  `json:"NativeTransactionFee"`
	NewPoolCycle                  *int64 `json:"NewPoolCycle,omitempty"`
	ObservationDelayFlexibility   int64  `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints            int64  `json:"ObserveSlashPoints"`
	OldValidatorRate              int64  `json:"OldValidatorRate"`
	OutboundTransactionFee        int64  `json:"OutboundTransactionFee"`
	PoolCycle                     int64  `json:"PoolCycle"`
	SigningTransactionPeriod      int64  `json:"SigningTransactionPeriod"`
	VirtualMultSynths             int64  `json:"VirtualMultSynths"`
	YggFundLimit                  int64  `json:"YggFundLimit"`
}

// LPDetail defines model for LPDetail.
type LPDetail struct {
	// asset address
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, total asset earned
	AssetEarned string `json:"assetEarned"`

	// Float, current asset price in rune
	AssetPrice string `json:"assetPrice"`

	// Float, current asset price in usd
	AssetPriceUsd string `json:"assetPriceUsd"`

	// pool name
	Pool string `json:"pool"`

	// Int64(e8), pool units
	PoolUnits string `json:"poolUnits"`

	// Int64(e8), total block reward
	Rewards string `json:"rewards"`

	// rune address
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// Float, total rune earned
	RuneEarned string `json:"runeEarned"`

	// Int64(e8), current rune price in usd
	RunePriceUsd string `json:"runePriceUsd"`

	// Int64(e8), share units
	SharedUnits string        `json:"sharedUnits"`
	StakeDetail []StakeDetail `json:"stakeDetail"`

	// Int64(e8), total rune price in usd
	UsdEarned      string        `json:"usdEarned"`
	WithdrawDetail []StakeDetail `json:"withdrawDetail"`
}

// LPDetails defines model for LPDetails.
type LPDetails []LPDetail

// Lastblock defines model for Lastblock.
type Lastblock []LastblockItem

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn int64  `json:"last_observed_in"`
	LastSignedOut  int64  `json:"last_signed_out"`
	Thorchain      int64  `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {
	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {
	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {
	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and
	// nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each
// outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {
	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// OHLCVHistory defines model for OHLCVHistory.
type OHLCVHistory struct {
	Intervals OHLCVHistoryIntervals `json:"intervals"`
	Meta      OHLCVHistoryMeta      `json:"meta"`
}

// OHLCVHistoryIntervals defines model for OHLCVHistoryIntervals.
type OHLCVHistoryIntervals []OHLCVHistoryItem

// OHLCVHistoryItem defines model for OHLCVHistoryItem.
type OHLCVHistoryItem struct {
	// Float, close price of asset in USD
	ClosePrice string `json:"closePrice"`

	// Int64, The end time of bucket in unix timestamp
	CloseTime string `json:"closeTime"`

	// Float, high price of asset in USD
	HighPrice string `json:"highPrice"`

	// Int64, The high time of bucket in unix timestamp
	HighTime string `json:"highTime"`

	// Int64, Liquidty is USD
	Liquidity string `json:"liquidity"`

	// Float, low price of asset in USD
	LowPrice string `json:"lowPrice"`

	// Int64, The low time of bucket in unix timestamp
	LowTime string `json:"lowTime"`

	// Float, open price of asset in USD
	OpenPrice string `json:"openPrice"`

	// Int64, The beginning time of bucket in unix timestamp
	OpenTime string `json:"openTime"`

	// Int64, Volume in USD
	Volume string `json:"volume"`
}

// OHLCVHistoryMeta defines model for OHLCVHistoryMeta.
type OHLCVHistoryMeta struct {
	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// ObservedChain defines model for ObservedChain.
type ObservedChain struct {
	Chain  string `json:"chain"`
	Height int    `json:"height"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income,
	// taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	// Doesn't include synth mint or burn.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {
	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`
	Asset                  string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income,
	// taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// PreflightStatus defines model for PreflightStatus.
type PreflightStatus struct {
	Code   int    `json:"code"`
	Reason string `json:"reason"`
	Status string `json:"status"`
}

// ProxiedNode defines model for ProxiedNode.
type ProxiedNode struct {
	ActiveBlockHeight int    `json:"active_block_height"`
	Bond              string `json:"bond"`
	BondAddress       string `json:"bond_address"`
	CurrentAward      string `json:"current_award"`
	ForcedToLeave     bool   `json:"forced_to_leave"`
	IpAddress         string `json:"ip_address"`
	Jail              struct {
		NodeAddress *string `json:"node_address,omitempty"`
	} `json:"jail"`
	LeaveHeight     int             `json:"leave_height"`
	NodeAddress     string          `json:"node_address"`
	ObserveChains   []ObservedChain `json:"observe_chains"`
	PreflightStatus PreflightStatus `json:"preflight_status"`
	PubKeySet       struct {
		Ed25519   string `json:"ed25519"`
		Secp256k1 string `json:"secp256k1"`
	} `json:"pub_key_set"`
	RequestedToLeave    bool     `json:"requested_to_leave"`
	SignerMembership    []string `json:"signer_membership"`
	SlashPoints         int      `json:"slash_points"`
	Status              string   `json:"status"`
	StatusSince         int      `json:"status_since"`
	ValidatorConsPubKey string   `json:"validator_cons_pub_key"`
	Version             string   `json:"version"`
}

// ProxiedNodes defines model for ProxiedNodes.
type ProxiedNodes []ProxiedNode

// Queue defines model for Queue.
type Queue struct {
	Internal int `json:"internal"`
	Outbound int `json:"outbound"`
	Swap     int `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {
	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// StatsData defines model for StatsData.
type StatsData struct {
	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Deprecated, it's always 0.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Deprecated, it's always 0.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Synth to Rune since beginning.
	SynthBurnCount string `json:"synthBurnCount"`

	// Int64, number of swaps from Rune to Synth since beginning.
	SynthMintCount string `json:"synthMintCount"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {
	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {
	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {
	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {
	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {
	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of
	// the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity
	// pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at
	// the end of the interval.
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {
	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the
	// native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {
	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means
	// totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership
	// withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// StakeDetail defines model for stakeDetail.
type StakeDetail struct {
	// Int64(e8), asset amount
	AssetAmount string `json:"assetAmount"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, asset price in rune
	AssetPrice string `json:"assetPrice"`

	// Float, asset price in usd
	AssetPriceUsd string `json:"assetPriceUsd"`

	// Float, withdraw percentage
	BasisPoint string `json:"basisPoint"`

	// Int64, nano timestamp of the block
	Date string `json:"date"`

	// Int64, block height
	Height string `json:"height"`

	// Int64, total number of pool units
	PoolUnits string `json:"poolUnits"`

	// Int64(e8), rune amount
	RuneAmount string `json:"runeAmount"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// Float, rune price in usd
	RunePriceUsd string `json:"runePriceUsd"`

	// Int64, total number of units changed
	SharedUnits string `json:"sharedUnits"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// FullMembersResponse defines model for FullMembersResponse.
type FullMembersResponse FullMemberDetails

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LPDetailsResponse defines model for LPDetailsResponse.
type LPDetailsResponse LPDetails

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// OHLCVHistoryResponse defines model for OHLCVHistoryResponse.
type OHLCVHistoryResponse OHLCVHistory

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ProxiedNodesResponse defines model for ProxiedNodesResponse.
type ProxiedNodesResponse ProxiedNodes

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {
	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// Affiliate address of the action (swap)
	AffiliateAddress *string `json:"affiliate_address,omitempty"`
	AssetType        *string `json:"assetType,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`
}

// GetFullMembersAdressesParams defines parameters for GetFullMembersAdresses.
type GetFullMembersAdressesParams struct {
	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {
	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {
	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {
	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetOHLCVHistoryParams defines parameters for GetOHLCVHistory.
type GetOHLCVHistoryParams struct {
	// Interval of calculations
	Interval *GetOHLCVHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetOHLCVHistoryParamsInterval defines parameters for GetOHLCVHistory.
type GetOHLCVHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {
	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTSSwapHistoryParams defines parameters for GetTSSwapHistory.
type GetTSSwapHistoryParams struct {
	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetTSSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTSSwapHistoryParamsInterval defines parameters for GetTSSwapHistory.
type GetTSSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {
	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetLPDetailParams defines parameters for GetLPDetail.
type GetLPDetailParams struct {
	// Return information for given pools
	Pools *string `json:"pools,omitempty"`
}

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {
	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {
	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {
	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"fv369f8FAAD//y6lrjLYMAEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
