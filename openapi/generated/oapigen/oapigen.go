// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Action defines model for Action.
type Action struct {

	// Int64, Unix timestamp for when the action was registered
	Date string `json:"date"`

	// Int64, block height at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status string `json:"status"`

	// Type of action
	Type string `json:"type"`
}

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64, Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64, Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64, Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64, Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64, Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64, Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64, Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64, Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64, Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64, Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Coin defines model for Coin.
type Coin struct {

	// Int64 (10^8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64, Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64, Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64, System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64, Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistoryItemPool defines model for EarningsHistoryItemPool.
type EarningsHistoryItemPool struct {

	// Int64, Share of earnings sent to the pool during the time interval
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses struct {
	Current []InboundAddressesItem `json:"current"`
}

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string `json:"address"`
	Chain   string `json:"chain"`

	// indicate whether this chain has halted
	Halted bool   `json:"halted"`
	PubKey string `json:"pub_key"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                  int64 `json:"AsgardSize"`
	BadValidatorRate            int64 `json:"BadValidatorRate"`
	BlocksPerYear               int64 `json:"BlocksPerYear"`
	ChurnInterval               int64 `json:"ChurnInterval"`
	ChurnRetryInterval          int64 `json:"ChurnRetryInterval"`
	CliTxCost                   int64 `json:"CliTxCost"`
	DesiredValidatorSet         int64 `json:"DesiredValidatorSet"`
	DoubleSignMaxAge            int64 `json:"DoubleSignMaxAge"`
	EmissionCurve               int64 `json:"EmissionCurve"`
	FailKeygenSlashPoints       int64 `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints      int64 `json:"FailKeysignSlashPoints"`
	FundMigrationInterval       int64 `json:"FundMigrationInterval"`
	JailTimeKeygen              int64 `json:"JailTimeKeygen"`
	JailTimeKeysign             int64 `json:"JailTimeKeysign"`
	LackOfObservationPenalty    int64 `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks       int64 `json:"LiquidityLockUpBlocks"`
	MinimumBondInRune           int64 `json:"MinimumBondInRune"`
	MinimumNodesForBFT          int64 `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil    int64 `json:"MinimumNodesForYggdrasil"`
	NativeChainGasFee           int64 `json:"NativeChainGasFee"`
	NewPoolCycle                int64 `json:"NewPoolCycle"`
	ObservationDelayFlexibility int64 `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints          int64 `json:"ObserveSlashPoints"`
	OldValidatorRate            int64 `json:"OldValidatorRate"`
	OutboundTransactionFee      int64 `json:"OutboundTransactionFee"`
	SigningTransactionPeriod    int64 `json:"SigningTransactionPeriod"`
	YggFundLimit                int64 `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock struct {
	Current []LastblockItem `json:"current"`
}

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn string `json:"last_observed_in"`
	LastSignedOut  string `json:"last_signed_out"`
	Thorchain      string `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64 (10^8), total deposits (liquidity additions) in RUNE during the time interval. Accounts for both asset (using the price at deposit time) and RUNE deposited into pools
	Deposits string `json:"deposits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64 (10^8), total withdrawals in RUNE during the time interval. Accounts for both asset (using the price at withdrawal time) and RUNE withdrawn from pools
	Withdrawals string `json:"withdrawals"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// Liquidity provider data for all the pools of a given member
	Pools []MemberPoolDetails `json:"pools"`
}

// MemberPoolDetails defines model for MemberPoolDetails.
type MemberPoolDetails struct {

	// Int64, total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// Int64, total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Int64, total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`
	PoolShareFactor         string `json:"poolShareFactor"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64, Total Rune pooled in all pools
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64, Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NetworkFees defines model for NetworkFees.
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolLegacyDetail defines model for PoolLegacyDetail.
type PoolLegacyDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Int64, same as history/swaps:toAssetCount
	BuyAssetCount string `json:"buyAssetCount"`

	// Float, same as history/swaps:toRuneVolume/toRuneCount
	BuyTxAverage string `json:"buyTxAverage"`

	// Int64, same as history/swaps:toAssetVolume
	BuyVolume string `json:"buyVolume"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, same as assetDepth + runeDepth
	PoolDepth string `json:"poolDepth"`

	// Float, same as history/swaps:totalFees/totalCount
	PoolFeeAverage string `json:"poolFeeAverage"`

	// Int64, same as history/swaps:totalFees
	PoolFeesTotal string `json:"poolFeesTotal"`

	// Float, same as history/swaps:averageSlip
	PoolSlipAverage string `json:"poolSlipAverage"`

	// Float, same as history/swaps:totalVolume/totalCount
	PoolTxAverage string `json:"poolTxAverage"`

	// Int64, same as buyVolume + sellVolume
	PoolVolume string `json:"poolVolume"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// Int64, same as history/swaps:toRuneCount
	SellAssetCount string `json:"sellAssetCount"`

	// Float, same as history/swaps:toAssetVolume/toAssetCount
	SellTxAverage string `json:"sellTxAverage"`

	// Int64, same as history/swaps:toRuneVolume
	SellVolume string `json:"sellVolume"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64, Liquidity Units in the pool
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune
	Volume24h string `json:"volume24h"`
}

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Int64, same as history/swaps:toAssetCount
	BuyAssetCount string `json:"buyAssetCount"`

	// Float, same as history/swaps:toRuneVolume/toRuneCount
	BuyTxAverage string `json:"buyTxAverage"`

	// Int64, same as history/swaps:toAssetVolume
	BuyVolume string `json:"buyVolume"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, same as assetDepth + runeDepth
	PoolDepth string `json:"poolDepth"`

	// Float, same as history/swaps:totalFees/totalCount
	PoolFeeAverage string `json:"poolFeeAverage"`

	// Int64, same as history/swaps:totalFees
	PoolFeesTotal string `json:"poolFeesTotal"`

	// Float, same as history/swaps:averageSlip
	PoolSlipAverage string `json:"poolSlipAverage"`

	// Float, same as history/swaps:totalVolume/totalCount
	PoolTxAverage string `json:"poolTxAverage"`

	// Int64, same as buyVolume + sellVolume
	PoolVolume string `json:"poolVolume"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// Int64, same as history/swaps:toRuneCount
	SellAssetCount string `json:"sellAssetCount"`

	// Float, same as history/swaps:toAssetVolume/toAssetCount
	SellTxAverage string `json:"sellTxAverage"`

	// Int64, same as history/swaps:toRuneVolume
	SellVolume string `json:"sellVolume"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64, Liquidity Units in the pool
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune
	Volume24h string `json:"volume24h"`
}

// Queue defines model for Queue.
type Queue struct {
	Outbound string `json:"outbound"`
	Swap     string `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Daily active users (unique addresses interacting)
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Daily transactions
	DailyTx string `json:"dailyTx"`

	// Monthly active users
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Monthly transactions
	MonthlyTx string `json:"monthlyTx"`

	// Total buying transactions
	TotalAssetBuys string `json:"totalAssetBuys"`

	// Total selling transactions
	TotalAssetSells string `json:"totalAssetSells"`

	// Total RUNE balances
	TotalDepth string `json:"totalDepth"`

	// Total staking transactions
	TotalStakeTx string `json:"totalStakeTx"`

	// Total staked (in RUNE Value)
	TotalStaked string `json:"totalStaked"`

	// Total transactions
	TotalTx string `json:"totalTx"`

	// Total unique swappers & members
	TotalUsers string `json:"totalUsers"`

	// Total (in RUNE Value) of all assets swapped since start
	TotalVolume string `json:"totalVolume"`

	// Total withdrawing transactions
	TotalWithdrawTx string `json:"totalWithdrawTx"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float, the average slip by swap. Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64, volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64, volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64, the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64, toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Int64 (10^8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), trade slip percentage
	TradeSlip string `json:"tradeSlip"`

	// Int64 (10^8), minimum output amount specified for the swap
	TradeTarget string `json:"tradeTarget"`
}

// Transaction defines model for Transaction.
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction memo
	Memo string `json:"memo"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolLegacyResponse defines model for PoolLegacyResponse.
type PoolLegacyResponse PoolLegacyDetail

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Address of sender or recipient of any in/out transaction related to the action
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action (swap, addLiquidity, withdraw, donate, refund)
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *string `json:"status,omitempty"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/Pk/AgAA//+X6weBi7AAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
