// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {
	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {
	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {
	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Represents a digital currency amount
type Coin struct {
	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {
	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {
	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {
	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {
	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {
	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync         bool     `json:"inSync"`
	LastAggregated HeightTS `json:"lastAggregated"`
	LastCommitted  HeightTS `json:"lastCommitted"`
	LastFetched    HeightTS `json:"lastFetched"`
	LastThorNode   HeightTS `json:"lastThorNode"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// HeightTS defines model for HeightTS.
type HeightTS struct {
	// Block height
	Height int `json:"height"`

	// Block timestamp (seconds since epoch)
	Timestamp int `json:"timestamp"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string  `json:"address"`
	Chain   string  `json:"chain"`
	GasRate *string `json:"gas_rate,omitempty"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                    int64  `json:"AsgardSize"`
	BadValidatorRate              int64  `json:"BadValidatorRate"`
	BadValidatorRedline           int    `json:"BadValidatorRedline"`
	BlocksPerYear                 int64  `json:"BlocksPerYear"`
	ChurnInterval                 int64  `json:"ChurnInterval"`
	ChurnRetryInterval            int64  `json:"ChurnRetryInterval"`
	DesiredValidatorSet           int64  `json:"DesiredValidatorSet"`
	DoubleSignMaxAge              int64  `json:"DoubleSignMaxAge"`
	EmissionCurve                 int64  `json:"EmissionCurve"`
	FailKeygenSlashPoints         int64  `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints        int64  `json:"FailKeysignSlashPoints"`
	FullImpLossProtectionBlocks   int64  `json:"FullImpLossProtectionBlocks"`
	FundMigrationInterval         int64  `json:"FundMigrationInterval"`
	IncentiveCurve                int64  `json:"IncentiveCurve"`
	JailTimeKeygen                int64  `json:"JailTimeKeygen"`
	JailTimeKeysign               int64  `json:"JailTimeKeysign"`
	LackOfObservationPenalty      int64  `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks         int64  `json:"LiquidityLockUpBlocks"`
	MaxAvailablePools             int64  `json:"MaxAvailablePools"`
	MaxSwapsPerBlock              int64  `json:"MaxSwapsPerBlock"`
	MinRunePoolDepth              int64  `json:"MinRunePoolDepth"`
	MinSlashPointsForBadValidator int64  `json:"MinSlashPointsForBadValidator"`
	MinSwapsPerBlock              int64  `json:"MinSwapsPerBlock"`
	MinimumBondInRune             int64  `json:"MinimumBondInRune"`
	MinimumNodesForBFT            int64  `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil      int64  `json:"MinimumNodesForYggdrasil"`
	NativeTransactionFee          int64  `json:"NativeTransactionFee"`
	NewPoolCycle                  *int64 `json:"NewPoolCycle,omitempty"`
	ObservationDelayFlexibility   int64  `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints            int64  `json:"ObserveSlashPoints"`
	OldValidatorRate              int64  `json:"OldValidatorRate"`
	OutboundTransactionFee        int64  `json:"OutboundTransactionFee"`
	PoolCycle                     int64  `json:"PoolCycle"`
	SigningTransactionPeriod      int64  `json:"SigningTransactionPeriod"`
	VirtualMultSynths             int64  `json:"VirtualMultSynths"`
	YggFundLimit                  int64  `json:"YggFundLimit"`
}

// LPDetails defines model for LPDetails.
type LPDetails struct {
	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, total asset earned
	AssetEarned string `json:"assetEarned"`

	// Float, current asset price in rune
	AssetPrice string `json:"assetPrice"`

	// Float, current asset price in usd
	AssetPriceUsd string `json:"assetPriceUsd"`

	// Int64(e8), pool units
	PoolUnits string `json:"poolUnits"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// Float, total rune earned
	RuneEarned string `json:"runeEarned"`

	// Int64(e8), current rune price in usd
	RunePriceUsd string `json:"runePriceUsd"`

	// Int64(e8), share units
	ShareUnits  string        `json:"shareUnits"`
	StakeDetail []StakeDetail `json:"stakeDetail"`

	// Float, total earned in usd
	UsdEarned      string        `json:"usdEarned"`
	WithdrawDetail []StakeDetail `json:"withdrawDetail"`
}

// Lastblock defines model for Lastblock.
type Lastblock []LastblockItem

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn int64  `json:"last_observed_in"`
	LastSignedOut  int64  `json:"last_signed_out"`
	Thorchain      int64  `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {
	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {
	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {
	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {
	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// OHLCVHistory defines model for OHLCVHistory.
type OHLCVHistory struct {
	Intervals OHLCVHistoryIntervals `json:"intervals"`
	Meta      OHLCVHistoryMeta      `json:"meta"`
}

// OHLCVHistoryIntervals defines model for OHLCVHistoryIntervals.
type OHLCVHistoryIntervals []OHLCVHistoryItem

// OHLCVHistoryItem defines model for OHLCVHistoryItem.
type OHLCVHistoryItem struct {
	// Float, close price of asset in USD
	ClosePrice string `json:"closePrice"`

	// Int64, The end time of bucket in unix timestamp
	CloseTime string `json:"closeTime"`

	// Float, high price of asset in USD
	HighPrice string `json:"highPrice"`

	// Int64, The high time of bucket in unix timestamp
	HighTime string `json:"highTime"`

	// Int64, Liquidty is USD
	Liquidity string `json:"liquidity"`

	// Float, low price of asset in USD
	LowPrice string `json:"lowPrice"`

	// Int64, The low time of bucket in unix timestamp
	LowTime string `json:"lowTime"`

	// Float, open price of asset in USD
	OpenPrice string `json:"openPrice"`

	// Int64, The beginning time of bucket in unix timestamp
	OpenTime string `json:"openTime"`

	// Int64, Volume in USD
	Volume string `json:"volume"`
}

// OHLCVHistoryMeta defines model for OHLCVHistoryMeta.
type OHLCVHistoryMeta struct {
	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// ObservedChain defines model for ObservedChain.
type ObservedChain struct {
	Chain  string `json:"chain"`
	Height int    `json:"height"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {
	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`
	Asset                  string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Int64, number of unique adresses that initiated swaps transactions in the period.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// PreflightStatus defines model for PreflightStatus.
type PreflightStatus struct {
	Code   int    `json:"code"`
	Reason string `json:"reason"`
	Status string `json:"status"`
}

// ProxiedNode defines model for ProxiedNode.
type ProxiedNode struct {
	ActiveBlockHeight int    `json:"active_block_height"`
	Bond              string `json:"bond"`
	BondAddress       string `json:"bond_address"`
	CurrentAward      string `json:"current_award"`
	ForcedToLeave     bool   `json:"forced_to_leave"`
	IpAddress         string `json:"ip_address"`
	Jail              struct {
		NodeAddress *string `json:"node_address,omitempty"`
	} `json:"jail"`
	LeaveHeight     int             `json:"leave_height"`
	NodeAddress     string          `json:"node_address"`
	ObserveChains   []ObservedChain `json:"observe_chains"`
	PreflightStatus PreflightStatus `json:"preflight_status"`
	PubKeySet       struct {
		Ed25519   string `json:"ed25519"`
		Secp256k1 string `json:"secp256k1"`
	} `json:"pub_key_set"`
	RequestedToLeave    bool     `json:"requested_to_leave"`
	SignerMembership    []string `json:"signer_membership"`
	SlashPoints         int      `json:"slash_points"`
	Status              string   `json:"status"`
	StatusSince         int      `json:"status_since"`
	ValidatorConsPubKey string   `json:"validator_cons_pub_key"`
	Version             string   `json:"version"`
}

// ProxiedNodes defines model for ProxiedNodes.
type ProxiedNodes []ProxiedNode

// Queue defines model for Queue.
type Queue struct {
	Internal int `json:"internal"`
	Outbound int `json:"outbound"`
	Swap     int `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {
	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// StatsData defines model for StatsData.
type StatsData struct {
	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, unique users (addresses) initiating swaps in the last 24 hours.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, unique users (addresses) initiating swaps in the last 30 days.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Int64, unique users (addresses) initiating swaps since beginning.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {
	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {
	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {
	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {
	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {
	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at the end of the interval
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {
	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {
	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// StakeDetail defines model for stakeDetail.
type StakeDetail struct {
	// Int64(e8), asset amount
	AssetAmount string `json:"assetAmount"`

	// Float, asset price in rune
	AssetPrice string `json:"assetPrice"`

	// Float, asset price in usd
	AssetPriceUsd string `json:"assetPriceUsd"`

	// Int64, nano timestamp of the block
	Date string `json:"date"`

	// Int64, block height
	Height string `json:"height"`

	// Int64(e8), rune amount
	RuneAmount string `json:"runeAmount"`

	// Float, rune price in usd
	RunePriceUsd string `json:"runePriceUsd"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LPDetailsResponse defines model for LPDetailsResponse.
type LPDetailsResponse LPDetails

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// OHLCVHistoryResponse defines model for OHLCVHistoryResponse.
type OHLCVHistoryResponse OHLCVHistory

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ProxiedNodesResponse defines model for ProxiedNodesResponse.
type ProxiedNodesResponse ProxiedNodes

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {
	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`
}

// GetFullMembersAdressesParams defines parameters for GetFullMembersAdresses.
type GetFullMembersAdressesParams struct {
	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {
	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {
	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {
	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetOHLCVHistoryParams defines parameters for GetOHLCVHistory.
type GetOHLCVHistoryParams struct {
	// Interval of calculations
	Interval *GetOHLCVHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetOHLCVHistoryParamsInterval defines parameters for GetOHLCVHistory.
type GetOHLCVHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {
	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTSSwapHistoryParams defines parameters for GetTSSwapHistory.
type GetTSSwapHistoryParams struct {
	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetTSSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTSSwapHistoryParamsInterval defines parameters for GetTSSwapHistory.
type GetTSSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {
	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetLPDetailParams defines parameters for GetLPDetail.
type GetLPDetailParams struct {
	// Return information for given pool
	Pool *string `json:"pool,omitempty"`
}

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {
	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {
	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {
	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP//+W4DMWYZAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
