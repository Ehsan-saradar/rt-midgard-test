// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Action defines model for Action.
type Action struct {

	// Int64, Unix timestamp for when the action was registered
	Date string `json:"date"`

	// Int64, block height at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status string `json:"status"`

	// Type of action
	Type string `json:"type"`
}

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64, Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64, Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64, Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64, Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64, Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64, Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64, Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64, Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64, Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64, Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Coin defines model for Coin.
type Coin struct {

	// Int64 (10^8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64, Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64, Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64, System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64, Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistoryItemPool defines model for EarningsHistoryItemPool.
type EarningsHistoryItemPool struct {

	// Int64, Share of earnings sent to the pool during the time interval
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses struct {
	Current []InboundAddressesItem `json:"current"`
}

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string `json:"address"`
	Chain   string `json:"chain"`

	// indicate whether this chain has halted
	Halted bool   `json:"halted"`
	PubKey string `json:"pub_key"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                  int64 `json:"AsgardSize"`
	BadValidatorRate            int64 `json:"BadValidatorRate"`
	BlocksPerYear               int64 `json:"BlocksPerYear"`
	ChurnInterval               int64 `json:"ChurnInterval"`
	ChurnRetryInterval          int64 `json:"ChurnRetryInterval"`
	CliTxCost                   int64 `json:"CliTxCost"`
	DesiredValidatorSet         int64 `json:"DesiredValidatorSet"`
	DoubleSignMaxAge            int64 `json:"DoubleSignMaxAge"`
	EmissionCurve               int64 `json:"EmissionCurve"`
	FailKeygenSlashPoints       int64 `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints      int64 `json:"FailKeysignSlashPoints"`
	FundMigrationInterval       int64 `json:"FundMigrationInterval"`
	JailTimeKeygen              int64 `json:"JailTimeKeygen"`
	JailTimeKeysign             int64 `json:"JailTimeKeysign"`
	LackOfObservationPenalty    int64 `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks       int64 `json:"LiquidityLockUpBlocks"`
	MinimumBondInRune           int64 `json:"MinimumBondInRune"`
	MinimumNodesForBFT          int64 `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil    int64 `json:"MinimumNodesForYggdrasil"`
	NativeChainGasFee           int64 `json:"NativeChainGasFee"`
	NewPoolCycle                int64 `json:"NewPoolCycle"`
	ObservationDelayFlexibility int64 `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints          int64 `json:"ObserveSlashPoints"`
	OldValidatorRate            int64 `json:"OldValidatorRate"`
	OutboundTransactionFee      int64 `json:"OutboundTransactionFee"`
	SigningTransactionPeriod    int64 `json:"SigningTransactionPeriod"`
	YggFundLimit                int64 `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock struct {
	Current []LastblockItem `json:"current"`
}

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn string `json:"last_observed_in"`
	LastSignedOut  string `json:"last_signed_out"`
	Thorchain      string `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64 (10^8), total deposits (liquidity additions) in RUNE during the time interval. Accounts for both asset (using the price at deposit time) and RUNE deposited into pools
	Deposits string `json:"deposits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64 (10^8), total withdrawals in RUNE during the time interval. Accounts for both asset (using the price at withdrawal time) and RUNE withdrawn from pools
	Withdrawals string `json:"withdrawals"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// Liquidity provider data for all the pools of a given member
	Pools []MemberPoolDetails `json:"pools"`
}

// MemberPoolDetails defines model for MemberPoolDetails.
type MemberPoolDetails struct {

	// Int64, total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// Int64, total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Int64, total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`
	PoolShareFactor         string `json:"poolShareFactor"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64, Total Rune pooled in all pools
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64, Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NetworkFees defines model for NetworkFees.
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolLegacyDetail defines model for PoolLegacyDetail.
type PoolLegacyDetail struct {
	Asset string `json:"asset"`

	// same as assetDepth from pool/stats
	AssetDepth string `json:"assetDepth"`

	// same as toAssetCount from pool/stats
	BuyAssetCount string `json:"buyAssetCount"`

	// same as toAssetVolume / toAssetCount from pool/stats
	BuyTxAverage string `json:"buyTxAverage"`

	// same as toAssetVolume from pool/stats
	BuyVolume string `json:"buyVolume"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// same as 2*runeDepth from pool/stats
	PoolDepth string `json:"poolDepth"`

	// same as totalFees / swapCount from pool/stats
	PoolFeeAverage string `json:"poolFeeAverage"`

	// same as totalFees from pool/stats
	PoolFeesTotal string `json:"poolFeesTotal"`

	// same as averageSlip from pool/stats
	PoolSlipAverage string `json:"poolSlipAverage"`

	// same as swapVolume / swapCount from pool/stats
	PoolTxAverage string `json:"poolTxAverage"`

	// same as units from pool/stats
	PoolUnits string `json:"poolUnits"`

	// Int64, same as buyVolume + sellVolume
	PoolVolume string `json:"poolVolume"`

	// same as assetPrice from pool/stats
	Price string `json:"price"`

	// same as runeDepth from pool/stats
	RuneDepth string `json:"runeDepth"`

	// same as toRuneCount from pool/stats
	SellAssetCount string `json:"sellAssetCount"`

	// same as toRuneVolume / toRuneCount from pool/stats
	SellTxAverage string `json:"sellTxAverage"`

	// same as toRuneVolume from pool/stats
	SellVolume string `json:"sellVolume"`

	// same as status from pool/stats
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune
	Volume24h string `json:"volume24h"`
}

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, same as buyVolume + sellVolume
	PoolVolume string `json:"poolVolume"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64, same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64, same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, Liquidity Units in the pool
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune
	Volume24h string `json:"volume24h"`
}

// Queue defines model for Queue.
type Queue struct {
	Outbound string `json:"outbound"`
	Swap     string `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Daily active users (unique addresses interacting)
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Daily transactions
	DailyTx string `json:"dailyTx"`

	// Monthly active users
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Monthly transactions
	MonthlyTx string `json:"monthlyTx"`

	// Total buying transactions
	TotalAssetBuys string `json:"totalAssetBuys"`

	// Total selling transactions
	TotalAssetSells string `json:"totalAssetSells"`

	// Total RUNE balances
	TotalDepth string `json:"totalDepth"`

	// Total staking transactions
	TotalStakeTx string `json:"totalStakeTx"`

	// Total staked (in RUNE Value)
	TotalStaked string `json:"totalStaked"`

	// Total transactions
	TotalTx string `json:"totalTx"`

	// Total unique swappers & members
	TotalUsers string `json:"totalUsers"`

	// Total (in RUNE Value) of all assets swapped since start
	TotalVolume string `json:"totalVolume"`

	// Total withdrawing transactions
	TotalWithdrawTx string `json:"totalWithdrawTx"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float, the average slip by swap. Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64, volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64, volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64, the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64, toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Int64 (10^8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), trade slip percentage
	TradeSlip string `json:"tradeSlip"`

	// Int64 (10^8), minimum output amount specified for the swap
	TradeTarget string `json:"tradeTarget"`
}

// Transaction defines model for Transaction.
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction memo
	Memo string `json:"memo"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolLegacyResponse defines model for PoolLegacyResponse.
type PoolLegacyResponse PoolLegacyDetail

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Address of sender or recipient of any in/out transaction related to the action
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action (swap, addLiquidity, withdraw, donate, refund)
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *string `json:"status,omitempty"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"kMOLYK4AAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
