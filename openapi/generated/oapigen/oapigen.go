// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {

	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Represents a digital currency amount
type Coin struct {

	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {

	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string  `json:"address"`
	Chain   string  `json:"chain"`
	GasRate *string `json:"gas_rate,omitempty"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                    int64  `json:"AsgardSize"`
	BadValidatorRate              int64  `json:"BadValidatorRate"`
	BadValidatorRedline           int    `json:"BadValidatorRedline"`
	BlocksPerYear                 int64  `json:"BlocksPerYear"`
	ChurnInterval                 int64  `json:"ChurnInterval"`
	ChurnRetryInterval            int64  `json:"ChurnRetryInterval"`
	DesiredValidatorSet           int64  `json:"DesiredValidatorSet"`
	DoubleSignMaxAge              int64  `json:"DoubleSignMaxAge"`
	EmissionCurve                 int64  `json:"EmissionCurve"`
	FailKeygenSlashPoints         int64  `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints        int64  `json:"FailKeysignSlashPoints"`
	FullImpLossProtectionBlocks   int64  `json:"FullImpLossProtectionBlocks"`
	FundMigrationInterval         int64  `json:"FundMigrationInterval"`
	IncentiveCurve                int64  `json:"IncentiveCurve"`
	JailTimeKeygen                int64  `json:"JailTimeKeygen"`
	JailTimeKeysign               int64  `json:"JailTimeKeysign"`
	LackOfObservationPenalty      int64  `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks         int64  `json:"LiquidityLockUpBlocks"`
	MaxAvailablePools             int64  `json:"MaxAvailablePools"`
	MaxSwapsPerBlock              int64  `json:"MaxSwapsPerBlock"`
	MinRunePoolDepth              int64  `json:"MinRunePoolDepth"`
	MinSlashPointsForBadValidator int64  `json:"MinSlashPointsForBadValidator"`
	MinSwapsPerBlock              int64  `json:"MinSwapsPerBlock"`
	MinimumBondInRune             int64  `json:"MinimumBondInRune"`
	MinimumNodesForBFT            int64  `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil      int64  `json:"MinimumNodesForYggdrasil"`
	NativeTransactionFee          int64  `json:"NativeTransactionFee"`
	NewPoolCycle                  *int64 `json:"NewPoolCycle,omitempty"`
	ObservationDelayFlexibility   int64  `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints            int64  `json:"ObserveSlashPoints"`
	OldValidatorRate              int64  `json:"OldValidatorRate"`
	OutboundTransactionFee        int64  `json:"OutboundTransactionFee"`
	PoolCycle                     int64  `json:"PoolCycle"`
	SigningTransactionPeriod      int64  `json:"SigningTransactionPeriod"`
	VirtualMultSynths             int64  `json:"VirtualMultSynths"`
	YggFundLimit                  int64  `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock struct {
	Current []LastblockItem `json:"current"`
}

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn int64  `json:"last_observed_in"`
	LastSignedOut  int64  `json:"last_signed_out"`
	Thorchain      int64  `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`
	PoolShareFactor         string `json:"poolShareFactor"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), Total Rune pooled in all pools
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// ObservedChain defines model for ObservedChain.
type ObservedChain struct {
	Chain  string `json:"chain"`
	Height int    `json:"height"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolLegacyDetail defines model for PoolLegacyDetail.
type PoolLegacyDetail struct {
	Asset string `json:"asset"`

	// same as assetDepth from pool/stats
	AssetDepth string `json:"assetDepth"`

	// same as addAssetLiquidityVolume from pool/stats
	AssetStakedTotal string `json:"assetStakedTotal"`

	// same as toAssetCount from pool/stats
	BuyAssetCount string `json:"buyAssetCount"`

	// same as toAssetFees / toAssetCount from pool/stats
	BuyFeeAverage string `json:"buyFeeAverage"`

	// same as toAssetFees from pool/stats
	BuyFeesTotal string `json:"buyFeesTotal"`

	// same as toAssetAverageSlip from pool/stats
	BuySlipAverage string `json:"buySlipAverage"`

	// same as toAssetVolume / toAssetCount from pool/stats
	BuyTxAverage string `json:"buyTxAverage"`

	// same as toAssetVolume from pool/stats
	BuyVolume string `json:"buyVolume"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// same as 2*runeDepth from pool/stats
	PoolDepth string `json:"poolDepth"`

	// same as totalFees / swapCount from pool/stats
	PoolFeeAverage string `json:"poolFeeAverage"`

	// same as totalFees from pool/stats
	PoolFeesTotal string `json:"poolFeesTotal"`

	// same as averageSlip from pool/stats
	PoolSlipAverage string `json:"poolSlipAverage"`

	// same as addLiquidityVolume from pool/stats
	PoolStakedTotal string `json:"poolStakedTotal"`

	// same as swapVolume / swapCount from pool/stats
	PoolTxAverage string `json:"poolTxAverage"`

	// same as units from pool/stats
	PoolUnits string `json:"poolUnits"`

	// Int64(e8), same as buyVolume + sellVolume
	PoolVolume string `json:"poolVolume"`

	// same as assetPrice from pool/stats
	Price string `json:"price"`

	// same as runeDepth from pool/stats
	RuneDepth string `json:"runeDepth"`

	// same as addRuneLiquidityVolume from pool/stats
	RuneStakedTotal string `json:"runeStakedTotal"`

	// same as toRuneCount from pool/stats
	SellAssetCount string `json:"sellAssetCount"`

	// same as toRuneFees / toRuneCount from pool/stats
	SellFeeAverage string `json:"sellFeeAverage"`

	// same as toRuneFees from pool/stats
	SellFeesTotal string `json:"sellFeesTotal"`

	// same as toRuneAverageSlip from pool/stats
	SellSlipAverage string `json:"sellSlipAverage"`

	// same as toRuneVolume / toRuneCount from pool/stats
	SellTxAverage string `json:"sellTxAverage"`

	// same as toRuneVolume from pool/stats
	SellVolume string `json:"sellVolume"`

	// same as addLiquidityCount from pool/stats
	StakeTxCount string `json:"stakeTxCount"`

	// same as uniqueMemberCount from pool/stats
	StakersCount string `json:"stakersCount"`

	// same as addLiquidityCount + withdrawCount from pool/stats
	StakingTxCount string `json:"stakingTxCount"`

	// same as status from pool/stats
	Status string `json:"status"`

	// Int64, same as history/swaps:uniqueSwapperCount
	SwappersCount string `json:"swappersCount"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64(e8), same as swapVolume pool/stats?period=24h
	Volume24h string `json:"volume24h"`

	// same as withdrawCount from pool/stats
	WithdrawTxCount string `json:"withdrawTxCount"`
}

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`
	Asset                  string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Int64, number of unique adresses that initiated swaps transactions in the period.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Liquidity Units in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// PreflightStatus defines model for PreflightStatus.
type PreflightStatus struct {
	Code   int    `json:"code"`
	Reason string `json:"reason"`
	Status string `json:"status"`
}

// ProxiedNode defines model for ProxiedNode.
type ProxiedNode struct {
	ActiveBlockHeight int    `json:"active_block_height"`
	Bond              string `json:"bond"`
	BondAddress       string `json:"bond_address"`
	CurrentAward      string `json:"current_award"`
	ForcedToLeave     bool   `json:"forced_to_leave"`
	IpAddress         string `json:"ip_address"`
	Jail              struct {
		NodeAddress *string `json:"node_address,omitempty"`
	} `json:"jail"`
	LeaveHeight     int             `json:"leave_height"`
	NodeAddress     string          `json:"node_address"`
	ObserveChains   []ObservedChain `json:"observe_chains"`
	PreflightStatus PreflightStatus `json:"preflight_status"`
	PubKeySet       struct {
		Ed25519   string `json:"ed25519"`
		Secp256k1 string `json:"secp256k1"`
	} `json:"pub_key_set"`
	RequestedToLeave    bool     `json:"requested_to_leave"`
	SignerMembership    []string `json:"signer_membership"`
	SlashPoints         int      `json:"slash_points"`
	Status              string   `json:"status"`
	StatusSince         int      `json:"status_since"`
	ValidatorConsPubKey string   `json:"validator_cons_pub_key"`
	Version             string   `json:"version"`
}

// ProxiedNodes defines model for ProxiedNodes.
type ProxiedNodes []ProxiedNode

// Queue defines model for Queue.
type Queue struct {
	Internal int `json:"internal"`
	Outbound int `json:"outbound"`
	Swap     int `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, unique users (addresses) initiating swaps in the last 24 hours.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, unique users (addresses) initiating swaps in the last 30 days.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Int64, unique users (addresses) initiating swaps since beginning.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip by swap.
	// Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps to asset denoted in rune
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps to rune
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64(e8), toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds at the end of the interval
	TotalBonds *string `json:"totalBonds,omitempty"`

	// Int64(e8), the total amount of Rune in all of the pools at the end of the interval
	TotalRuneDepth string `json:"totalRuneDepth"`

	// Int64(e8), total value locked in the chain (in rune).
	// This equals `2*totalRuneDepth + totalBonds`, as it combines the liquidity pools (both assets and rune) and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`
}

// Transaction data
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolLegacyResponse defines model for PoolLegacyResponse.
type PoolLegacyResponse PoolLegacyDetail

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ProxiedNodesResponse defines model for ProxiedNodesResponse.
type ProxiedNodesResponse ProxiedNodes

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {

	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9/XIbN/Lgq6B4d7VyMqFJ6stWVWpPsuxffD9/6CwlV6lVTgFnQBLWDDAaYEgxKb/W",
	"vcC92BUawHxihiAt5TaJ9o+NzAEajUaj0d3obvw+CHmSckaYFIOT3wcZESlngsA/TkNJOROfzG/qp5Az",
	"SZhUf+I0jWmIVZPnnwVn6jcRLkiC1V9pxlOSSaohYQ1J/UklSeCP/5qR2eBk8F+elxg81/3Fcz3y4Esw",
	"kOuUDE4GOMvwWv075LkePiIizGgK7U4Gb5k8OggQy5MpyRCfoYyIPJYCJViGC8rmSC4ImtMlYWhGY0ky",
	"MRwU0IXMKJsPvnwJBhm5y2lGosHJv8xYQYH9L0UHPv1MQjn4onrUEflEZJ4xgTBDgLPCxfRHM5650PgS",
	"DF5xJiRmcjda91GygOxC9mrBM8YjgopWyDIAoHVOUrn4gQrJs/WDY1YF7kIOviPMIpRmNCRoYZsGg9c4",
	"Y5TNxWOh1oDvwo6YJlW0fiA4losHx0aD7WO2BbRAQmKZazZ7T6M5ziKF1Vs25TmLTqMoI0KQh2ex5gC9",
	"nPaWRdAanZrWdY57h4Wcxjy8fXAsC8i96BWtGmjRu5xGVK4fi+OaA7iQ/F9ULqIMr3AsYFtEJOWCyhoL",
	"vidKAJ4TiWn88Ctdg+5CUctFpAbDVO0PFNuJoTTjSxqRDEVYYmBSjERKQjqjIUoAcjmDx8LdiXUpqOMY",
	"BHRi2waDD0SuePbw7GjgbjhC2vQ0/YCIgB+PHmFLA9TtcVM7KM2nMQ3RLVkXOF5wHr8jcxw+/L4pQWuu",
	"dOF8KbHUUpEzglLOY7SicoF+GiOGE8rmQ4vko6DXjdjHFgUjvbVqyFrkYBqPgiFA3oZ+BcHEI1LMyX+n",
	"dqvCMka2YTC4yPg9JdHjbIcq8N7jA1rUj47/mZOcPDhGALUXFWhRR+VxOEhzD2x1nwNhHvMpjtHZ64vL",
	"FU4LGaH+8ViHawW2k78VHqDrB2jJ4zwhAZoRAmesiGlaPV+vfnr3WFiWoJ3ryiWOLdenciECJOGnKWeR",
	"CABZ/cMSxzlBSochUYn6l8CgUbHs2maUtlQKMYQTzuZaWGYkxpJESGaYCWsQBQ0zL8KSdNtmmHEkaUKE",
	"xEmq9rA6arWyhSVaLWi4gJ8MEiusdtKcCkmUPdYy1oLBgtD5otsY1J8fYiDKXINoPbZKkJJKvDLAIPAz",
	"eq9KSC7LNyESw27ZqOiYdl+CAc8d5PmYyz8YdcW2oo0InCCIsiWPlyRClHWM3FqPJnxt+LjWKFJ7kQhE",
	"Z9UVpwKpScRETZhn6qudPncSB2cECUnjGKWERaAyBAPC8mRw8q+ByMOQCNgN+mPFUdDEuYnh1TolpYug",
	"CnSF00EwwFFUmAaDYLAyJsAgGEScqd0WDDIyy5liW7GiMlw4Bm+4NfRqmFYF8YDLNccEeiMXG6zCe20X",
	"SDA4reD4vsKkddlQGAI/MipF56bFiRLEiiSl5ZCrHggLQees5FCtpCPYvCKPi41e9jMG0kY/TwM11xzP",
	"tE26wlkk2nObll+d/KpkdM/nFFTPjs8NXKtD1QDXwDinwFn0nsiMho4Z4CXJ8Jyoc2FJVMuOBdojL54F",
	"6FS3hrPHcu+SIAb6kYP3DfRLiVk0XW8NXuh+3fATfE+TPPHE/j2+pyxPvLE30H2xf6+bb4E9iShmvshD",
	"Y3/cobk36nXgmzGnbBu6K6pvQ3cN3Rv5BviN2IO65In7VaFr+WAOkH3xroPegHVDGjSnEDg2soPBXCvn",
	"2kWOmTg3s4vPnOvn3ExuYcXj0nXdEleXSoxJ1bs4eT4pnVt9I/dYHe2DkxmOBSlgTzmPCWYtEnaCcqH1",
	"irtUwU8kzYhQChHCKKJzqhY0zLOMsHBtTrSWrmx+7uMMLASR6BQaDp1yVTVogziFfpShVz+cvv0wvPz5",
	"/dnHd8qAT/Dmw1DDDCx+XVTwv8sBmjmUtp7lVWt1A3bMRuh1RgFdXd4cHXj2BmLXumuqeHa/hMbVK5Y6",
	"Leu4BLV5NYdyEbp2RdKiEmWSZEsci21uWt4WnYxJsU1npd21JglAggo2m2bytoq3FwvVekuSuNip1aat",
	"4yjOhma9uw7shEILLfaS+hnMbyzhb6LltfrTTr1zi15kNHQo/29ijmVgrrfUsWLHynJGhujtkAzhT4vO",
	"c9OikCg9o/14ed45IEylNeiPl+dob4qFMoL0dCNCUiIkfFFTf+YUQoRFVzTptvuvDLGU6a8GnObhrR4x",
	"Z/S+9Ai4YHsaDYXkRtDuK5ZLkXtbFvmklmj3IYXEmdxIwSmZUwYOtO3p2Niw5YDl4gXV3VElQ42DmwwW",
	"+JhOLQHS2piPyUH/FtR1kaV5x7y7eG9A2lrCN/uDgN1FyHci4ivnnZi0Rb2rmcOinX/gEXnl1rJmShKq",
	"1be2Zrmdq8o9ivLMBo8AZ/Rt5GnDR7BJ4zfXzNAekYRKSaLtBuTgbrLk6B3zcoEzYOwicEEprEjyHSZK",
	"vAZcC0kSRFnIE4LmhJEM901wiN5KRAV8EHlS9wDNCNF33jWiPcRpZIff8jz6SpqDC24rmhcjvyHEh7vq",
	"tAtQyNmSZMbB++nHD6/VT3FMwm2ZrsOXawlS3u4THC70eWjjnpqwd5UJF+ZWtCkX1Km1nfIDR3evztNz",
	"mA+v2UOeONtwoteJXmeZhnyq7OK2IHExelCXqA1qW77wORbsCrbIA/QmNUbq4UyHcv/Oe5M0REu5FSp6",
	"3D8EssbwbiJQ38cVE6IMNh7ag99ruKJvrUx71rXnHJd1oLnXgwqhpUuv9TiWADlzDlpBtQcedLokz5Aa",
	"B98ShmYZT9AeI3OsP5R6r7hmuOKNn+IYs1CtH5X/EEhYcShqRwPICeBN935SfPYwC6sm2Omuqw2h5ILH",
	"0jYG24MVseuZM6L+fFbiECCx4CvWjYrjosbq3O8am7lNlc55lKtf4VvXRjWBhi1VSu1EJSQd11dZTlBC",
	"cBGDuIaThmmSS46Krm0/nNImL9cs9IE6RG9wLOyPJrhRaQv6Ui60Qb55am+HwgWmzDmqCDFjJPuh//IY",
	"YIALTxqlI3Qb3Y01q0y4PlAxXRflWyGUvhpzs2OXyuxs19aZ9eeaF3UwDTM5vpscHs+PRjK8X+YH0XIW",
	"p+K3+e3qbv8gOlyujtL58eRoPtt37S69EjWQZ1evXC3nWNxkJoSgbHx4NDkcOa//cSyJw7dOza0vWi2I",
	"XBAlHqnQDIEWWCDTL9joKQ4GaT69uSXrOkJSLniW5tMxjqIVS0l6F71kd3fJHK+Pks/5aH13PEnl5zxM",
	"bl9iiVeSLA+WB+xodUvI4XpydPdiRMJwPrq/3T92CjyeS5LVxxzdv4wOXh6dk+MXL/aPZ4d4Mj09Ong1",
	"PRi9PpqE45dvzsKzo+PZ4SHeHNVudoadW1Ase0FSN4vWXKUt3jkVak9e0t/qy7c/CgbG86xWRh4dlAiq",
	"w3yuoz7PcPQTjmmEJc8+NVngaAcYJIopa6Di7KT2trgg2c8E12l+tD8e77/0G/rVIs+YtXd3wR0AfCKy",
	"tJp3oeI5EWqVCypc6tuBAsx44geG59OYXNI5e4/vT+d1Kk4OvGC8TqgQlLNXebZsrKZX/zeYxv9J1nPC",
	"LmMsFhecGq4r4BxPRttAEnTeCcqPLG/yOH6bpO+4EBcZlwRCNjT/1Kl8cDAajTyRy1n0ns4zCBj7GgZ6",
	"y0LClD7WJvjYE5f/gWmsTAdN9gaIbSEocu8C4h0Obz/OPk6FooQiygVhOJbrHdar0ITe8fD2x9SxUn4o",
	"qU2wxDTG05hcWOt323m9x/eXK5wqSQOI7ASDMqXQ6RBZ46PeAUZlF7zhWVVq7grwASZGkzw54yx6y6zu",
	"XeVf/b9tYEEkrprem6sasINdgPw8n0cZFjTeQZB9ACupEiD3hrin5weNrNTyv1qHcR3K4fjFgR+Iyt46",
	"JzFev4nJPZ3SmDY22eEW0EiXZB37AYm//vS3UY0elPYD6Kbzwf7Es786PymbV/C5IBnlUeNg9wP2E81k",
	"juP3eSwv10wudjm/fp7P1XHzjiZUbr3SDSWyou05lDe3LtZUtppqk1MLcis1Dh2lqXJ0qRCdCkH/Ad91",
	"VLdO3tY52j4We065rlPLdQo5DhXHGbFJ5DskuEsgOwVrj6DsEHz94scpThzioXO3V3dtzw507afG/nCZ",
	"QGUKYcv6Ma4Cb7u9AOU22Jsmm4Hei5TbpHdZ3x/OnDcMWMgbrukf3TQ6jQ89LSGAogN1b0z0eUX+vvSC",
	"oezrNt7jw4MX2wsqa+22ZtdGtTqwk9LNHM3dr2yboLa+s20B2PnSthsVb1524tL2QTnbuXxQpzWH50+Q",
	"kuPhjQU/qbBR331XjdfsnDBuvcI5IygXtqW+G8LSwoGuHVc91ej8V56FCYqs3R7sNo3lTRI+MwFELDKB",
	"PnZ4Bw32NhDhWTdmn6reaG/sYFSv5fqj445okpIswYrP69rABab90bwpzopMBJutoeapiWKSj1ZYoBSv",
	"SYSmJMS50Pd/5Zgo5kJcs7QYtoMEjPQHkDIiK3cU4QKzORFob1VJJP+u4IhnW10D/7nvWrfhBUstkErb",
	"CiPbmX2lMLJw+qSRbeMriQqYW268Nlv77nUvavQN+RWCr8L0nrKvRnO38POLrOs40Tolp1PYu04bN3M6",
	"V2iTTGvRuMlPWto0Nr5LoagXiWid7x3xI++okEXeaaUUQ7t+hEA0UgbXjJJI56aW19/lTYaX5qJRdYeT",
	"OJPmuudrIxocUQmnUUQiX5GhplDmuIFUnK5teYyuiN/T8t7OFSJgqIJyJXun60r2XCdEW2uEeeNd7m2I",
	"D/DDPsKSvKGZ6KVRgH6sCeki5GGmemr5YZIBS2WCsgoJu4ZWttNOIyvTYdeBPWOagXjNHEi5wBJNScyt",
	"7OxdSXfYiOJUlKlz15yxEGiTkZnaWpJ3Hfa+XKyjSLZjYgPfzcNajm/FwqrLNhwMOO/AwO54jepsGhu0",
	"tfpV2gZVcdGcRGtftjZPk6W7ZVXdtKvT5r3Jqi0Qrtx7T9l0PPs8ie8+v4iW2WGaJ7NwER4zGc/uosny",
	"6Lfo/m71maxmh4Ngc9J2d6pwLel5U6U4V/LxlyIrekPvT9Cq2g/yrj3qSVT7FFnZG/rZxSv7fnGska0M",
	"5CyipxPz6gu4kdK6Y080tBE5HwrVUOcA6nImPqHOvRla1bYmarmSh9yf3FU2LeOdTy9+7rQ49sboW7RX",
	"pkWjb3T0jrgg2XvO5OJ5I2Xy2TP0v9F4gr4b98rqzWMKiW9J76C6oF0ZYQ4qRf/4jNxLcIpviFZS7Sr1",
	"LqbWaew8EmDy4IAFdoh4p4zUFlxGElO7xZpP2lgrwKA9ysyYneGLEAv9BofmltFlydmEUIdUKsr+mLxR",
	"pNttWSNC9dxmF9jBPvTm+arzlEQbIwavSjMohR7K9lBabq0cQwv6JwIuS5+IbzIDi9b22HRaVfdhKzi4",
	"Kmsai9OWJw7itmnTmE+bt7uZs81BNVnQ2Ka/dMtUd/QomB58hpgpraaTDYTgIbUVUTAzFTqG6CMj1ZZI",
	"h5ZlcxKVUe+uIiK+NklXuqyirSN1KpocHo5ftidlPlTKsdXP8mYI2/x+Fc3284yM0vnhTP2W3++vk5ds",
	"dDQ5Oo5vMyIOD35bfV4chC9GBy/Ib4vPh6PJwd3aqYAxHnUrdFCeqnC1u1WNBc/Go8l6lOznqZyPlss8",
	"IuvFaJRNZuy349Hq7jh6sT5O8snc6RYiYTo5PLodtwcvPv1/oUxjC1bJVMU6KNbVycwgjny988A3Dn4y",
	"N23RK3vRsvneyB21WVZhKu+j7TW75+WMAeGabKWCntu6dgr/h0n1Hf6xCb3Df5eMXpDDPQqPzZm7IFlI",
	"mFR//kxJHJ0gzFiOlXUp84whIiRNQIRq7xpYzStCboWJ/Q+QxLfqC/CtEpjgB1QYghmNw7CTMA+RqTvs",
	"8Ck7i0ldLQhU2CXWblYQAkSG8yEqbuYDpTTMSeSEnO+axOyEpkvVTQ42E8DUhdM3EHyGlI1TwIdFmRws",
	"9DEXaePX3MzUfKRD79IRJWa7phVbDqxUp8o7E4yrJSN9pWK1MGdbNraqij6Q6BE4IQibtCJtDgC51XSf",
	"q5mKThFwqcyLCDS9HrhuT7PPINN8DV07dGM7guRlK0+wbwgxAmMjWEideb7jIGIDcapj+AG9jGnqi7pp",
	"p7p4Qr+694VtVnEnwnTdmLiH8ID5pzgc0mqIrHvik28KaeQ7bT9Oljg2fKzkrPdamQE2c7GF7wnTi4nx",
	"dtyb6qLBXgJpB1mkvnrsDkXeYmtsTesO77sFrv3tnrA8riUt3GJLom+RIHFc3La1Abt1zNoZAkemD5Y9",
	"2pIFuNV2UI19OcBxxekzhKKO35GkBvBeewXWbyN/MhmcIHh3GWPzXi6G8ATqeSIpsFseSAq614lUCWbZ",
	"iS6bD6TKCD4wFRde3W9gktbduTfoTGwAnTN6lxN9b7IVaMrmO+D9Lardy3sO5rRoCkFq3g3xgLTCadpN",
	"EmPJWLim+PRzsDdONJ0uNYRXXRWsYIQ+yvSOAadjJ2w/i8lxvJRE+WcKEcTfa+OmM05l47puuYYdhlZh",
	"HKVVO8plbaWVePDy9KtqiLXdWTvW6gZd3VBoien2Cja5pqH8NkVP8/hvaeJtSdhWdBo2QVMiN7Wtpp3S",
	"OiVa+l/VRG3ZZ+3jsa0yNQRXm3VaMqIhj7os4epjDg8SXNvcaYWz/cYEFJ50Bzh9RcSs17CteKivDZvd",
	"btTeeW4bE+s1tDtcrLsw6CN5Rv+elQ4rVlLHiEcHaO8MCypQCskrARp9B1lnAVotSEYQ/OP78Wj03551",
	"nWHVUf68ocl/Gx/yo7mQu7Sjh9eLSk1nKwFVAd0tidrusUfcOo7BulHajY41VacL9MYqRb3QbTWfDuBf",
	"sVL1KGHHAA3D8VGXqjlWJ0K7LVTZsxPwzstUdO4E/RWLVAvadgeF7Iy47eu+nKqbsRspHhO2ZwcwL+b9",
	"Uwm07y8+fnz3rHuMmgm4OU1Bd0LYvhcJMbCUUamjM/RlVu21FiudwVTrOJ92vot7iBSRzaqeO65/x5QP",
	"/+E6N8yWOR/+I/Zz+xZ5H/5Ddg23ycjuvbHstLxzY2m3pG99o1fO4MYJVReDVR3AuaGcR65Lttf12frZ",
	"VZOQVaFTs3v/InktbcnntK0zMovpfKEsfaPcNSJmTIBWtbpMO7c5I9i8ClcG1nz8z34lsmz5ieBo7ZOG",
	"pDnWDBZo3NyzKl427Ao4voHQwBtHmM94sn9weOSa5dQ8elJirtsev3jZVcj4xll8Dmqt4Wnoriyn0+Jv",
	"sH06qTmcq9OMZyGJbiS/iQnWgZWOyoSpG53xaDgZDfdHwwNnRbrPTqcL4xHpn92Bc0lbiwUIuxbCyWmb",
	"h3WGHJsc+RuIzfIPqKiHk7negLP756Zk7P43N+v7razGd2N8G52RkI5Sfffr3yYbIwXd/cab95tn4J7q",
	"Q4TcyH1QkyC7MTrVQuvhW0Q6x1gsbtJ2MZ6DiYtPXHJGx8d3S6UbQVnoKq7jGmBpa3fchJyJm+6ainga",
	"OhdpSTJBm0JzNNw/HI68QixvyhDT0mNe4aVOFI0gC5ySsCG2GqRxraKTA9oSqbHRa9KoJEZjnY3waQrF",
	"1n52bMQN58IWQVWVw8TBl/rNWnfRDNaoeudkJBtWvbmlzeLpa9XcxPrBxWKMoETMRaBG5lBb6Ncjzj2e",
	"AoemNQ2h+cqU+r1IQSyefdzA/xXgBWzXhMpnfHvzsbYucwHboUzBHz5kbYvOQdw2X4RpvNai7Udh0uCc",
	"0zAmZ64aoT1si+Y+s2YnZXNnECVa8DwTw4d12zadr6j0vaIUU3iytGPCCWdy8ZhT3h+hCK/FVzhXbY3l",
	"SpWAirHdDfmha08Md3O3lgyviePD7QXUTTfRTeCNiN1+4PujyBvr+pJGw69wErtjjRuhxJ5kojJceGRW",
	"lb55BiXH9E2S7a4v10kWTkaIZ8W745k7otnTO9wkYBk0Lbm5LfOZoo9/0zmUHkJyf2pu4XrzFwU+A+9a",
	"lWQ76NucGt0jeJT4qLp2ahzaehCj5tGp7fnGLq27dHp9P60TzCnjO/xCTudLyzuyyZ3S563p9p40X0ps",
	"6RjnZIbzWNoIhqZB8prhaUw2qzttME5sVjj9+iJuFShb12+r9t25dJsTAV9lvYVBW2FvNul6NfrBrorg",
	"ptVcDIuYpmi6BkkzvGZn1AqdBV7qwhfg8V3ppGcskEhwHOs2f3zBsL9POaxHutBtLb2yc8zdDtehGw/D",
	"BV7ne2g1isqZm5njvfNNIN/LXyhdU3+cBgaoz7aqM2UmgXr3G+GmQtaekd94j3FB3L/0oKg90Mpv1rZc",
	"C4+tstVPlq9f9374u65yDX2/VS6CRTrLQlQTkb5FG2/bfe6sKw//qYVsUMoXby9FsJry9G094nyvMdCz",
	"HYu+9apx9XCc/ovBRnyN3yXdjleAG2u71SrftNSB6oNz3i+N2eIJJuK6/qZWR9HLHT1rCr5bagFuWwW1",
	"KFRBWKVFAFuX1XylJthfqNM8lY94LtNcFo+wpSTUZe6s0884Kbdx+dUWpUKDGm6utb766d3X68glkK1V",
	"5ErXnTVk1/C+CnJz/LZ+3Gjxh75r/HdSOCWOO+oCORPdS3/QVPXa8jluXaXGOzC0OaT1YKojrBLkuRMW",
	"P+E4J+94eOtVeG+pWqMYmluPnq6wsmfPsuE1u1pQgchdjmOBfp18U58tHIaW2r8GSiZTiUKeTCkjolmP",
	"E6a1N+VyYavdYhbpgfRbvUB9M1l4ZXj3GqqNVfE4qipV/10vDBYfofxh+znRruI1l4RFtfp47agEbu7N",
	"N1X5AUko79+e9+NHI7TAYjFElzwh9UC3PZGHivjOgkMCJTgqvOnGNQoL9QwleK31aIx+IxnXvLO5wAMg",
	"W30vTs/VRf5WrTtHCYV1khCpj5f69M9JSBMco73vxsMRus5Ho/3we/gPQePh6FmA7Bt/Ai34Ss1qnUAp",
	"KxzXwttxjFZYDNHIvBwJbBSvUdncGY6i1IDyMZuvVBVKBQH2AuxVkLZ8xfTFcFl68ivqhZYiqFk0NCMJ",
	"X1pjoyycCTm/xVutdao9pN7V4KFWAcySD+qUr4/Y5rEv8ILojOvYKyZxqINiEgjCGURkKf57UWVqyDN9",
	"BdiKx7ePiV7oclCnF2/RXU4ySgS6+uHjp1e6RhWLEGZrLU8FiilTQnZJMdDtjM6y//t/hIRmaUZSnBGB",
	"FG5Zogvk4SnPtfy3pcMkR1OCMoIjGq8RtsH/oOmZylTggB/CCaqwSnEG4a8V0UCWhEnz4rZa3DrCSjPR",
	"UjuBEwmO2e+Enpt9p1QhkuBbXYb7u4ikSr4xWdCAYLEeFkSKOBGIcYkWPI5QmFEJW64y1SG64vpkw6Eu",
	"ClxcuSic9LtB5D4w1wtiwfM4gtHWFfQjmpFQxmsQSVSCC7i9UJVoiJPBZDgajiFKICUMp3RwMtgfjiBC",
	"JMXmwaTny8lzIxzVP51aOVSDsxIUQ6VdW2SaZigjsa4JV5GzQ3Rqy8MhKipP3U/XiDOCeIYSnpFrRplD",
	"SBcVrBXRWKQsIQ2qknJVXfOEJFwzhf0Br+0+pkwNeM3MiO5jYYg+QWuBcEZQiueUWWzhEOczdDgaojc0",
	"lmqFFPgpQThNY0qiaya5WS0LDs50Jdj1w0jR4GTwH0SeGjIr6mc4IRIun//VpPYrniQYCbVlAImYCjlE",
	"piYaODL0ecsV6UOaUqJlnNqMlD2HXVUhjlmea1uDGVdSlHYtZEsVnjBlJZJwAiZAGfQDIs8Rl/UlaAnq",
	"8ybm9yU/VfGtITt5czQ5ONo/Pn89Pn55dHR4drq/P5mcvTg6OD97+WZ/NBqN35zvH58dvB6dTyano7Oj",
	"169eH50eno2OX5yfnh10zEDew23OFuifsrX1JUEEvqgllJkF2Hv1w+nbD8PLn9+f6RyA2rNDw6uP7z+e",
	"fTd+Pe6iq4259kfrY7nDlKZa4yZzk6lgCFt4lbNrtqdM36CWXB8Up1+AIq52RGBCbAJzlfyswUUAo1aq",
	"uIPSagZbTcnsSUXPGB6jcgO238rTVWY5qY7Ueiwpwfc0yZPByeEoGBinQ0dwVA9SfDbTy+TCqvi4DVp9",
	"mPyiQImUM/Mu9mQ06tI/inbPjfj5ZH4ALUTkSYKVujkwX5GS9fBJHQwRDzsPhcsVns9J9vxjSpg6i/eH",
	"I+udCTVNSqkf8TBPFDpDl1w856EOxGrPqFEpoGPI+kiiMbNzMzg2ckTiuRK7g8sqsoNf7JwXxYvvzml/",
	"ghxMZdchrXUhULRMMeAFMc+zIzsbKwz02dyau3lffpf11F07llN/RG+VMljMzKSBRMpeFM9/Vxr3l40T",
	"BUmmM4+NKYs0AKPa0ZCADU20xaQU6JRnWrPTiZ11Mx+qwVZ8KNfMOIxUAzAe4EVyueIoUQbyyTX7BinT",
	"CVl/FSqOT2WKZ3ZBkFHjFMFpQoxDRQzRG3D5s0ipYREYSCsax9cMgbqplIHytCnGACUBK4BDi4A6nxw4",
	"YCQom8cExhkOrzgSBGdqkkIZOmpn21c5yL3SAAvXjoDpK/AW7AlKuRBUab2amifoMKEsgCi6AEVYCWVC",
	"bgMEMQ4BustxJkkWoDXBGWAK1zUn6F/j4fBgNPpliM7JDFwVZTxJ4SAconPO/iHtOyKIzsoJUoHg8UiI",
	"AfkGlOnnkp8gDgwCGq4MtK9KkJCzCCZzYdHPBZ4To8pVVvsbHVE11kFyJ+jXf9qP30d4rezZyRHM4Pvx",
	"6NdmczQlM3WmKTT6Oup/Sf79+Gj04sXk8GikYUFJcAsLz9TiqWn5AFPtFLij4xejFwbcuUZJrggxDyQo",
	"JpPccFyk4y7gGgs8OIr0YC0F6qfqZ8ZXQ8WPH1m8rjzjcTAalWsFqqlmdhKdqNa/tpFuoOkmxDW7KA8u",
	"sNjNmsFiKRAVCug5LQirPMFksUAJkXhoPFJQqGhBrhlMvtwe1tmlaA/nYp1PQs5mdJ5rqaj5Re0zOzXY",
	"/XrbmF2lrEFlQsAen6lR1PrVJv7yZRcH1DuinEkaK+o7QPxqud54DPUSVnowq/WX2rxb7wf/nL032KD8",
	"a6kLglOYKw4qrICxQZlUKx9wbhgVw76z0algbFbF7cZXXIrjMI+xNVdKBS/CXSpdxXNbDkqY0mD+NVAy",
	"bBAMlBCDiC3VT4kxG6s1CAZGkA2CgZJkFd9GN8Yf2gIN7nSBhEN0qe3oKSn2aCETq3PaH7knFNrcwiYJ",
	"exTC15WbC8X0xioUDZf+EL2dIa72ut5iykKmS8KCllCoIlqycodSzQe9GuVm9C+BxT0m0EDLSBs3WmoL",
	"bYnYTuptdZd1KEXaoa8Emi4SaPdkU0EiOFPqnNioG9mGxt9kbySLO8onNedJzXlSc57UnL+FmvPaCENP",
	"TedJ33jSN/7M+kaD3TtUDtuqU9do1eTYqHRUnypWUqvI+FMiQ7/52Xw/9q15n4rqm6pSQbFahepaPLz0",
	"pKw8KStPysqTsvJXVlaKG6pd/TJa0IJHBlnJXAnV1pFgdGb3a4cWY9w2T24al9r0Z9GanpQmb6Wpue06",
	"tKay1twrrRR1qk+Q1LFRZYLQdFhFmxASQDJFoOPVlSRx+Wye1KYntelJbXpSm57UJqs2VbPE/TQmI6i3",
	"1ZeGTwrTk5/pSWUitaIEHdrSJSS2dmlIchlvjvEpI/B1bI9NoIF8lcAcBq6Mmo67Lv38NiTrIJ2tg743",
	"b3JDIg36Fk3QN+aXCzUu3M096VBPGtSTBvWkQf2FNahKCvHTBdmT4vIXVlxKTu/QWxxKQlOJ0Wl5z383",
	"ySVffMKyIRcd8mQkllRIGpaOmka6rj7pMng5lIf68QSQe9jYKzYtUA/vjF7XRdLN62IbtrRN4oEEMxku",
	"XLgM0WsqF6BIQLC1wpzZCGzT3yQgAY41lhxM2XT8+X62mMxfHN7tL0cyujs8mjGyvD+6D+9lyBZSJGF+",
	"dJC44wjLLB7/UMKduKNKtq6cBN0G2YfM60wh/HmhEaFflO+r+e/MWisl7LRooI5ZkAtiwVcMcRYSkBVq",
	"gcg/BNKZ3qZ4h1kcnRhZX7FrBkOZMQINU+FS66n0ULWuMFhHEpmmiTg1GHpa4TCemSBKMyIIk83X9Hcy",
	"t79i7ftXvZGJYnJEd0vLMLm3Nq29RVPz/Vx/3n4+pn/HfOzoAL6Yj60i3T8bSP5TsuwDj4hNgr0la8Nl",
	"hgmccknXqd5pOqpn12TUt/rSwCOdvwO7b5bPkd7L1ToQJ4XNCckkAZocLAov/enFz0Pkmt6F5sxe5odt",
	"DZy8MemuIQXFpnytB9kHag6doaoFnTAYyE5ym7dRO1O0ygOwzLbWLrgrqHVSNLbrMaMkjkw9MTC+4XC0",
	"fa9ZyDONfqT2VellQDEPTa7zT1RQPdKiacgrGRhlNI4jvurMki0e7Pw3Wt2gzc7qWygFwvN5RubafFLd",
	"LAmNAwEsVv3qEgjh4TUz9TiVkrk/ipqJuLoYqlMWAxSnOj9WfXTPY9VCl1B9Cf+/f3QINUrj2KXD78y3",
	"sEQdzAsOnZL5elj3eUzmOFx3Z57D5wD9NEZCrmMC663P7SkOb1c4i+CRQyzplMZUrofoIiZYEJTQeYYl",
	"5PJXmSpA4YKEt9eswu1RNUFQM6nefZs4VGP3V5BCeiZ+y4n2lmM1H8rmz2pLu5tGZk8ErSApnYnra1fR",
	"RfuNkkHn6RvnQGzL8piqAtQ+7t2xzYqP7W1WlKTQL1voBylFLqBARPSg26tvazXO3/4zoFcxmsd8iuNK",
	"VEt5FQP6hbKYKmUSnDdCRlTv4NjukSD/oRHTwIuJ6vTf4WfzFkTvfBd5gnXNjwSHC8p0YRGoJ2LTiE1V",
	"jHrWcsetl+rglaO887gtn75qi95Q4LYNOctFTZfnYbWctJNAtuC0TdfNhS50UVYaCZDgpcfBNAsxU6YJ",
	"X5Iso5HuktCEZs5dql89KWtb78IfRe+uraAHqSBejtcmjCk0clMYf50EemtKkpRmIthl5vHdUiW3VlsA",
	"jsSUZNo3aAqRWEsdSrHq0F40g7dumIzXiM4qeC+wQEkeS5rGBGEoB+PW6c2UDYaFmboTeZtAvKls6VMO",
	"36a2UnvgZaC+fZpRstQaEhESQXMom2MLBIUZV+Z0HJsaQ30keVcMuFNYku3tTYRyvPbk/Ww7XYhQw4Ue",
	"FT1ZV6Ximfq9Z9K7m3hVAN5z1sO153tnHzHyni/02H6++rWkXeYLPb0nqsf58uXLl/8XAAD//8i/n78M",
	"7AAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
