// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {
	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still
	// pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still
// pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {
	// Int64, amount of liquidity units assigned to the member as result of the liquidity
	// deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// Balance defines model for Balance.
type Balance struct {
	Coins Coins `json:"coins"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {
	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Represents a digital currency amount
type Coin struct {
	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {
	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, The liquidity unit value index. Sqrt(assetDepth * runeDepth)/liquidity units
	Luvi string `json:"luvi"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {
	// Int64(e8), the amount of Asset in the pool at the end of the interval at time endTime
	EndAssetDepth string `json:"endAssetDepth"`

	// Int64, Liquidity Units in the pool at the end of the interval at time endTime
	EndLPUnits string `json:"endLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval at time endTime
	EndRuneDepth string `json:"endRuneDepth"`

	// Int64, Synth Units in the pool at the end of the interval at time endTime
	EndSynthUnits string `json:"endSynthUnits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, The liquidity unit value index increase between the first and last depth item
	LuviIncrease string `json:"luviIncrease"`

	// Float, The impermanent loss between the first and last depth item
	PriceShiftLoss string `json:"priceShiftLoss"`

	// Int64(e8), the amount of Asset in the pool at the start of the interval at time
	// startTime
	StartAssetDepth string `json:"startAssetDepth"`

	// Int64, Liquidity Units in the pool at the start of the interval at time startTime
	StartLPUnits string `json:"startLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the start of the interval at time startTime
	StartRuneDepth string `json:"startRuneDepth"`

	// Int64, Synth Units in the pool at the start of the interval at time startTime
	StartSynthUnits string `json:"startSynthUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {
	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of
	// liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {
	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// FullMemberDetails defines model for FullMemberDetails.
type FullMemberDetails struct {
	// List details of all the liquidity providers identified with the given address
	Pools []FullMemberPool `json:"pools"`
}

// FullMemberPool defines model for FullMemberPool.
type FullMemberPool struct {
	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total units of the pool
	PoolUnits string `json:"poolUnits"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`

	// Int64, total units that belong the the member
	SharedUnits string `json:"sharedUnits"`
}

// Health defines model for Health.
type Health struct {
	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync         bool     `json:"inSync"`
	LastAggregated HeightTS `json:"lastAggregated"`
	LastCommitted  HeightTS `json:"lastCommitted"`
	LastFetched    HeightTS `json:"lastFetched"`
	LastThorNode   HeightTS `json:"lastThorNode"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// HeightTS defines model for HeightTS.
type HeightTS struct {
	// Block height
	Height int `json:"height"`

	// Block timestamp (seconds since epoch)
	Timestamp int `json:"timestamp"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string  `json:"address"`
	Chain   string  `json:"chain"`
	GasRate *string `json:"gas_rate,omitempty"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                    int64  `json:"AsgardSize"`
	BadValidatorRate              int64  `json:"BadValidatorRate"`
	BadValidatorRedline           int    `json:"BadValidatorRedline"`
	BlocksPerYear                 int64  `json:"BlocksPerYear"`
	ChurnInterval                 int64  `json:"ChurnInterval"`
	ChurnRetryInterval            int64  `json:"ChurnRetryInterval"`
	DesiredValidatorSet           int64  `json:"DesiredValidatorSet"`
	DoubleSignMaxAge              int64  `json:"DoubleSignMaxAge"`
	EmissionCurve                 int64  `json:"EmissionCurve"`
	FailKeygenSlashPoints         int64  `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints        int64  `json:"FailKeysignSlashPoints"`
	FullImpLossProtectionBlocks   int64  `json:"FullImpLossProtectionBlocks"`
	FundMigrationInterval         int64  `json:"FundMigrationInterval"`
	IncentiveCurve                int64  `json:"IncentiveCurve"`
	JailTimeKeygen                int64  `json:"JailTimeKeygen"`
	JailTimeKeysign               int64  `json:"JailTimeKeysign"`
	LackOfObservationPenalty      int64  `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks         int64  `json:"LiquidityLockUpBlocks"`
	MaxAvailablePools             int64  `json:"MaxAvailablePools"`
	MaxSwapsPerBlock              int64  `json:"MaxSwapsPerBlock"`
	MinRunePoolDepth              int64  `json:"MinRunePoolDepth"`
	MinSlashPointsForBadValidator int64  `json:"MinSlashPointsForBadValidator"`
	MinSwapsPerBlock              int64  `json:"MinSwapsPerBlock"`
	MinimumBondInRune             int64  `json:"MinimumBondInRune"`
	MinimumNodesForBFT            int64  `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil      int64  `json:"MinimumNodesForYggdrasil"`
	NativeTransactionFee          int64  `json:"NativeTransactionFee"`
	NewPoolCycle                  *int64 `json:"NewPoolCycle,omitempty"`
	ObservationDelayFlexibility   int64  `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints            int64  `json:"ObserveSlashPoints"`
	OldValidatorRate              int64  `json:"OldValidatorRate"`
	OutboundTransactionFee        int64  `json:"OutboundTransactionFee"`
	PoolCycle                     int64  `json:"PoolCycle"`
	SigningTransactionPeriod      int64  `json:"SigningTransactionPeriod"`
	VirtualMultSynths             int64  `json:"VirtualMultSynths"`
	YggFundLimit                  int64  `json:"YggFundLimit"`
}

// LPDetail defines model for LPDetail.
type LPDetail struct {
	// asset address
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, total asset earned
	AssetEarned string `json:"assetEarned"`

	// Float, current asset price in rune
	AssetPrice string `json:"assetPrice"`

	// Float, current asset price in usd
	AssetPriceUsd string `json:"assetPriceUsd"`

	// pool name
	Pool string `json:"pool"`

	// Int64(e8), pool units
	PoolUnits string `json:"poolUnits"`

	// Int64(e8), total block reward
	Rewards string `json:"rewards"`

	// rune address
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// Float, total rune earned
	RuneEarned string `json:"runeEarned"`

	// Int64(e8), current rune price in usd
	RunePriceUsd string `json:"runePriceUsd"`

	// Int64(e8), share units
	SharedUnits string        `json:"sharedUnits"`
	StakeDetail []StakeDetail `json:"stakeDetail"`

	// Int64(e8), total rune price in usd
	UsdEarned      string        `json:"usdEarned"`
	WithdrawDetail []StakeDetail `json:"withdrawDetail"`
}

// LPDetails defines model for LPDetails.
type LPDetails []LPDetail

// Lastblock defines model for Lastblock.
type Lastblock []LastblockItem

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn int64  `json:"last_observed_in"`
	LastSignedOut  int64  `json:"last_signed_out"`
	Thorchain      int64  `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {
	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {
	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {
	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and
	// nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each
// outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {
	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// OHLCVHistory defines model for OHLCVHistory.
type OHLCVHistory struct {
	Intervals OHLCVHistoryIntervals `json:"intervals"`
	Meta      OHLCVHistoryMeta      `json:"meta"`
}

// OHLCVHistoryIntervals defines model for OHLCVHistoryIntervals.
type OHLCVHistoryIntervals []OHLCVHistoryItem

// OHLCVHistoryItem defines model for OHLCVHistoryItem.
type OHLCVHistoryItem struct {
	// Float, close price of asset in USD
	ClosePrice string `json:"closePrice"`

	// Int64, The end time of bucket in unix timestamp
	CloseTime string `json:"closeTime"`

	// Float, high price of asset in USD
	HighPrice string `json:"highPrice"`

	// Int64, The high time of bucket in unix timestamp
	HighTime string `json:"highTime"`

	// Int64, Liquidty is USD
	Liquidity string `json:"liquidity"`

	// Float, low price of asset in USD
	LowPrice string `json:"lowPrice"`

	// Int64, The low time of bucket in unix timestamp
	LowTime string `json:"lowTime"`

	// Float, open price of asset in USD
	OpenPrice string `json:"openPrice"`

	// Int64, The beginning time of bucket in unix timestamp
	OpenTime string `json:"openTime"`

	// Int64, Volume in USD
	Volume string `json:"volume"`
}

// OHLCVHistoryMeta defines model for OHLCVHistoryMeta.
type OHLCVHistoryMeta struct {
	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// ObservedChain defines model for ObservedChain.
type ObservedChain struct {
	Chain  string `json:"chain"`
	Height int    `json:"height"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income,
	// taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	// It includes synth mint or burn.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {
	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`
	Asset                  string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income,
	// taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// PreflightStatus defines model for PreflightStatus.
type PreflightStatus struct {
	Code   int    `json:"code"`
	Reason string `json:"reason"`
	Status string `json:"status"`
}

// ProxiedNode defines model for ProxiedNode.
type ProxiedNode struct {
	ActiveBlockHeight int    `json:"active_block_height"`
	Bond              string `json:"bond"`
	BondAddress       string `json:"bond_address"`
	CurrentAward      string `json:"current_award"`
	ForcedToLeave     bool   `json:"forced_to_leave"`
	IpAddress         string `json:"ip_address"`
	Jail              struct {
		NodeAddress *string `json:"node_address,omitempty"`
	} `json:"jail"`
	LeaveHeight     int             `json:"leave_height"`
	NodeAddress     string          `json:"node_address"`
	ObserveChains   []ObservedChain `json:"observe_chains"`
	PreflightStatus PreflightStatus `json:"preflight_status"`
	PubKeySet       struct {
		Ed25519   string `json:"ed25519"`
		Secp256k1 string `json:"secp256k1"`
	} `json:"pub_key_set"`
	RequestedToLeave    bool     `json:"requested_to_leave"`
	SignerMembership    []string `json:"signer_membership"`
	SlashPoints         int      `json:"slash_points"`
	Status              string   `json:"status"`
	StatusSince         int      `json:"status_since"`
	ValidatorConsPubKey string   `json:"validator_cons_pub_key"`
	Version             string   `json:"version"`
}

// ProxiedNodes defines model for ProxiedNodes.
type ProxiedNodes []ProxiedNode

// Queue defines model for Queue.
type Queue struct {
	Internal int `json:"internal"`
	Outbound int `json:"outbound"`
	Swap     int `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {
	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// StatsData defines model for StatsData.
type StatsData struct {
	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Deprecated, it's always 0.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Deprecated, it's always 0.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps (including synths) since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps (including synths) in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps (including synths) in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps (including synths) denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Synth to Rune since beginning.
	SynthBurnCount string `json:"synthBurnCount"`

	// Int64, number of swaps from Rune to Synth since beginning.
	SynthMintCount string `json:"synthMintCount"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {
	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {
	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {
	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {
	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {
	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of
	// the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity
	// pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at
	// the end of the interval.
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {
	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the
	// native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {
	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means
	// totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership
	// withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// StakeDetail defines model for stakeDetail.
type StakeDetail struct {
	// Int64(e8), asset amount
	AssetAmount string `json:"assetAmount"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, asset price in rune
	AssetPrice string `json:"assetPrice"`

	// Float, asset price in usd
	AssetPriceUsd string `json:"assetPriceUsd"`

	// Float, withdraw percentage
	BasisPoint string `json:"basisPoint"`

	// Int64, nano timestamp of the block
	Date string `json:"date"`

	// Int64, block height
	Height string `json:"height"`

	// Int64, total number of pool units
	PoolUnits string `json:"poolUnits"`

	// Int64(e8), rune amount
	RuneAmount string `json:"runeAmount"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// Float, rune price in usd
	RunePriceUsd string `json:"runePriceUsd"`

	// Int64, total number of units changed
	SharedUnits string `json:"sharedUnits"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// BalanceResponse defines model for BalanceResponse.
type BalanceResponse Balance

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// FullMembersResponse defines model for FullMembersResponse.
type FullMembersResponse FullMemberDetails

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LPDetailsResponse defines model for LPDetailsResponse.
type LPDetailsResponse LPDetails

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// OHLCVHistoryResponse defines model for OHLCVHistoryResponse.
type OHLCVHistoryResponse OHLCVHistory

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ProxiedNodesResponse defines model for ProxiedNodesResponse.
type ProxiedNodesResponse ProxiedNodes

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {
	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// Affiliate address of the action (swap)
	Affiliate *string `json:"affiliate,omitempty"`
	AssetType *string `json:"assetType,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`
}

// GetFullMembersAdressesParams defines parameters for GetFullMembersAdresses.
type GetFullMembersAdressesParams struct {
	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {
	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {
	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {
	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetOHLCVHistoryParams defines parameters for GetOHLCVHistory.
type GetOHLCVHistoryParams struct {
	// Interval of calculations
	Interval *GetOHLCVHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetOHLCVHistoryParamsInterval defines parameters for GetOHLCVHistory.
type GetOHLCVHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {
	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTSSwapHistoryParams defines parameters for GetTSSwapHistory.
type GetTSSwapHistoryParams struct {
	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetTSSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTSSwapHistoryParamsInterval defines parameters for GetTSSwapHistory.
type GetTSSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {
	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetLPDetailParams defines parameters for GetLPDetail.
type GetLPDetailParams struct {
	// Return information for given pools
	Pools *string `json:"pools,omitempty"`
}

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {
	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {
	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {
	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"3HRDZ+YzAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
