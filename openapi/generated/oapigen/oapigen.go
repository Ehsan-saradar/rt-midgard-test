// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {
	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {
	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {
	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Represents a digital currency amount
type Coin struct {
	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {
	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, The liquidity unit value index. Sqrt(assetDepth * runeDepth)/liquidity units
	Luvi *string `json:"luvi,omitempty"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {
	// Int64(e8), the amount of Asset in the pool at the end of the interval at time endTime
	EndAssetDepth string `json:"endAssetDepth"`

	// Int64, Liquidity Units in the pool at the end of the interval at time endTime
	EndLiquidityUnits *string `json:"endLiquidityUnits,omitempty"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval at time endTime
	EndRuneDepth string `json:"endRuneDepth"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, The liquidity unit value index increase between the first and last depth item
	LuviIncrease string `json:"luviIncrease"`

	// Float, The impermanent loss between the first and last depth item
	PriceShiftLoss string `json:"priceShiftLoss"`

	// Int64(e8), the amount of Asset in the pool at the start of the interval at time startTime
	StartAssetDepth string `json:"startAssetDepth"`

	// Int64, Liquidity Units in the pool at the start of the interval at time startTime
	StartLiquidityUnits string `json:"startLiquidityUnits"`

	// Int64(e8), the amount of Rune in the pool at the start of the interval at time startTime
	StartRuneDepth string `json:"startRuneDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {
	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {
	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// FullMemberDetails defines model for FullMemberDetails.
type FullMemberDetails struct {
	// List details of all the liquidity providers identified with the given address
	Pools []FullMemberPool `json:"pools"`
}

// FullMemberPool defines model for FullMemberPool.
type FullMemberPool struct {
	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total units of the pool
	PoolUnits string `json:"poolUnits"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`

	// Int64, total units that belong the the member
	SharedUnits string `json:"sharedUnits"`
}

// Health defines model for Health.
type Health struct {
	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync         bool     `json:"inSync"`
	LastAggregated HeightTS `json:"lastAggregated"`
	LastCommitted  HeightTS `json:"lastCommitted"`
	LastFetched    HeightTS `json:"lastFetched"`
	LastThorNode   HeightTS `json:"lastThorNode"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// HeightTS defines model for HeightTS.
type HeightTS struct {
	// Block height
	Height int `json:"height"`

	// Block timestamp (seconds since epoch)
	Timestamp int `json:"timestamp"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string  `json:"address"`
	Chain   string  `json:"chain"`
	GasRate *string `json:"gas_rate,omitempty"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                    int64  `json:"AsgardSize"`
	BadValidatorRate              int64  `json:"BadValidatorRate"`
	BadValidatorRedline           int    `json:"BadValidatorRedline"`
	BlocksPerYear                 int64  `json:"BlocksPerYear"`
	ChurnInterval                 int64  `json:"ChurnInterval"`
	ChurnRetryInterval            int64  `json:"ChurnRetryInterval"`
	DesiredValidatorSet           int64  `json:"DesiredValidatorSet"`
	DoubleSignMaxAge              int64  `json:"DoubleSignMaxAge"`
	EmissionCurve                 int64  `json:"EmissionCurve"`
	FailKeygenSlashPoints         int64  `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints        int64  `json:"FailKeysignSlashPoints"`
	FullImpLossProtectionBlocks   int64  `json:"FullImpLossProtectionBlocks"`
	FundMigrationInterval         int64  `json:"FundMigrationInterval"`
	IncentiveCurve                int64  `json:"IncentiveCurve"`
	JailTimeKeygen                int64  `json:"JailTimeKeygen"`
	JailTimeKeysign               int64  `json:"JailTimeKeysign"`
	LackOfObservationPenalty      int64  `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks         int64  `json:"LiquidityLockUpBlocks"`
	MaxAvailablePools             int64  `json:"MaxAvailablePools"`
	MaxSwapsPerBlock              int64  `json:"MaxSwapsPerBlock"`
	MinRunePoolDepth              int64  `json:"MinRunePoolDepth"`
	MinSlashPointsForBadValidator int64  `json:"MinSlashPointsForBadValidator"`
	MinSwapsPerBlock              int64  `json:"MinSwapsPerBlock"`
	MinimumBondInRune             int64  `json:"MinimumBondInRune"`
	MinimumNodesForBFT            int64  `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil      int64  `json:"MinimumNodesForYggdrasil"`
	NativeTransactionFee          int64  `json:"NativeTransactionFee"`
	NewPoolCycle                  *int64 `json:"NewPoolCycle,omitempty"`
	ObservationDelayFlexibility   int64  `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints            int64  `json:"ObserveSlashPoints"`
	OldValidatorRate              int64  `json:"OldValidatorRate"`
	OutboundTransactionFee        int64  `json:"OutboundTransactionFee"`
	PoolCycle                     int64  `json:"PoolCycle"`
	SigningTransactionPeriod      int64  `json:"SigningTransactionPeriod"`
	VirtualMultSynths             int64  `json:"VirtualMultSynths"`
	YggFundLimit                  int64  `json:"YggFundLimit"`
}

// LPDetail defines model for LPDetail.
type LPDetail struct {
	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, total asset earned
	AssetEarned string `json:"assetEarned"`

	// Float, current asset price in rune
	AssetPrice string `json:"assetPrice"`

	// Float, current asset price in usd
	AssetPriceUsd string `json:"assetPriceUsd"`

	// pool name
	Pool string `json:"pool"`

	// Int64(e8), pool units
	PoolUnits string `json:"poolUnits"`

	// Int64(e8), total block reward
	Rewards string `json:"rewards"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// Float, total rune earned
	RuneEarned string `json:"runeEarned"`

	// Int64(e8), current rune price in usd
	RunePriceUsd string `json:"runePriceUsd"`

	// Int64(e8), share units
	SharedUnits string        `json:"sharedUnits"`
	StakeDetail []StakeDetail `json:"stakeDetail"`

	// Int64(e8), total rune price in usd
	UsdEarned      string        `json:"usdEarned"`
	WithdrawDetail []StakeDetail `json:"withdrawDetail"`
}

// LPDetails defines model for LPDetails.
type LPDetails []LPDetail

// Lastblock defines model for Lastblock.
type Lastblock []LastblockItem

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn int64  `json:"last_observed_in"`
	LastSignedOut  int64  `json:"last_signed_out"`
	Thorchain      int64  `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {
	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {
	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {
	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {
	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// OHLCVHistory defines model for OHLCVHistory.
type OHLCVHistory struct {
	Intervals OHLCVHistoryIntervals `json:"intervals"`
	Meta      OHLCVHistoryMeta      `json:"meta"`
}

// OHLCVHistoryIntervals defines model for OHLCVHistoryIntervals.
type OHLCVHistoryIntervals []OHLCVHistoryItem

// OHLCVHistoryItem defines model for OHLCVHistoryItem.
type OHLCVHistoryItem struct {
	// Float, close price of asset in USD
	ClosePrice string `json:"closePrice"`

	// Int64, The end time of bucket in unix timestamp
	CloseTime string `json:"closeTime"`

	// Float, high price of asset in USD
	HighPrice string `json:"highPrice"`

	// Int64, The high time of bucket in unix timestamp
	HighTime string `json:"highTime"`

	// Int64, Liquidty is USD
	Liquidity string `json:"liquidity"`

	// Float, low price of asset in USD
	LowPrice string `json:"lowPrice"`

	// Int64, The low time of bucket in unix timestamp
	LowTime string `json:"lowTime"`

	// Float, open price of asset in USD
	OpenPrice string `json:"openPrice"`

	// Int64, The beginning time of bucket in unix timestamp
	OpenTime string `json:"openTime"`

	// Int64, Volume in USD
	Volume string `json:"volume"`
}

// OHLCVHistoryMeta defines model for OHLCVHistoryMeta.
type OHLCVHistoryMeta struct {
	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// ObservedChain defines model for ObservedChain.
type ObservedChain struct {
	Chain  string `json:"chain"`
	Height int    `json:"height"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {
	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`
	Asset                  string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Int64, number of unique adresses that initiated swaps transactions in the period.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// PreflightStatus defines model for PreflightStatus.
type PreflightStatus struct {
	Code   int    `json:"code"`
	Reason string `json:"reason"`
	Status string `json:"status"`
}

// ProxiedNode defines model for ProxiedNode.
type ProxiedNode struct {
	ActiveBlockHeight int    `json:"active_block_height"`
	Bond              string `json:"bond"`
	BondAddress       string `json:"bond_address"`
	CurrentAward      string `json:"current_award"`
	ForcedToLeave     bool   `json:"forced_to_leave"`
	IpAddress         string `json:"ip_address"`
	Jail              struct {
		NodeAddress *string `json:"node_address,omitempty"`
	} `json:"jail"`
	LeaveHeight     int             `json:"leave_height"`
	NodeAddress     string          `json:"node_address"`
	ObserveChains   []ObservedChain `json:"observe_chains"`
	PreflightStatus PreflightStatus `json:"preflight_status"`
	PubKeySet       struct {
		Ed25519   string `json:"ed25519"`
		Secp256k1 string `json:"secp256k1"`
	} `json:"pub_key_set"`
	RequestedToLeave    bool     `json:"requested_to_leave"`
	SignerMembership    []string `json:"signer_membership"`
	SlashPoints         int      `json:"slash_points"`
	Status              string   `json:"status"`
	StatusSince         int      `json:"status_since"`
	ValidatorConsPubKey string   `json:"validator_cons_pub_key"`
	Version             string   `json:"version"`
}

// ProxiedNodes defines model for ProxiedNodes.
type ProxiedNodes []ProxiedNode

// Queue defines model for Queue.
type Queue struct {
	Internal int `json:"internal"`
	Outbound int `json:"outbound"`
	Swap     int `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {
	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// StatsData defines model for StatsData.
type StatsData struct {
	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, unique users (addresses) initiating swaps in the last 24 hours.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, unique users (addresses) initiating swaps in the last 30 days.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Int64, unique users (addresses) initiating swaps since beginning.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {
	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {
	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {
	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {
	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {
	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at the end of the interval
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {
	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {
	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// StakeDetail defines model for stakeDetail.
type StakeDetail struct {
	// Int64(e8), asset amount
	AssetAmount string `json:"assetAmount"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, asset price in rune
	AssetPrice string `json:"assetPrice"`

	// Float, asset price in usd
	AssetPriceUsd string `json:"assetPriceUsd"`

	// Float, withdraw percentage
	BasisPoint string `json:"basisPoint"`

	// Int64, nano timestamp of the block
	Date string `json:"date"`

	// Int64, block height
	Height string `json:"height"`

	// Int64, total number of pool units
	PoolUnits string `json:"poolUnits"`

	// Int64(e8), rune amount
	RuneAmount string `json:"runeAmount"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// Float, rune price in usd
	RunePriceUsd string `json:"runePriceUsd"`

	// Int64, total number of units changed
	SharedUnits string `json:"sharedUnits"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// FullMembersResponse defines model for FullMembersResponse.
type FullMembersResponse FullMemberDetails

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LPDetailsResponse defines model for LPDetailsResponse.
type LPDetailsResponse LPDetails

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// OHLCVHistoryResponse defines model for OHLCVHistoryResponse.
type OHLCVHistoryResponse OHLCVHistory

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ProxiedNodesResponse defines model for ProxiedNodesResponse.
type ProxiedNodesResponse ProxiedNodes

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {
	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`
}

// GetFullMembersAdressesParams defines parameters for GetFullMembersAdresses.
type GetFullMembersAdressesParams struct {
	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {
	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {
	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {
	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetOHLCVHistoryParams defines parameters for GetOHLCVHistory.
type GetOHLCVHistoryParams struct {
	// Interval of calculations
	Interval *GetOHLCVHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetOHLCVHistoryParamsInterval defines parameters for GetOHLCVHistory.
type GetOHLCVHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {
	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTSSwapHistoryParams defines parameters for GetTSSwapHistory.
type GetTSSwapHistoryParams struct {
	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetTSSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTSSwapHistoryParamsInterval defines parameters for GetTSSwapHistory.
type GetTSSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {
	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetLPDetailParams defines parameters for GetLPDetail.
type GetLPDetailParams struct {
	// Return information for given pools
	Pools *string `json:"pools,omitempty"`
}

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {
	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {
	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {
	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
