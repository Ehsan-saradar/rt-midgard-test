// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Action defines model for Action.
type Action struct {

	// Int64, Unix timestamp for when the action was registered
	Date string `json:"date"`

	// Int64, block height at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status string `json:"status"`

	// Type of action
	Type string `json:"type"`
}

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the liquidity provider as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64, Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64, Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64, Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64, Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64, Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64, Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64, Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64, Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64, Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64, Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Coin defines model for Coin.
type Coin struct {

	// Int64 (10^8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64, Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64, Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64, System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64, Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistoryItemPool defines model for EarningsHistoryItemPool.
type EarningsHistoryItemPool struct {

	// Int64, Share of earnings sent to the pool during the time interval
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses struct {
	Current []InboundAddressesItem `json:"current"`
}

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string `json:"address"`
	Chain   string `json:"chain"`

	// indicate whether this chain has halted
	Halted bool   `json:"halted"`
	PubKey string `json:"pub_key"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                  int64 `json:"AsgardSize"`
	BadValidatorRate            int64 `json:"BadValidatorRate"`
	BlocksPerYear               int64 `json:"BlocksPerYear"`
	ChurnInterval               int64 `json:"ChurnInterval"`
	ChurnRetryInterval          int64 `json:"ChurnRetryInterval"`
	CliTxCost                   int64 `json:"CliTxCost"`
	DesiredValidatorSet         int64 `json:"DesiredValidatorSet"`
	DoubleSignMaxAge            int64 `json:"DoubleSignMaxAge"`
	EmissionCurve               int64 `json:"EmissionCurve"`
	FailKeygenSlashPoints       int64 `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints      int64 `json:"FailKeysignSlashPoints"`
	FundMigrationInterval       int64 `json:"FundMigrationInterval"`
	JailTimeKeygen              int64 `json:"JailTimeKeygen"`
	JailTimeKeysign             int64 `json:"JailTimeKeysign"`
	LackOfObservationPenalty    int64 `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks       int64 `json:"LiquidityLockUpBlocks"`
	MinimumBondInRune           int64 `json:"MinimumBondInRune"`
	MinimumNodesForBFT          int64 `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil    int64 `json:"MinimumNodesForYggdrasil"`
	NativeChainGasFee           int64 `json:"NativeChainGasFee"`
	NewPoolCycle                int64 `json:"NewPoolCycle"`
	ObservationDelayFlexibility int64 `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints          int64 `json:"ObserveSlashPoints"`
	OldValidatorRate            int64 `json:"OldValidatorRate"`
	OutboundTransactionFee      int64 `json:"OutboundTransactionFee"`
	SigningTransactionPeriod    int64 `json:"SigningTransactionPeriod"`
	YggFundLimit                int64 `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock struct {
	Current []LastblockItem `json:"current"`
}

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn string `json:"last_observed_in"`
	LastSignedOut  string `json:"last_signed_out"`
	Thorchain      string `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64, total deposits (liquidity additions) during the time interval
	Deposits string `json:"deposits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, total withdrawals during the time interval
	Withdrawals string `json:"withdrawals"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// Liquidity provider data for all the pools of a given member
	Pools []MemberPoolDetails `json:"pools"`
}

// MemberPoolDetails defines model for MemberPoolDetails.
type MemberPoolDetails struct {

	// Int64, total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// Int64, total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Int64, total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`
	PoolShareFactor         string `json:"poolShareFactor"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64, Total Rune pooled in all pools
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64, Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NetworkFees defines model for NetworkFees.
type NetworkFees []Coin

// NodeKey defines model for NodeKey.
type NodeKey struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// NodeKeys defines model for NodeKeys.
type NodeKeys []NodeKey

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolLegacyDetail defines model for PoolLegacyDetail.
type PoolLegacyDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Int64, same as history/swaps:toAssetCount
	BuyAssetCount string `json:"buyAssetCount"`

	// Float, same as history/swaps:toRuneVolume/toRuneCount
	BuyTxAverage string `json:"buyTxAverage"`

	// Int64, same as history/swaps:toAssetVolume
	BuyVolume string `json:"buyVolume"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, same as assetDepth + runeDepth
	PoolDepth string `json:"poolDepth"`

	// Float, same as history/swaps:totalFees/totalCount
	PoolFeeAverage string `json:"poolFeeAverage"`

	// Int64, same as history/swaps:totalFees
	PoolFeesTotal string `json:"poolFeesTotal"`

	// Float, same as history/swaps:averageSlip
	PoolSlipAverage string `json:"poolSlipAverage"`

	// Float, same as history/swaps:totalVolume/totalCount
	PoolTxAverage string `json:"poolTxAverage"`

	// Int64, same as buyVolume + sellVolume
	PoolVolume string `json:"poolVolume"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// Int64, same as history/swaps:toRuneCount
	SellAssetCount string `json:"sellAssetCount"`

	// Float, same as history/swaps:toAssetVolume/toAssetCount
	SellTxAverage string `json:"sellTxAverage"`

	// Int64, same as history/swaps:toRuneVolume
	SellVolume string `json:"sellVolume"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64, Liquidity Units in the pool
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune
	Volume24h string `json:"volume24h"`
}

// Queue defines model for Queue.
type Queue struct {
	Outbound string `json:"outbound"`
	Swap     string `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each outbound transaction.
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Daily active users (unique addresses interacting)
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Daily transactions
	DailyTx string `json:"dailyTx"`

	// Monthly active users
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Monthly transactions
	MonthlyTx string `json:"monthlyTx"`

	// Total buying transactions
	TotalAssetBuys string `json:"totalAssetBuys"`

	// Total selling transactions
	TotalAssetSells string `json:"totalAssetSells"`

	// Total RUNE balances
	TotalDepth string `json:"totalDepth"`

	// Total staking transactions
	TotalStakeTx string `json:"totalStakeTx"`

	// Total staked (in RUNE Value)
	TotalStaked string `json:"totalStaked"`

	// Total transactions
	TotalTx string `json:"totalTx"`

	// Total unique swappers & members
	TotalUsers string `json:"totalUsers"`

	// Total (in RUNE Value) of all assets swapped since start
	TotalVolume string `json:"totalVolume"`

	// Total withdrawing transactions
	TotalWithdrawTx string `json:"totalWithdrawTx"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float, the average slip by swap. Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64, volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64, volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64, the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64, toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Int64 (10^8), RUNE amount charged as swap liquidity fee.
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction.
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), trade slip percentage.
	TradeSlip string `json:"tradeSlip"`

	// Int64 (10^8), minimum output amount specified for the swap.
	TradeTarget string `json:"tradeTarget"`
}

// Transaction defines model for Transaction.
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction memo
	Memo string `json:"memo"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical.
	Asymmetry string `json:"asymmetry"`

	// Int64, amount of liquidity units removed from the liquidity provider as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction.
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodeKeyResponse defines model for NodeKeyResponse.
type NodeKeyResponse NodeKeys

// PoolLegacyResponse defines model for PoolLegacyResponse.
type PoolLegacyResponse PoolLegacyDetail

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// GetTxDetailsParams defines parameters for GetTxDetails.
type GetTxDetailsParams struct {

	// Address of sender or recipient of any in/out transaction related to the action
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *string `json:"status,omitempty"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9e3MbN/LgV0Hx7urszZgiqadVlbqTLCvxrR86S9mr1DrrgDNNDqwZYDTAkGJS+lr3",
	"BX5f7Fd4zRPzIC0nv2xp/9lYBBrdjUaju9Hd8/vIZ3HCKFDBR6e/j1LgCaMc1D/OfEEY5R/N3+SffEYF",
	"UCH/EydJRHwsh+x94YzKv3E/hBjL/0pSlkAqiIaENST5n0RArP7jv6ewGJ2O/ttegcGens/39MqjB28k",
	"NgmMTkc4TfFG/ttnmV4+AO6nJFHjTkdvqDg68BDN4jmkiC1QCjyLBEcxFn5I6BKJENCSrICiBYkEpHw8",
	"yqFzkRK6HD08eKMU7jKSQjA6/adZy8ux/yWfwOZfwBejBzmjishHEFlKOcIUKZwlLmY+WrDUhcaDN3rF",
	"KBeYit143cXJHLIL2ZuQpZQFgPJRyAqAQusCEhH+SLhg6ebRMSsDdyGnfkeYBihJiQ8otEO90WucUkKX",
	"/FuhVoPvwg7MkDJaPwKORPjo2GiwXcIWqhGICywyLWbvSLDEaSCxekPnLKPBWRCkwDk8vojVF+iUtDc0",
	"UKPRmRldlbi3mIt5xPzbR8cyh9yJXj6qhha5y0hAxOZbSVx9AReS/4+IMEjxGkdcHYsAEsaJqIjgO5AK",
	"8AIEJtHj73QFugtFrReRXAwTeT5QZAlDScpWJIAUBVhgJaQY8QR8siA+ihXkgoJvhbsT60JRR5FS0LEd",
	"643eg1iz9PHF0cDtuUKa/DTzFBMVfiyAv8PjC6SBy7dHUB6jJJtHxEe3sMkRvWIsegtL7D8+rgVoLZou",
	"nD80EA20GCtJZBRQwlhkEf0mKD4WcvwbYufc7zN7PiQWFjWJzf/NIINHx0ZB7dTSakRVQ18L/A2sJwX1",
	"QknwEGW3jNgcR+j89dX1Gie56Mt/fKuLowTbhaPCQ9mxHlqxKIvBQwsAdX/wiCTF3fHgmRVLpn/Tztam",
	"bC6eOGZ0idZEhCiFCAsIkEgx5dZi9mp+QIAFtBrvP1FyjwSJgQscJ0r01yFQpZHNumss7YUl4QKkjd4w",
	"4L1RCGQZtjsI+m7XgxAWaB0SP9xuBUJd0LVRUya+4AgrLTDyhnlANwUklxsUg8BKvHpvPTPuwRuxzMGX",
	"D5n4g1GXSoQ3EVGaDRG6YtEKAkRoy8qN/ajD11awa48CecSAI7Io7zjhSBIRgSSYpfJXSz5zMgengLgg",
	"UYQSoAGhS+lJAs1i6TPyzPeBK8nXP5a8xjrOdQxvNgkU/mIZ6Bon0g8NgtxOHHmjtbEHR94oYFSeLOm+",
	"LjIaONasubZ6E8yonGdKuLWgePqs5geqJHJNN9gbnZVQe1eSzerxz43BnygRvPWQ4lgqLMmJwnrM5AyE",
	"OSdLWgimw7pU51f6/nJ+dYwxmHv9/hqaLnrPtY+yxmnAm3TOi1+dIjtnNOj4OVEWSMvPNVzLS1UAV8A4",
	"SWA0eAciJb6DAryCFC9BXgMrkCNbN+tMj0RyaSu8K0DynuYu9WkgXwtMg/lmK9Bcz2mHHeN7EmfxAKzf",
	"4XtCs3gw1gbyEKzf6aFbYA0BwXQI0mrgcJzV8EEoVwH3Y0zoUD5LLm/DZw15ENI10L1YCyZwNADnGzlu",
	"MMYK6hB8q2B7sK2d8jrqnuOAOgTJtVOuU+KgwnlQXTLl3DPngXErIRYVIcqGGrqW6knI2fnt8lFayfI3",
	"uMfy1h6dLnDEIYc9ZywCTBssbAXlQusVc1l5HyFJgUtbB2EUkCWRG+pnaQrU35hbq2Hymj+7pQI9m07+",
	"dfLckxcbCHSmxo6dalMOaEI5U/MIRa9+PHvzfnz987vzD2+l6Rzj/ntOw/Qsim2MGB62V2xzmGQdOyy3",
	"6/MKRxn0Qq/KirLExeejg4GzFb8r0zVXBk6/VoPL0fQqL6u4eBW66ku5GF2Jhje4RKiAdIUjvk1Q/U0+",
	"yTgM20yWRlyDSAXEK2HTR8mbMt6DRKgyW0DsEqfGmKb5IiVbDWtVx8oDyA3N/BzJP6tgS9sZvEqJ77Dd",
	"LyOGhWeeKuS1YQGmGYUxejOGsfpPu+aeGZFrjcZqQIMbEre7yzchIJC+CYnVivPMv9VLZhVH2gVbYrIN",
	"ez5KzHu4wwVORS/Gc1gSqoIl2+Ndk8ZiwYJZXnnry3RWdq9PbN+By3v5lhvyX4J5LrbUn8J2V001SFtr",
	"p/p8pRx2UVCtiAzVUU5MmmrKNczhaC3fswBeuY2EhdQqZVeoOJJluxQFWWrfuJVkWAa4RG1ec127jFXz",
	"EqbGIoiJEBBstxhTQRDLitb1rkOcKoHO31WlnSXd/O0JhN7FNlxAjAj1WQxoCRRS3EXYGL0RiHD1A8/i",
	"amBiAaCf4yrMegyFbpcfpkFyjL6C1yoqtBWv81UvAfqkqcozD/mMriA1YcaPP71/Lf8UReBvK2QtEUXL",
	"iOLBEbAf6kcMm4pRh73r+b8y7zOOYOROen2bvR90LVY3qqYFSmemeWRdouVV9ZbdgiHa1jKrwQ+1L1DZ",
	"sw4hqF3Nu8u8NWm2ljjH44iy6KpZPm5ryRGNLW+Ci48mC6RxgUhGzTF3hZPTDFAMOE8Q2agzR/UBEwzl",
	"U5vOs7xDrzfUHwJ1jC6lB27+aDJPpL7UQXLfZmBlieW3H2IVaG6uyn1MKaQ/dr/iKBjK7xZG7fpuK7rG",
	"5xLB1YVycl2cb+S3NPbA4DLYgKhDdFsQ9Ww0s8gQFFtsDf1zJXgymvupmN7NDo+XRxPh36+yg2C1iBL+",
	"2/J2fbd/EByu1kfJ8nh2tFzsu46C3ssKyPObV86nORwJcMTHiHmYQesQRAjy9BCuZQSFmCMzz+uN+Hij",
	"JJt/voVNFR0hQpYm2XyKg2BNE0jugpf07i5e4s1R/CWbbO6OZ4n4kvnx7Uss8FrA6mB1QI/WtwCHm9nR",
	"3ckEfH85ub/dP+7PGTSibTHxcq7nDHBvYCU60di6My4P1TX5DSq07U+8kQn2SD6Ko4MCQam/ljqn5hwH",
	"/8ARCbBg6UfzBJvDOBoIQ54zfgXpz4DTKoD96XT/5TAor8Ispdbi3gUNBeAjiMJu34UhryJyc/+KcVGZ",
	"PGzuBXC52TlDr6EKZTobBoZl8wiuyZK+w/dny+qezA4GwXgdE84Jo6+ydFXb1EHzLzGJ/g6bJdDrCPPw",
	"ihEjfDmc49lkG0icLFtBDWPLZUaDd2SZqlyIrxGU/4NJJG0fTV91h7aGIOnaBcRb7N9+WHyYc0mGpOgK",
	"KI7EZgfG5FHrt8y//SnRx3EH8X2no/XnjAZv6MeMQo0u879tYElDkF+y9PzypgLsYBcgPy+XQYo5iXaQ",
	"5/dY+sSvpAr+AfNLcNM2DBSspZn6auNHVSiH05ODYSBK234BEd5cRnBP5iQitf0/3AIatJ2u6TAg0ddf",
	"BDZjpJTm0cbpYQClDiR0WYJ3BSlhQU2xDwP283IpVchbEhOxNZdrd3np0nXcofUrsX65Oe+q8tXjvkoc",
	"N0Nd0bcp7lY13KZWG1qyqfQ6dFibTnLpGKeu6Dj7rrNcO5TdB8x5YBwHoFWeO+SyJmUue67INv9qZyEH",
	"9dVeQhVSEzGHJf/+3Bn1wVx8Zpq/wef6pOnhy0nrLJ2/89nkopUmTV46X9dDljrwmh4enAw2xRvYNlEp",
	"L+TkXD09f/cweB3U1nHwBoCdA+HtqAyWTScuzTCYc1wzlGEKGtr9fhVHzOsenhURRRwERGXnPd8uVPwN",
	"n3QodNSpgSiFQ/0Q0yVw9GxdqvB4kdO5HUnf/iWpyDzEUd9elSkaTsWgiGYZCa+QHc14l7hXq1ca0tcS",
	"RX7bVcBi6kV03JwtEDZRP1POMjCerBGrJOH3aPn2cGsTlvtx/CwIIOjZPPNCLUdWIqXzTUGg+5HclirR",
	"QSvYnaRokbJ44DoBFnBJUt5DiSOpXMJfyJlaDPUS9rSp1OMSsW1Ly7t0p5Xl1bPrwgPzZxXz6qmzIsQC",
	"zSFi9gjmdU7DA9xSrFAKPM+tVSchhQWkHAnWlmkwRNY+/vT+9baiJmEPlTQFfwdBc0fqS0eoIfEN0awL",
	"TGMfy1yqU9V+xqu3dJV0PQIVocdSNHRO59PFl1l09+UkWKWHSRYv/NA/piJa3AWz1dFvwf3d+gusF4cj",
	"rz/bvj3Zu5Kt3lfv7Uoff8jT2Xtmf1SjyvNUwvyAypnynDydvmee3Zti7oNjj2x9n7MUXqddVjewl9N6",
	"YkeygJH393kNvM7wVBV5fEgmQGfyXXmsedgvZY935+0VQ4uUgLOrn1uzqJ5N0XfoWZHMjv6mn3mkr/2O",
	"URHu1RJinz9H/0LTGXox7VSb/WtygW+hc1Fdll4kYKiruHt9CvdCxQJ6nrXkOFubJC0y6047tbMiXvm+",
	"ShwC1qUCQ0ApxKZKzVp8SvXhHAx6RqhZ83nbouoZ9RL7gqVOmeVFuq9DK+V1hCYrGOlxWxb3yJnbnAK7",
	"2PvODG55tUFg46EdWQwqFS5Ro6WxLE3ASjFNA/JHUJ5nX3IELJTxbUf3XUTl89d4zS/rmNqmNPWIg6lN",
	"ntRoacp0u1A2JaeiA2rH85d2XepOMXlLtDlCTWG0zsfhnPnElrBhakqqxugDhfJIpB8a0yUERYKIq+pr",
	"PNSWb0uBNvXUjqzCYHZ4OH3ZJMz8UKqlrt7j9UfN5f06WOxnKUyS5eFC/i2739/EL+nkaHZ0HN2mwA8P",
	"flt/CQ/8k8nBCfwWfjmczA7uNk7birIAzor34ipqqgg3j5i4zYyQpdPJbDOJ97NELCerVRbAJpxM0tmC",
	"/nY8Wd8dByeb4zibLZ1eLPjJ7PDodtpcPP/pT+FM7RiW2VTG2sv31SnQtrh+aJzFSo9DsEqV5W5Pz6lX",
	"vz5BevzHZkiPW+/BjjvdZk1eQeoDFfI/fyYQBacIU5ph6cuILKUIuCCx0hYZV00rpI+2BrjlJknQQwLf",
	"yl/U3kjdoIIX0hNSThv2/VYkvzbXetwS5XEWud6EoNrAgPXQJAQPwXg5RmcrTCI8j8CTd+ISAifkrNO1",
	"LKIhynXpxVPXnM8OuonXLpoeq4qj1jjJYavNmB2EWpMH2nVTTAqAMu03q3+PBxe8FFgNyxcvJK1UKpu1",
	"FofWoi+DTni5QYT7kFc6XPyhR/3Pr4WYZxuFVbfNx3EMCOf9cPaUGJ0KVprqhn1zbzRFKy1toKXc/UNJ",
	"057+R9cyeuBu6Ju5f1UlmCjx7pJBS30hrug7VD6PTpiXALtuncByNtdeXeu2mUW4stK33jqzRqs7FZFk",
	"N/RtcWZEkjbguwu1wFEu0328GSjTufSj7xCHKGoX529SmgRR9BX6o/NcS9i7s7p0tvf6FFWJb7tQ0M7y",
	"RzEmnIDXOEkIXd7c78b4LuHb2U75s82UP8NKaW5FUwHVtUZd95WVeEUYy3dbRSnUD0ftrm1o8MZBrV/8",
	"LmNLd4tq2EPWia/mDUzapLR3WP1JUndkyVdxYVYLSzdQpNWwxoBucWqowgRz5ixQl3/Pn5pM9LzXhy0B",
	"z2G7CCq6YTmqEEi00fHYn7h5m6i185QjbNA0k2PQs4ySuwxs/AC4NijkGLp87n55I9Hm5r4Neq33VLO7",
	"BKMi7MHznR5TwbQDlgsZC6IPHR3EluJ9nm1c+lcX4WUbFbUdDOwaoqgVmjxhg8G13MM3xYvaHEeY+t2d",
	"MW7BxSSDjjEpB6GjYAVdoCBQUWyF2j9wlMHzVmDtOA3CpUV6NAQj10rnSkH/lE0ms6O8rWQbzLbLXQOt",
	"EWb7VaoLgJu1AsQJ9dWtnYrWdewLVjsL7FtY/9Y0KmxqeqA4s87jVz5HFc4Wu1RlTlUUKnLaOFDNQ1ET",
	"yiY/3Gqv2vqhofwuYIGzSEgn/To3pYrb5DWVdlK/Hm6CcWJTavi3exZaCcrWCWjluTvnnjkRGBosaWDQ",
	"jJjUh7R1uFIeVJvVrjwN4z6rbonzjTpoY3ROlsb8C/FKJ1MoI3ZtOgtyxGN5OtWYPzrz7I9IAas4K23L",
	"+NZJ06xSJrEK/Egb2Vi5bZB7PJ26Fd6EXba7U6fdLdcqfLttiNALCNYDeBcaKqCH0ZC7Se0pMMVmoe9Q",
	"j0dbhC26nCFTCC+FXD25lUq3B+Lcw52KHORYm38+qy3yfMckwrrPXeVMxQGtx+FqTnXzjjIGdVnRtGnC",
	"AS0TTY1FVxMpnUOlIyP2VRNr06BafD9uyVfd0R0RKQ5aFKlB8BxzwlGisvA9NHmhCkQ8tA4hBaT+8f10",
	"Mvkfzz2kYGllm+QBSye+auSNpLK3u5bpUIZYJpLMxplt83Hz9KtkWur2Lf2lygaVeVHF0LXz5Uapjjrr",
	"/EfdSNhrr+at9fwFGlSSv5o1u7arV99LtrEJYtaNnxrh2qL7NxfdM0mAQszDMbpmMVTbrD7jmR9K+XV3",
	"YY2lnJjYC1W1Ilp1Pkcx3uhbGaPfIGVIdd3q31aFrKG2XLWrmeXav0YmmONVZhPHILSpVv+8hU9iada/",
	"mI4nykPY979X/wdoOp489xDJG9aGbC2J28Qq4QPrpOMi/xmtMR+jiSnAV7on2qBi+Pgrcknbe7GmELMV",
	"BEUq5ZBmrAXSj6mCuvu3eqVtqK7h/qALoQtm+3NjX9epxOrRbRTAiv/vPPFhzFIdlWhETW0ThCudoXB2",
	"9QbdZZAS4Ojmxw8fX+m0CRogTDe60p2jiFDpv64IVpw6J4v0P/4/F+YLKJDgVAVIdBGbPDt4zjKh5d9k",
	"tAiG5oBSwIGKtdgQrdJvJllCxTPGygCUWCU45cDLJwvBCqgwOe5ya6sIS4saVCucWKU/KSvxBde02f4K",
	"EpEY3+o8/xcBJFIjUZHzADDfjHMmBQw4okygkEUB8lMilIyXSB2jG5bHhnS7cdtjXeKk6/Tg3jNxJR6y",
	"LArUapsS+gFJwRfRRh0HIpRv1tyokTdaQcr1Xs7Gk/HkBY6SEI9nqod2AhQnZHQ62pc/SaWMRaikdW81",
	"2yt958h5LekvJxQfByr1jq92Vh+jM1pqUF30KJpv1PcAWIpilkoF6FCNikFSLiTLaCCtAA2p9K4r1ZwW",
	"A6vD8caeVUIrazj17xh9NF9YwimgBC8JtfipeARboMPJGF3qjxwp6HNAqs+9TsrSu2OhjRRrTXliMDod",
	"/QDi5t4+oksupzgGoWIu/2zkFWpdrQxpffexFKXgk4SAaZZFN4jQPXVeSqLe1uZ812xpIrFRhElFg2Pl",
	"kRbZQXlD/8ZF1FC+F3Ws7wcgO7s8mh0c7R9fvJ4evzw6Ojw/29+fzc5Pjg4uzl9e7k8mk+nlxf7x+cHr",
	"ycVsdjY5P3r96vXR2eH55Pjk4uz8oIUCcU+C7dA/oxvrx4RYtc5KcJrfAYb5z8otS59XCDl/fz6++fDu",
	"w/mL6etpG1+N/7gFWh9KQu2zOMaIS7Wq37x1yE7C4NUe7Bar3dqwOxlqmq4Px9ycL8m2SNWcugHb34rL",
	"UKQZlFdqlECbPr2j08NJ3slXtRJo1kZ3IMUWC70bLqzyH7dBqwuTX7zqd+pmk0mbuZCP26t/zE598CKL",
	"YyyNM51Fmjf4j/KvWogQSOr8tsVYQZBKP2B+q8K/XuPlEtK9DwlQed/ujyf5R48060rt55ifxRJrpza8",
	"YL5+nmkSXsuPbFmyuhKvMeAHEOjCIICN6Au85CowWfn7L5buMO9I1XHXtXwlSOoB89UyS5FVD/oObtBv",
	"+l/tsvW177I1Cc+/sGYIM8/QASQi5Hu/J4xFD710KtWm85hoYKM3EkDxDbvxJypvXN0GGKWQsFQbcPqV",
	"Het/gO4QrnKR8xaEn+gnauKZcoBypVV3JLFmKGYB8NNP9G9IuiTIBlRRfmsiIkyaD0dS6ykrTPKbxGDC",
	"fnyMLlX8iQbS2gqU47EmUfSJImVVShOguH7yNZRpgCXAsUVAXlgOHDDihC4jUOuMxzcMccCpJJJLX1/q",
	"AAj0sYN7aejlAUiuyJfgLdhTlDDOiTRuNTdP0WFMqIdClqUeCvDGU7lLHlLvCx66y3AqIPXQBnCqMFVx",
	"vVP0z+l4PJ1MfhmjC1gQKk3RvHQgD2GP0QWj/1NYxwaRRUEg4Uh1Z6BLBVbazHuCnSKmBEQZssLTEVUO",
	"PqOBIubKop9xvARjs5V2+286oWA6kbTwU/Tr/7I/fh/gjX5QUhR8P538Wh+O5rCQl5xEo2ui/pdg30+P",
	"Jicns8OjiYalClEsLLyQmyfJGgJMjpPgjo5PJicG3IVGSawBTOWdFDLBVF9NKWJogUkkmaquZhFiiqaT",
	"ScF+ZWPK2wO4gOBUSuSvTURqS7uJ+0SvimtLxaTMPqgNkCBKVGk8Q6AmJU4/qstjBAGKQeCxiSRKR1eE",
	"8ImqI1SIvFFpip/qVqzuvc/ogiwzrei0DMizY0lTJ1ofBXNS7OfA1LldyFXknlQIf/mybVerE1FGBYkQ",
	"ZWsHiF+tJJs2bCp4Wp5BrQFfGOafqPPaKvc177HjjXcklaH9WCrhVmnYFGOiTQ91FRgDw2T1tJsX/fa2",
	"PcxsgXwc+VmE7XtnYZUGeNNi4ZQq2YtF7cd7pF4aeSOpmNRrqLIZAW7t2+fIGxnlNPJGUjs5v95Tx/h9",
	"U0mpRwPFwjG61i7wHPJzl+u5Mk37EzdBtp1ig4Ud5uDr0muVFHrj4PHaY9IYvVkgRqONeViR3i1ZAfVQ",
	"oN8/ue76u64gWohyi0nNRp32ZD/610rEBxBQQ8toGzda8ghtidhOxq3zQ71VO6f1c7o1o6fcSrXT3oFG",
	"e11lyeRB9SfT5cl0eTJdnkyXv6zpUv/0QY/18mRDPNkQf2Ubou2j+lUzIm+qb2NibXZE/gj32bS36jUo",
	"1m3fN5eqQ/dVqn6W4RN9Y7oYEP2AVBgf1mKwXZpUif6TIfJkiDwZIk+GyF/NEGl0n9w2jlJ8imKMrLYt",
	"5e/p9nVSdPQZbLFQTJjlKaziMon+KhbRk0E02CCqH7vWp8N6H88+00gnhfeZQ9z96X7u6exIqVFcsZYn",
	"k+jJJHoyiZ5Mon9vk6hcBTXMGjLKd1tbaPxkDD3Fh57MIagU3bVYQteqiqnN+omLrrV9+UKN5FjJKtsh",
	"2JSKWzOmKKptKAnTJ/fMfrdtF6oNjI7kIYtAjc693w2uD8MpZgvltBEuiK+Ml+JjldXO4hVmtJNumkX1",
	"KMifdOqjG3LpQ3F0Pv1yvwhny5PDu/3VRAR3h0cLCqv7o3v/Xvg0FDz2s6OD2P1KX8Ac/lD/y+5bZnKH",
	"W19D1a+6Z7vp/Ww3kBate7dPbDN1CbZkp7Ex5vcL/fP2xJn5HfJoMbiwvYkVTar5aS9FKDLdNN+zAEr9",
	"FZ0yZhuq7kCEbmfYRUR9fUuIPBAvItUKbe93lW7Xf76CYrNtE5hTk5tnupR5qnOL9bLOrn4eIxfFRRu2",
	"vjOlzq0S/N685top4X25so9yRgpKOjbB8k3rH5u2qpvolPfjz9mIf4cteATm73ah1qCDsA2heRu7e6sw",
	"dKmH8SWijbGkTRa1+hqsaUnkMmLyH5u2bV7GpNsa6VZTPOOqqChwGbI7b0fXNa+7ImpOWP6rCOtu98Qy",
	"YnPdtETUQjK6Lixq9CFp+kBq9Z1MOTmzg9YfNHJ6gZxYnVc+/mJaD3XSHGYx1gVjMfZDQnVVmipGs/np",
	"ppSqmg7f4uvJCYOS33det8mEYlmbB39dmZHnwef1gHt+uUeIkz+2i4jNAc+4rpkqqtQ8xFnhH5hhPqbS",
	"z2IrSFMS6CkxiUnqPK0puycQFA1LdhGRfHaHmEgEzWIlAop1mwwy5Wqfcflbyi0F3LrmrDD4VUTH9Kos",
	"DBXzO/JUHEKazLo0U5e2mR9j1ZRDh2fRQkV8qIg20s0v8A4xR3EWCZJEgLAqKXRXYhiSG5+F3oXNdSBb",
	"c9vyqUCjyfWo/DG6tmObEljpLnbA7Ve1CV0wW2zqp4xzpZd0vWoXa4qv3+0Ud7ezt2ZGsW6TCXe2T1xv",
	"EUdi4KoZRVRcRxhRxHQBNkulTd3BBN2YbhcGqJlbE6/Xe3h4ePjPAAAA//8/pEjm1aMAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
