// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {
	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {
	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {
	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Represents a digital currency amount
type Coin struct {
	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {
	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {
	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {
	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {
	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {
	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync         bool     `json:"inSync"`
	LastAggregated HeightTS `json:"lastAggregated"`
	LastCommitted  HeightTS `json:"lastCommitted"`
	LastFetched    HeightTS `json:"lastFetched"`
	LastQueried    HeightTS `json:"lastQueried"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// HeightTS defines model for HeightTS.
type HeightTS struct {
	// Block height
	Height int `json:"height"`

	// Block timestamp (seconds since epoch)
	Timestamp int `json:"timestamp"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string  `json:"address"`
	Chain   string  `json:"chain"`
	GasRate *string `json:"gas_rate,omitempty"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                    int64  `json:"AsgardSize"`
	BadValidatorRate              int64  `json:"BadValidatorRate"`
	BadValidatorRedline           int    `json:"BadValidatorRedline"`
	BlocksPerYear                 int64  `json:"BlocksPerYear"`
	ChurnInterval                 int64  `json:"ChurnInterval"`
	ChurnRetryInterval            int64  `json:"ChurnRetryInterval"`
	DesiredValidatorSet           int64  `json:"DesiredValidatorSet"`
	DoubleSignMaxAge              int64  `json:"DoubleSignMaxAge"`
	EmissionCurve                 int64  `json:"EmissionCurve"`
	FailKeygenSlashPoints         int64  `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints        int64  `json:"FailKeysignSlashPoints"`
	FullImpLossProtectionBlocks   int64  `json:"FullImpLossProtectionBlocks"`
	FundMigrationInterval         int64  `json:"FundMigrationInterval"`
	IncentiveCurve                int64  `json:"IncentiveCurve"`
	JailTimeKeygen                int64  `json:"JailTimeKeygen"`
	JailTimeKeysign               int64  `json:"JailTimeKeysign"`
	LackOfObservationPenalty      int64  `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks         int64  `json:"LiquidityLockUpBlocks"`
	MaxAvailablePools             int64  `json:"MaxAvailablePools"`
	MaxSwapsPerBlock              int64  `json:"MaxSwapsPerBlock"`
	MinRunePoolDepth              int64  `json:"MinRunePoolDepth"`
	MinSlashPointsForBadValidator int64  `json:"MinSlashPointsForBadValidator"`
	MinSwapsPerBlock              int64  `json:"MinSwapsPerBlock"`
	MinimumBondInRune             int64  `json:"MinimumBondInRune"`
	MinimumNodesForBFT            int64  `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil      int64  `json:"MinimumNodesForYggdrasil"`
	NativeTransactionFee          int64  `json:"NativeTransactionFee"`
	NewPoolCycle                  *int64 `json:"NewPoolCycle,omitempty"`
	ObservationDelayFlexibility   int64  `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints            int64  `json:"ObserveSlashPoints"`
	OldValidatorRate              int64  `json:"OldValidatorRate"`
	OutboundTransactionFee        int64  `json:"OutboundTransactionFee"`
	PoolCycle                     int64  `json:"PoolCycle"`
	SigningTransactionPeriod      int64  `json:"SigningTransactionPeriod"`
	VirtualMultSynths             int64  `json:"VirtualMultSynths"`
	YggFundLimit                  int64  `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock []LastblockItem

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn int64  `json:"last_observed_in"`
	LastSignedOut  int64  `json:"last_signed_out"`
	Thorchain      int64  `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {
	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {
	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {
	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {
	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// OHLCVHistory defines model for OHLCVHistory.
type OHLCVHistory struct {
	Intervals OHLCVHistoryIntervals `json:"intervals"`
	Meta      OHLCVHistoryMeta      `json:"meta"`
}

// OHLCVHistoryIntervals defines model for OHLCVHistoryIntervals.
type OHLCVHistoryIntervals []OHLCVHistoryItem

// OHLCVHistoryItem defines model for OHLCVHistoryItem.
type OHLCVHistoryItem struct {
	// Float, close price of asset in USD
	ClosePrice string `json:"closePrice"`

	// Int64, The end time of bucket in unix timestamp
	CloseTime string `json:"closeTime"`

	// Float, high price of asset in USD
	HighPrice string `json:"highPrice"`

	// Int64, The high time of bucket in unix timestamp
	HighTime string `json:"highTime"`

	// Int64, Liquidty is USD
	Liquidity string `json:"liquidity"`

	// Float, low price of asset in USD
	LowPrice string `json:"lowPrice"`

	// Int64, The low time of bucket in unix timestamp
	LowTime string `json:"lowTime"`

	// Float, open price of asset in USD
	OpenPrice string `json:"openPrice"`

	// Int64, The beginning time of bucket in unix timestamp
	OpenTime string `json:"openTime"`

	// Int64, Volume in USD
	Volume string `json:"volume"`
}

// OHLCVHistoryMeta defines model for OHLCVHistoryMeta.
type OHLCVHistoryMeta struct {
	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// ObservedChain defines model for ObservedChain.
type ObservedChain struct {
	Chain  string `json:"chain"`
	Height int    `json:"height"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {
	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`
	Asset                  string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Int64, number of unique adresses that initiated swaps transactions in the period.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// PreflightStatus defines model for PreflightStatus.
type PreflightStatus struct {
	Code   int    `json:"code"`
	Reason string `json:"reason"`
	Status string `json:"status"`
}

// ProxiedNode defines model for ProxiedNode.
type ProxiedNode struct {
	ActiveBlockHeight int    `json:"active_block_height"`
	Bond              string `json:"bond"`
	BondAddress       string `json:"bond_address"`
	CurrentAward      string `json:"current_award"`
	ForcedToLeave     bool   `json:"forced_to_leave"`
	IpAddress         string `json:"ip_address"`
	Jail              struct {
		NodeAddress *string `json:"node_address,omitempty"`
	} `json:"jail"`
	LeaveHeight     int             `json:"leave_height"`
	NodeAddress     string          `json:"node_address"`
	ObserveChains   []ObservedChain `json:"observe_chains"`
	PreflightStatus PreflightStatus `json:"preflight_status"`
	PubKeySet       struct {
		Ed25519   string `json:"ed25519"`
		Secp256k1 string `json:"secp256k1"`
	} `json:"pub_key_set"`
	RequestedToLeave    bool     `json:"requested_to_leave"`
	SignerMembership    []string `json:"signer_membership"`
	SlashPoints         int      `json:"slash_points"`
	Status              string   `json:"status"`
	StatusSince         int      `json:"status_since"`
	ValidatorConsPubKey string   `json:"validator_cons_pub_key"`
	Version             string   `json:"version"`
}

// ProxiedNodes defines model for ProxiedNodes.
type ProxiedNodes []ProxiedNode

// Queue defines model for Queue.
type Queue struct {
	Internal int `json:"internal"`
	Outbound int `json:"outbound"`
	Swap     int `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {
	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// StatsData defines model for StatsData.
type StatsData struct {
	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, unique users (addresses) initiating swaps in the last 24 hours.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, unique users (addresses) initiating swaps in the last 30 days.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Int64, unique users (addresses) initiating swaps since beginning.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {
	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {
	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {
	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {
	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {
	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at the end of the interval
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {
	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {
	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// OHLCVHistoryResponse defines model for OHLCVHistoryResponse.
type OHLCVHistoryResponse OHLCVHistory

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ProxiedNodesResponse defines model for ProxiedNodesResponse.
type ProxiedNodesResponse ProxiedNodes

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {
	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {
	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {
	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {
	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetOHLCVHistoryParams defines parameters for GetOHLCVHistory.
type GetOHLCVHistoryParams struct {
	// Interval of calculations
	Interval *GetOHLCVHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetOHLCVHistoryParamsInterval defines parameters for GetOHLCVHistory.
type GetOHLCVHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {
	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {
	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {
	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {
	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {
	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
