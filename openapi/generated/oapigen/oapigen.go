// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {

	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still
	// pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still
// pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity
	// deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Represents a digital currency amount
type Coin struct {

	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, The liquidity unit value index. Sqrt(assetDepth * runeDepth)/liquidity units
	Luvi string `json:"luvi"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval at time endTime
	EndAssetDepth string `json:"endAssetDepth"`

	// Int64, Liquidity Units in the pool at the end of the interval at time endTime
	EndLPUnits string `json:"endLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval at time endTime
	EndRuneDepth string `json:"endRuneDepth"`

	// Int64, Synth Units in the pool at the end of the interval at time endTime
	EndSynthUnits string `json:"endSynthUnits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, The liquidity unit value index increase between the first and last depth item
	LuviIncrease string `json:"luviIncrease"`

	// Float, The impermanent loss between the first and last depth item
	PriceShiftLoss string `json:"priceShiftLoss"`

	// Int64(e8), the amount of Asset in the pool at the start of the interval at time
	// startTime
	StartAssetDepth string `json:"startAssetDepth"`

	// Int64, Liquidity Units in the pool at the start of the interval at time startTime
	StartLPUnits string `json:"startLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the start of the interval at time startTime
	StartRuneDepth string `json:"startRuneDepth"`

	// Int64, Synth Units in the pool at the start of the interval at time startTime
	StartSynthUnits string `json:"startSynthUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of
	// liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {

	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync         bool     `json:"inSync"`
	LastAggregated HeightTS `json:"lastAggregated"`
	LastCommitted  HeightTS `json:"lastCommitted"`
	LastFetched    HeightTS `json:"lastFetched"`
	LastThorNode   HeightTS `json:"lastThorNode"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// HeightTS defines model for HeightTS.
type HeightTS struct {

	// Block height
	Height int `json:"height"`

	// Block timestamp (seconds since epoch)
	Timestamp int `json:"timestamp"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string  `json:"address"`
	Chain   string  `json:"chain"`
	GasRate *string `json:"gas_rate,omitempty"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                    int64  `json:"AsgardSize"`
	BadValidatorRate              int64  `json:"BadValidatorRate"`
	BadValidatorRedline           int    `json:"BadValidatorRedline"`
	BlocksPerYear                 int64  `json:"BlocksPerYear"`
	ChurnInterval                 int64  `json:"ChurnInterval"`
	ChurnRetryInterval            int64  `json:"ChurnRetryInterval"`
	DesiredValidatorSet           int64  `json:"DesiredValidatorSet"`
	DoubleSignMaxAge              int64  `json:"DoubleSignMaxAge"`
	EmissionCurve                 int64  `json:"EmissionCurve"`
	FailKeygenSlashPoints         int64  `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints        int64  `json:"FailKeysignSlashPoints"`
	FullImpLossProtectionBlocks   int64  `json:"FullImpLossProtectionBlocks"`
	FundMigrationInterval         int64  `json:"FundMigrationInterval"`
	IncentiveCurve                int64  `json:"IncentiveCurve"`
	JailTimeKeygen                int64  `json:"JailTimeKeygen"`
	JailTimeKeysign               int64  `json:"JailTimeKeysign"`
	LackOfObservationPenalty      int64  `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks         int64  `json:"LiquidityLockUpBlocks"`
	MaxAvailablePools             int64  `json:"MaxAvailablePools"`
	MaxSwapsPerBlock              int64  `json:"MaxSwapsPerBlock"`
	MinRunePoolDepth              int64  `json:"MinRunePoolDepth"`
	MinSlashPointsForBadValidator int64  `json:"MinSlashPointsForBadValidator"`
	MinSwapsPerBlock              int64  `json:"MinSwapsPerBlock"`
	MinimumBondInRune             int64  `json:"MinimumBondInRune"`
	MinimumNodesForBFT            int64  `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil      int64  `json:"MinimumNodesForYggdrasil"`
	NativeTransactionFee          int64  `json:"NativeTransactionFee"`
	NewPoolCycle                  *int64 `json:"NewPoolCycle,omitempty"`
	ObservationDelayFlexibility   int64  `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints            int64  `json:"ObserveSlashPoints"`
	OldValidatorRate              int64  `json:"OldValidatorRate"`
	OutboundTransactionFee        int64  `json:"OutboundTransactionFee"`
	PoolCycle                     int64  `json:"PoolCycle"`
	SigningTransactionPeriod      int64  `json:"SigningTransactionPeriod"`
	VirtualMultSynths             int64  `json:"VirtualMultSynths"`
	YggFundLimit                  int64  `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock []LastblockItem

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn int64  `json:"last_observed_in"`
	LastSignedOut  int64  `json:"last_signed_out"`
	Thorchain      int64  `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {

	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and
	// nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each
// outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// ObservedChain defines model for ObservedChain.
type ObservedChain struct {
	Chain  string `json:"chain"`
	Height int    `json:"height"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income,
	// taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	// Doesn't include synth mint or burn.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`
	Asset                  string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income,
	// taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// PreflightStatus defines model for PreflightStatus.
type PreflightStatus struct {
	Code   int    `json:"code"`
	Reason string `json:"reason"`
	Status string `json:"status"`
}

// ProxiedNode defines model for ProxiedNode.
type ProxiedNode struct {
	ActiveBlockHeight int    `json:"active_block_height"`
	Bond              string `json:"bond"`
	BondAddress       string `json:"bond_address"`
	CurrentAward      string `json:"current_award"`
	ForcedToLeave     bool   `json:"forced_to_leave"`
	IpAddress         string `json:"ip_address"`
	Jail              struct {
		NodeAddress *string `json:"node_address,omitempty"`
	} `json:"jail"`
	LeaveHeight     int             `json:"leave_height"`
	NodeAddress     string          `json:"node_address"`
	ObserveChains   []ObservedChain `json:"observe_chains"`
	PreflightStatus PreflightStatus `json:"preflight_status"`
	PubKeySet       struct {
		Ed25519   string `json:"ed25519"`
		Secp256k1 string `json:"secp256k1"`
	} `json:"pub_key_set"`
	RequestedToLeave    bool     `json:"requested_to_leave"`
	SignerMembership    []string `json:"signer_membership"`
	SlashPoints         int      `json:"slash_points"`
	Status              string   `json:"status"`
	StatusSince         int      `json:"status_since"`
	ValidatorConsPubKey string   `json:"validator_cons_pub_key"`
	Version             string   `json:"version"`
}

// ProxiedNodes defines model for ProxiedNodes.
type ProxiedNodes []ProxiedNode

// Queue defines model for Queue.
type Queue struct {
	Internal int `json:"internal"`
	Outbound int `json:"outbound"`
	Swap     int `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Deprecated, it's always 0.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Deprecated, it's always 0.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Synth to Rune since beginning.
	SynthBurnCount string `json:"synthBurnCount"`

	// Int64, number of swaps from Rune to Synth since beginning.
	SynthMintCount string `json:"synthMintCount"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {

	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {

	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of
	// the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity
	// pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at
	// the end of the interval.
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the
	// native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means
	// totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership
	// withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ProxiedNodesResponse defines model for ProxiedNodesResponse.
type ProxiedNodesResponse ProxiedNodes

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// Affiliate address of the action (swap)
	AffiliateAddress *string `json:"affiliate_address,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {

	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
