// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Action defines model for Action.
type Action struct {

	// Int64, Unix timestamp for when the action was registered
	Date string `json:"date"`

	// Int64, block height at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status string `json:"status"`

	// Type of action
	Type string `json:"type"`
}

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64, Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64, Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64, Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64, Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64, Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64, Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64, Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64, Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64, Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64, Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Coin defines model for Coin.
type Coin struct {

	// Int64 (10^8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64, Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64, Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64, System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64, Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistoryItemPool defines model for EarningsHistoryItemPool.
type EarningsHistoryItemPool struct {

	// Int64, Share of earnings sent to the pool during the time interval
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses struct {
	Current []InboundAddressesItem `json:"current"`
}

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string `json:"address"`
	Chain   string `json:"chain"`

	// indicate whether this chain has halted
	Halted bool   `json:"halted"`
	PubKey string `json:"pub_key"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                  int64 `json:"AsgardSize"`
	BadValidatorRate            int64 `json:"BadValidatorRate"`
	BlocksPerYear               int64 `json:"BlocksPerYear"`
	ChurnInterval               int64 `json:"ChurnInterval"`
	ChurnRetryInterval          int64 `json:"ChurnRetryInterval"`
	CliTxCost                   int64 `json:"CliTxCost"`
	DesiredValidatorSet         int64 `json:"DesiredValidatorSet"`
	DoubleSignMaxAge            int64 `json:"DoubleSignMaxAge"`
	EmissionCurve               int64 `json:"EmissionCurve"`
	FailKeygenSlashPoints       int64 `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints      int64 `json:"FailKeysignSlashPoints"`
	FundMigrationInterval       int64 `json:"FundMigrationInterval"`
	JailTimeKeygen              int64 `json:"JailTimeKeygen"`
	JailTimeKeysign             int64 `json:"JailTimeKeysign"`
	LackOfObservationPenalty    int64 `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks       int64 `json:"LiquidityLockUpBlocks"`
	MinimumBondInRune           int64 `json:"MinimumBondInRune"`
	MinimumNodesForBFT          int64 `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil    int64 `json:"MinimumNodesForYggdrasil"`
	NativeChainGasFee           int64 `json:"NativeChainGasFee"`
	NewPoolCycle                int64 `json:"NewPoolCycle"`
	ObservationDelayFlexibility int64 `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints          int64 `json:"ObserveSlashPoints"`
	OldValidatorRate            int64 `json:"OldValidatorRate"`
	OutboundTransactionFee      int64 `json:"OutboundTransactionFee"`
	SigningTransactionPeriod    int64 `json:"SigningTransactionPeriod"`
	YggFundLimit                int64 `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock struct {
	Current []LastblockItem `json:"current"`
}

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn string `json:"last_observed_in"`
	LastSignedOut  string `json:"last_signed_out"`
	Thorchain      string `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64 (10^8), total deposits (liquidity additions) in RUNE during the time interval. Accounts for both asset (using the price at deposit time) and RUNE deposited into pools
	Deposits string `json:"deposits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64 (10^8), total withdrawals in RUNE during the time interval. Accounts for both asset (using the price at withdrawal time) and RUNE withdrawn from pools
	Withdrawals string `json:"withdrawals"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// Liquidity provider data for all the pools of a given member
	Pools []MemberPoolDetails `json:"pools"`
}

// MemberPoolDetails defines model for MemberPoolDetails.
type MemberPoolDetails struct {

	// Int64, total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// Int64, total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Int64, total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`
	PoolShareFactor         string `json:"poolShareFactor"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64, Total Rune pooled in all pools
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64, Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NetworkFees defines model for NetworkFees.
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolLegacyDetail defines model for PoolLegacyDetail.
type PoolLegacyDetail struct {
	Asset string `json:"asset"`

	// same as assetDepth from pool/stats
	AssetDepth string `json:"assetDepth"`

	// same as toAssetCount from pool/stats
	BuyAssetCount string `json:"buyAssetCount"`

	// same as toAssetVolume / toAssetCount from pool/stats
	BuyTxAverage string `json:"buyTxAverage"`

	// same as toAssetVolume from pool/stats
	BuyVolume string `json:"buyVolume"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// same as 2*runeDepth from pool/stats
	PoolDepth string `json:"poolDepth"`

	// same as totalFees / swapCount from pool/stats
	PoolFeeAverage string `json:"poolFeeAverage"`

	// same as totalFees from pool/stats
	PoolFeesTotal string `json:"poolFeesTotal"`

	// same as averageSlip from pool/stats
	PoolSlipAverage string `json:"poolSlipAverage"`

	// same as swapVolume / swapCount from pool/stats
	PoolTxAverage string `json:"poolTxAverage"`

	// same as units from pool/stats
	PoolUnits string `json:"poolUnits"`

	// Int64, same as buyVolume + sellVolume
	PoolVolume string `json:"poolVolume"`

	// same as assetPrice from pool/stats
	Price string `json:"price"`

	// same as runeDepth from pool/stats
	RuneDepth string `json:"runeDepth"`

	// same as toRuneCount from pool/stats
	SellAssetCount string `json:"sellAssetCount"`

	// same as toRuneVolume / toRuneCount from pool/stats
	SellTxAverage string `json:"sellTxAverage"`

	// same as toRuneVolume from pool/stats
	SellVolume string `json:"sellVolume"`

	// same as status from pool/stats
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune
	Volume24h string `json:"volume24h"`
}

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, same as buyVolume + sellVolume
	PoolVolume string `json:"poolVolume"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64, same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64, same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, Liquidity Units in the pool
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune
	Volume24h string `json:"volume24h"`
}

// Queue defines model for Queue.
type Queue struct {
	Outbound string `json:"outbound"`
	Swap     string `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Daily active users (unique addresses interacting)
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Daily transactions
	DailyTx string `json:"dailyTx"`

	// Monthly active users
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Monthly transactions
	MonthlyTx string `json:"monthlyTx"`

	// Total buying transactions
	TotalAssetBuys string `json:"totalAssetBuys"`

	// Total selling transactions
	TotalAssetSells string `json:"totalAssetSells"`

	// Total RUNE balances
	TotalDepth string `json:"totalDepth"`

	// Total staking transactions
	TotalStakeTx string `json:"totalStakeTx"`

	// Total staked (in RUNE Value)
	TotalStaked string `json:"totalStaked"`

	// Total transactions
	TotalTx string `json:"totalTx"`

	// Total unique swappers & members
	TotalUsers string `json:"totalUsers"`

	// Total (in RUNE Value) of all assets swapped since start
	TotalVolume string `json:"totalVolume"`

	// Total withdrawing transactions
	TotalWithdrawTx string `json:"totalWithdrawTx"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float, the average slip by swap. Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64, volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64, volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64, the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64, toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Int64 (10^8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), trade slip percentage
	TradeSlip string `json:"tradeSlip"`

	// Int64 (10^8), minimum output amount specified for the swap
	TradeTarget string `json:"tradeTarget"`
}

// Transaction defines model for Transaction.
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction memo
	Memo string `json:"memo"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolLegacyResponse defines model for PoolLegacyResponse.
type PoolLegacyResponse PoolLegacyDetail

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Address of sender or recipient of any in/out transaction related to the action
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action (swap, addLiquidity, withdraw, donate, refund)
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *string `json:"status,omitempty"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"ew6etBnn8+fPn/9fAAAA//+So72K2q0AAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
