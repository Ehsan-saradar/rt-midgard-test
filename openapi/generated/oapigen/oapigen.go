// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64, Average bond of active nodes.
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64, Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64, Maxinum bond of active nodes.
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64, Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64, Median bond of active nodes.
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64, Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64, Minumum bond of active nodes.
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64, Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64, Total bond of active nodes.
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64, Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// Liquidity provider data for all the pools of a given member
	Pools []MemberPoolDetails `json:"pools"`
}

// MemberPoolDetails defines model for MemberPoolDetails.
type MemberPoolDetails struct {

	// Int64, total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// Int64, total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Int64, total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`
	BondingROI string `json:"bondingROI"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks).
	PoolActivationCountdown string  `json:"poolActivationCountdown"`
	PoolShareFactor         string  `json:"poolShareFactor"`
	StakingROI              *string `json:"stakingROI,omitempty"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64, Total Rune pooled in all pools.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64, Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NodeKey defines model for NodeKey.
type NodeKey struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	Price string `json:"price"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Enabled, Bootstrap.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Daily active users (unique addresses interacting)
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Daily transactions
	DailyTx string `json:"dailyTx"`

	// Monthly active users
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Monthly transactions
	MonthlyTx string `json:"monthlyTx"`

	// Total buying transactions
	TotalAssetBuys string `json:"totalAssetBuys"`

	// Total selling transactions
	TotalAssetSells string `json:"totalAssetSells"`

	// Total RUNE balances
	TotalDepth string `json:"totalDepth"`

	// Total staking transactions
	TotalStakeTx string `json:"totalStakeTx"`

	// Total staked (in RUNE Value).
	TotalStaked string `json:"totalStaked"`

	// Total transactions
	TotalTx string `json:"totalTx"`

	// Total unique swappers & members
	TotalUsers string `json:"totalUsers"`

	// Total (in RUNE Value) of all assets swapped since start.
	TotalVolume string `json:"totalVolume"`

	// Total withdrawing transactions
	TotalWithdrawTx string `json:"totalWithdrawTx"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`

	// Sum values of all the returned intervals.
	Meta SwapHistoryMeta `json:"meta"`
}

// SwapHistoryInterval defines model for SwapHistoryInterval.
type SwapHistoryInterval struct {

	// Int64, The beginning time of bucket in unix timestamp.
	Time string `json:"time"`

	// Int64, volume of swaps from rune to asset denoted in rune.
	ToAssetVolume string `json:"toAssetVolume"`

	// Int64, volume of swaps from asset to rune denoted in rune.
	ToRuneVolume string `json:"toRuneVolume"`

	// toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryInterval

// SwapHistoryMeta defines model for SwapHistoryMeta.
type SwapHistoryMeta struct {

	// Int64, The beginning timestamp of the first interval. Can be smaller then from.
	FirstTime string `json:"firstTime"`

	// Int64, The beginning timestamp of the last interval. It is smaller then until
	LastTime string `json:"lastTime"`

	// Int64, volume of swaps from rune to asset denoted in rune.
	ToAssetVolume string `json:"toAssetVolume"`

	// Int64, volume of swaps from asset to runt denoted in rune.
	ToRuneVolume string `json:"toRuneVolume"`

	// toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// TxDetails defines model for TxDetails.
type TxDetails struct {

	// Int64, Unix timestamp.
	Date   string `json:"date"`
	Events Event  `json:"events"`
	Height string `json:"height"`
	In     Tx     `json:"in"`
	Out    []Tx   `json:"out"`
	Pool   string `json:"pool"`
	Status string `json:"status"`
	Type   string `json:"type"`
}

// Coin defines model for coin.
type Coin struct {
	Amount string `json:"amount"`
	Asset  string `json:"asset"`
}

// Coins defines model for coins.
type Coins []Coin

// Event defines model for event.
type Event struct {
	Fee        string `json:"fee"`
	Slip       string `json:"slip"`
	StakeUnits string `json:"stakeUnits"`
}

// Option defines model for option.
type Option struct {
	Asymmetry           string `json:"asymmetry"`
	PriceTarget         string `json:"priceTarget"`
	WithdrawBasisPoints string `json:"withdrawBasisPoints"`
}

// Tx defines model for tx.
type Tx struct {
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`
	Memo    string `json:"memo"`
	Options Option `json:"options"`
	TxID    string `json:"txID"`
}

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {

	// True means healthy, connected to database.
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain.
	InSync bool `json:"inSync"`

	// Int64, the current block count.
	ScannerHeight string `json:"scannerHeight"`
}

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse []string

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodeKeyResponse defines model for NodeKeyResponse.
type NodeKeyResponse []NodeKey

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse []PoolDetail

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// TxResponse defines model for TxResponse.
type TxResponse struct {

	// Int64, count of txs matching the filters.
	Count string      `json:"count"`
	Txs   []TxDetails `json:"txs"`
}

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return stats for this single pool. Returns sum of all pools if missing.
	Pool *int64 `json:"pool,omitempty"`

	// Interval of calculations
	Interval string `json:"interval"`

	// Start time of the query as unix timestamp
	From int64 `json:"from"`

	// End time of the query as unix timestamp
	To int64 `json:"to"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Interval of calculations
	Status string `json:"status"`
}

// GetTxDetailsParams defines parameters for GetTxDetails.
type GetTxDetailsParams struct {

	// Address of sender or recipient of any in/out tx in event
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx in event
	Txid *string `json:"txid,omitempty"`

	// Any asset used in event (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of event
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
