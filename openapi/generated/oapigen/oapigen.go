// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {
	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still
	// pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still
// pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {
	// Int64, amount of liquidity units assigned to the member as result of the liquidity
	// deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {
	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Represents a digital currency amount
type Coin struct {
	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {
	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, The liquidity unit value index. Sqrt(assetDepth * runeDepth)/liquidity units
	Luvi string `json:"luvi"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {
	// Int64(e8), the amount of Asset in the pool at the end of the interval at time endTime
	EndAssetDepth string `json:"endAssetDepth"`

	// Int64, Liquidity Units in the pool at the end of the interval at time endTime
	EndLPUnits string `json:"endLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval at time endTime
	EndRuneDepth string `json:"endRuneDepth"`

	// Int64, Synth Units in the pool at the end of the interval at time endTime
	EndSynthUnits string `json:"endSynthUnits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, The liquidity unit value index increase between the first and last depth item
	LuviIncrease string `json:"luviIncrease"`

	// Float, The impermanent loss between the first and last depth item
	PriceShiftLoss string `json:"priceShiftLoss"`

	// Int64(e8), the amount of Asset in the pool at the start of the interval at time
	// startTime
	StartAssetDepth string `json:"startAssetDepth"`

	// Int64, Liquidity Units in the pool at the start of the interval at time startTime
	StartLPUnits string `json:"startLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the start of the interval at time startTime
	StartRuneDepth string `json:"startRuneDepth"`

	// Int64, Synth Units in the pool at the start of the interval at time startTime
	StartSynthUnits string `json:"startSynthUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {
	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of
	// liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {
	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// FullMemberDetails defines model for FullMemberDetails.
type FullMemberDetails struct {
	// List details of all the liquidity providers identified with the given address
	Pools []FullMemberPool `json:"pools"`
}

// FullMemberPool defines model for FullMemberPool.
type FullMemberPool struct {
	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total units of the pool
	PoolUnits string `json:"poolUnits"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`

	// Int64, total units that belong the the member
	SharedUnits string `json:"sharedUnits"`
}

// Health defines model for Health.
type Health struct {
	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync         bool     `json:"inSync"`
	LastAggregated HeightTS `json:"lastAggregated"`
	LastCommitted  HeightTS `json:"lastCommitted"`
	LastFetched    HeightTS `json:"lastFetched"`
	LastThorNode   HeightTS `json:"lastThorNode"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// HeightTS defines model for HeightTS.
type HeightTS struct {
	// Block height
	Height int `json:"height"`

	// Block timestamp (seconds since epoch)
	Timestamp int `json:"timestamp"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string  `json:"address"`
	Chain   string  `json:"chain"`
	GasRate *string `json:"gas_rate,omitempty"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                    int64  `json:"AsgardSize"`
	BadValidatorRate              int64  `json:"BadValidatorRate"`
	BadValidatorRedline           int    `json:"BadValidatorRedline"`
	BlocksPerYear                 int64  `json:"BlocksPerYear"`
	ChurnInterval                 int64  `json:"ChurnInterval"`
	ChurnRetryInterval            int64  `json:"ChurnRetryInterval"`
	DesiredValidatorSet           int64  `json:"DesiredValidatorSet"`
	DoubleSignMaxAge              int64  `json:"DoubleSignMaxAge"`
	EmissionCurve                 int64  `json:"EmissionCurve"`
	FailKeygenSlashPoints         int64  `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints        int64  `json:"FailKeysignSlashPoints"`
	FullImpLossProtectionBlocks   int64  `json:"FullImpLossProtectionBlocks"`
	FundMigrationInterval         int64  `json:"FundMigrationInterval"`
	IncentiveCurve                int64  `json:"IncentiveCurve"`
	JailTimeKeygen                int64  `json:"JailTimeKeygen"`
	JailTimeKeysign               int64  `json:"JailTimeKeysign"`
	LackOfObservationPenalty      int64  `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks         int64  `json:"LiquidityLockUpBlocks"`
	MaxAvailablePools             int64  `json:"MaxAvailablePools"`
	MaxSwapsPerBlock              int64  `json:"MaxSwapsPerBlock"`
	MinRunePoolDepth              int64  `json:"MinRunePoolDepth"`
	MinSlashPointsForBadValidator int64  `json:"MinSlashPointsForBadValidator"`
	MinSwapsPerBlock              int64  `json:"MinSwapsPerBlock"`
	MinimumBondInRune             int64  `json:"MinimumBondInRune"`
	MinimumNodesForBFT            int64  `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil      int64  `json:"MinimumNodesForYggdrasil"`
	NativeTransactionFee          int64  `json:"NativeTransactionFee"`
	NewPoolCycle                  *int64 `json:"NewPoolCycle,omitempty"`
	ObservationDelayFlexibility   int64  `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints            int64  `json:"ObserveSlashPoints"`
	OldValidatorRate              int64  `json:"OldValidatorRate"`
	OutboundTransactionFee        int64  `json:"OutboundTransactionFee"`
	PoolCycle                     int64  `json:"PoolCycle"`
	SigningTransactionPeriod      int64  `json:"SigningTransactionPeriod"`
	VirtualMultSynths             int64  `json:"VirtualMultSynths"`
	YggFundLimit                  int64  `json:"YggFundLimit"`
}

// LPDetail defines model for LPDetail.
type LPDetail struct {
	// asset address
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, total asset earned
	AssetEarned string `json:"assetEarned"`

	// Float, current asset price in rune
	AssetPrice string `json:"assetPrice"`

	// Float, current asset price in usd
	AssetPriceUsd string `json:"assetPriceUsd"`

	// pool name
	Pool string `json:"pool"`

	// Int64(e8), pool units
	PoolUnits string `json:"poolUnits"`

	// Int64(e8), total block reward
	Rewards string `json:"rewards"`

	// rune address
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// Float, total rune earned
	RuneEarned string `json:"runeEarned"`

	// Int64(e8), current rune price in usd
	RunePriceUsd string `json:"runePriceUsd"`

	// Int64(e8), share units
	SharedUnits string        `json:"sharedUnits"`
	StakeDetail []StakeDetail `json:"stakeDetail"`

	// Int64(e8), total rune price in usd
	UsdEarned      string        `json:"usdEarned"`
	WithdrawDetail []StakeDetail `json:"withdrawDetail"`
}

// LPDetails defines model for LPDetails.
type LPDetails []LPDetail

// Lastblock defines model for Lastblock.
type Lastblock []LastblockItem

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn int64  `json:"last_observed_in"`
	LastSignedOut  int64  `json:"last_signed_out"`
	Thorchain      int64  `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {
	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {
	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {
	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and
	// nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each
// outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {
	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// OHLCVHistory defines model for OHLCVHistory.
type OHLCVHistory struct {
	Intervals OHLCVHistoryIntervals `json:"intervals"`
	Meta      OHLCVHistoryMeta      `json:"meta"`
}

// OHLCVHistoryIntervals defines model for OHLCVHistoryIntervals.
type OHLCVHistoryIntervals []OHLCVHistoryItem

// OHLCVHistoryItem defines model for OHLCVHistoryItem.
type OHLCVHistoryItem struct {
	// Float, close price of asset in USD
	ClosePrice string `json:"closePrice"`

	// Int64, The end time of bucket in unix timestamp
	CloseTime string `json:"closeTime"`

	// Float, high price of asset in USD
	HighPrice string `json:"highPrice"`

	// Int64, The high time of bucket in unix timestamp
	HighTime string `json:"highTime"`

	// Int64, Liquidty is USD
	Liquidity string `json:"liquidity"`

	// Float, low price of asset in USD
	LowPrice string `json:"lowPrice"`

	// Int64, The low time of bucket in unix timestamp
	LowTime string `json:"lowTime"`

	// Float, open price of asset in USD
	OpenPrice string `json:"openPrice"`

	// Int64, The beginning time of bucket in unix timestamp
	OpenTime string `json:"openTime"`

	// Int64, Volume in USD
	Volume string `json:"volume"`
}

// OHLCVHistoryMeta defines model for OHLCVHistoryMeta.
type OHLCVHistoryMeta struct {
	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// ObservedChain defines model for ObservedChain.
type ObservedChain struct {
	Chain  string `json:"chain"`
	Height int    `json:"height"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income,
	// taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	// Doesn't include synth mint or burn.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {
	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`
	Asset                  string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income,
	// taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Int64, number of unique adresses that initiated swaps transactions in the period.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// PreflightStatus defines model for PreflightStatus.
type PreflightStatus struct {
	Code   int    `json:"code"`
	Reason string `json:"reason"`
	Status string `json:"status"`
}

// ProxiedNode defines model for ProxiedNode.
type ProxiedNode struct {
	ActiveBlockHeight int    `json:"active_block_height"`
	Bond              string `json:"bond"`
	BondAddress       string `json:"bond_address"`
	CurrentAward      string `json:"current_award"`
	ForcedToLeave     bool   `json:"forced_to_leave"`
	IpAddress         string `json:"ip_address"`
	Jail              struct {
		NodeAddress *string `json:"node_address,omitempty"`
	} `json:"jail"`
	LeaveHeight     int             `json:"leave_height"`
	NodeAddress     string          `json:"node_address"`
	ObserveChains   []ObservedChain `json:"observe_chains"`
	PreflightStatus PreflightStatus `json:"preflight_status"`
	PubKeySet       struct {
		Ed25519   string `json:"ed25519"`
		Secp256k1 string `json:"secp256k1"`
	} `json:"pub_key_set"`
	RequestedToLeave    bool     `json:"requested_to_leave"`
	SignerMembership    []string `json:"signer_membership"`
	SlashPoints         int      `json:"slash_points"`
	Status              string   `json:"status"`
	StatusSince         int      `json:"status_since"`
	ValidatorConsPubKey string   `json:"validator_cons_pub_key"`
	Version             string   `json:"version"`
}

// ProxiedNodes defines model for ProxiedNodes.
type ProxiedNodes []ProxiedNode

// Queue defines model for Queue.
type Queue struct {
	Internal int `json:"internal"`
	Outbound int `json:"outbound"`
	Swap     int `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {
	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// StatsData defines model for StatsData.
type StatsData struct {
	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, unique users (addresses) initiating swaps in the last 24 hours.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, unique users (addresses) initiating swaps in the last 30 days.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Int64, unique users (addresses) initiating swaps since beginning.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {
	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {
	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {
	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {
	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {
	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of
	// the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity
	// pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at
	// the end of the interval.
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {
	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the
	// native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {
	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means
	// totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership
	// withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// StakeDetail defines model for stakeDetail.
type StakeDetail struct {
	// Int64(e8), asset amount
	AssetAmount string `json:"assetAmount"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, asset price in rune
	AssetPrice string `json:"assetPrice"`

	// Float, asset price in usd
	AssetPriceUsd string `json:"assetPriceUsd"`

	// Float, withdraw percentage
	BasisPoint string `json:"basisPoint"`

	// Int64, nano timestamp of the block
	Date string `json:"date"`

	// Int64, block height
	Height string `json:"height"`

	// Int64, total number of pool units
	PoolUnits string `json:"poolUnits"`

	// Int64(e8), rune amount
	RuneAmount string `json:"runeAmount"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// Float, rune price in usd
	RunePriceUsd string `json:"runePriceUsd"`

	// Int64, total number of units changed
	SharedUnits string `json:"sharedUnits"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// FullMembersResponse defines model for FullMembersResponse.
type FullMembersResponse FullMemberDetails

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LPDetailsResponse defines model for LPDetailsResponse.
type LPDetailsResponse LPDetails

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// OHLCVHistoryResponse defines model for OHLCVHistoryResponse.
type OHLCVHistoryResponse OHLCVHistory

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ProxiedNodesResponse defines model for ProxiedNodesResponse.
type ProxiedNodesResponse ProxiedNodes

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {
	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// Affiliate address of the action (swap)
	AffiliateAddress *string `json:"affiliate_address,omitempty"`
	AssetType        *string `json:"assetType,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`
}

// GetFullMembersAdressesParams defines parameters for GetFullMembersAdresses.
type GetFullMembersAdressesParams struct {
	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {
	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {
	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {
	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetOHLCVHistoryParams defines parameters for GetOHLCVHistory.
type GetOHLCVHistoryParams struct {
	// Interval of calculations
	Interval *GetOHLCVHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetOHLCVHistoryParamsInterval defines parameters for GetOHLCVHistory.
type GetOHLCVHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {
	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTSSwapHistoryParams defines parameters for GetTSSwapHistory.
type GetTSSwapHistoryParams struct {
	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetTSSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTSSwapHistoryParamsInterval defines parameters for GetTSSwapHistory.
type GetTSSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {
	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetLPDetailParams defines parameters for GetLPDetail.
type GetLPDetailParams struct {
	// Return information for given pools
	Pools *string `json:"pools,omitempty"`
}

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {
	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {
	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {
	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
