// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {
	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {
	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {
	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Represents a digital currency amount
type Coin struct {
	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {
	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {
	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {
	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {
	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {
	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync         bool     `json:"inSync"`
	LastAggregated HeightTS `json:"lastAggregated"`
	LastCommitted  HeightTS `json:"lastCommitted"`
	LastFetched    HeightTS `json:"lastFetched"`
	LastQueried    HeightTS `json:"lastQueried"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// HeightTS defines model for HeightTS.
type HeightTS struct {
	// Block height
	Height int `json:"height"`

	// Block timestamp (seconds since epoch)
	Timestamp int `json:"timestamp"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string  `json:"address"`
	Chain   string  `json:"chain"`
	GasRate *string `json:"gas_rate,omitempty"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                    int64  `json:"AsgardSize"`
	BadValidatorRate              int64  `json:"BadValidatorRate"`
	BadValidatorRedline           int    `json:"BadValidatorRedline"`
	BlocksPerYear                 int64  `json:"BlocksPerYear"`
	ChurnInterval                 int64  `json:"ChurnInterval"`
	ChurnRetryInterval            int64  `json:"ChurnRetryInterval"`
	DesiredValidatorSet           int64  `json:"DesiredValidatorSet"`
	DoubleSignMaxAge              int64  `json:"DoubleSignMaxAge"`
	EmissionCurve                 int64  `json:"EmissionCurve"`
	FailKeygenSlashPoints         int64  `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints        int64  `json:"FailKeysignSlashPoints"`
	FullImpLossProtectionBlocks   int64  `json:"FullImpLossProtectionBlocks"`
	FundMigrationInterval         int64  `json:"FundMigrationInterval"`
	IncentiveCurve                int64  `json:"IncentiveCurve"`
	JailTimeKeygen                int64  `json:"JailTimeKeygen"`
	JailTimeKeysign               int64  `json:"JailTimeKeysign"`
	LackOfObservationPenalty      int64  `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks         int64  `json:"LiquidityLockUpBlocks"`
	MaxAvailablePools             int64  `json:"MaxAvailablePools"`
	MaxSwapsPerBlock              int64  `json:"MaxSwapsPerBlock"`
	MinRunePoolDepth              int64  `json:"MinRunePoolDepth"`
	MinSlashPointsForBadValidator int64  `json:"MinSlashPointsForBadValidator"`
	MinSwapsPerBlock              int64  `json:"MinSwapsPerBlock"`
	MinimumBondInRune             int64  `json:"MinimumBondInRune"`
	MinimumNodesForBFT            int64  `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil      int64  `json:"MinimumNodesForYggdrasil"`
	NativeTransactionFee          int64  `json:"NativeTransactionFee"`
	NewPoolCycle                  *int64 `json:"NewPoolCycle,omitempty"`
	ObservationDelayFlexibility   int64  `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints            int64  `json:"ObserveSlashPoints"`
	OldValidatorRate              int64  `json:"OldValidatorRate"`
	OutboundTransactionFee        int64  `json:"OutboundTransactionFee"`
	PoolCycle                     int64  `json:"PoolCycle"`
	SigningTransactionPeriod      int64  `json:"SigningTransactionPeriod"`
	VirtualMultSynths             int64  `json:"VirtualMultSynths"`
	YggFundLimit                  int64  `json:"YggFundLimit"`
}

// LPDetails defines model for LPDetails.
type LPDetails struct {
	// Int64(e8), total asset added by the pool by member
	AssetAdded *string `json:"assetAdded,omitempty"`

	// Int64(e8), total asset earned by the pool by member
	AssetEarned *string `json:"assetEarned,omitempty"`

	// Float, current asset price in rune
	AssetPrice *string `json:"assetPrice,omitempty"`

	// Float, current asset price in usd
	AssetPriceUsd *string `json:"assetPriceUsd,omitempty"`

	// Int64(e8), total asset shared by the pool by member
	AssetRedeemable *string `json:"assetRedeemable,omitempty"`

	// Int64(e8), total asset withdrawn by the pool by member
	AssetWithdrawn *string `json:"assetWithdrawn,omitempty"`

	// Int64(e8), total rune added by the pool by member
	RuneAdded *string `json:"runeAdded,omitempty"`

	// Int64(e8), total rune earned by the pool by member
	RuneEarned *string `json:"runeEarned,omitempty"`

	// Int64(e8), total rune shared by the pool by member
	RuneRedeemable *string `json:"runeRedeemable,omitempty"`

	// Int64(e8), total rune withdrawn by the pool by member
	RuneWithdrawn  *string        `json:"runeWithdrawn,omitempty"`
	StakeDetail    *[]StakeDetail `json:"stakeDetail,omitempty"`
	WithdrawDetail *[]StakeDetail `json:"withdrawDetail,omitempty"`
}

// Lastblock defines model for Lastblock.
type Lastblock []LastblockItem

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn int64  `json:"last_observed_in"`
	LastSignedOut  int64  `json:"last_signed_out"`
	Thorchain      int64  `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {
	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {
	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {
	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {
	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// OHLCVHistory defines model for OHLCVHistory.
type OHLCVHistory struct {
	Intervals OHLCVHistoryIntervals `json:"intervals"`
	Meta      OHLCVHistoryMeta      `json:"meta"`
}

// OHLCVHistoryIntervals defines model for OHLCVHistoryIntervals.
type OHLCVHistoryIntervals []OHLCVHistoryItem

// OHLCVHistoryItem defines model for OHLCVHistoryItem.
type OHLCVHistoryItem struct {
	// Float, close price of asset in USD
	ClosePrice string `json:"closePrice"`

	// Int64, The end time of bucket in unix timestamp
	CloseTime string `json:"closeTime"`

	// Float, high price of asset in USD
	HighPrice string `json:"highPrice"`

	// Int64, The high time of bucket in unix timestamp
	HighTime string `json:"highTime"`

	// Int64, Liquidty is USD
	Liquidity string `json:"liquidity"`

	// Float, low price of asset in USD
	LowPrice string `json:"lowPrice"`

	// Int64, The low time of bucket in unix timestamp
	LowTime string `json:"lowTime"`

	// Float, open price of asset in USD
	OpenPrice string `json:"openPrice"`

	// Int64, The beginning time of bucket in unix timestamp
	OpenTime string `json:"openTime"`

	// Int64, Volume in USD
	Volume string `json:"volume"`
}

// OHLCVHistoryMeta defines model for OHLCVHistoryMeta.
type OHLCVHistoryMeta struct {
	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// ObservedChain defines model for ObservedChain.
type ObservedChain struct {
	Chain  string `json:"chain"`
	Height int    `json:"height"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {
	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`
	Asset                  string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Int64, number of unique adresses that initiated swaps transactions in the period.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// PreflightStatus defines model for PreflightStatus.
type PreflightStatus struct {
	Code   int    `json:"code"`
	Reason string `json:"reason"`
	Status string `json:"status"`
}

// ProxiedNode defines model for ProxiedNode.
type ProxiedNode struct {
	ActiveBlockHeight int    `json:"active_block_height"`
	Bond              string `json:"bond"`
	BondAddress       string `json:"bond_address"`
	CurrentAward      string `json:"current_award"`
	ForcedToLeave     bool   `json:"forced_to_leave"`
	IpAddress         string `json:"ip_address"`
	Jail              struct {
		NodeAddress *string `json:"node_address,omitempty"`
	} `json:"jail"`
	LeaveHeight     int             `json:"leave_height"`
	NodeAddress     string          `json:"node_address"`
	ObserveChains   []ObservedChain `json:"observe_chains"`
	PreflightStatus PreflightStatus `json:"preflight_status"`
	PubKeySet       struct {
		Ed25519   string `json:"ed25519"`
		Secp256k1 string `json:"secp256k1"`
	} `json:"pub_key_set"`
	RequestedToLeave    bool     `json:"requested_to_leave"`
	SignerMembership    []string `json:"signer_membership"`
	SlashPoints         int      `json:"slash_points"`
	Status              string   `json:"status"`
	StatusSince         int      `json:"status_since"`
	ValidatorConsPubKey string   `json:"validator_cons_pub_key"`
	Version             string   `json:"version"`
}

// ProxiedNodes defines model for ProxiedNodes.
type ProxiedNodes []ProxiedNode

// Queue defines model for Queue.
type Queue struct {
	Internal int `json:"internal"`
	Outbound int `json:"outbound"`
	Swap     int `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {
	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// StatsData defines model for StatsData.
type StatsData struct {
	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, unique users (addresses) initiating swaps in the last 24 hours.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, unique users (addresses) initiating swaps in the last 30 days.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Int64, unique users (addresses) initiating swaps since beginning.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {
	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {
	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {
	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {
	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {
	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at the end of the interval
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {
	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {
	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// StakeDetail defines model for stakeDetail.
type StakeDetail struct {
	// Int64(e8), asset amount
	AssetAmoun *string `json:"assetAmoun,omitempty"`

	// Float, asset price in rune
	AssetPrice *int `json:"assetPrice,omitempty"`

	// Float, asset price in usd
	AssetPriceUsd *int `json:"assetPriceUsd,omitempty"`

	// Int64, nano timestamp of the block
	Date *int `json:"date,omitempty"`

	// Int64(e8), rune amount
	RuneAmount *int `json:"runeAmount,omitempty"`

	// Float, rune price in usd
	RunePriceUsd *int `json:"runePriceUsd,omitempty"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LPDetailsResponse defines model for LPDetailsResponse.
type LPDetailsResponse LPDetails

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// OHLCVHistoryResponse defines model for OHLCVHistoryResponse.
type OHLCVHistoryResponse OHLCVHistory

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ProxiedNodesResponse defines model for ProxiedNodesResponse.
type ProxiedNodesResponse ProxiedNodes

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {
	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {
	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {
	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {
	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetOHLCVHistoryParams defines parameters for GetOHLCVHistory.
type GetOHLCVHistoryParams struct {
	// Interval of calculations
	Interval *GetOHLCVHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetOHLCVHistoryParamsInterval defines parameters for GetOHLCVHistory.
type GetOHLCVHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {
	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTSSwapHistoryParams defines parameters for GetTSSwapHistory.
type GetTSSwapHistoryParams struct {
	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetTSSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTSSwapHistoryParamsInterval defines parameters for GetTSSwapHistory.
type GetTSSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {
	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetLPDetailParams defines parameters for GetLPDetail.
type GetLPDetailParams struct {
	// Return information for given pool
	Pool *string `json:"pool,omitempty"`
}

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {
	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {
	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {
	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"kdnoLeYWAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
