// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {
	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still
	// pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still
// pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {
	// Int64, amount of liquidity units assigned to the member as result of the liquidity
	// deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// Balance defines model for Balance.
type Balance struct {
	Coins Coins `json:"coins"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {
	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Represents a digital currency amount
type Coin struct {
	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {
	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, The liquidity unit value index. Sqrt(assetDepth * runeDepth)/liquidity units
	Luvi string `json:"luvi"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {
	// Int64(e8), the amount of Asset in the pool at the end of the interval at time endTime
	EndAssetDepth string `json:"endAssetDepth"`

	// Int64, Liquidity Units in the pool at the end of the interval at time endTime
	EndLPUnits string `json:"endLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval at time endTime
	EndRuneDepth string `json:"endRuneDepth"`

	// Int64, Synth Units in the pool at the end of the interval at time endTime
	EndSynthUnits string `json:"endSynthUnits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, The liquidity unit value index increase between the first and last depth item
	LuviIncrease string `json:"luviIncrease"`

	// Float, The impermanent loss between the first and last depth item
	PriceShiftLoss string `json:"priceShiftLoss"`

	// Int64(e8), the amount of Asset in the pool at the start of the interval at time
	// startTime
	StartAssetDepth string `json:"startAssetDepth"`

	// Int64, Liquidity Units in the pool at the start of the interval at time startTime
	StartLPUnits string `json:"startLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the start of the interval at time startTime
	StartRuneDepth string `json:"startRuneDepth"`

	// Int64, Synth Units in the pool at the start of the interval at time startTime
	StartSynthUnits string `json:"startSynthUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {
	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of
	// liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {
	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// FullMemberDetails defines model for FullMemberDetails.
type FullMemberDetails struct {
	// List details of all the liquidity providers identified with the given address
	Pools []FullMemberPool `json:"pools"`
}

// FullMemberPool defines model for FullMemberPool.
type FullMemberPool struct {
	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total units of the pool
	PoolUnits string `json:"poolUnits"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`

	// Int64, total units that belong the the member
	SharedUnits string `json:"sharedUnits"`
}

// Health defines model for Health.
type Health struct {
	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync         bool     `json:"inSync"`
	LastAggregated HeightTS `json:"lastAggregated"`
	LastCommitted  HeightTS `json:"lastCommitted"`
	LastFetched    HeightTS `json:"lastFetched"`
	LastThorNode   HeightTS `json:"lastThorNode"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// HeightTS defines model for HeightTS.
type HeightTS struct {
	// Block height
	Height int `json:"height"`

	// Block timestamp (seconds since epoch)
	Timestamp int `json:"timestamp"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string  `json:"address"`
	Chain   string  `json:"chain"`
	GasRate *string `json:"gas_rate,omitempty"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                    int64  `json:"AsgardSize"`
	BadValidatorRate              int64  `json:"BadValidatorRate"`
	BadValidatorRedline           int    `json:"BadValidatorRedline"`
	BlocksPerYear                 int64  `json:"BlocksPerYear"`
	ChurnInterval                 int64  `json:"ChurnInterval"`
	ChurnRetryInterval            int64  `json:"ChurnRetryInterval"`
	DesiredValidatorSet           int64  `json:"DesiredValidatorSet"`
	DoubleSignMaxAge              int64  `json:"DoubleSignMaxAge"`
	EmissionCurve                 int64  `json:"EmissionCurve"`
	FailKeygenSlashPoints         int64  `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints        int64  `json:"FailKeysignSlashPoints"`
	FullImpLossProtectionBlocks   int64  `json:"FullImpLossProtectionBlocks"`
	FundMigrationInterval         int64  `json:"FundMigrationInterval"`
	IncentiveCurve                int64  `json:"IncentiveCurve"`
	JailTimeKeygen                int64  `json:"JailTimeKeygen"`
	JailTimeKeysign               int64  `json:"JailTimeKeysign"`
	LackOfObservationPenalty      int64  `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks         int64  `json:"LiquidityLockUpBlocks"`
	MaxAvailablePools             int64  `json:"MaxAvailablePools"`
	MaxSwapsPerBlock              int64  `json:"MaxSwapsPerBlock"`
	MinRunePoolDepth              int64  `json:"MinRunePoolDepth"`
	MinSlashPointsForBadValidator int64  `json:"MinSlashPointsForBadValidator"`
	MinSwapsPerBlock              int64  `json:"MinSwapsPerBlock"`
	MinimumBondInRune             int64  `json:"MinimumBondInRune"`
	MinimumNodesForBFT            int64  `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil      int64  `json:"MinimumNodesForYggdrasil"`
	NativeTransactionFee          int64  `json:"NativeTransactionFee"`
	NewPoolCycle                  *int64 `json:"NewPoolCycle,omitempty"`
	ObservationDelayFlexibility   int64  `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints            int64  `json:"ObserveSlashPoints"`
	OldValidatorRate              int64  `json:"OldValidatorRate"`
	OutboundTransactionFee        int64  `json:"OutboundTransactionFee"`
	PoolCycle                     int64  `json:"PoolCycle"`
	SigningTransactionPeriod      int64  `json:"SigningTransactionPeriod"`
	VirtualMultSynths             int64  `json:"VirtualMultSynths"`
	YggFundLimit                  int64  `json:"YggFundLimit"`
}

// LPDetail defines model for LPDetail.
type LPDetail struct {
	// asset address
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, total asset earned
	AssetEarned string `json:"assetEarned"`

	// Float, current asset price in rune
	AssetPrice string `json:"assetPrice"`

	// Float, current asset price in usd
	AssetPriceUsd string `json:"assetPriceUsd"`

	// pool name
	Pool string `json:"pool"`

	// Int64(e8), pool units
	PoolUnits string `json:"poolUnits"`

	// Int64(e8), total block reward
	Rewards string `json:"rewards"`

	// rune address
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// Float, total rune earned
	RuneEarned string `json:"runeEarned"`

	// Int64(e8), current rune price in usd
	RunePriceUsd string `json:"runePriceUsd"`

	// Int64(e8), share units
	SharedUnits string        `json:"sharedUnits"`
	StakeDetail []StakeDetail `json:"stakeDetail"`

	// Int64(e8), total rune price in usd
	UsdEarned      string        `json:"usdEarned"`
	WithdrawDetail []StakeDetail `json:"withdrawDetail"`
}

// LPDetails defines model for LPDetails.
type LPDetails []LPDetail

// Lastblock defines model for Lastblock.
type Lastblock []LastblockItem

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn int64  `json:"last_observed_in"`
	LastSignedOut  int64  `json:"last_signed_out"`
	Thorchain      int64  `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {
	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {
	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {
	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and
	// nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each
// outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {
	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// OHLCVHistory defines model for OHLCVHistory.
type OHLCVHistory struct {
	Intervals OHLCVHistoryIntervals `json:"intervals"`
	Meta      OHLCVHistoryMeta      `json:"meta"`
}

// OHLCVHistoryIntervals defines model for OHLCVHistoryIntervals.
type OHLCVHistoryIntervals []OHLCVHistoryItem

// OHLCVHistoryItem defines model for OHLCVHistoryItem.
type OHLCVHistoryItem struct {
	// Float, close price of asset in USD
	ClosePrice string `json:"closePrice"`

	// Int64, The end time of bucket in unix timestamp
	CloseTime string `json:"closeTime"`

	// Float, high price of asset in USD
	HighPrice string `json:"highPrice"`

	// Int64, The high time of bucket in unix timestamp
	HighTime string `json:"highTime"`

	// Int64, Liquidty is USD
	Liquidity string `json:"liquidity"`

	// Float, low price of asset in USD
	LowPrice string `json:"lowPrice"`

	// Int64, The low time of bucket in unix timestamp
	LowTime string `json:"lowTime"`

	// Float, open price of asset in USD
	OpenPrice string `json:"openPrice"`

	// Int64, The beginning time of bucket in unix timestamp
	OpenTime string `json:"openTime"`

	// Int64, Volume in USD
	Volume string `json:"volume"`
}

// OHLCVHistoryMeta defines model for OHLCVHistoryMeta.
type OHLCVHistoryMeta struct {
	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// ObservedChain defines model for ObservedChain.
type ObservedChain struct {
	Chain  string `json:"chain"`
	Height int    `json:"height"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	// Float, Also called APR. Annual return estimated from last 30 days income
	// (linearly, not compounded). E.g. 0.1 means 10% yearly return.
	// Due to Impermantent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	// It includes synth mint or burn.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {
	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Float, Also called APR. Estimated annual return (linearly, not compounded).
	// Always estimated from last 30 days (doesn't take period into account).
	// E.g. 0.1 means 10% yearly return.
	// Due to Impermantent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// PreflightStatus defines model for PreflightStatus.
type PreflightStatus struct {
	Code   int    `json:"code"`
	Reason string `json:"reason"`
	Status string `json:"status"`
}

// ProxiedNode defines model for ProxiedNode.
type ProxiedNode struct {
	ActiveBlockHeight int    `json:"active_block_height"`
	Bond              string `json:"bond"`
	BondAddress       string `json:"bond_address"`
	CurrentAward      string `json:"current_award"`
	ForcedToLeave     bool   `json:"forced_to_leave"`
	IpAddress         string `json:"ip_address"`
	Jail              struct {
		NodeAddress *string `json:"node_address,omitempty"`
	} `json:"jail"`
	LeaveHeight     int             `json:"leave_height"`
	NodeAddress     string          `json:"node_address"`
	ObserveChains   []ObservedChain `json:"observe_chains"`
	PreflightStatus PreflightStatus `json:"preflight_status"`
	PubKeySet       struct {
		Ed25519   string `json:"ed25519"`
		Secp256k1 string `json:"secp256k1"`
	} `json:"pub_key_set"`
	RequestedToLeave    bool     `json:"requested_to_leave"`
	SignerMembership    []string `json:"signer_membership"`
	SlashPoints         int      `json:"slash_points"`
	Status              string   `json:"status"`
	StatusSince         int      `json:"status_since"`
	ValidatorConsPubKey string   `json:"validator_cons_pub_key"`
	Version             string   `json:"version"`
}

// ProxiedNodes defines model for ProxiedNodes.
type ProxiedNodes []ProxiedNode

// Queue defines model for Queue.
type Queue struct {
	Internal int `json:"internal"`
	Outbound int `json:"outbound"`
	Swap     int `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {
	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// StatsData defines model for StatsData.
type StatsData struct {
	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Deprecated, it's always 0.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Deprecated, it's always 0.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps (including synths) since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps (including synths) in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps (including synths) in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps (including synths) denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Synth to Rune since beginning.
	SynthBurnCount string `json:"synthBurnCount"`

	// Int64, number of swaps from Rune to Synth since beginning.
	SynthMintCount string `json:"synthMintCount"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {
	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {
	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {
	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {
	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {
	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of
	// the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity
	// pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at
	// the end of the interval.
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {
	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the
	// native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {
	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means
	// totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership
	// withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// StakeDetail defines model for stakeDetail.
type StakeDetail struct {
	// Int64(e8), asset amount
	AssetAmount string `json:"assetAmount"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, asset price in rune
	AssetPrice string `json:"assetPrice"`

	// Float, asset price in usd
	AssetPriceUsd string `json:"assetPriceUsd"`

	// Float, withdraw percentage
	BasisPoint string `json:"basisPoint"`

	// Int64, nano timestamp of the block
	Date string `json:"date"`

	// Int64, block height
	Height string `json:"height"`

	// Int64, total number of pool units
	PoolUnits string `json:"poolUnits"`

	// Int64(e8), rune amount
	RuneAmount string `json:"runeAmount"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// Float, rune price in usd
	RunePriceUsd string `json:"runePriceUsd"`

	// Int64, total number of units changed
	SharedUnits string `json:"sharedUnits"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// BalanceResponse defines model for BalanceResponse.
type BalanceResponse Balance

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// FullMembersResponse defines model for FullMembersResponse.
type FullMembersResponse FullMemberDetails

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LPDetailsResponse defines model for LPDetailsResponse.
type LPDetailsResponse LPDetails

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// OHLCVHistoryResponse defines model for OHLCVHistoryResponse.
type OHLCVHistoryResponse OHLCVHistory

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ProxiedNodesResponse defines model for ProxiedNodesResponse.
type ProxiedNodesResponse ProxiedNodes

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {
	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// Affiliate address of the action (swap)
	Affiliate *string `json:"affiliate,omitempty"`
	AssetType *string `json:"assetType,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`
}

// GetFullMembersAdressesParams defines parameters for GetFullMembersAdresses.
type GetFullMembersAdressesParams struct {
	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {
	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {
	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {
	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetOHLCVHistoryParams defines parameters for GetOHLCVHistory.
type GetOHLCVHistoryParams struct {
	// Interval of calculations
	Interval *GetOHLCVHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetOHLCVHistoryParamsInterval defines parameters for GetOHLCVHistory.
type GetOHLCVHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {
	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTSSwapHistoryParams defines parameters for GetTSSwapHistory.
type GetTSSwapHistoryParams struct {
	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetTSSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTSSwapHistoryParamsInterval defines parameters for GetTSSwapHistory.
type GetTSSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {
	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetLPDetailParams defines parameters for GetLPDetail.
type GetLPDetailParams struct {
	// Return information for given pools
	Pools *string `json:"pools,omitempty"`
}

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {
	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {
	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {
	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"3759+/8BAAD///DuiPe1NgEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
