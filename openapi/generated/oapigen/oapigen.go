// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {

	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still
	// pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still
// pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity
	// deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Represents a digital currency amount
type Coin struct {

	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, The liquidity unit value index. Sqrt(assetDepth * runeDepth)/liquidity units
	Luvi string `json:"luvi"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval at time endTime
	EndAssetDepth string `json:"endAssetDepth"`

	// Int64, Liquidity Units in the pool at the end of the interval at time endTime
	EndLPUnits string `json:"endLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval at time endTime
	EndRuneDepth string `json:"endRuneDepth"`

	// Int64, Synth Units in the pool at the end of the interval at time endTime
	EndSynthUnits string `json:"endSynthUnits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, The liquidity unit value index increase between the first and last depth item
	LuviIncrease string `json:"luviIncrease"`

	// Float, The impermanent loss between the first and last depth item
	PriceShiftLoss string `json:"priceShiftLoss"`

	// Int64(e8), the amount of Asset in the pool at the start of the interval at time
	// startTime
	StartAssetDepth string `json:"startAssetDepth"`

	// Int64, Liquidity Units in the pool at the start of the interval at time startTime
	StartLPUnits string `json:"startLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the start of the interval at time startTime
	StartRuneDepth string `json:"startRuneDepth"`

	// Int64, Synth Units in the pool at the start of the interval at time startTime
	StartSynthUnits string `json:"startSynthUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of
	// liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {

	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync         bool     `json:"inSync"`
	LastAggregated HeightTS `json:"lastAggregated"`
	LastCommitted  HeightTS `json:"lastCommitted"`
	LastFetched    HeightTS `json:"lastFetched"`
	LastThorNode   HeightTS `json:"lastThorNode"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// HeightTS defines model for HeightTS.
type HeightTS struct {

	// Block height
	Height int `json:"height"`

	// Block timestamp (seconds since epoch)
	Timestamp int `json:"timestamp"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string  `json:"address"`
	Chain   string  `json:"chain"`
	GasRate *string `json:"gas_rate,omitempty"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                    int64  `json:"AsgardSize"`
	BadValidatorRate              int64  `json:"BadValidatorRate"`
	BadValidatorRedline           int    `json:"BadValidatorRedline"`
	BlocksPerYear                 int64  `json:"BlocksPerYear"`
	ChurnInterval                 int64  `json:"ChurnInterval"`
	ChurnRetryInterval            int64  `json:"ChurnRetryInterval"`
	DesiredValidatorSet           int64  `json:"DesiredValidatorSet"`
	DoubleSignMaxAge              int64  `json:"DoubleSignMaxAge"`
	EmissionCurve                 int64  `json:"EmissionCurve"`
	FailKeygenSlashPoints         int64  `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints        int64  `json:"FailKeysignSlashPoints"`
	FullImpLossProtectionBlocks   int64  `json:"FullImpLossProtectionBlocks"`
	FundMigrationInterval         int64  `json:"FundMigrationInterval"`
	IncentiveCurve                int64  `json:"IncentiveCurve"`
	JailTimeKeygen                int64  `json:"JailTimeKeygen"`
	JailTimeKeysign               int64  `json:"JailTimeKeysign"`
	LackOfObservationPenalty      int64  `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks         int64  `json:"LiquidityLockUpBlocks"`
	MaxAvailablePools             int64  `json:"MaxAvailablePools"`
	MaxSwapsPerBlock              int64  `json:"MaxSwapsPerBlock"`
	MinRunePoolDepth              int64  `json:"MinRunePoolDepth"`
	MinSlashPointsForBadValidator int64  `json:"MinSlashPointsForBadValidator"`
	MinSwapsPerBlock              int64  `json:"MinSwapsPerBlock"`
	MinimumBondInRune             int64  `json:"MinimumBondInRune"`
	MinimumNodesForBFT            int64  `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil      int64  `json:"MinimumNodesForYggdrasil"`
	NativeTransactionFee          int64  `json:"NativeTransactionFee"`
	NewPoolCycle                  *int64 `json:"NewPoolCycle,omitempty"`
	ObservationDelayFlexibility   int64  `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints            int64  `json:"ObserveSlashPoints"`
	OldValidatorRate              int64  `json:"OldValidatorRate"`
	OutboundTransactionFee        int64  `json:"OutboundTransactionFee"`
	PoolCycle                     int64  `json:"PoolCycle"`
	SigningTransactionPeriod      int64  `json:"SigningTransactionPeriod"`
	VirtualMultSynths             int64  `json:"VirtualMultSynths"`
	YggFundLimit                  int64  `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock []LastblockItem

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn int64  `json:"last_observed_in"`
	LastSignedOut  int64  `json:"last_signed_out"`
	Thorchain      int64  `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {

	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and
	// nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each
// outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// ObservedChain defines model for ObservedChain.
type ObservedChain struct {
	Chain  string `json:"chain"`
	Height int    `json:"height"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income,
	// taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	// Doesn't include synth mint or burn.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`
	Asset                  string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income,
	// taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// PreflightStatus defines model for PreflightStatus.
type PreflightStatus struct {
	Code   int    `json:"code"`
	Reason string `json:"reason"`
	Status string `json:"status"`
}

// ProxiedNode defines model for ProxiedNode.
type ProxiedNode struct {
	ActiveBlockHeight int    `json:"active_block_height"`
	Bond              string `json:"bond"`
	BondAddress       string `json:"bond_address"`
	CurrentAward      string `json:"current_award"`
	ForcedToLeave     bool   `json:"forced_to_leave"`
	IpAddress         string `json:"ip_address"`
	Jail              struct {
		NodeAddress *string `json:"node_address,omitempty"`
	} `json:"jail"`
	LeaveHeight     int             `json:"leave_height"`
	NodeAddress     string          `json:"node_address"`
	ObserveChains   []ObservedChain `json:"observe_chains"`
	PreflightStatus PreflightStatus `json:"preflight_status"`
	PubKeySet       struct {
		Ed25519   string `json:"ed25519"`
		Secp256k1 string `json:"secp256k1"`
	} `json:"pub_key_set"`
	RequestedToLeave    bool     `json:"requested_to_leave"`
	SignerMembership    []string `json:"signer_membership"`
	SlashPoints         int      `json:"slash_points"`
	Status              string   `json:"status"`
	StatusSince         int      `json:"status_since"`
	ValidatorConsPubKey string   `json:"validator_cons_pub_key"`
	Version             string   `json:"version"`
}

// ProxiedNodes defines model for ProxiedNodes.
type ProxiedNodes []ProxiedNode

// Queue defines model for Queue.
type Queue struct {
	Internal int `json:"internal"`
	Outbound int `json:"outbound"`
	Swap     int `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Deprecated, it's always 0.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Deprecated, it's always 0.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Synth to Rune since beginning.
	SynthBurnCount string `json:"synthBurnCount"`

	// Int64, number of swaps from Rune to Synth since beginning.
	SynthMintCount string `json:"synthMintCount"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Int64, unique users (addresses) initiating swaps since beginning.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {

	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {

	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of
	// the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity
	// pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at
	// the end of the interval.
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the
	// native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means
	// totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership
	// withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ProxiedNodesResponse defines model for ProxiedNodesResponse.
type ProxiedNodesResponse ProxiedNodes

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// Affiliate address of the action (swap)
	AffiliateAddress *string `json:"affiliate_address,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {

	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"1uD9AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
