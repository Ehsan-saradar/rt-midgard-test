// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Action defines model for Action.
type Action struct {

	// Int64, Unix timestamp for when the action was registered
	Date string `json:"date"`

	// Int64, block height at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status string `json:"status"`

	// Type of action
	Type string `json:"type"`
}

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64, Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64, Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64, Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64, Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64, Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64, Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64, Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64, Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64, Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64, Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Coin defines model for Coin.
type Coin struct {

	// Int64 (10^8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64, Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64, Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64, System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64, Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistoryItemPool defines model for EarningsHistoryItemPool.
type EarningsHistoryItemPool struct {

	// Int64, Share of earnings sent to the pool during the time interval
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses struct {
	Current []InboundAddressesItem `json:"current"`
}

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string `json:"address"`
	Chain   string `json:"chain"`

	// indicate whether this chain has halted
	Halted bool   `json:"halted"`
	PubKey string `json:"pub_key"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                  int64 `json:"AsgardSize"`
	BadValidatorRate            int64 `json:"BadValidatorRate"`
	BlocksPerYear               int64 `json:"BlocksPerYear"`
	ChurnInterval               int64 `json:"ChurnInterval"`
	ChurnRetryInterval          int64 `json:"ChurnRetryInterval"`
	CliTxCost                   int64 `json:"CliTxCost"`
	DesiredValidatorSet         int64 `json:"DesiredValidatorSet"`
	DoubleSignMaxAge            int64 `json:"DoubleSignMaxAge"`
	EmissionCurve               int64 `json:"EmissionCurve"`
	FailKeygenSlashPoints       int64 `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints      int64 `json:"FailKeysignSlashPoints"`
	FundMigrationInterval       int64 `json:"FundMigrationInterval"`
	JailTimeKeygen              int64 `json:"JailTimeKeygen"`
	JailTimeKeysign             int64 `json:"JailTimeKeysign"`
	LackOfObservationPenalty    int64 `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks       int64 `json:"LiquidityLockUpBlocks"`
	MinimumBondInRune           int64 `json:"MinimumBondInRune"`
	MinimumNodesForBFT          int64 `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil    int64 `json:"MinimumNodesForYggdrasil"`
	NativeChainGasFee           int64 `json:"NativeChainGasFee"`
	NewPoolCycle                int64 `json:"NewPoolCycle"`
	ObservationDelayFlexibility int64 `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints          int64 `json:"ObserveSlashPoints"`
	OldValidatorRate            int64 `json:"OldValidatorRate"`
	OutboundTransactionFee      int64 `json:"OutboundTransactionFee"`
	SigningTransactionPeriod    int64 `json:"SigningTransactionPeriod"`
	YggFundLimit                int64 `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock struct {
	Current []LastblockItem `json:"current"`
}

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn string `json:"last_observed_in"`
	LastSignedOut  string `json:"last_signed_out"`
	Thorchain      string `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64 (10^8), total deposits in RUNE during the time interval.
	// Accounts for both asset (using the price at deposit time) and RUNE deposited into pools
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64 (10^8), total withdrawals in RUNE during the time interval. Accounts for
	// both asset (using the price at withdrawal time) and RUNE withdrawn from pools
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// Liquidity provider data for all the pools of a given member
	Pools []MemberPoolDetails `json:"pools"`
}

// MemberPoolDetails defines model for MemberPoolDetails.
type MemberPoolDetails struct {

	// Int64, total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// Int64, total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Int64, total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`
	PoolShareFactor         string `json:"poolShareFactor"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64, Total Rune pooled in all pools
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64, Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NetworkFees defines model for NetworkFees.
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolLegacyDetail defines model for PoolLegacyDetail.
type PoolLegacyDetail struct {
	Asset string `json:"asset"`

	// same as assetDepth from pool/stats
	AssetDepth string `json:"assetDepth"`

	// same as toAssetCount from pool/stats
	BuyAssetCount string `json:"buyAssetCount"`

	// same as toAssetVolume / toAssetCount from pool/stats
	BuyTxAverage string `json:"buyTxAverage"`

	// same as toAssetVolume from pool/stats
	BuyVolume string `json:"buyVolume"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// same as 2*runeDepth from pool/stats
	PoolDepth string `json:"poolDepth"`

	// same as totalFees / swapCount from pool/stats
	PoolFeeAverage string `json:"poolFeeAverage"`

	// same as totalFees from pool/stats
	PoolFeesTotal string `json:"poolFeesTotal"`

	// same as averageSlip from pool/stats
	PoolSlipAverage string `json:"poolSlipAverage"`

	// same as addLiquidityVolume from pool/stats
	PoolStakedTotal string `json:"poolStakedTotal"`

	// same as swapVolume / swapCount from pool/stats
	PoolTxAverage string `json:"poolTxAverage"`

	// same as units from pool/stats
	PoolUnits string `json:"poolUnits"`

	// Int64, same as buyVolume + sellVolume
	PoolVolume string `json:"poolVolume"`

	// same as assetPrice from pool/stats
	Price string `json:"price"`

	// same as runeDepth from pool/stats
	RuneDepth string `json:"runeDepth"`

	// same as toRuneCount from pool/stats
	SellAssetCount string `json:"sellAssetCount"`

	// same as toRuneVolume / toRuneCount from pool/stats
	SellTxAverage string `json:"sellTxAverage"`

	// same as toRuneVolume from pool/stats
	SellVolume string `json:"sellVolume"`

	// same as addLiquidityCount from pool/stats
	StakeTxCount string `json:"stakeTxCount"`

	// same as addLiquidityCount + withdrawCount from pool/stats
	StakingTxCount string `json:"stakingTxCount"`

	// same as status from pool/stats
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune
	Volume24h string `json:"volume24h"`

	// same as withdrawCount from pool/stats
	WithdrawTxCount string `json:"withdrawTxCount"`
}

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64, same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`
	Asset              string `json:"asset"`

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64, same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64, same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64, same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, Liquidity Units in the pool
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune
	Volume24h string `json:"volume24h"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64, same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// Queue defines model for Queue.
type Queue struct {
	Outbound string `json:"outbound"`
	Swap     string `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Daily active users (unique addresses interacting)
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Daily transactions
	DailyTx string `json:"dailyTx"`

	// Monthly active users
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Monthly transactions
	MonthlyTx string `json:"monthlyTx"`

	// Total buying transactions
	TotalAssetBuys string `json:"totalAssetBuys"`

	// Total selling transactions
	TotalAssetSells string `json:"totalAssetSells"`

	// Total RUNE balances
	TotalDepth string `json:"totalDepth"`

	// Total staking transactions
	TotalStakeTx string `json:"totalStakeTx"`

	// Total staked (in RUNE Value)
	TotalStaked string `json:"totalStaked"`

	// Total transactions
	TotalTx string `json:"totalTx"`

	// Total unique swappers & members
	TotalUsers string `json:"totalUsers"`

	// Total (in RUNE Value) of all assets swapped since start
	TotalVolume string `json:"totalVolume"`

	// Total withdrawing transactions
	TotalWithdrawTx string `json:"totalWithdrawTx"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float, the average slip by swap. Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64, volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64, volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64, the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64, toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Int64 (10^8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), trade slip percentage
	TradeSlip string `json:"tradeSlip"`

	// Int64 (10^8), minimum output amount specified for the swap
	TradeTarget string `json:"tradeTarget"`
}

// Transaction defines model for Transaction.
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction memo
	Memo string `json:"memo"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolLegacyResponse defines model for PoolLegacyResponse.
type PoolLegacyResponse PoolLegacyDetail

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Address of sender or recipient of any in/out transaction related to the action
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action (swap, addLiquidity, withdraw, donate, refund)
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *string `json:"status,omitempty"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x963Ibt9Lgq6C4u/XZJxOKpC62VZXa1cU68a4vWkvJV6njfA440+TAmgGoAYYUk/Jr",
	"7Qvsi22hgbljLqTtfCdnlT+xOECj0ehudAPdjT9GvohXggNXcnT6xygBuRJcAv5x5ismuHxvf9M/+YIr",
	"4Er/k65WEfOpbnLwSQquf5N+CDHV/1olYgWJYgYSNZD0P5mCGP/xXxNYjE5H/+WgwODA9JcHZuTRZ2+k",
	"tisYnY5oktCt/tsXqRk+AOknbIXtTkevuDo58ghP4zkkRCxIAjKNlCQxVX7I+JKoEMiSrYGTBYsUJHI8",
	"yqFLlTC+HH3+7I0SuE9ZAsHo9B92LC/H/te8g5h/Al+NPuseVUTeg0oTLgnlBHHWuNj+ZCESFxqfvdGF",
	"4FJRrvajdRclc8guZG9DkXARAMlbkYwBEK1LWKnwRyaVSLZfHbMycBdy+J1QHpBVwnwgYdbUG72kCWd8",
	"Kb8VajX4LuzANimj9SPQSIVfHRsDtovZQmxBpKIqNWz2hgVLmgQaq1d8LlIenAVBAlLC12ex+gCdnPaK",
	"B9ianNnWVY57TaWaR8K/++pY5pA70ctb1dBi9ykLmNp+K46rD+BC8t+ZCoOEbmgkUSwCWAnJVIUF34BW",
	"gJegKIu+/kpXoLtQNHqR6MEo0/JBomxiZJWINQsgIQFVFJmUErkCny2YT2KEXMzgW+HuxLpQ1FGECjrO",
	"2nqjt6A2Ivn67Gjh9mwhTXrafkhExE8E30CkEeruuGkJWqXziPnkDrY5jtdCRK9hSf2vLzcFaMOVLpxv",
	"FFVGKwoOZCVERDZMheTnKeE0Znw5zpD8Jui1I/auQcHAiFYF2Qw5nMY3wRAh70K/nGDyG1LMyX9nmaji",
	"MgZZQ2/0v1NI4atjg1A7NwxsUd0svs1CmUVCiRqid5eRmNOInL+8vtnQVS6K+o9vtYeVYDvZSOOBJrVH",
	"1iJKY/DIAgC3MhmxVbGNffbsiCUvpGnyG6s6FxkaC740gp1ARBUERCWUy8x492ouSUAVtPoRP3H2QBSL",
	"QSoar5D3NyFw3BzsuBuqTZclkwq0u9DwJbxRCGwZtvsqxswwjQhVZBMyP9xtBMZd0I19VZ58QRFRGmDk",
	"DXPGbgtILo8sBkWRvXo3YNvuszcSqYMu71L1J6OulYhsIoKajTC+FtEaAsJ4y8iN9ajDNwa5a40CLWIg",
	"CVuUV5xJoicRgZ6wSPTXbPrCSRyaAJGKRRFZAQ9wK/NGwNNYu68y9X2QyPnmY8mBreNcx/B2u4LCdS0D",
	"3dCVdomDIDdZR95oY03TkTcKBNeSpT3pRcoDx5g1L9ssgm2V0wyZ2zCKZ2Q1F6gSyzU9cm90VkLtTYk3",
	"q+Kf26U/caZkq5DSWCssTYnCkE11D0KlZEteMKaxGQnKrEwj7KN/L/pZe7332KGGmmuO58ZF2tAkkM25",
	"zYuvTjadCx50fF6hJdTyuYZreagK4AoY5xQED96ASpjvmAFdQ0KXoFX/GnTL1gU6My2JHjpj2DUQjgas",
	"g90t5BtFeTDf7gRamj7tsGP6wOI0HoD1G/rAeBoPxtpCHoL1G9N0B6whYJQPQRobDscZmw9CuQq4H2PG",
	"h9JZU3kXOhvIg5Cuge7FWglFowE43+p2gzFGqEPwrYLtwbYm5XXUPYeAOhjJtVIuKXHMwimoLp5yrplT",
	"YNxKSETFCWlDDd1o9aR073xHea8tY/0NHqjeqUenCxpJyGHPhYiA8gYJW0G50LoQLsvuPawSkNq+IZQE",
	"bMn0gvppkgD3t3anapi59mc3V5An08l/PH/q6c0MFDnDtmOn2tQNmlDOsB/j5OLHs1dvxze/vDl/91qb",
	"yzHt3+cMTC9DsY0Qw28NkGwOM6xjhfVyfVzTKIVe6FVeQetbfTw5Gtgb6V3pbqgysPsNNi4f5ldpWcXF",
	"q8yrPpSL0JXD+AaVGFeQrGkkdznTf5V3sk7CLp214daYJALxStj0zeRVGe9BLFTprSB2sVOjTdN80ZyN",
	"zVrVMVr9uXGZy5H+GQ992mTwOmG+w16/igRVnr0p0dtGBjBJOYzJqzGM8Z/ZmAe2Ra41GqMBD25Z3O4i",
	"34ZAQPsjLMYR56l/Z4ZMK86zC7bGZBfyvNeY91BHKpqoXoznsGQcD0h2x7vGjcWABbG88tKX51lZvT62",
	"fQMuj+VbLsg/BfFcZKnfxO2vmmqQdtZO9f6oHPZRUK2IDNVRTkyaasrVzOFoLd+KAC7cRsJCa5WyK1SI",
	"ZNkuJUGaZFfsyBkZAVysNq+5rl3Gqr2Iw7YEYqYUBLsNJvDgIyNF63g3IU2QofNrXW1nadd+9wlC72Bb",
	"qSAmjPsiBrIEDgntmtiYvFKESfwg07h6GLEAMLeBFWJ9DYWeDT9Mg+QYfQGt8SRoJ1rno14B9HFTlWYe",
	"8QVfQ2KPFt//9Pal/imKwN+VyVpOETNCFPedQP3QXFxkkSB12PvK/7W9J3IcQO6l13dZ+0HbYnWhalqg",
	"JDNNkXWxllfVW9kSDNG2GbEa9MB1gcqadTBBbWven+czk2ZnjnNciKBFVw0ycltLjhPY8iK46GiDUBob",
	"iCbUnErXEXKSAomB5vEpW5Q5bgRMCZJ3bTrPeg+92XJ/CNQxudIeuP3RBr5ofWkOxv0sACxdZfT2Q4qH",
	"y81RpU85h+TH7psbhIF+t7Jq13db0TU6lyZcHSifrovyjfCaxhpYXAYbEHWIbguiHgxnBxmCYoutYT5X",
	"Dk9Gcz9R0/vZ8bPlyUT5D+v0KFgvopX8fXm3uT88Co7Xm5PV8tnsZLk4dImCWcsKyPPbC+d1HI0UOM7H",
	"mL2MIZsQVAhaepg0PEJCKont5/We+HijVTr/eAfbKjpKhSJZpfMpDYINX8HqPnjB7+/jJd2exJ/Syfb+",
	"2WylPqV+fPeCKrpRsD5aH/GTzR3A8XZ2cv98Ar6/nDzcHT7rD1m0rJ1h4uVUzwngXsDK6URj6c6kFqob",
	"9jtU5nY48Ub2sEfTUZ0cFQhq/bU0IT3nNPiZRiygSiTv7bVrDuNkIAwtZ/Iakl+AJlUAh9Pp4YthUC7C",
	"NOGZxb0PGgjgPajCbt+HIBcRu324EFJVOg/rewlSL3ZO0BuoQpnOhoER6TyCG7bkb+jD2bK6JrOjQTBe",
	"xkxKJvhFmqxrizqo/xVl0f+C7RL4TURleC2YZb4czrPZZBdIki1bQQ0jy1XKgzdsmWD8w5cwyv+kLNK2",
	"j5lfdYV2hqDntQ+I19S/e7d4N5d6GnpG18BppLZ7ECY/tX4t/LufVkYc92DfN+a0/lzw4BV/n3Kozcv+",
	"twssDFa7Esn51W0F2NE+QH5ZLoOEShbtwc9vqfaJL7QK/juVV+Ce2zBQsNFm6sXWj6pQjqfPj4aBKC37",
	"JUR0exXBA5uziNXW/3gHaNAmXdNhQKIv3wiyKJFSaEcbpYcB1DqQ8WUJ3jUkTAQ1xT4M2C/LpVYhr1nM",
	"1M5Uru3lpU3XsYfWt8T65ubcq8pbj3srcewMdUXfprhb1XCbWm1oyabS69BhbTrJpWOcuqJD9l2yXBPK",
	"bgFzCoxDAFr5uYMva1zmsueKYPcvdhZyUF/sJVQhNRFzWPJvz52nPlSqj8LQN/hY7zQ9fjFp7WVidj7a",
	"+LNSp8kL5+16KBIHXtPjo+eDTfEGtk1UygM5KVfPDtj/GLwOaudz8AaAvQ/C21EZzJtOXJrHYM52Lv80",
	"b3gxMM0sz8FoPbz9wJ13eaWxfsZg2L4regyRKMZjHM8su8Y98/FYwoRuz4UK7Z3fk1RmXcx9IVUZXITx",
	"FM+TDXTzMwZBZge07gl9y9spDh1LAap0suuHlC9BkiebUq7M9znVnu50yvbtL8WKwMmh/Ja135Xfsn67",
	"8FqZhr3sRsrc9oH3sFsBus5x2RdOFomI2zlu2GVsU8o8h5g3yFNfF8OCLh1WzYhqqJSWq4HXXUlRNgfJ",
	"XIaIBaH2KNemSA28JDCIVbIperbu9jP0Jix3xMNZEEB7AJphKht2oFtWjr/n22KC7siHLP2NDxqhxkfD",
	"xgmogiuWyJ6ZOLIDNPyF7mnEwgYD19RnV/iCHlobSHuNrO2JfQceGAiNxKvHQKuQKjKHSGQqIY+DHn5r",
	"odmKJCDzgGmUhAQWkEiiRFv4yBBeQ4WyI6tp2EM5zaWwhozivn4piVCD4xusWWeYxjqWqVSfVbuMV02v",
	"6tTf2AD3/Dy5dMQ95/Pp4tMsuv/0PFgnx6s0Xvih/4yraHEfzNYnvwcP95tPsFkcj7z+tIn2qP1K2kFf",
	"DQFXHsDnPC+hp/d7bFXuh5kPA1Kgyn3yvIieftnaFH0/O9Yoyxl1llcwsbTVBeyltOnYEQFi+f1tboCY",
	"sF3yti0euR7e0RlRWW5rozVKKQHdwZhF0yLO4+z6l9bQuCdT8h15UmQokL+Zuzt5DckbwVV4UItyfvqU",
	"/AeZzsj300612T+mVPQOOgc1pQ6KqBrcirvH5/Cg8ICn565St8uSzLRtmp2ROLUzTh4PNJAdAtGlAkMg",
	"CcQ23TCzfVH10RwMecK4HfNp26B4N35FfSUSJ8/KIobboZXyhFAb6k1Mux2ztHTPXaQgG+xtZ1i+3tog",
	"yA65O0JTML5xha21pa1NwEpWVAPye8DjhL6IF1igG5K17tuIyvLXCNEo65jaojT1iIOoTZrU5tLk6Xam",
	"bHJORQfUxPPXdl3qjht6zYw5wm2yvQmyklL4LMtFpNzmxo3JOw7llsTcHidLCIqoH1f63lBTvi2sXdPW",
	"ESYazI6Ppy+ak7IfSgn61T28fku9fNgEi8M0gclqebzQv6UPh9v4BZ+czE6eRXcJyOOj3zefwiP/+eTo",
	"OfwefjqezI7ut067iosAzooAgCpqmEmdH4G5TYxQJNPJbDuJD9OVWk7W6zSAbTiZJLMF//3ZZHP/LHi+",
	"fRans6XTlwd/NTs+uZs2B88//adQpiaCZTKVsfbydXUyM6qhoadmyDcOfioVK3D7d05t+uWx7uM/N9h9",
	"3Lr7dezkWQDsNSQ+cKX/+QuDKDgllPOUag9GpQknIBWLUUeYUw/0zDYAd9LGe3pE0Tv9BRdGawQ8QtH+",
	"D7pq1ByjjL9F2Py45ZTLmaN8GwIWFILML9MQPALj5ZicrSmL6DwCT++ESwickNNOh7I4A0GHpRdPUzJg",
	"dtQ9eeOYmbaY57ahqxw2LsbsKDT6OzAOGxIpAC6Mt4x/jwfnLhVYDQv9LzitlOmctub51s5cBol3ueaI",
	"W8grBVO+kqhLGgOhkhRtigO8Az1Tt7eQblEdtNhdGVAlilYDwd4+WJHthWrO/MjBPqO0Hae6hxgA8y+h",
	"h1bIYZ1sMPtbLgBDp30FMGDJFNUNJTlA0R68VnYAiYbxEPgDYd5EbNWLdZbKGrHVYLjaZwx6sG0ebw8F",
	"P0A6NHlz0diZ1i2HiRlwc3w4EFbnnYVHMpi5OJLviIQoys/ym0DdZkVFhaG6HoJhx6acAdxJFDTqw3Si",
	"3qkGL4oGO0gnaqgllbjzIP0qsTTCEJhaEm4feqjRuNQZCprx5R7AvyOVC6KBgzntrFzebPHGAZA2dLXq",
	"wrsmGLau0gHaQqeo4i7asj7/TCur656yd012pH+L+ZabYCtrnbXacMWeV1ZwZSOgwv4VzVU1E6s2T0Pg",
	"m+tbs2fqslzX6M2Nqb79NfbbslVa331qEthcooYctRmy5TJzXxB8UWfr/Kjno739P3Xd8O4fgbHriO37",
	"zrd0ov/zE8ZLVk7rcG6VVO75/6tv/s1c87Yd5OvvHYXFuA/YdrEp+2U7Q65o1jbQe2Jd7usEnhtPO4Mu",
	"erYC3hPpUte224XOZNqOJbS5nV/vIOif2UL50k2qHmG0X8jWLiO1rXqfbVQ5vmo1kFJrEDXEospxJSVR",
	"NYvqoloRgUJhVfeZMsOWjZivFfjlMmVMTdiGAZPd8FQjhSdtirK3WT3AzdRdzEdxYVaLWWigyKt3XgPK",
	"U2NTxIRK4SxJpX/P45BsaEXvJUcJeA7bNaGi5q0j75hFW3NZ/5O0gSu19wN0i+xGPdVtyJOUs/sUsgsm",
	"kGaD12348qk7LItF29uHNui1CrPNenKCq7AHzzemTQXTDlguZDIQfeiYCActZufp1mVYmLIb6Rav9AcD",
	"u4EoaoWmnZXB4FosqNsi3GpOI8r97lp42ltpRceaeIPQMX5QFygIMMQBUfuZRik8bQXWjtMgXFq4x0Cw",
	"fI2eo2b0D+lkMjvJ69i3wWzbWgzQ2sSyAvm4A0g7VkAk4z6ao4lqHeffc5exbaxM7fYvTSOnvqYHCpl1",
	"il9ZjiqULVapSpwqK1T4tCFQTaGoMWWTHm61Vy321lB+l7CgaaQypzqt5dS/5NoB6NfDTTBObEplvffP",
	"OylB2TnlpNx372wTJwJD79QaGDQv1upN2mradvrH6CNadxZros+3KGhjcs6W1ogN6dpE2qLlt7H1wyWR",
	"sZZObPNnJ2j8GZkSg7xAP3OvDanQsMdTDG3pW7t2Tyew7ks0YZe9h6TFexjiE7omYQZQogfwPnOogB42",
	"h/wUoD0+unSV+h3p9Wf7nM5S6SvN5BiPVSrWNBDnHupUL2u/q95UPKkN8nTPlJRON6d6vtLtSDn2KGtQ",
	"lxVNmyYcUBjdZlV35QmZAHtzppWFvNmrw2q5rZasrj29EZXQoEWPWvzOqWSSrDDt1iOT7zEj3CObEBIg",
	"+McP08nkvz31CMIyunaVnx86OUg3vNVz7K2maysSE5GqVZodmWZvHdmoQORo49Pt4ixVVqdMiSqCrmUv",
	"v4XgKKuUfzRvhXjtxXtqz3oADyppAc0SPVkR374gR2sQxKIbP2zhWqGHV5fdPVlAQirDMbkRMVRfUngi",
	"Uz/UzOt+aCHWXGKPjzimhhu9+ZTEdGu2ZEp+h0QQLLLbH0CEyNrZlov0GGK51q+RI+CI3NnGMShjp9Uf",
	"0/NZrG3676fjCboHh/4P+D8g0/HkqUdY/iZFKDZ6ctsYQ4GpSUcrZextqByTia23hYon2pKiuTNURstj",
	"UTbiC2W2EFQ8AEcHAgPPxYZDIkO2KrJyviDlqf3thwRisYagyPhpe/yhoNrX1IDd70V4JT6oUr46ovs1",
	"S8YXInsRiPomSz7GG7tRAGv5P/Io3bFIzAlJ42oiK8F2bcJpz65fkfsUEgaS3P747v2FifHlAaF8a+ps",
	"SRIxrn3pNaNIt3O2SP7v/5HKPv8IK5rgYY0poaFFmc5Fqow42tBrJcgcSAI0wHOf7B4Eta2N7MWzlTEa",
	"oxqrFU0kyLKgE1gDVzYZUy9uFWFt3QMW4owxTh8t1u+lmVtW3U0jEtM7kyD7fQArrSC5ymkAVG7HOZEC",
	"AZJwoUgoooD4CVMocqWpjsmtyM+pzANH2atOGidTJQQePHvGJUORRgGOti2hH7AEfBVtUTMxhX5ic6FG",
	"3mgNiTRrORtPxpPvabQK6XiGr/asgNMVG52ODvUnvUdQFSLvHqxnB6VHXp2bJEbV5y/XRPlzTSoEljgf",
	"bRqTM156G6colTrf4ltkIiGxSOADZ65HjzLgSDweaNvEgCpdnWr9axgi21zoNpNhxvUgH7gdxb0zjMl7",
	"+9IsTYCs6JLxDEM8JhELcjwZkyvz2CuCnwPBR7Yg+MCVsCuVgcNcZ63UTamUYHQ6+juos+IRK5rQGBSe",
	"Bf2jkQxjthE08M22LDRhfbZiYMv28i1h/ABlp8T2bY8s7ZvixzQ2ODGtdGiMnnIR1p4/J9bYIxuq+LKO",
	"9cMAZGdXJ7Ojk8Nnly+nz16cnByfnx0ezmbnz0+OLs9fXB1OJpPp1eXhs/Ojl5PL2exscn7y8uLlydnx",
	"+eTZ88uz86OWGagHFuyG/hnfZv5VSLGI74om+e5gif+k/HjC08pEzt+ej2/fvXl3/v305bSNrtl9zXC0",
	"3hWyQ3wRx5RIrWLN3bg5StQwZPECFHmijVWvEgrl5dubR8yrT569AahOAnvWHoxyktc+ADV8HlbcNH4R",
	"1sJxA86+FZumSlIoj9QozWTfDxmdHk/yF0awxFmzZlMHUmKxMGvjwir/uAtaXZj86lWf755NJm1mRd7u",
	"oP7GNz6+l8Yx1VZk9gI40aobP2k9Hwi/VcffbOhyCcnBuxVwvcUejif5I6+GJqV618JPY43O2KXyLoVv",
	"boeaM6pFhLUMWR1J1mZ2aQenVnkoupT4TksZ2dGv2ZzDvPytc9qdz6JqUbcvNGezyTSA2XIbc7fFdvdZ",
	"z9ob1NVJm4/klbbx8pnZe+MAViqUB39oQ/pz70RRfZmAIB5kJ0caQPFg9/gD1/uqeXSEJLASiTHYTOgK",
	"NX+AeY8Ik+RKNUw+cHuWqhugT4C1WNVGkFgEIE8/8L8R7RGR7DCX5DsjYcqG/EiiNRtaXZrgLAZ75CjH",
	"5ArPvnigrasA/Z4Ni6IPnKAVqff5YovJx8D9n2qA4wwBvSk5cKBEMr6MAMcZj28FkUATPUmp/Rct2RAY",
	"EwUetGGXH35KnL4Gn4E9JSshJdPGrKHmKTmOGfdIKNLEIwHVqhjgziN4t+GR+5QmChKPbIEmiCmeKZ6S",
	"f0zH4+lk8uuYXMKCcW165jmt+fH5mFwK/m8qq01C2KKYIJMEa8HxJYLVNvKBEqdEIIOg4ao8c5orwRc8",
	"wMlcZ+inki7BWmal1f6bCcmYTvRc5Cn57b9nH38I6NZcZuEMfphOfqs3J3NY6I1Mo9HV0fylxA/Tk8nz",
	"57Pjk4mBhRnSGSy60IunpzUEmG6nwZ08ez55bsFdGpTUBsCWhNBMpgRW8dcsRhaURZqouP2qkHLt3Rbk",
	"R0NS7wkgFQSnmiN/ayJSG9o9uQ/8utiM0Lm264ALoEGUZmXwDIGTomCPESMISAyKju0pJkZxh/CBowgV",
	"LG91GtIT97rq2vuCL9gyNZrO8ICWnWxqKNFGFKykZC8Oo9wu9Ch6TSoTf/GibVWrHUnKFYsIFxsHiN8y",
	"TrZFn/HgttyDZ0Z6YXy7zfTKK0o9trrRpKgMpT0RZDJTGlkWHDMGBe4F1mywcVHtRkO/TZ0Js1gQn0Z+",
	"GtHMuyiMtoC2mWmlklnFoNnzoFovjbyRVkx4E4uPgwLcZfeuI29kldPIG2nt5HwftI7x26aSwgsLJOGY",
	"3BiXdw653OV6rjynw4l7Qlnx9gYJO4y8l6WbMs301omTtYusMXm1IIJHW3upo51YtgbukcDcvUrzxsim",
	"gmjByi2Gshh1Won96N8giw+YQA0tq23caGkR2hGxvUzWspS1GDom20YrNJPH82Ppaemy0VN+uKHT3oHG",
	"Yx5oyeRH+o+my6Pp8mi6PJouf1nTpf7QWo/18mhDPNoQf2UbosbuLWZE/oRXm/3QCLbvNSTKRVW11soL",
	"+mqVYQp91uu5vrJltZi5KCqMjsxSyMqG2mKpjwbIowHyaIA8GiB/LQOkUeN+1/OT4sG7Mcm0bSlm0NRT",
	"1qxjZLDFMrHHK4/HKS5T6K9iCT0aQoMNobrYtVhCRZLmhS2x32YSmQD0PjMIQ0RxFbOoZM8+y4qhmFqT",
	"uM5WHk2hR1Po0RR6NIX+tU2hcsbVMCvIKt9dbaDxoxH0eB70aAZBJcGvxQK6wYyputVjAr8P/rDBjZ+H",
	"RAjRrGS59l2YVMzHvbx4Gb764kv+jIWNnmyoi/IbNH364icT3eeGXHqVmc+nnx4W4Wz5/Pj+cD1Rwf3x",
	"yYLD+uHkwX9QPg+VjP305Ch2X1IXMIffU++1bpX3d1pWzj5ckb+DU1k6OXzFaiFdRRGBstGZ5VyPSf4a",
	"Nu7EKLAyFBtOBPcBhViFkMC/Sfs2V2U1bHx88VwO/miYw4zgGZAak0pHtA3mYMYat/OLPMveE9+f7t0U",
	"r4UN8uL1it1j6Gz+Q5ab1JiT/X5pPu8+H9u/ZT7Z6JfZ0xw4n6zodvdsSGSLyb8VAZRKjNsltovgXKjs",
	"dYE9pqN7tk1Gf6suDVbO+wN5rV+DBUaOyrWnTm3wn60n5mFxncytO7v+ZUxc07s2VkanvkKRQqXSGxZd",
	"00CyL7j2q+gfPYfWGIScTpTgXF3ktgULW+Npiy2iyHgx9t1tCKTUOFuPBYMosFni6PFqQcz7fuC+SAz6",
	"gZarwnEnkfBtvsnPDJ8CDCG3K3PvWWugIGFRFIhNa7ZCXuzvX2F1cSItS4xvVxVL1LHABxHW3G7PjcHP",
	"Hvl5SqTaRoBUsS83Uv8O347RKFJlX5gdk+sIqAQS47O6mHVUJr1H/BD8uw+8xBNBOebZLKXh0b51NNj9",
	"K6ymmcmw5SRP1lM9H6wNVF7a/WyGTG+aTVxv6/a9HNlG+175MVlF1sONtta/s3lPLKsp2+Jz5R+bHlee",
	"PGfKgJkqgjKVmMoWuNyrvRekS7Rqu1S3puw0H5aRmJuKPap2Rmh24ahRhKfplFuFtodv0aFB/m4QM8Dz",
	"iZqMhvEnW3Orc75hGlOTnRhTP2TcpEBi5mOWGWHz9qqJGC0HD7rDoLSLvcdtuFW6LbliyG09aRh59umB",
	"X66O4yRQVj8ny0BIpUnLK3IiPSJF4a3aZj7l2nwWa0gSFpguMYtZ4pTSRDwwCIpSPfvwR967TRTMICXE",
	"i/GahLGpkB9z96SVQK9s0mThyKDvYKulFoZr5ll4eBqmPVWTAGzSJu3HGMvQmCgIssBzR66iLWGLEt4h",
	"lSROI8VWERCKiatuy9dO2WKYe1J7kbcOZDCVM/oUwzepHZUfWm+T04TB2lSdBKnMc2iY4JulMvuJ0B5f",
	"FNls6C6SFC+773Xbk/UeTIRivObk77NKiL2pQisLF3uUrEk810bLM8L3n7RP1TF5U3pxn4ljz8GTNuN8",
	"/vz58/8LAAD//3xmnKMgswAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
