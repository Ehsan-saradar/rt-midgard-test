// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64, Average bond of active nodes.
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64, Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64, Maxinum bond of active nodes.
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64, Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64, Median bond of active nodes.
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64, Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64, Minumum bond of active nodes.
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64, Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64, Total bond of active nodes.
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64, Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// Liquidity provider data for all the pools of a given member
	Pools []MemberPoolDetails `json:"pools"`
}

// MemberPoolDetails defines model for MemberPoolDetails.
type MemberPoolDetails struct {

	// Int64, total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// Int64, total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Int64, total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`
	BondingROI string `json:"bondingROI"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks).
	PoolActivationCountdown string  `json:"poolActivationCountdown"`
	PoolShareFactor         string  `json:"poolShareFactor"`
	StakingROI              *string `json:"stakingROI,omitempty"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64, Total Rune pooled in all pools.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64, Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NodeKey defines model for NodeKey.
type NodeKey struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	Price string `json:"price"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Enabled, Bootstrap.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Daily active users (unique addresses interacting)
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Daily transactions
	DailyTx string `json:"dailyTx"`

	// Monthly active users
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Monthly transactions
	MonthlyTx string `json:"monthlyTx"`

	// Total buying transactions
	TotalAssetBuys string `json:"totalAssetBuys"`

	// Total selling transactions
	TotalAssetSells string `json:"totalAssetSells"`

	// Total RUNE balances
	TotalDepth string `json:"totalDepth"`

	// Total staking transactions
	TotalStakeTx string `json:"totalStakeTx"`

	// Total staked (in RUNE Value).
	TotalStaked string `json:"totalStaked"`

	// Total transactions
	TotalTx string `json:"totalTx"`

	// Total unique swappers & members
	TotalUsers string `json:"totalUsers"`

	// Total (in RUNE Value) of all assets swapped since start.
	TotalVolume string `json:"totalVolume"`

	// Total withdrawing transactions
	TotalWithdrawTx string `json:"totalWithdrawTx"`
}

// TxDetails defines model for TxDetails.
type TxDetails struct {

	// Int64, Unix timestamp.
	Date   string `json:"date"`
	Events Event  `json:"events"`
	Height string `json:"height"`
	In     Tx     `json:"in"`
	Out    []Tx   `json:"out"`
	Pool   string `json:"pool"`
	Status string `json:"status"`
	Type   string `json:"type"`
}

// Volume defines model for Volume.
type Volume struct {

	// Sum of "rune_amount" of buy swap events.
	BuyVolume string `json:"buyVolume"`

	// Sum of "rune_amount" of sell swap events.
	SellVolume string `json:"sellVolume"`

	// Int64, The beginning time of bucket in unix timestamp.
	Time string `json:"time"`

	// buyVolume + sellVolume
	TotalVolume string `json:"totalVolume"`
}

// Coin defines model for coin.
type Coin struct {
	Amount string `json:"amount"`
	Asset  string `json:"asset"`
}

// Coins defines model for coins.
type Coins []Coin

// Event defines model for event.
type Event struct {
	Fee        string `json:"fee"`
	Slip       string `json:"slip"`
	StakeUnits string `json:"stakeUnits"`
}

// Option defines model for option.
type Option struct {
	Asymmetry           string `json:"asymmetry"`
	PriceTarget         string `json:"priceTarget"`
	WithdrawBasisPoints string `json:"withdrawBasisPoints"`
}

// Tx defines model for tx.
type Tx struct {
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`
	Memo    string `json:"memo"`
	Options Option `json:"options"`
	TxID    string `json:"txID"`
}

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {

	// True means healthy, connected to database.
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain.
	InSync bool `json:"inSync"`

	// Int64, the current block count.
	ScannerHeight string `json:"scannerHeight"`
}

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse []string

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodeKeyResponse defines model for NodeKeyResponse.
type NodeKeyResponse []NodeKey

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse []PoolDetail

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// TxResponse defines model for TxResponse.
type TxResponse struct {

	// Int64, count of txs matching the filters.
	Count string      `json:"count"`
	Txs   []TxDetails `json:"txs"`
}

// VolumeResponse defines model for VolumeResponse.
type VolumeResponse []Volume

// GetTotalVolumeParams defines parameters for GetTotalVolume.
type GetTotalVolumeParams struct {

	// Return volume for this single pool. Returns volume for all pools if missing
	Pool *int64 `json:"pool,omitempty"`

	// Interval of calculations
	Interval string `json:"interval"`

	// Start time of the query as unix timestamp
	From int64 `json:"from"`

	// End time of the query as unix timestamp
	To int64 `json:"to"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Interval of calculations
	Status string `json:"status"`
}

// GetTxDetailsParams defines parameters for GetTxDetails.
type GetTxDetailsParams struct {

	// Address of sender or recipient of any in/out tx in event
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx in event
	Txid *string `json:"txid,omitempty"`

	// Any asset used in event (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of event
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"a80RQp2Wwba7tjiZomvbqifG5Msj3AJxY3AzkfZI4bFWPmSY4xSkLt/+6SfMUWQGpkSoqmqT2FYQcsRX",
	"DhXoEVmjlAh13uSRF4F2qmASUKwE4lLOctXL+GxwERCVXZVZjpLABrgSsCcP08JR2g9xEuYJdtWZD6WT",
	"ZVCN+ZLnUCXDZd9nqc5+Y5Zznf4qOC8AT65SCybBc4651JPKPWDuzbJbLq0K0iJVVBZrYg0WjWyxgwUV",
	"V3vJP0KKVzT6ExTpWfOfoefrMV7ZWClse6Up391moPVN13gYEXXMbmAj6LjJuG3TOYu3YL2R1+6XL+w7",
	"R4Wg5o56m9tiz7vO6MkfltjX8SybJSVJhCShQBlwE3XMAn11paYmjR7e7dBiIOB8Ma0iD+jaAv2Krk6/",
	"7dbxfPPj2fO77UxGz2fnawrb3fku3MmQxlKkYX7+PnXmqm7b0lpLmN0m23Tir8frrPllRF1z9qnZVnKf",
	"JFgN0nKx4PALsrai7lGMfX5pHh/OXPNbgrZBOgrs+rXlSY9Wj+OIRVCZqnmvNze5PYKfxrcHHn6a+B1P",
	"xarawQGlurKPkQDphvF+Z7qzt3qvFx14IRaNnuHrEMxkSY9h7WhJ3d650Bm6r6F1nN/UP1hoK8LMJ40w",
	"ajo4+UP3F4YjXVR6nRtrXaAIMhkLOxWc6FGUSWsmaHH36xR1aWRIITp2KmlPa2Fs+Xk5fby9uV3+cHp1",
	"2hGpbLfkL45Tta9X2uJuGKn7fsp8XmLFr6zoSLe231xoCI0EUte4SX0K4XUMPY47yu3rn520mf+7oc4g",
	"KLg1FdLUfavQy3Scp9hUvykOY0JNia0ra1dp2fqwXth5+TQvjCrjjsbbFkKJ1lV0D7U3iorONIJ6xNGZ",
	"Vtm+gZ0t+AqXYvAw4G4Lc72b9i6NgCPGEYeQZATM6B3TPSL0RPc/dqrUMs3C4z/S88XVMsvo9tZ2MXM5",
	"kr75p/P5+/N3Hy6vTj/8dH5+tly8ezefL388f3+5/OnTu9lsdvrp8t2H5fur2eV8vpgtz68+Xp0vzpaz",
	"Dz9eLpbvuxL5HYkOo3hB93Y3IhdmRG80+ebjz4vrz9OHX2+Wt7+8HQ58TenZyHcAJbcUlKZTxgGFLE3V",
	"faoMRW+WmMxSwdCG0RJoz6TFzFc6RipeIdoJynjSM7wh1HRzEpIS2SEU9+yASsvu4gcXZ7NiWz+4mI0p",
	"CStEsfXaqMNHVfHwELL6KDnqDqt8olePX78QIWsXiDKSTeNaKy61+k3z+vr6+q8AAAD//5zxp0jhPgAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
