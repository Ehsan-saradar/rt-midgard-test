// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {

	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still
	// pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still
// pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity
	// deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// Balance defines model for Balance.
type Balance struct {
	Coins Coins `json:"coins"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Represents a digital currency amount
type Coin struct {

	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, The liquidity unit value index. Sqrt(assetDepth * runeDepth)/liquidity units
	Luvi string `json:"luvi"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval at time endTime
	EndAssetDepth string `json:"endAssetDepth"`

	// Int64, Liquidity Units in the pool at the end of the interval at time endTime
	EndLPUnits string `json:"endLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval at time endTime
	EndRuneDepth string `json:"endRuneDepth"`

	// Int64, Synth Units in the pool at the end of the interval at time endTime
	EndSynthUnits string `json:"endSynthUnits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, The liquidity unit value index increase between the first and last depth item
	LuviIncrease string `json:"luviIncrease"`

	// Float, The impermanent loss between the first and last depth item
	PriceShiftLoss string `json:"priceShiftLoss"`

	// Int64(e8), the amount of Asset in the pool at the start of the interval at time
	// startTime
	StartAssetDepth string `json:"startAssetDepth"`

	// Int64, Liquidity Units in the pool at the start of the interval at time startTime
	StartLPUnits string `json:"startLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the start of the interval at time startTime
	StartRuneDepth string `json:"startRuneDepth"`

	// Int64, Synth Units in the pool at the start of the interval at time startTime
	StartSynthUnits string `json:"startSynthUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of
	// liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {

	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync         bool     `json:"inSync"`
	LastAggregated HeightTS `json:"lastAggregated"`
	LastCommitted  HeightTS `json:"lastCommitted"`
	LastFetched    HeightTS `json:"lastFetched"`
	LastThorNode   HeightTS `json:"lastThorNode"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// HeightTS defines model for HeightTS.
type HeightTS struct {

	// Block height
	Height int `json:"height"`

	// Block timestamp (seconds since epoch)
	Timestamp int `json:"timestamp"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string  `json:"address"`
	Chain   string  `json:"chain"`
	GasRate *string `json:"gas_rate,omitempty"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                    int64  `json:"AsgardSize"`
	BadValidatorRate              int64  `json:"BadValidatorRate"`
	BadValidatorRedline           int    `json:"BadValidatorRedline"`
	BlocksPerYear                 int64  `json:"BlocksPerYear"`
	ChurnInterval                 int64  `json:"ChurnInterval"`
	ChurnRetryInterval            int64  `json:"ChurnRetryInterval"`
	DesiredValidatorSet           int64  `json:"DesiredValidatorSet"`
	DoubleSignMaxAge              int64  `json:"DoubleSignMaxAge"`
	EmissionCurve                 int64  `json:"EmissionCurve"`
	FailKeygenSlashPoints         int64  `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints        int64  `json:"FailKeysignSlashPoints"`
	FullImpLossProtectionBlocks   int64  `json:"FullImpLossProtectionBlocks"`
	FundMigrationInterval         int64  `json:"FundMigrationInterval"`
	IncentiveCurve                int64  `json:"IncentiveCurve"`
	JailTimeKeygen                int64  `json:"JailTimeKeygen"`
	JailTimeKeysign               int64  `json:"JailTimeKeysign"`
	LackOfObservationPenalty      int64  `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks         int64  `json:"LiquidityLockUpBlocks"`
	MaxAvailablePools             int64  `json:"MaxAvailablePools"`
	MaxSwapsPerBlock              int64  `json:"MaxSwapsPerBlock"`
	MinRunePoolDepth              int64  `json:"MinRunePoolDepth"`
	MinSlashPointsForBadValidator int64  `json:"MinSlashPointsForBadValidator"`
	MinSwapsPerBlock              int64  `json:"MinSwapsPerBlock"`
	MinimumBondInRune             int64  `json:"MinimumBondInRune"`
	MinimumNodesForBFT            int64  `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil      int64  `json:"MinimumNodesForYggdrasil"`
	NativeTransactionFee          int64  `json:"NativeTransactionFee"`
	NewPoolCycle                  *int64 `json:"NewPoolCycle,omitempty"`
	ObservationDelayFlexibility   int64  `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints            int64  `json:"ObserveSlashPoints"`
	OldValidatorRate              int64  `json:"OldValidatorRate"`
	OutboundTransactionFee        int64  `json:"OutboundTransactionFee"`
	PoolCycle                     int64  `json:"PoolCycle"`
	SigningTransactionPeriod      int64  `json:"SigningTransactionPeriod"`
	VirtualMultSynths             int64  `json:"VirtualMultSynths"`
	YggFundLimit                  int64  `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock []LastblockItem

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn int64  `json:"last_observed_in"`
	LastSignedOut  int64  `json:"last_signed_out"`
	Thorchain      int64  `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {

	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and
	// nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each
// outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// ObservedChain defines model for ObservedChain.
type ObservedChain struct {
	Chain  string `json:"chain"`
	Height int    `json:"height"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {

	// Float, Also called APR. Annual return estimated from last 30 days income
	// (linearly, not compounded). E.g. 0.1 means 10% yearly return.
	// Due to Impermantent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	// It includes synth mint or burn.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Float, Also called APR. Estimated annual return (linearly, not compounded).
	// Always estimated from last 30 days (doesn't take period into account).
	// E.g. 0.1 means 10% yearly return.
	// Due to Impermantent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// PreflightStatus defines model for PreflightStatus.
type PreflightStatus struct {
	Code   int    `json:"code"`
	Reason string `json:"reason"`
	Status string `json:"status"`
}

// ProxiedNode defines model for ProxiedNode.
type ProxiedNode struct {
	ActiveBlockHeight int    `json:"active_block_height"`
	Bond              string `json:"bond"`
	BondAddress       string `json:"bond_address"`
	CurrentAward      string `json:"current_award"`
	ForcedToLeave     bool   `json:"forced_to_leave"`
	IpAddress         string `json:"ip_address"`
	Jail              struct {
		NodeAddress *string `json:"node_address,omitempty"`
	} `json:"jail"`
	LeaveHeight     int             `json:"leave_height"`
	NodeAddress     string          `json:"node_address"`
	ObserveChains   []ObservedChain `json:"observe_chains"`
	PreflightStatus PreflightStatus `json:"preflight_status"`
	PubKeySet       struct {
		Ed25519   string `json:"ed25519"`
		Secp256k1 string `json:"secp256k1"`
	} `json:"pub_key_set"`
	RequestedToLeave    bool     `json:"requested_to_leave"`
	SignerMembership    []string `json:"signer_membership"`
	SlashPoints         int      `json:"slash_points"`
	Status              string   `json:"status"`
	StatusSince         int      `json:"status_since"`
	ValidatorConsPubKey string   `json:"validator_cons_pub_key"`
	Version             string   `json:"version"`
}

// ProxiedNodes defines model for ProxiedNodes.
type ProxiedNodes []ProxiedNode

// Queue defines model for Queue.
type Queue struct {
	Internal int `json:"internal"`
	Outbound int `json:"outbound"`
	Swap     int `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Deprecated, it's always 0.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Deprecated, it's always 0.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps (including synths) since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps (including synths) in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps (including synths) in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps (including synths) denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Synth to Rune since beginning.
	SynthBurnCount string `json:"synthBurnCount"`

	// Int64, number of swaps from Rune to Synth since beginning.
	SynthMintCount string `json:"synthMintCount"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {

	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {

	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of
	// the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity
	// pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at
	// the end of the interval.
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the
	// native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means
	// totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership
	// withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// BalanceResponse defines model for BalanceResponse.
type BalanceResponse Balance

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ProxiedNodesResponse defines model for ProxiedNodesResponse.
type ProxiedNodesResponse ProxiedNodes

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// Affiliate address of the action (swap)
	Affiliate *string `json:"affiliate,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {

	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolParams defines parameters for GetPool.
type GetPoolParams struct {

	// Specifies the base interval from which APY is extrapolated.
	// Default is 30d.
	Period *GetPoolParamsPeriod `json:"period,omitempty"`
}

// GetPoolParamsPeriod defines parameters for GetPool.
type GetPoolParamsPeriod string

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`

	// Specifies the base interval from which APY is extrapolated.
	// Default is 30d.
	Period *GetPoolsParamsPeriod `json:"period,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// GetPoolsParamsPeriod defines parameters for GetPools.
type GetPoolsParamsPeriod string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
