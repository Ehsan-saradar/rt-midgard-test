// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Action defines model for Action.
type Action struct {

	// Int64, Unix timestamp for when the action was registered
	Date string `json:"date"`

	// Int64, block height at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status string `json:"status"`

	// Type of action
	Type string `json:"type"`
}

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64, Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64, Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64, Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64, Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64, Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64, Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64, Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64, Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64, Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64, Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Coin defines model for Coin.
type Coin struct {

	// Int64 (10^8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64, Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64, Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64, System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64, Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistoryItemPool defines model for EarningsHistoryItemPool.
type EarningsHistoryItemPool struct {

	// Int64, Share of earnings sent to the pool during the time interval
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses struct {
	Current []InboundAddressesItem `json:"current"`
}

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string `json:"address"`
	Chain   string `json:"chain"`

	// indicate whether this chain has halted
	Halted bool   `json:"halted"`
	PubKey string `json:"pub_key"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                  int64 `json:"AsgardSize"`
	BadValidatorRate            int64 `json:"BadValidatorRate"`
	BlocksPerYear               int64 `json:"BlocksPerYear"`
	ChurnInterval               int64 `json:"ChurnInterval"`
	ChurnRetryInterval          int64 `json:"ChurnRetryInterval"`
	CliTxCost                   int64 `json:"CliTxCost"`
	DesiredValidatorSet         int64 `json:"DesiredValidatorSet"`
	DoubleSignMaxAge            int64 `json:"DoubleSignMaxAge"`
	EmissionCurve               int64 `json:"EmissionCurve"`
	FailKeygenSlashPoints       int64 `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints      int64 `json:"FailKeysignSlashPoints"`
	FundMigrationInterval       int64 `json:"FundMigrationInterval"`
	JailTimeKeygen              int64 `json:"JailTimeKeygen"`
	JailTimeKeysign             int64 `json:"JailTimeKeysign"`
	LackOfObservationPenalty    int64 `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks       int64 `json:"LiquidityLockUpBlocks"`
	MinimumBondInRune           int64 `json:"MinimumBondInRune"`
	MinimumNodesForBFT          int64 `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil    int64 `json:"MinimumNodesForYggdrasil"`
	NativeChainGasFee           int64 `json:"NativeChainGasFee"`
	NewPoolCycle                int64 `json:"NewPoolCycle"`
	ObservationDelayFlexibility int64 `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints          int64 `json:"ObserveSlashPoints"`
	OldValidatorRate            int64 `json:"OldValidatorRate"`
	OutboundTransactionFee      int64 `json:"OutboundTransactionFee"`
	SigningTransactionPeriod    int64 `json:"SigningTransactionPeriod"`
	YggFundLimit                int64 `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock struct {
	Current []LastblockItem `json:"current"`
}

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn string `json:"last_observed_in"`
	LastSignedOut  string `json:"last_signed_out"`
	Thorchain      string `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64 (10^8), total deposits (liquidity additions) in RUNE during the time interval. Accounts for both asset (using the price at deposit time) and RUNE deposited into pools
	Deposits string `json:"deposits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64 (10^8), total withdrawals in RUNE during the time interval. Accounts for both asset (using the price at withdrawal time) and RUNE withdrawn from pools
	Withdrawals string `json:"withdrawals"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// Liquidity provider data for all the pools of a given member
	Pools []MemberPoolDetails `json:"pools"`
}

// MemberPoolDetails defines model for MemberPoolDetails.
type MemberPoolDetails struct {

	// Int64, total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// Int64, total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Int64, total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`
	PoolShareFactor         string `json:"poolShareFactor"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64, Total Rune pooled in all pools
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64, Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NetworkFees defines model for NetworkFees.
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolLegacyDetail defines model for PoolLegacyDetail.
type PoolLegacyDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Int64, same as history/swaps:toAssetCount
	BuyAssetCount string `json:"buyAssetCount"`

	// Float, same as history/swaps:toRuneVolume/toRuneCount
	BuyTxAverage string `json:"buyTxAverage"`

	// Int64, same as history/swaps:toAssetVolume
	BuyVolume string `json:"buyVolume"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, same as assetDepth + runeDepth
	PoolDepth string `json:"poolDepth"`

	// Float, same as history/swaps:totalFees/totalCount
	PoolFeeAverage string `json:"poolFeeAverage"`

	// Int64, same as history/swaps:totalFees
	PoolFeesTotal string `json:"poolFeesTotal"`

	// Float, same as history/swaps:averageSlip
	PoolSlipAverage string `json:"poolSlipAverage"`

	// Float, same as history/swaps:totalVolume/totalCount
	PoolTxAverage string `json:"poolTxAverage"`

	// Int64, same as buyVolume + sellVolume
	PoolVolume string `json:"poolVolume"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// Int64, same as history/swaps:toRuneCount
	SellAssetCount string `json:"sellAssetCount"`

	// Float, same as history/swaps:toAssetVolume/toAssetCount
	SellTxAverage string `json:"sellTxAverage"`

	// Int64, same as history/swaps:toRuneVolume
	SellVolume string `json:"sellVolume"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64, Liquidity Units in the pool
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune
	Volume24h string `json:"volume24h"`
}

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Int64, same as history/swaps:toAssetCount
	BuyAssetCount string `json:"buyAssetCount"`

	// Float, same as history/swaps:toRuneVolume/toRuneCount
	BuyTxAverage string `json:"buyTxAverage"`

	// Int64, same as history/swaps:toAssetVolume
	BuyVolume string `json:"buyVolume"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, same as assetDepth + runeDepth
	PoolDepth string `json:"poolDepth"`

	// Float, same as history/swaps:totalFees/totalCount
	PoolFeeAverage string `json:"poolFeeAverage"`

	// Int64, same as history/swaps:totalFees
	PoolFeesTotal string `json:"poolFeesTotal"`

	// Float, same as history/swaps:averageSlip
	PoolSlipAverage string `json:"poolSlipAverage"`

	// Float, same as history/swaps:totalVolume/totalCount
	PoolTxAverage string `json:"poolTxAverage"`

	// Int64, same as buyVolume + sellVolume
	PoolVolume string `json:"poolVolume"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// Int64, same as history/swaps:toRuneCount
	SellAssetCount string `json:"sellAssetCount"`

	// Float, same as history/swaps:toAssetVolume/toAssetCount
	SellTxAverage string `json:"sellTxAverage"`

	// Int64, same as history/swaps:toRuneVolume
	SellVolume string `json:"sellVolume"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64, Liquidity Units in the pool
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune
	Volume24h string `json:"volume24h"`
}

// Queue defines model for Queue.
type Queue struct {
	Outbound string `json:"outbound"`
	Swap     string `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Daily active users (unique addresses interacting)
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Daily transactions
	DailyTx string `json:"dailyTx"`

	// Monthly active users
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Monthly transactions
	MonthlyTx string `json:"monthlyTx"`

	// Total buying transactions
	TotalAssetBuys string `json:"totalAssetBuys"`

	// Total selling transactions
	TotalAssetSells string `json:"totalAssetSells"`

	// Total RUNE balances
	TotalDepth string `json:"totalDepth"`

	// Total staking transactions
	TotalStakeTx string `json:"totalStakeTx"`

	// Total staked (in RUNE Value)
	TotalStaked string `json:"totalStaked"`

	// Total transactions
	TotalTx string `json:"totalTx"`

	// Total unique swappers & members
	TotalUsers string `json:"totalUsers"`

	// Total (in RUNE Value) of all assets swapped since start
	TotalVolume string `json:"totalVolume"`

	// Total withdrawing transactions
	TotalWithdrawTx string `json:"totalWithdrawTx"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float, the average slip by swap. Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64, volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64, volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64, the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64, toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Int64 (10^8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), trade slip percentage
	TradeSlip string `json:"tradeSlip"`

	// Int64 (10^8), minimum output amount specified for the swap
	TradeTarget string `json:"tradeTarget"`
}

// Transaction defines model for Transaction.
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction memo
	Memo string `json:"memo"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolLegacyResponse defines model for PoolLegacyResponse.
type PoolLegacyResponse PoolLegacyDetail

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Address of sender or recipient of any in/out transaction related to the action
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action (swap, addLiquidity, withdraw, donate, refund)
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *string `json:"status,omitempty"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"7jNx7Dl40macz58/f/6PAAAA//9ZqgxHi7AAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
