// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64, Average bond of active nodes.
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64, Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64, Maxinum bond of active nodes.
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64, Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64, Median bond of active nodes.
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64, Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64, Minumum bond of active nodes.
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64, Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64, Total bond of active nodes.
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64, Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64, Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64, Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64, System income generated during the time interval. It is the sum of liquidity fees and block rewards.
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64, Total liquidity fees, converted to RUNE, collected during the time interval.
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistoryItemPool defines model for EarningsHistoryItemPool.
type EarningsHistoryItemPool struct {

	// Int64, Share of earnings sent to the pool during the time interval
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses struct {
	Current []InboundAddressesItem `json:"current"`
}

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string `json:"address"`
	Chain   string `json:"chain"`

	// indicate whether this chain has halted
	Halted bool   `json:"halted"`
	PubKey string `json:"pub_key"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                  int64 `json:"AsgardSize"`
	BadValidatorRate            int64 `json:"BadValidatorRate"`
	BlocksPerYear               int64 `json:"BlocksPerYear"`
	ChurnInterval               int64 `json:"ChurnInterval"`
	ChurnRetryInterval          int64 `json:"ChurnRetryInterval"`
	CliTxCost                   int64 `json:"CliTxCost"`
	DesiredValidatorSet         int64 `json:"DesiredValidatorSet"`
	DoubleSignMaxAge            int64 `json:"DoubleSignMaxAge"`
	EmissionCurve               int64 `json:"EmissionCurve"`
	FailKeygenSlashPoints       int64 `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints      int64 `json:"FailKeysignSlashPoints"`
	FundMigrationInterval       int64 `json:"FundMigrationInterval"`
	JailTimeKeygen              int64 `json:"JailTimeKeygen"`
	JailTimeKeysign             int64 `json:"JailTimeKeysign"`
	LackOfObservationPenalty    int64 `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks       int64 `json:"LiquidityLockUpBlocks"`
	MinimumBondInRune           int64 `json:"MinimumBondInRune"`
	MinimumNodesForBFT          int64 `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil    int64 `json:"MinimumNodesForYggdrasil"`
	NativeChainGasFee           int64 `json:"NativeChainGasFee"`
	NewPoolCycle                int64 `json:"NewPoolCycle"`
	ObservationDelayFlexibility int64 `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints          int64 `json:"ObserveSlashPoints"`
	OldValidatorRate            int64 `json:"OldValidatorRate"`
	OutboundTransactionFee      int64 `json:"OutboundTransactionFee"`
	SigningTransactionPeriod    int64 `json:"SigningTransactionPeriod"`
	YggFundLimit                int64 `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock struct {
	Current []LastblockItem `json:"current"`
}

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn string `json:"last_observed_in"`
	LastSignedOut  string `json:"last_signed_out"`
	Thorchain      string `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64, total deposits (liquidity additions) during the time interval
	Deposits string `json:"deposits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, total withdrawals during the time interval
	Withdrawals string `json:"withdrawals"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// Liquidity provider data for all the pools of a given member
	Pools []MemberPoolDetails `json:"pools"`
}

// MemberPoolDetails defines model for MemberPoolDetails.
type MemberPoolDetails struct {

	// Int64, total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// Int64, total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Int64, total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`
	BondingROI string `json:"bondingROI"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks).
	PoolActivationCountdown string  `json:"poolActivationCountdown"`
	PoolShareFactor         string  `json:"poolShareFactor"`
	StakingROI              *string `json:"stakingROI,omitempty"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64, Total Rune pooled in all pools.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64, Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NodeKey defines model for NodeKey.
type NodeKey struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// NodeKeys defines model for NodeKeys.
type NodeKeys []NodeKey

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// Queue defines model for Queue.
type Queue struct {
	Outbound string `json:"outbound"`
	Swap     string `json:"swap"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Daily active users (unique addresses interacting)
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Daily transactions
	DailyTx string `json:"dailyTx"`

	// Monthly active users
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Monthly transactions
	MonthlyTx string `json:"monthlyTx"`

	// Total buying transactions
	TotalAssetBuys string `json:"totalAssetBuys"`

	// Total selling transactions
	TotalAssetSells string `json:"totalAssetSells"`

	// Total RUNE balances
	TotalDepth string `json:"totalDepth"`

	// Total staking transactions
	TotalStakeTx string `json:"totalStakeTx"`

	// Total staked (in RUNE Value).
	TotalStaked string `json:"totalStaked"`

	// Total transactions
	TotalTx string `json:"totalTx"`

	// Total unique swappers & members
	TotalUsers string `json:"totalUsers"`

	// Total (in RUNE Value) of all assets swapped since start.
	TotalVolume string `json:"totalVolume"`

	// Total withdrawing transactions
	TotalWithdrawTx string `json:"totalWithdrawTx"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Int64, the average slip by swap. Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64, volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64, volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64, the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64, toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// TxDetails defines model for TxDetails.
type TxDetails struct {

	// Int64, Unix timestamp.
	Date   string `json:"date"`
	Events Event  `json:"events"`
	Height string `json:"height"`
	In     Tx     `json:"in"`
	Out    []Tx   `json:"out"`
	Pool   string `json:"pool"`
	Status string `json:"status"`
	Type   string `json:"type"`
}

// Coin defines model for coin.
type Coin struct {
	Amount string `json:"amount"`
	Asset  string `json:"asset"`
}

// Coins defines model for coins.
type Coins []Coin

// Event defines model for event.
type Event struct {
	Fee        string `json:"fee"`
	Slip       string `json:"slip"`
	StakeUnits string `json:"stakeUnits"`
}

// Option defines model for option.
type Option struct {
	Asymmetry           string `json:"asymmetry"`
	PriceTarget         string `json:"priceTarget"`
	WithdrawBasisPoints string `json:"withdrawBasisPoints"`
}

// Tx defines model for tx.
type Tx struct {
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`
	Memo    string `json:"memo"`
	Options Option `json:"options"`
	TxID    string `json:"txID"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodeKeyResponse defines model for NodeKeyResponse.
type NodeKeyResponse NodeKeys

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// TxResponse defines model for TxResponse.
type TxResponse struct {

	// Int64, count of txs matching the filters.
	Count string      `json:"count"`
	Txs   []TxDetails `json:"txs"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval string `json:"interval"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval string `json:"interval"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval string `json:"interval"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval string `json:"interval"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status.
	Status *string `json:"status,omitempty"`
}

// GetTxDetailsParams defines parameters for GetTxDetails.
type GetTxDetailsParams struct {

	// Address of sender or recipient of any in/out tx in event
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx in event
	Txid *string `json:"txid,omitempty"`

	// Any asset used in event (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of event
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
