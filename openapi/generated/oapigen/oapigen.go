// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Action defines model for Action.
type Action struct {

	// Int64, Unix timestamp for when the action was registered
	Date string `json:"date"`

	// Int64, block height at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status string `json:"status"`

	// Type of action
	Type string `json:"type"`
}

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64, Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64, Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64, Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64, Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64, Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64, Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64, Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64, Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64, Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64, Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Coin defines model for Coin.
type Coin struct {

	// Int64 (10^8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64, the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64, Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64, Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64, System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64, Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistoryItemPool defines model for EarningsHistoryItemPool.
type EarningsHistoryItemPool struct {

	// Int64, Share of earnings sent to the pool during the time interval
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses struct {
	Current []InboundAddressesItem `json:"current"`
}

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string `json:"address"`
	Chain   string `json:"chain"`

	// indicate whether this chain has halted
	Halted bool   `json:"halted"`
	PubKey string `json:"pub_key"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                  int64 `json:"AsgardSize"`
	BadValidatorRate            int64 `json:"BadValidatorRate"`
	BlocksPerYear               int64 `json:"BlocksPerYear"`
	ChurnInterval               int64 `json:"ChurnInterval"`
	ChurnRetryInterval          int64 `json:"ChurnRetryInterval"`
	CliTxCost                   int64 `json:"CliTxCost"`
	DesiredValidatorSet         int64 `json:"DesiredValidatorSet"`
	DoubleSignMaxAge            int64 `json:"DoubleSignMaxAge"`
	EmissionCurve               int64 `json:"EmissionCurve"`
	FailKeygenSlashPoints       int64 `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints      int64 `json:"FailKeysignSlashPoints"`
	FundMigrationInterval       int64 `json:"FundMigrationInterval"`
	JailTimeKeygen              int64 `json:"JailTimeKeygen"`
	JailTimeKeysign             int64 `json:"JailTimeKeysign"`
	LackOfObservationPenalty    int64 `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks       int64 `json:"LiquidityLockUpBlocks"`
	MinimumBondInRune           int64 `json:"MinimumBondInRune"`
	MinimumNodesForBFT          int64 `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil    int64 `json:"MinimumNodesForYggdrasil"`
	NativeChainGasFee           int64 `json:"NativeChainGasFee"`
	NewPoolCycle                int64 `json:"NewPoolCycle"`
	ObservationDelayFlexibility int64 `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints          int64 `json:"ObserveSlashPoints"`
	OldValidatorRate            int64 `json:"OldValidatorRate"`
	OutboundTransactionFee      int64 `json:"OutboundTransactionFee"`
	SigningTransactionPeriod    int64 `json:"SigningTransactionPeriod"`
	YggFundLimit                int64 `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock struct {
	Current []LastblockItem `json:"current"`
}

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn string `json:"last_observed_in"`
	LastSignedOut  string `json:"last_signed_out"`
	Thorchain      string `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64 (10^8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64 (10^8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64 (10^8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64 (10^8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64 (10^8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64 (10^8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64, total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64, total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64, total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`
	PoolShareFactor         string `json:"poolShareFactor"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64, Total Rune pooled in all pools
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64, Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NetworkFees defines model for NetworkFees.
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolLegacyDetail defines model for PoolLegacyDetail.
type PoolLegacyDetail struct {
	Asset string `json:"asset"`

	// same as assetDepth from pool/stats
	AssetDepth string `json:"assetDepth"`

	// same as addAssetLiquidityVolume from pool/stats
	AssetStakedTotal string `json:"assetStakedTotal"`

	// same as toAssetCount from pool/stats
	BuyAssetCount string `json:"buyAssetCount"`

	// same as toAssetFees / toAssetCount from pool/stats
	BuyFeeAverage string `json:"buyFeeAverage"`

	// same as toAssetFees from pool/stats
	BuyFeesTotal string `json:"buyFeesTotal"`

	// same as toAssetAverageSlip from pool/stats
	BuySlipAverage string `json:"buySlipAverage"`

	// same as toAssetVolume / toAssetCount from pool/stats
	BuyTxAverage string `json:"buyTxAverage"`

	// same as toAssetVolume from pool/stats
	BuyVolume string `json:"buyVolume"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// same as 2*runeDepth from pool/stats
	PoolDepth string `json:"poolDepth"`

	// same as totalFees / swapCount from pool/stats
	PoolFeeAverage string `json:"poolFeeAverage"`

	// same as totalFees from pool/stats
	PoolFeesTotal string `json:"poolFeesTotal"`

	// same as averageSlip from pool/stats
	PoolSlipAverage string `json:"poolSlipAverage"`

	// same as addLiquidityVolume from pool/stats
	PoolStakedTotal string `json:"poolStakedTotal"`

	// same as swapVolume / swapCount from pool/stats
	PoolTxAverage string `json:"poolTxAverage"`

	// same as units from pool/stats
	PoolUnits string `json:"poolUnits"`

	// Int64, same as buyVolume + sellVolume
	PoolVolume string `json:"poolVolume"`

	// same as assetPrice from pool/stats
	Price string `json:"price"`

	// same as runeDepth from pool/stats
	RuneDepth string `json:"runeDepth"`

	// same as addRuneLiquidityVolume from pool/stats
	RuneStakedTotal string `json:"runeStakedTotal"`

	// same as toRuneCount from pool/stats
	SellAssetCount string `json:"sellAssetCount"`

	// same as toRuneFees / toRuneCount from pool/stats
	SellFeeAverage string `json:"sellFeeAverage"`

	// same as toRuneFees from pool/stats
	SellFeesTotal string `json:"sellFeesTotal"`

	// same as toRuneAverageSlip from pool/stats
	SellSlipAverage string `json:"sellSlipAverage"`

	// same as toRuneVolume / toRuneCount from pool/stats
	SellTxAverage string `json:"sellTxAverage"`

	// same as toRuneVolume from pool/stats
	SellVolume string `json:"sellVolume"`

	// same as addLiquidityCount from pool/stats
	StakeTxCount string `json:"stakeTxCount"`

	// same as uniqueMemberCount from pool/stats
	StakersCount string `json:"stakersCount"`

	// same as addLiquidityCount + withdrawCount from pool/stats
	StakingTxCount string `json:"stakingTxCount"`

	// same as status from pool/stats
	Status string `json:"status"`

	// Int64, same as history/swaps:uniqueSwapperCount
	SwappersCount string `json:"swappersCount"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64, same as swapVolume pool/stats?period=24h
	Volume24h string `json:"volume24h"`

	// same as withdrawCount from pool/stats
	WithdrawTxCount string `json:"withdrawTxCount"`
}

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64, same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64, same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`
	Asset                  string `json:"asset"`

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64, same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Float, same as history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64, same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64, same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float, same as history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64, same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64, same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Int64, number of unique adresses that initiated swaps transactions in the period.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Liquidity Units in the pool
	Units string `json:"units"`

	// Int64, same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64, same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64, same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// Queue defines model for Queue.
type Queue struct {
	Outbound string `json:"outbound"`
	Swap     string `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64 (10^8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64 (10^8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Int64, number of swaps since beginning.
	SwapCount string `json:"swapCount"`

	// Int64, number of swaps in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64, total volume of swaps denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Int64, unique users (addresses) initiating swaps since beginning.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, unique users (addresses) initiating swaps in the last 24 hours.
	UniqueSwapperCount24h string `json:"uniqueSwapperCount24h"`

	// Int64, unique users (addresses) initiating swaps in the last 30 days.
	UniqueSwapperCount30d string `json:"uniqueSwapperCount30d"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64 (10^8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float, the average slip by swap. Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float, the average slip for swaps to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64, the fees collected from swaps to asset denoted in rune
	ToAssetFees string `json:"toAssetFees"`

	// Int64, volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float, the average slip for swaps to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64, the fees collected from swaps to rune
	ToRuneFees string `json:"toRuneFees"`

	// Int64, volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64, the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64, toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Int64 (10^8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), trade slip percentage
	TradeSlip string `json:"tradeSlip"`

	// Int64 (10^8), minimum output amount specified for the swap
	TradeTarget string `json:"tradeTarget"`
}

// Transaction defines model for Transaction.
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction memo
	Memo string `json:"memo"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolLegacyResponse defines model for PoolLegacyResponse.
type PoolLegacyResponse PoolLegacyDetail

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Address of sender or recipient of any in/out transaction related to the action
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action (swap, addLiquidity, withdraw, donate, refund)
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *string `json:"period,omitempty"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *string `json:"status,omitempty"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/wsAAP//ErpYGYjFAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
