// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Action defines model for Action.
type Action struct {

	// Int64, Unix timestamp for when the action was registered
	Date string `json:"date"`

	// Int64, block height at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status string `json:"status"`

	// Type of action
	Type string `json:"type"`
}

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64, Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64, Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64, Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64, Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64, Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64, Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64, Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64, Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64, Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64, Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Coin defines model for Coin.
type Coin struct {

	// Int64 (10^8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64, Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64, Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64, System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64, Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistoryItemPool defines model for EarningsHistoryItemPool.
type EarningsHistoryItemPool struct {

	// Int64, Share of earnings sent to the pool during the time interval
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses struct {
	Current []InboundAddressesItem `json:"current"`
}

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string `json:"address"`
	Chain   string `json:"chain"`

	// indicate whether this chain has halted
	Halted bool   `json:"halted"`
	PubKey string `json:"pub_key"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                  int64 `json:"AsgardSize"`
	BadValidatorRate            int64 `json:"BadValidatorRate"`
	BlocksPerYear               int64 `json:"BlocksPerYear"`
	ChurnInterval               int64 `json:"ChurnInterval"`
	ChurnRetryInterval          int64 `json:"ChurnRetryInterval"`
	CliTxCost                   int64 `json:"CliTxCost"`
	DesiredValidatorSet         int64 `json:"DesiredValidatorSet"`
	DoubleSignMaxAge            int64 `json:"DoubleSignMaxAge"`
	EmissionCurve               int64 `json:"EmissionCurve"`
	FailKeygenSlashPoints       int64 `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints      int64 `json:"FailKeysignSlashPoints"`
	FundMigrationInterval       int64 `json:"FundMigrationInterval"`
	JailTimeKeygen              int64 `json:"JailTimeKeygen"`
	JailTimeKeysign             int64 `json:"JailTimeKeysign"`
	LackOfObservationPenalty    int64 `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks       int64 `json:"LiquidityLockUpBlocks"`
	MinimumBondInRune           int64 `json:"MinimumBondInRune"`
	MinimumNodesForBFT          int64 `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil    int64 `json:"MinimumNodesForYggdrasil"`
	NativeChainGasFee           int64 `json:"NativeChainGasFee"`
	NewPoolCycle                int64 `json:"NewPoolCycle"`
	ObservationDelayFlexibility int64 `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints          int64 `json:"ObserveSlashPoints"`
	OldValidatorRate            int64 `json:"OldValidatorRate"`
	OutboundTransactionFee      int64 `json:"OutboundTransactionFee"`
	SigningTransactionPeriod    int64 `json:"SigningTransactionPeriod"`
	YggFundLimit                int64 `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock struct {
	Current []LastblockItem `json:"current"`
}

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn string `json:"last_observed_in"`
	LastSignedOut  string `json:"last_signed_out"`
	Thorchain      string `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64 (10^8), total deposits in RUNE during the time interval.
	// Accounts for both asset (using the price at deposit time) and RUNE deposited into pools
	AddLiqudityVolume string `json:"addLiqudityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64 (10^8), total withdrawals in RUNE during the time interval. Accounts for
	// both asset (using the price at withdrawal time) and RUNE withdrawn from pools
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// Liquidity provider data for all the pools of a given member
	Pools []MemberPoolDetails `json:"pools"`
}

// MemberPoolDetails defines model for MemberPoolDetails.
type MemberPoolDetails struct {

	// Int64, total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// Int64, total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Int64, total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`
	PoolShareFactor         string `json:"poolShareFactor"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64, Total Rune pooled in all pools
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64, Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NetworkFees defines model for NetworkFees.
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolLegacyDetail defines model for PoolLegacyDetail.
type PoolLegacyDetail struct {
	Asset string `json:"asset"`

	// same as assetDepth from pool/stats
	AssetDepth string `json:"assetDepth"`

	// same as toAssetCount from pool/stats
	BuyAssetCount string `json:"buyAssetCount"`

	// same as toAssetVolume / toAssetCount from pool/stats
	BuyTxAverage string `json:"buyTxAverage"`

	// same as toAssetVolume from pool/stats
	BuyVolume string `json:"buyVolume"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// same as 2*runeDepth from pool/stats
	PoolDepth string `json:"poolDepth"`

	// same as totalFees / swapCount from pool/stats
	PoolFeeAverage string `json:"poolFeeAverage"`

	// same as totalFees from pool/stats
	PoolFeesTotal string `json:"poolFeesTotal"`

	// same as averageSlip from pool/stats
	PoolSlipAverage string `json:"poolSlipAverage"`

	// same as swapVolume / swapCount from pool/stats
	PoolTxAverage string `json:"poolTxAverage"`

	// same as units from pool/stats
	PoolUnits string `json:"poolUnits"`

	// Int64, same as buyVolume + sellVolume
	PoolVolume string `json:"poolVolume"`

	// same as assetPrice from pool/stats
	Price string `json:"price"`

	// same as runeDepth from pool/stats
	RuneDepth string `json:"runeDepth"`

	// same as toRuneCount from pool/stats
	SellAssetCount string `json:"sellAssetCount"`

	// same as toRuneVolume / toRuneCount from pool/stats
	SellTxAverage string `json:"sellTxAverage"`

	// same as toRuneVolume from pool/stats
	SellVolume string `json:"sellVolume"`

	// same as status from pool/stats
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune
	Volume24h string `json:"volume24h"`
}

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, same as buyVolume + sellVolume
	PoolVolume string `json:"poolVolume"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64, same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64, same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64, same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, Liquidity Units in the pool
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune
	Volume24h string `json:"volume24h"`
}

// Queue defines model for Queue.
type Queue struct {
	Outbound string `json:"outbound"`
	Swap     string `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Daily active users (unique addresses interacting)
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Daily transactions
	DailyTx string `json:"dailyTx"`

	// Monthly active users
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Monthly transactions
	MonthlyTx string `json:"monthlyTx"`

	// Total buying transactions
	TotalAssetBuys string `json:"totalAssetBuys"`

	// Total selling transactions
	TotalAssetSells string `json:"totalAssetSells"`

	// Total RUNE balances
	TotalDepth string `json:"totalDepth"`

	// Total staking transactions
	TotalStakeTx string `json:"totalStakeTx"`

	// Total staked (in RUNE Value)
	TotalStaked string `json:"totalStaked"`

	// Total transactions
	TotalTx string `json:"totalTx"`

	// Total unique swappers & members
	TotalUsers string `json:"totalUsers"`

	// Total (in RUNE Value) of all assets swapped since start
	TotalVolume string `json:"totalVolume"`

	// Total withdrawing transactions
	TotalWithdrawTx string `json:"totalWithdrawTx"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float, the average slip by swap. Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64, volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64, volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64, the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64, toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Int64 (10^8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), trade slip percentage
	TradeSlip string `json:"tradeSlip"`

	// Int64 (10^8), minimum output amount specified for the swap
	TradeTarget string `json:"tradeTarget"`
}

// Transaction defines model for Transaction.
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction memo
	Memo string `json:"memo"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolLegacyResponse defines model for PoolLegacyResponse.
type PoolLegacyResponse PoolLegacyDetail

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Address of sender or recipient of any in/out transaction related to the action
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action (swap, addLiquidity, withdraw, donate, refund)
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *string `json:"status,omitempty"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"9OI+E8eegydtxvn8+fPn/wwAAP//wODhvy+vAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
