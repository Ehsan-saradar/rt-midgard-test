// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {

	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Represents a digital currency amount
type Coin struct {

	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, The liquidity unit value index. Sqrt(assetDepth * runeDepth)/liquidity units
	Luvi string `json:"luvi"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval at time endTime
	EndAssetDepth string `json:"endAssetDepth"`

	// Int64, Liquidity Units in the pool at the end of the interval at time endTime
	EndLPUnits string `json:"endLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval at time endTime
	EndRuneDepth string `json:"endRuneDepth"`

	// Int64, Synth Units in the pool at the end of the interval at time endTime
	EndSynthUnits string `json:"endSynthUnits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, The liquidity unit value index increase between the first and last depth item
	LuviIncrease string `json:"luviIncrease"`

	// Float, The impermanent loss between the first and last depth item
	PriceShiftLoss string `json:"priceShiftLoss"`

	// Int64(e8), the amount of Asset in the pool at the start of the interval at time startTime
	StartAssetDepth string `json:"startAssetDepth"`

	// Int64, Liquidity Units in the pool at the start of the interval at time startTime
	StartLPUnits string `json:"startLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the start of the interval at time startTime
	StartRuneDepth string `json:"startRuneDepth"`

	// Int64, Synth Units in the pool at the start of the interval at time startTime
	StartSynthUnits string `json:"startSynthUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {

	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync         bool     `json:"inSync"`
	LastAggregated HeightTS `json:"lastAggregated"`
	LastCommitted  HeightTS `json:"lastCommitted"`
	LastFetched    HeightTS `json:"lastFetched"`
	LastThorNode   HeightTS `json:"lastThorNode"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// HeightTS defines model for HeightTS.
type HeightTS struct {

	// Block height
	Height int `json:"height"`

	// Block timestamp (seconds since epoch)
	Timestamp int `json:"timestamp"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string  `json:"address"`
	Chain   string  `json:"chain"`
	GasRate *string `json:"gas_rate,omitempty"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                    int64  `json:"AsgardSize"`
	BadValidatorRate              int64  `json:"BadValidatorRate"`
	BadValidatorRedline           int    `json:"BadValidatorRedline"`
	BlocksPerYear                 int64  `json:"BlocksPerYear"`
	ChurnInterval                 int64  `json:"ChurnInterval"`
	ChurnRetryInterval            int64  `json:"ChurnRetryInterval"`
	DesiredValidatorSet           int64  `json:"DesiredValidatorSet"`
	DoubleSignMaxAge              int64  `json:"DoubleSignMaxAge"`
	EmissionCurve                 int64  `json:"EmissionCurve"`
	FailKeygenSlashPoints         int64  `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints        int64  `json:"FailKeysignSlashPoints"`
	FullImpLossProtectionBlocks   int64  `json:"FullImpLossProtectionBlocks"`
	FundMigrationInterval         int64  `json:"FundMigrationInterval"`
	IncentiveCurve                int64  `json:"IncentiveCurve"`
	JailTimeKeygen                int64  `json:"JailTimeKeygen"`
	JailTimeKeysign               int64  `json:"JailTimeKeysign"`
	LackOfObservationPenalty      int64  `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks         int64  `json:"LiquidityLockUpBlocks"`
	MaxAvailablePools             int64  `json:"MaxAvailablePools"`
	MaxSwapsPerBlock              int64  `json:"MaxSwapsPerBlock"`
	MinRunePoolDepth              int64  `json:"MinRunePoolDepth"`
	MinSlashPointsForBadValidator int64  `json:"MinSlashPointsForBadValidator"`
	MinSwapsPerBlock              int64  `json:"MinSwapsPerBlock"`
	MinimumBondInRune             int64  `json:"MinimumBondInRune"`
	MinimumNodesForBFT            int64  `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil      int64  `json:"MinimumNodesForYggdrasil"`
	NativeTransactionFee          int64  `json:"NativeTransactionFee"`
	NewPoolCycle                  *int64 `json:"NewPoolCycle,omitempty"`
	ObservationDelayFlexibility   int64  `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints            int64  `json:"ObserveSlashPoints"`
	OldValidatorRate              int64  `json:"OldValidatorRate"`
	OutboundTransactionFee        int64  `json:"OutboundTransactionFee"`
	PoolCycle                     int64  `json:"PoolCycle"`
	SigningTransactionPeriod      int64  `json:"SigningTransactionPeriod"`
	VirtualMultSynths             int64  `json:"VirtualMultSynths"`
	YggFundLimit                  int64  `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock []LastblockItem

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn int64  `json:"last_observed_in"`
	LastSignedOut  int64  `json:"last_signed_out"`
	Thorchain      int64  `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {

	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// ObservedChain defines model for ObservedChain.
type ObservedChain struct {
	Chain  string `json:"chain"`
	Height int    `json:"height"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`
	Asset                  string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Int64, number of unique adresses that initiated swaps transactions in the period.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// PreflightStatus defines model for PreflightStatus.
type PreflightStatus struct {
	Code   int    `json:"code"`
	Reason string `json:"reason"`
	Status string `json:"status"`
}

// ProxiedNode defines model for ProxiedNode.
type ProxiedNode struct {
	ActiveBlockHeight int    `json:"active_block_height"`
	Bond              string `json:"bond"`
	BondAddress       string `json:"bond_address"`
	CurrentAward      string `json:"current_award"`
	ForcedToLeave     bool   `json:"forced_to_leave"`
	IpAddress         string `json:"ip_address"`
	Jail              struct {
		NodeAddress *string `json:"node_address,omitempty"`
	} `json:"jail"`
	LeaveHeight     int             `json:"leave_height"`
	NodeAddress     string          `json:"node_address"`
	ObserveChains   []ObservedChain `json:"observe_chains"`
	PreflightStatus PreflightStatus `json:"preflight_status"`
	PubKeySet       struct {
		Ed25519   string `json:"ed25519"`
		Secp256k1 string `json:"secp256k1"`
	} `json:"pub_key_set"`
	RequestedToLeave    bool     `json:"requested_to_leave"`
	SignerMembership    []string `json:"signer_membership"`
	SlashPoints         int      `json:"slash_points"`
	Status              string   `json:"status"`
	StatusSince         int      `json:"status_since"`
	ValidatorConsPubKey string   `json:"validator_cons_pub_key"`
	Version             string   `json:"version"`
}

// ProxiedNodes defines model for ProxiedNodes.
type ProxiedNodes []ProxiedNode

// Queue defines model for Queue.
type Queue struct {
	Internal int `json:"internal"`
	Outbound int `json:"outbound"`
	Swap     int `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, unique users (addresses) initiating swaps in the last 24 hours.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, unique users (addresses) initiating swaps in the last 30 days.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Int64, unique users (addresses) initiating swaps since beginning.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddr *string `json:"affiliateAddr,omitempty"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee *string `json:"affiliateFee,omitempty"`

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {

	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {

	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at the end of the interval
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ProxiedNodesResponse defines model for ProxiedNodesResponse.
type ProxiedNodesResponse ProxiedNodes

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// Affiliate address of the action (swap)
	Affiliate *string `json:"affiliate,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {

	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
