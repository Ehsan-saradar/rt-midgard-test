// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64, Average bond of active nodes.
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64, Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64, Maxinum bond of active nodes.
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64, Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64, Median bond of active nodes.
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64, Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64, Minumum bond of active nodes.
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64, Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64, Total bond of active nodes.
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64, Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryInterval  `json:"meta"`
}

// EarningsHistoryInterval defines model for EarningsHistoryInterval.
type EarningsHistoryInterval struct {

	// Int64, Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64, Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64, System income generated during the time interval. It is the sum of liquidity fees and block rewards.
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64, Total liquidity fees, converted to RUNE, collected during the time interval.
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryIntervalPool `json:"pools"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistoryIntervalPool defines model for EarningsHistoryIntervalPool.
type EarningsHistoryIntervalPool struct {

	// Int64, Share of earnings sent to the pool during the time interval
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryInterval

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// Liquidity provider data for all the pools of a given member
	Pools []MemberPoolDetails `json:"pools"`
}

// MemberPoolDetails defines model for MemberPoolDetails.
type MemberPoolDetails struct {

	// Int64, total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// Int64, total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Int64, total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`
	BondingROI string `json:"bondingROI"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks).
	PoolActivationCountdown string  `json:"poolActivationCountdown"`
	PoolShareFactor         string  `json:"poolShareFactor"`
	StakingROI              *string `json:"stakingROI,omitempty"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64, Total Rune pooled in all pools.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64, Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NodeKey defines model for NodeKey.
type NodeKey struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	Price string `json:"price"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Enabled, Bootstrap.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Daily active users (unique addresses interacting)
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Daily transactions
	DailyTx string `json:"dailyTx"`

	// Monthly active users
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Monthly transactions
	MonthlyTx string `json:"monthlyTx"`

	// Total buying transactions
	TotalAssetBuys string `json:"totalAssetBuys"`

	// Total selling transactions
	TotalAssetSells string `json:"totalAssetSells"`

	// Total RUNE balances
	TotalDepth string `json:"totalDepth"`

	// Total staking transactions
	TotalStakeTx string `json:"totalStakeTx"`

	// Total staked (in RUNE Value).
	TotalStaked string `json:"totalStaked"`

	// Total transactions
	TotalTx string `json:"totalTx"`

	// Total unique swappers & members
	TotalUsers string `json:"totalUsers"`

	// Total (in RUNE Value) of all assets swapped since start.
	TotalVolume string `json:"totalVolume"`

	// Total withdrawing transactions
	TotalWithdrawTx string `json:"totalWithdrawTx"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`

	// Sum values of all the returned intervals.
	Meta SwapHistoryMeta `json:"meta"`
}

// SwapHistoryInterval defines model for SwapHistoryInterval.
type SwapHistoryInterval struct {

	// Int64, The beginning time of bucket in unix timestamp.
	Time string `json:"time"`

	// Int64, volume of swaps from rune to asset denoted in rune.
	ToAssetVolume string `json:"toAssetVolume"`

	// Int64, volume of swaps from asset to rune denoted in rune.
	ToRuneVolume string `json:"toRuneVolume"`

	// toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryInterval

// SwapHistoryMeta defines model for SwapHistoryMeta.
type SwapHistoryMeta struct {

	// Int64, The beginning timestamp of the first interval. Can be smaller then from.
	FirstTime string `json:"firstTime"`

	// Int64, The beginning timestamp of the last interval. It is smaller then until
	LastTime string `json:"lastTime"`

	// Int64, volume of swaps from rune to asset denoted in rune.
	ToAssetVolume string `json:"toAssetVolume"`

	// Int64, volume of swaps from asset to runt denoted in rune.
	ToRuneVolume string `json:"toRuneVolume"`

	// toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// TxDetails defines model for TxDetails.
type TxDetails struct {

	// Int64, Unix timestamp.
	Date   string `json:"date"`
	Events Event  `json:"events"`
	Height string `json:"height"`
	In     Tx     `json:"in"`
	Out    []Tx   `json:"out"`
	Pool   string `json:"pool"`
	Status string `json:"status"`
	Type   string `json:"type"`
}

// Coin defines model for coin.
type Coin struct {
	Amount string `json:"amount"`
	Asset  string `json:"asset"`
}

// Coins defines model for coins.
type Coins []Coin

// Event defines model for event.
type Event struct {
	Fee        string `json:"fee"`
	Slip       string `json:"slip"`
	StakeUnits string `json:"stakeUnits"`
}

// Option defines model for option.
type Option struct {
	Asymmetry           string `json:"asymmetry"`
	PriceTarget         string `json:"priceTarget"`
	WithdrawBasisPoints string `json:"withdrawBasisPoints"`
}

// Tx defines model for tx.
type Tx struct {
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`
	Memo    string `json:"memo"`
	Options Option `json:"options"`
	TxID    string `json:"txID"`
}

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse []string

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodeKeyResponse defines model for NodeKeyResponse.
type NodeKeyResponse []NodeKey

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse []PoolDetail

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// TxResponse defines model for TxResponse.
type TxResponse struct {

	// Int64, count of txs matching the filters.
	Count string      `json:"count"`
	Txs   []TxDetails `json:"txs"`
}

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval string `json:"interval"`

	// Start time of the query as unix timestamp
	From int64 `json:"from"`

	// End time of the query as unix timestamp
	To int64 `json:"to"`
}

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return stats for this single pool. Returns sum of all pools if missing.
	Pool *int64 `json:"pool,omitempty"`

	// Interval of calculations
	Interval string `json:"interval"`

	// Start time of the query as unix timestamp
	From int64 `json:"from"`

	// End time of the query as unix timestamp
	To int64 `json:"to"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Interval of calculations
	Status string `json:"status"`
}

// GetTxDetailsParams defines parameters for GetTxDetails.
type GetTxDetailsParams struct {

	// Address of sender or recipient of any in/out tx in event
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx in event
	Txid *string `json:"txid,omitempty"`

	// Any asset used in event (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of event
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAAA//86BLj22E0AAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
