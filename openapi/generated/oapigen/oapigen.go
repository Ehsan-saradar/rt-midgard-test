// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/pkg/errors"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {

	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still
	// pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still
// pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity
	// deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// Balance defines model for Balance.
type Balance struct {
	Coins Coins `json:"coins"`

	// full timestamp (nanoseconds since 1970) of the block at which the returned balance snapshot was valid
	Date string `json:"date"`

	// height of the block at which the returned balance snapshot was valid
	Height string `json:"height"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// ChurnItem defines model for ChurnItem.
type ChurnItem struct {

	// full timestamp (nanoseconds since 1970) of the block at which the churn occurred
	Date string `json:"date"`

	// height of the block at which the churn occurred
	Height string `json:"height"`
}

// Churns defines model for Churns.
type Churns []ChurnItem

// Represents a digital currency amount
type Coin struct {

	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, The liquidity unit value index. Sqrt(assetDepth * runeDepth)/liquidity units
	Luvi string `json:"luvi"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval at time endTime
	EndAssetDepth string `json:"endAssetDepth"`

	// Int64, Liquidity Units in the pool at the end of the interval at time endTime
	EndLPUnits string `json:"endLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval at time endTime
	EndRuneDepth string `json:"endRuneDepth"`

	// Int64, Synth Units in the pool at the end of the interval at time endTime
	EndSynthUnits string `json:"endSynthUnits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, The liquidity unit value index increase between startTime and endTime
	LuviIncrease string `json:"luviIncrease"`

	// Float, The impermanent loss between the first and last depth item
	PriceShiftLoss string `json:"priceShiftLoss"`

	// Int64(e8), the amount of Asset in the pool at the start of the interval at time
	// startTime
	StartAssetDepth string `json:"startAssetDepth"`

	// Int64, Liquidity Units in the pool at the start of the interval at time startTime
	StartLPUnits string `json:"startLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the start of the interval at time startTime
	StartRuneDepth string `json:"startRuneDepth"`

	// Int64, Synth Units in the pool at the start of the interval at time startTime
	StartSynthUnits string `json:"startSynthUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of
	// liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {

	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync         bool     `json:"inSync"`
	LastAggregated HeightTS `json:"lastAggregated"`
	LastCommitted  HeightTS `json:"lastCommitted"`
	LastFetched    HeightTS `json:"lastFetched"`
	LastThorNode   HeightTS `json:"lastThorNode"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// HeightTS defines model for HeightTS.
type HeightTS struct {

	// Block height
	Height int `json:"height"`

	// Block timestamp (seconds since epoch)
	Timestamp int `json:"timestamp"`
}

// KnownPools defines model for KnownPools.
type KnownPools struct {
	AdditionalProperties map[string]string `json:"-"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {

	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and
	// nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each
// outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {

	// Float, Also called APR. Annual return estimated linearly (not compounded) from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// Due to Impermanent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Int64, The native decimal number of the pool asset. (If the value is "-1", it means midgard doesn't know the pool native decimal)
	NativeDecimal string `json:"nativeDecimal"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	// It includes synth mint or burn.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Float, Also called APR. Annual return estimated linearly (not compounded) from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// Due to Impermanent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// Transaction memo of the refund action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Deprecated, it's always 0.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Deprecated, it's always 0.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps (including synths) since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps (including synths) in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps (including synths) in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps (including synths) denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Synth to Rune since beginning.
	SynthBurnCount string `json:"synthBurnCount"`

	// Int64, number of swaps from Rune to Synth since beginning.
	SynthMintCount string `json:"synthMintCount"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// Transaction memo of the swap action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {

	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {

	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of
	// the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity
	// pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at
	// the end of the interval.
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the
	// native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means
	// totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership
	// withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// Transaction memo of the withdraw action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// BalanceResponse defines model for BalanceResponse.
type BalanceResponse Balance

// ChurnsResponse defines model for ChurnsResponse.
type ChurnsResponse Churns

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// KnownPoolsResponse defines model for KnownPoolsResponse.
type KnownPoolsResponse KnownPools

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// Affiliate address of the action (swap)
	Affiliate *string `json:"affiliate,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`
}

// GetBalanceParams defines parameters for GetBalance.
type GetBalanceParams struct {

	// Unix timestamp as seconds since 1970 (if provided, height must not be provided)
	Timestamp *int64 `json:"timestamp,omitempty"`

	// Block height (if provided, timestamp must not be provided)
	Height *int64 `json:"height,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {

	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolParams defines parameters for GetPool.
type GetPoolParams struct {

	// Specifies the base interval from which APY is extrapolated.
	// Default is 30d.
	Period *GetPoolParamsPeriod `json:"period,omitempty"`
}

// GetPoolParamsPeriod defines parameters for GetPool.
type GetPoolParamsPeriod string

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`

	// Specifies the base interval from which annualPercentageRate and poolAPY is extrapolated.
	// Default is 30d.
	Period *GetPoolsParamsPeriod `json:"period,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// GetPoolsParamsPeriod defines parameters for GetPools.
type GetPoolsParamsPeriod string

// Getter for additional properties for KnownPools. Returns the specified
// element and whether it was found
func (a KnownPools) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for KnownPools
func (a *KnownPools) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for KnownPools to handle AdditionalProperties
func (a *KnownPools) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for KnownPools to handle AdditionalProperties
func (a KnownPools) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
