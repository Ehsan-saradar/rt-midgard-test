// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64, Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64, Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64, Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64, Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64, Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64, Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64, Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64, Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64, Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64, Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64, Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64, Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64, System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64, Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistoryItemPool defines model for EarningsHistoryItemPool.
type EarningsHistoryItemPool struct {

	// Int64, Share of earnings sent to the pool during the time interval
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses struct {
	Current []InboundAddressesItem `json:"current"`
}

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string `json:"address"`
	Chain   string `json:"chain"`

	// indicate whether this chain has halted
	Halted bool   `json:"halted"`
	PubKey string `json:"pub_key"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                  int64 `json:"AsgardSize"`
	BadValidatorRate            int64 `json:"BadValidatorRate"`
	BlocksPerYear               int64 `json:"BlocksPerYear"`
	ChurnInterval               int64 `json:"ChurnInterval"`
	ChurnRetryInterval          int64 `json:"ChurnRetryInterval"`
	CliTxCost                   int64 `json:"CliTxCost"`
	DesiredValidatorSet         int64 `json:"DesiredValidatorSet"`
	DoubleSignMaxAge            int64 `json:"DoubleSignMaxAge"`
	EmissionCurve               int64 `json:"EmissionCurve"`
	FailKeygenSlashPoints       int64 `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints      int64 `json:"FailKeysignSlashPoints"`
	FundMigrationInterval       int64 `json:"FundMigrationInterval"`
	JailTimeKeygen              int64 `json:"JailTimeKeygen"`
	JailTimeKeysign             int64 `json:"JailTimeKeysign"`
	LackOfObservationPenalty    int64 `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks       int64 `json:"LiquidityLockUpBlocks"`
	MinimumBondInRune           int64 `json:"MinimumBondInRune"`
	MinimumNodesForBFT          int64 `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil    int64 `json:"MinimumNodesForYggdrasil"`
	NativeChainGasFee           int64 `json:"NativeChainGasFee"`
	NewPoolCycle                int64 `json:"NewPoolCycle"`
	ObservationDelayFlexibility int64 `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints          int64 `json:"ObserveSlashPoints"`
	OldValidatorRate            int64 `json:"OldValidatorRate"`
	OutboundTransactionFee      int64 `json:"OutboundTransactionFee"`
	SigningTransactionPeriod    int64 `json:"SigningTransactionPeriod"`
	YggFundLimit                int64 `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock struct {
	Current []LastblockItem `json:"current"`
}

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn string `json:"last_observed_in"`
	LastSignedOut  string `json:"last_signed_out"`
	Thorchain      string `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64, total deposits (liquidity additions) during the time interval
	Deposits string `json:"deposits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, total withdrawals during the time interval
	Withdrawals string `json:"withdrawals"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// Liquidity provider data for all the pools of a given member
	Pools []MemberPoolDetails `json:"pools"`
}

// MemberPoolDetails defines model for MemberPoolDetails.
type MemberPoolDetails struct {

	// Int64, total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// Int64, total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Int64, total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`
	PoolShareFactor         string `json:"poolShareFactor"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64, Total Rune pooled in all pools
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64, Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NodeKey defines model for NodeKey.
type NodeKey struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// NodeKeys defines model for NodeKeys.
type NodeKeys []NodeKey

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolLegacyDetail defines model for PoolLegacyDetail.
type PoolLegacyDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Int64, same as history/swaps:toAssetCount
	BuyAssetCount string `json:"buyAssetCount"`

	// Float, same as history/swaps:toRuneVolume/toRuneCount
	BuyTxAverage string `json:"buyTxAverage"`

	// Int64, same as history/swaps:toAssetVolume
	BuyVolume string `json:"buyVolume"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, same as assetDepth + runeDepth
	PoolDepth string `json:"poolDepth"`

	// Float, same as history/swaps:totalFees/totalCount
	PoolFeeAverage string `json:"poolFeeAverage"`

	// Int64, same as history/swaps:totalFees
	PoolFeesTotal string `json:"poolFeesTotal"`

	// Float, same as history/swaps:averageSlip
	PoolSlipAverage string `json:"poolSlipAverage"`

	// Float, same as history/swaps:totalVolume/totalCount
	PoolTxAverage string `json:"poolTxAverage"`

	// Int64, same as buyVolume + sellVolume
	PoolVolume string `json:"poolVolume"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// Int64, same as history/swaps:toRuneCount
	SellAssetCount string `json:"sellAssetCount"`

	// Float, same as history/swaps:toAssetVolume/toAssetCount
	SellTxAverage string `json:"sellTxAverage"`

	// Int64, same as history/swaps:toRuneVolume
	SellVolume string `json:"sellVolume"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64, Liquidity Units in the pool
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune
	Volume24h string `json:"volume24h"`
}

// Queue defines model for Queue.
type Queue struct {
	Outbound string `json:"outbound"`
	Swap     string `json:"swap"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Daily active users (unique addresses interacting)
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Daily transactions
	DailyTx string `json:"dailyTx"`

	// Monthly active users
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Monthly transactions
	MonthlyTx string `json:"monthlyTx"`

	// Total buying transactions
	TotalAssetBuys string `json:"totalAssetBuys"`

	// Total selling transactions
	TotalAssetSells string `json:"totalAssetSells"`

	// Total RUNE balances
	TotalDepth string `json:"totalDepth"`

	// Total staking transactions
	TotalStakeTx string `json:"totalStakeTx"`

	// Total staked (in RUNE Value)
	TotalStaked string `json:"totalStaked"`

	// Total transactions
	TotalTx string `json:"totalTx"`

	// Total unique swappers & members
	TotalUsers string `json:"totalUsers"`

	// Total (in RUNE Value) of all assets swapped since start
	TotalVolume string `json:"totalVolume"`

	// Total withdrawing transactions
	TotalWithdrawTx string `json:"totalWithdrawTx"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float, the average slip by swap. Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64, volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64, volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64, the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64, toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// TxDetails defines model for TxDetails.
type TxDetails struct {

	// Int64, Unix timestamp
	Date   string `json:"date"`
	Events Event  `json:"events"`
	Height string `json:"height"`
	In     Tx     `json:"in"`
	Out    []Tx   `json:"out"`
	Pool   string `json:"pool"`
	Status string `json:"status"`
	Type   string `json:"type"`
}

// Coin defines model for coin.
type Coin struct {
	Amount string `json:"amount"`
	Asset  string `json:"asset"`
}

// Coins defines model for coins.
type Coins []Coin

// Event defines model for event.
type Event struct {
	Fee        string `json:"fee"`
	Slip       string `json:"slip"`
	StakeUnits string `json:"stakeUnits"`
}

// Option defines model for option.
type Option struct {
	Asymmetry           string `json:"asymmetry"`
	PriceTarget         string `json:"priceTarget"`
	WithdrawBasisPoints string `json:"withdrawBasisPoints"`
}

// Tx defines model for tx.
type Tx struct {
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`
	Memo    string `json:"memo"`
	Options Option `json:"options"`
	TxID    string `json:"txID"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodeKeyResponse defines model for NodeKeyResponse.
type NodeKeyResponse NodeKeys

// PoolLegacyResponse defines model for PoolLegacyResponse.
type PoolLegacyResponse PoolLegacyDetail

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// TxResponse defines model for TxResponse.
type TxResponse struct {

	// Int64, count of txs matching the filters.
	Count string      `json:"count"`
	Txs   []TxDetails `json:"txs"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *string `json:"status,omitempty"`
}

// GetTxDetailsParams defines parameters for GetTxDetails.
type GetTxDetailsParams struct {

	// Address of sender or recipient of any in/out tx in event
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx in event
	Txid *string `json:"txid,omitempty"`

	// Any asset used in event (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of event
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
