// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Action defines model for Action.
type Action struct {

	// Int64, Unix timestamp for when the action was registered
	Date string `json:"date"`

	// Int64, block height at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status string `json:"status"`

	// Type of action
	Type string `json:"type"`
}

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64, Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64, Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64, Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64, Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64, Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64, Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64, Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64, Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64, Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64, Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Coin defines model for Coin.
type Coin struct {

	// Int64 (10^8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64, Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64, Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64, System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64, Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistoryItemPool defines model for EarningsHistoryItemPool.
type EarningsHistoryItemPool struct {

	// Int64, Share of earnings sent to the pool during the time interval
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses struct {
	Current []InboundAddressesItem `json:"current"`
}

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string `json:"address"`
	Chain   string `json:"chain"`

	// indicate whether this chain has halted
	Halted bool   `json:"halted"`
	PubKey string `json:"pub_key"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                  int64 `json:"AsgardSize"`
	BadValidatorRate            int64 `json:"BadValidatorRate"`
	BlocksPerYear               int64 `json:"BlocksPerYear"`
	ChurnInterval               int64 `json:"ChurnInterval"`
	ChurnRetryInterval          int64 `json:"ChurnRetryInterval"`
	CliTxCost                   int64 `json:"CliTxCost"`
	DesiredValidatorSet         int64 `json:"DesiredValidatorSet"`
	DoubleSignMaxAge            int64 `json:"DoubleSignMaxAge"`
	EmissionCurve               int64 `json:"EmissionCurve"`
	FailKeygenSlashPoints       int64 `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints      int64 `json:"FailKeysignSlashPoints"`
	FundMigrationInterval       int64 `json:"FundMigrationInterval"`
	JailTimeKeygen              int64 `json:"JailTimeKeygen"`
	JailTimeKeysign             int64 `json:"JailTimeKeysign"`
	LackOfObservationPenalty    int64 `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks       int64 `json:"LiquidityLockUpBlocks"`
	MinimumBondInRune           int64 `json:"MinimumBondInRune"`
	MinimumNodesForBFT          int64 `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil    int64 `json:"MinimumNodesForYggdrasil"`
	NativeChainGasFee           int64 `json:"NativeChainGasFee"`
	NewPoolCycle                int64 `json:"NewPoolCycle"`
	ObservationDelayFlexibility int64 `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints          int64 `json:"ObserveSlashPoints"`
	OldValidatorRate            int64 `json:"OldValidatorRate"`
	OutboundTransactionFee      int64 `json:"OutboundTransactionFee"`
	SigningTransactionPeriod    int64 `json:"SigningTransactionPeriod"`
	YggFundLimit                int64 `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock struct {
	Current []LastblockItem `json:"current"`
}

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn string `json:"last_observed_in"`
	LastSignedOut  string `json:"last_signed_out"`
	Thorchain      string `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64 (10^8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64 (10^8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64 (10^8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64 (10^8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64 (10^8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64 (10^8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64, total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64, total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64, total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`
	PoolShareFactor         string `json:"poolShareFactor"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64, Total Rune pooled in all pools
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64, Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NetworkFees defines model for NetworkFees.
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolLegacyDetail defines model for PoolLegacyDetail.
type PoolLegacyDetail struct {
	Asset string `json:"asset"`

	// same as assetDepth from pool/stats
	AssetDepth string `json:"assetDepth"`

	// same as addAssetLiquidityVolume from pool/stats
	AssetStakedTotal string `json:"assetStakedTotal"`

	// same as toAssetCount from pool/stats
	BuyAssetCount string `json:"buyAssetCount"`

	// same as toAssetFees / toAssetCount from pool/stats
	BuyFeeAverage string `json:"buyFeeAverage"`

	// same as toAssetFees from pool/stats
	BuyFeesTotal string `json:"buyFeesTotal"`

	// same as toAssetAverageSlip from pool/stats
	BuySlipAverage string `json:"buySlipAverage"`

	// same as toAssetVolume / toAssetCount from pool/stats
	BuyTxAverage string `json:"buyTxAverage"`

	// same as toAssetVolume from pool/stats
	BuyVolume string `json:"buyVolume"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// same as 2*runeDepth from pool/stats
	PoolDepth string `json:"poolDepth"`

	// same as totalFees / swapCount from pool/stats
	PoolFeeAverage string `json:"poolFeeAverage"`

	// same as totalFees from pool/stats
	PoolFeesTotal string `json:"poolFeesTotal"`

	// same as averageSlip from pool/stats
	PoolSlipAverage string `json:"poolSlipAverage"`

	// same as addLiquidityVolume from pool/stats
	PoolStakedTotal string `json:"poolStakedTotal"`

	// same as swapVolume / swapCount from pool/stats
	PoolTxAverage string `json:"poolTxAverage"`

	// same as units from pool/stats
	PoolUnits string `json:"poolUnits"`

	// Int64, same as buyVolume + sellVolume
	PoolVolume string `json:"poolVolume"`

	// same as assetPrice from pool/stats
	Price string `json:"price"`

	// same as runeDepth from pool/stats
	RuneDepth string `json:"runeDepth"`

	// same as addRuneLiquidityVolume from pool/stats
	RuneStakedTotal string `json:"runeStakedTotal"`

	// same as toRuneCount from pool/stats
	SellAssetCount string `json:"sellAssetCount"`

	// same as toRuneFees / toRuneCount from pool/stats
	SellFeeAverage string `json:"sellFeeAverage"`

	// same as toRuneFees from pool/stats
	SellFeesTotal string `json:"sellFeesTotal"`

	// same as toRuneAverageSlip from pool/stats
	SellSlipAverage string `json:"sellSlipAverage"`

	// same as toRuneVolume / toRuneCount from pool/stats
	SellTxAverage string `json:"sellTxAverage"`

	// same as toRuneVolume from pool/stats
	SellVolume string `json:"sellVolume"`

	// same as addLiquidityCount from pool/stats
	StakeTxCount string `json:"stakeTxCount"`

	// same as uniqueMemberCount from pool/stats
	StakersCount string `json:"stakersCount"`

	// same as addLiquidityCount + withdrawCount from pool/stats
	StakingTxCount string `json:"stakingTxCount"`

	// same as status from pool/stats
	Status string `json:"status"`

	// Int64, same as history/swaps:uniqueSwapperCount
	SwappersCount string `json:"swappersCount"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64, same as swapVolume pool/stats?period=24h
	Volume24h string `json:"volume24h"`

	// same as withdrawCount from pool/stats
	WithdrawTxCount string `json:"withdrawTxCount"`
}

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64, same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64, same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`
	Asset                  string `json:"asset"`

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64, same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Float, same as history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64, same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64, same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float, same as history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64, same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64, same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Int64, number of unique adresses that initiated swaps transactions in the period.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Liquidity Units in the pool
	Units string `json:"units"`

	// Int64, same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64, same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64, same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// Queue defines model for Queue.
type Queue struct {
	Outbound string `json:"outbound"`
	Swap     string `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Daily active users (unique addresses interacting)
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Daily transactions
	DailyTx string `json:"dailyTx"`

	// Monthly active users
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Monthly transactions
	MonthlyTx string `json:"monthlyTx"`

	// Total buying transactions
	TotalAssetBuys string `json:"totalAssetBuys"`

	// Total selling transactions
	TotalAssetSells string `json:"totalAssetSells"`

	// Total RUNE balances
	TotalDepth string `json:"totalDepth"`

	// Total staking transactions
	TotalStakeTx string `json:"totalStakeTx"`

	// Total staked (in RUNE Value)
	TotalStaked string `json:"totalStaked"`

	// Total transactions
	TotalTx string `json:"totalTx"`

	// Total unique swappers & members
	TotalUsers string `json:"totalUsers"`

	// Total (in RUNE Value) of all assets swapped since start
	TotalVolume string `json:"totalVolume"`

	// Total withdrawing transactions
	TotalWithdrawTx string `json:"totalWithdrawTx"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float, the average slip by swap. Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float, the average slip for swaps to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64, the fees collected from swaps to asset denoted in rune
	ToAssetFees string `json:"toAssetFees"`

	// Int64, volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float, the average slip for swaps to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64, the fees collected from swaps to rune
	ToRuneFees string `json:"toRuneFees"`

	// Int64, volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64, the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64, toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Int64 (10^8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), trade slip percentage
	TradeSlip string `json:"tradeSlip"`

	// Int64 (10^8), minimum output amount specified for the swap
	TradeTarget string `json:"tradeTarget"`
}

// Transaction defines model for Transaction.
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction memo
	Memo string `json:"memo"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolLegacyResponse defines model for PoolLegacyResponse.
type PoolLegacyResponse PoolLegacyDetail

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Address of sender or recipient of any in/out transaction related to the action
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action (swap, addLiquidity, withdraw, donate, refund)
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *string `json:"period,omitempty"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *string `json:"status,omitempty"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"3Wfi2HPwpPU4j4+Pj/8/AAD//7+W8B79wgAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
