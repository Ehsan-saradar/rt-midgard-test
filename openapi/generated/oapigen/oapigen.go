// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Action defines model for Action.
type Action struct {

	// Int64, Unix timestamp for when the action was registered
	Date string `json:"date"`

	// Int64, block height at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status string `json:"status"`

	// Type of action
	Type string `json:"type"`
}

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64, Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64, Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64, Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64, Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64, Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64, Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64, Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64, Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64, Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64, Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Coin defines model for Coin.
type Coin struct {

	// Int64 (10^8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64, the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Int64, the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64, Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64, Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64, System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64, Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistoryItemPool defines model for EarningsHistoryItemPool.
type EarningsHistoryItemPool struct {

	// Int64, Share of earnings sent to the pool during the time interval
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string `json:"address"`
	Chain   string `json:"chain"`

	// indicate whether this chain has halted
	Halted bool   `json:"halted"`
	PubKey string `json:"pub_key"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                  int64 `json:"AsgardSize"`
	BadValidatorRate            int64 `json:"BadValidatorRate"`
	BlocksPerYear               int64 `json:"BlocksPerYear"`
	ChurnInterval               int64 `json:"ChurnInterval"`
	ChurnRetryInterval          int64 `json:"ChurnRetryInterval"`
	CliTxCost                   int64 `json:"CliTxCost"`
	DesiredValidatorSet         int64 `json:"DesiredValidatorSet"`
	DoubleSignMaxAge            int64 `json:"DoubleSignMaxAge"`
	EmissionCurve               int64 `json:"EmissionCurve"`
	FailKeygenSlashPoints       int64 `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints      int64 `json:"FailKeysignSlashPoints"`
	FundMigrationInterval       int64 `json:"FundMigrationInterval"`
	JailTimeKeygen              int64 `json:"JailTimeKeygen"`
	JailTimeKeysign             int64 `json:"JailTimeKeysign"`
	LackOfObservationPenalty    int64 `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks       int64 `json:"LiquidityLockUpBlocks"`
	MinimumBondInRune           int64 `json:"MinimumBondInRune"`
	MinimumNodesForBFT          int64 `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil    int64 `json:"MinimumNodesForYggdrasil"`
	NativeChainGasFee           int64 `json:"NativeChainGasFee"`
	NewPoolCycle                int64 `json:"NewPoolCycle"`
	ObservationDelayFlexibility int64 `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints          int64 `json:"ObserveSlashPoints"`
	OldValidatorRate            int64 `json:"OldValidatorRate"`
	OutboundTransactionFee      int64 `json:"OutboundTransactionFee"`
	SigningTransactionPeriod    int64 `json:"SigningTransactionPeriod"`
	YggFundLimit                int64 `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock struct {
	Current []LastblockItem `json:"current"`
}

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn string `json:"last_observed_in"`
	LastSignedOut  string `json:"last_signed_out"`
	Thorchain      string `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64 (10^8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64 (10^8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64 (10^8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64 (10^8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64 (10^8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64 (10^8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64, total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64, total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64, total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`
	PoolShareFactor         string `json:"poolShareFactor"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64, Total Rune pooled in all pools
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64, Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NetworkFees defines model for NetworkFees.
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolLegacyDetail defines model for PoolLegacyDetail.
type PoolLegacyDetail struct {
	Asset string `json:"asset"`

	// same as assetDepth from pool/stats
	AssetDepth string `json:"assetDepth"`

	// same as addAssetLiquidityVolume from pool/stats
	AssetStakedTotal string `json:"assetStakedTotal"`

	// same as toAssetCount from pool/stats
	BuyAssetCount string `json:"buyAssetCount"`

	// same as toAssetFees / toAssetCount from pool/stats
	BuyFeeAverage string `json:"buyFeeAverage"`

	// same as toAssetFees from pool/stats
	BuyFeesTotal string `json:"buyFeesTotal"`

	// same as toAssetAverageSlip from pool/stats
	BuySlipAverage string `json:"buySlipAverage"`

	// same as toAssetVolume / toAssetCount from pool/stats
	BuyTxAverage string `json:"buyTxAverage"`

	// same as toAssetVolume from pool/stats
	BuyVolume string `json:"buyVolume"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// same as 2*runeDepth from pool/stats
	PoolDepth string `json:"poolDepth"`

	// same as totalFees / swapCount from pool/stats
	PoolFeeAverage string `json:"poolFeeAverage"`

	// same as totalFees from pool/stats
	PoolFeesTotal string `json:"poolFeesTotal"`

	// same as averageSlip from pool/stats
	PoolSlipAverage string `json:"poolSlipAverage"`

	// same as addLiquidityVolume from pool/stats
	PoolStakedTotal string `json:"poolStakedTotal"`

	// same as swapVolume / swapCount from pool/stats
	PoolTxAverage string `json:"poolTxAverage"`

	// same as units from pool/stats
	PoolUnits string `json:"poolUnits"`

	// Int64, same as buyVolume + sellVolume
	PoolVolume string `json:"poolVolume"`

	// same as assetPrice from pool/stats
	Price string `json:"price"`

	// same as runeDepth from pool/stats
	RuneDepth string `json:"runeDepth"`

	// same as addRuneLiquidityVolume from pool/stats
	RuneStakedTotal string `json:"runeStakedTotal"`

	// same as toRuneCount from pool/stats
	SellAssetCount string `json:"sellAssetCount"`

	// same as toRuneFees / toRuneCount from pool/stats
	SellFeeAverage string `json:"sellFeeAverage"`

	// same as toRuneFees from pool/stats
	SellFeesTotal string `json:"sellFeesTotal"`

	// same as toRuneAverageSlip from pool/stats
	SellSlipAverage string `json:"sellSlipAverage"`

	// same as toRuneVolume / toRuneCount from pool/stats
	SellTxAverage string `json:"sellTxAverage"`

	// same as toRuneVolume from pool/stats
	SellVolume string `json:"sellVolume"`

	// same as addLiquidityCount from pool/stats
	StakeTxCount string `json:"stakeTxCount"`

	// same as uniqueMemberCount from pool/stats
	StakersCount string `json:"stakersCount"`

	// same as addLiquidityCount + withdrawCount from pool/stats
	StakingTxCount string `json:"stakingTxCount"`

	// same as status from pool/stats
	Status string `json:"status"`

	// Int64, same as history/swaps:uniqueSwapperCount
	SwappersCount string `json:"swappersCount"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64, same as swapVolume pool/stats?period=24h
	Volume24h string `json:"volume24h"`

	// same as withdrawCount from pool/stats
	WithdrawTxCount string `json:"withdrawTxCount"`
}

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64, same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64, same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`
	Asset                  string `json:"asset"`

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64, same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64, same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64, same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64, same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64, same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Int64, number of unique adresses that initiated swaps transactions in the period.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Liquidity Units in the pool
	Units string `json:"units"`

	// Int64, same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64, same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64, same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// Queue defines model for Queue.
type Queue struct {
	Outbound string `json:"outbound"`
	Swap     string `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64 (10^8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, unique users (addresses) initiating swaps in the last 24 hours.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64, unique users (addresses) initiating swaps in the last 30 days.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64 (10^8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps since beginning.
	SwapCount string `json:"swapCount"`

	// Int64, number of swaps in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64, total volume of swaps denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Int64, unique users (addresses) initiating swaps since beginning.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64 (10^8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip by swap.
	// Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64, the fees collected from swaps to asset denoted in rune
	ToAssetFees string `json:"toAssetFees"`

	// Int64, volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64, the fees collected from swaps to rune
	ToRuneFees string `json:"toRuneFees"`

	// Int64, volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64, the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64, toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Int64 (10^8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), trade slip percentage
	TradeSlip string `json:"tradeSlip"`

	// Int64 (10^8), minimum output amount specified for the swap
	TradeTarget string `json:"tradeTarget"`
}

// Transaction defines model for Transaction.
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolLegacyResponse defines model for PoolLegacyResponse.
type PoolLegacyResponse PoolLegacyDetail

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Address of sender or recipient of any in/out transaction related to the action
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action (swap, addLiquidity, withdraw, donate, refund)
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *string `json:"period,omitempty"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *string `json:"status,omitempty"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAD///D6kdUaxwAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
