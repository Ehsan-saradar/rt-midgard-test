// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {

	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Represents a digital currency amount
type Coin struct {

	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {

	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string  `json:"address"`
	Chain   string  `json:"chain"`
	GasRate *string `json:"gas_rate,omitempty"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                    int64  `json:"AsgardSize"`
	BadValidatorRate              int64  `json:"BadValidatorRate"`
	BadValidatorRedline           int    `json:"BadValidatorRedline"`
	BlocksPerYear                 int64  `json:"BlocksPerYear"`
	ChurnInterval                 int64  `json:"ChurnInterval"`
	ChurnRetryInterval            int64  `json:"ChurnRetryInterval"`
	DesiredValidatorSet           int64  `json:"DesiredValidatorSet"`
	DoubleSignMaxAge              int64  `json:"DoubleSignMaxAge"`
	EmissionCurve                 int64  `json:"EmissionCurve"`
	FailKeygenSlashPoints         int64  `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints        int64  `json:"FailKeysignSlashPoints"`
	FullImpLossProtectionBlocks   int64  `json:"FullImpLossProtectionBlocks"`
	FundMigrationInterval         int64  `json:"FundMigrationInterval"`
	IncentiveCurve                int64  `json:"IncentiveCurve"`
	JailTimeKeygen                int64  `json:"JailTimeKeygen"`
	JailTimeKeysign               int64  `json:"JailTimeKeysign"`
	LackOfObservationPenalty      int64  `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks         int64  `json:"LiquidityLockUpBlocks"`
	MaxAvailablePools             int64  `json:"MaxAvailablePools"`
	MaxSwapsPerBlock              int64  `json:"MaxSwapsPerBlock"`
	MinRunePoolDepth              int64  `json:"MinRunePoolDepth"`
	MinSlashPointsForBadValidator int64  `json:"MinSlashPointsForBadValidator"`
	MinSwapsPerBlock              int64  `json:"MinSwapsPerBlock"`
	MinimumBondInRune             int64  `json:"MinimumBondInRune"`
	MinimumNodesForBFT            int64  `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil      int64  `json:"MinimumNodesForYggdrasil"`
	NativeTransactionFee          int64  `json:"NativeTransactionFee"`
	NewPoolCycle                  *int64 `json:"NewPoolCycle,omitempty"`
	ObservationDelayFlexibility   int64  `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints            int64  `json:"ObserveSlashPoints"`
	OldValidatorRate              int64  `json:"OldValidatorRate"`
	OutboundTransactionFee        int64  `json:"OutboundTransactionFee"`
	PoolCycle                     int64  `json:"PoolCycle"`
	SigningTransactionPeriod      int64  `json:"SigningTransactionPeriod"`
	VirtualMultSynths             int64  `json:"VirtualMultSynths"`
	YggFundLimit                  int64  `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock []LastblockItem

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn int64  `json:"last_observed_in"`
	LastSignedOut  int64  `json:"last_signed_out"`
	Thorchain      int64  `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`
	PoolShareFactor         string `json:"poolShareFactor"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), Total Rune pooled in all pools
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// ObservedChain defines model for ObservedChain.
type ObservedChain struct {
	Chain  string `json:"chain"`
	Height int    `json:"height"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolLegacyDetail defines model for PoolLegacyDetail.
type PoolLegacyDetail struct {
	Asset string `json:"asset"`

	// same as assetDepth from pool/stats
	AssetDepth string `json:"assetDepth"`

	// same as addAssetLiquidityVolume from pool/stats
	AssetStakedTotal string `json:"assetStakedTotal"`

	// same as toAssetCount from pool/stats
	BuyAssetCount string `json:"buyAssetCount"`

	// same as toAssetFees / toAssetCount from pool/stats
	BuyFeeAverage string `json:"buyFeeAverage"`

	// same as toAssetFees from pool/stats
	BuyFeesTotal string `json:"buyFeesTotal"`

	// same as toAssetAverageSlip from pool/stats
	BuySlipAverage string `json:"buySlipAverage"`

	// same as toAssetVolume / toAssetCount from pool/stats
	BuyTxAverage string `json:"buyTxAverage"`

	// same as toAssetVolume from pool/stats
	BuyVolume string `json:"buyVolume"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// same as 2*runeDepth from pool/stats
	PoolDepth string `json:"poolDepth"`

	// same as totalFees / swapCount from pool/stats
	PoolFeeAverage string `json:"poolFeeAverage"`

	// same as totalFees from pool/stats
	PoolFeesTotal string `json:"poolFeesTotal"`

	// same as averageSlip from pool/stats
	PoolSlipAverage string `json:"poolSlipAverage"`

	// same as addLiquidityVolume from pool/stats
	PoolStakedTotal string `json:"poolStakedTotal"`

	// same as swapVolume / swapCount from pool/stats
	PoolTxAverage string `json:"poolTxAverage"`

	// same as units from pool/stats
	PoolUnits string `json:"poolUnits"`

	// Int64(e8), same as buyVolume + sellVolume
	PoolVolume string `json:"poolVolume"`

	// same as assetPrice from pool/stats
	Price string `json:"price"`

	// same as runeDepth from pool/stats
	RuneDepth string `json:"runeDepth"`

	// same as addRuneLiquidityVolume from pool/stats
	RuneStakedTotal string `json:"runeStakedTotal"`

	// same as toRuneCount from pool/stats
	SellAssetCount string `json:"sellAssetCount"`

	// same as toRuneFees / toRuneCount from pool/stats
	SellFeeAverage string `json:"sellFeeAverage"`

	// same as toRuneFees from pool/stats
	SellFeesTotal string `json:"sellFeesTotal"`

	// same as toRuneAverageSlip from pool/stats
	SellSlipAverage string `json:"sellSlipAverage"`

	// same as toRuneVolume / toRuneCount from pool/stats
	SellTxAverage string `json:"sellTxAverage"`

	// same as toRuneVolume from pool/stats
	SellVolume string `json:"sellVolume"`

	// same as addLiquidityCount from pool/stats
	StakeTxCount string `json:"stakeTxCount"`

	// same as uniqueMemberCount from pool/stats
	StakersCount string `json:"stakersCount"`

	// same as addLiquidityCount + withdrawCount from pool/stats
	StakingTxCount string `json:"stakingTxCount"`

	// same as status from pool/stats
	Status string `json:"status"`

	// Int64, same as history/swaps:uniqueSwapperCount
	SwappersCount string `json:"swappersCount"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64(e8), same as swapVolume pool/stats?period=24h
	Volume24h string `json:"volume24h"`

	// same as withdrawCount from pool/stats
	WithdrawTxCount string `json:"withdrawTxCount"`
}

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`
	Asset                  string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Int64, number of unique adresses that initiated swaps transactions in the period.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// PreflightStatus defines model for PreflightStatus.
type PreflightStatus struct {
	Code   int    `json:"code"`
	Reason string `json:"reason"`
	Status string `json:"status"`
}

// ProxiedNode defines model for ProxiedNode.
type ProxiedNode struct {
	ActiveBlockHeight int    `json:"active_block_height"`
	Bond              string `json:"bond"`
	BondAddress       string `json:"bond_address"`
	CurrentAward      string `json:"current_award"`
	ForcedToLeave     bool   `json:"forced_to_leave"`
	IpAddress         string `json:"ip_address"`
	Jail              struct {
		NodeAddress *string `json:"node_address,omitempty"`
	} `json:"jail"`
	LeaveHeight     int             `json:"leave_height"`
	NodeAddress     string          `json:"node_address"`
	ObserveChains   []ObservedChain `json:"observe_chains"`
	PreflightStatus PreflightStatus `json:"preflight_status"`
	PubKeySet       struct {
		Ed25519   string `json:"ed25519"`
		Secp256k1 string `json:"secp256k1"`
	} `json:"pub_key_set"`
	RequestedToLeave    bool     `json:"requested_to_leave"`
	SignerMembership    []string `json:"signer_membership"`
	SlashPoints         int      `json:"slash_points"`
	Status              string   `json:"status"`
	StatusSince         int      `json:"status_since"`
	ValidatorConsPubKey string   `json:"validator_cons_pub_key"`
	Version             string   `json:"version"`
}

// ProxiedNodes defines model for ProxiedNodes.
type ProxiedNodes []ProxiedNode

// Queue defines model for Queue.
type Queue struct {
	Internal int `json:"internal"`
	Outbound int `json:"outbound"`
	Swap     int `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, unique users (addresses) initiating swaps in the last 24 hours.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, unique users (addresses) initiating swaps in the last 30 days.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Int64, unique users (addresses) initiating swaps since beginning.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip by swap.
	// Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps to asset denoted in rune
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps to rune
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64(e8), toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {

	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {

	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at the end of the interval
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolLegacyResponse defines model for PoolLegacyResponse.
type PoolLegacyResponse PoolLegacyDetail

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ProxiedNodesResponse defines model for ProxiedNodesResponse.
type ProxiedNodesResponse ProxiedNodes

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {

	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"X79+/fr/AgAA//+UCYxWDPcAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
