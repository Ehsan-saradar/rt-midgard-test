// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// AssetSummary defines model for AssetSummary.
type AssetSummary struct {
	Asset string `json:"asset"`

	// Int64, unix timestamp (second).
	DateCreated string `json:"dateCreated"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	PriceRune string `json:"priceRune"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, yearly rewards approximated from last week.
	PoolAPY string `json:"poolAPY"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	Price string `json:"price"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Enabled, Bootstrap.
	Status string `json:"status"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Two4HVolume string `json:"two4HVolume"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`
}

// AssetsSummaryResponse defines model for AssetsSummaryResponse.
type AssetsSummaryResponse []AssetSummary

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {

	// True means healthy, connected to database.
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain.
	InSync bool `json:"inSync"`

	// Int64, the current block count.
	ScannerHeight string `json:"scannerHeight"`
}

// PoolDetailResponse defines model for PoolDetailResponse.
type PoolDetailResponse PoolDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse []string

// GetAssetInfoParams defines parameters for GetAssetInfo.
type GetAssetInfoParams struct {

	// One or more comma separated unique asset (CHAIN.SYMBOL)
	Asset string `json:"asset"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
