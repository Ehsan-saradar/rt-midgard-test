// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Action defines model for Action.
type Action struct {

	// Int64, Unix timestamp for when the action was registered
	Date string `json:"date"`

	// Int64, block height at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status string `json:"status"`

	// Type of action
	Type string `json:"type"`
}

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64, Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64, Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64, Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64, Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64, Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64, Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64, Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64, Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64, Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64, Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Coin defines model for Coin.
type Coin struct {

	// Int64 (10^8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64, Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64, Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64, System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64, Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistoryItemPool defines model for EarningsHistoryItemPool.
type EarningsHistoryItemPool struct {

	// Int64, Share of earnings sent to the pool during the time interval
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses struct {
	Current []InboundAddressesItem `json:"current"`
}

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string `json:"address"`
	Chain   string `json:"chain"`

	// indicate whether this chain has halted
	Halted bool   `json:"halted"`
	PubKey string `json:"pub_key"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                  int64 `json:"AsgardSize"`
	BadValidatorRate            int64 `json:"BadValidatorRate"`
	BlocksPerYear               int64 `json:"BlocksPerYear"`
	ChurnInterval               int64 `json:"ChurnInterval"`
	ChurnRetryInterval          int64 `json:"ChurnRetryInterval"`
	CliTxCost                   int64 `json:"CliTxCost"`
	DesiredValidatorSet         int64 `json:"DesiredValidatorSet"`
	DoubleSignMaxAge            int64 `json:"DoubleSignMaxAge"`
	EmissionCurve               int64 `json:"EmissionCurve"`
	FailKeygenSlashPoints       int64 `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints      int64 `json:"FailKeysignSlashPoints"`
	FundMigrationInterval       int64 `json:"FundMigrationInterval"`
	JailTimeKeygen              int64 `json:"JailTimeKeygen"`
	JailTimeKeysign             int64 `json:"JailTimeKeysign"`
	LackOfObservationPenalty    int64 `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks       int64 `json:"LiquidityLockUpBlocks"`
	MinimumBondInRune           int64 `json:"MinimumBondInRune"`
	MinimumNodesForBFT          int64 `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil    int64 `json:"MinimumNodesForYggdrasil"`
	NativeChainGasFee           int64 `json:"NativeChainGasFee"`
	NewPoolCycle                int64 `json:"NewPoolCycle"`
	ObservationDelayFlexibility int64 `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints          int64 `json:"ObserveSlashPoints"`
	OldValidatorRate            int64 `json:"OldValidatorRate"`
	OutboundTransactionFee      int64 `json:"OutboundTransactionFee"`
	SigningTransactionPeriod    int64 `json:"SigningTransactionPeriod"`
	YggFundLimit                int64 `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock struct {
	Current []LastblockItem `json:"current"`
}

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn string `json:"last_observed_in"`
	LastSignedOut  string `json:"last_signed_out"`
	Thorchain      string `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64 (10^8), total deposits in RUNE during the time interval.
	// Accounts for both asset (using the price at deposit time) and RUNE deposited into pools
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64 (10^8), total withdrawals in RUNE during the time interval. Accounts for
	// both asset (using the price at withdrawal time) and RUNE withdrawn from pools
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64, total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64, total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64, total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`
	PoolShareFactor         string `json:"poolShareFactor"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64, Total Rune pooled in all pools
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64, Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NetworkFees defines model for NetworkFees.
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolLegacyDetail defines model for PoolLegacyDetail.
type PoolLegacyDetail struct {
	Asset string `json:"asset"`

	// same as assetDepth from pool/stats
	AssetDepth string `json:"assetDepth"`

	// same as toAssetCount from pool/stats
	BuyAssetCount string `json:"buyAssetCount"`

	// same as toAssetVolume / toAssetCount from pool/stats
	BuyTxAverage string `json:"buyTxAverage"`

	// same as toAssetVolume from pool/stats
	BuyVolume string `json:"buyVolume"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// same as 2*runeDepth from pool/stats
	PoolDepth string `json:"poolDepth"`

	// same as totalFees / swapCount from pool/stats
	PoolFeeAverage string `json:"poolFeeAverage"`

	// same as totalFees from pool/stats
	PoolFeesTotal string `json:"poolFeesTotal"`

	// same as averageSlip from pool/stats
	PoolSlipAverage string `json:"poolSlipAverage"`

	// same as addLiquidityVolume from pool/stats
	PoolStakedTotal string `json:"poolStakedTotal"`

	// same as swapVolume / swapCount from pool/stats
	PoolTxAverage string `json:"poolTxAverage"`

	// same as units from pool/stats
	PoolUnits string `json:"poolUnits"`

	// Int64, same as buyVolume + sellVolume
	PoolVolume string `json:"poolVolume"`

	// same as assetPrice from pool/stats
	Price string `json:"price"`

	// same as runeDepth from pool/stats
	RuneDepth string `json:"runeDepth"`

	// same as toRuneCount from pool/stats
	SellAssetCount string `json:"sellAssetCount"`

	// same as toRuneVolume / toRuneCount from pool/stats
	SellTxAverage string `json:"sellTxAverage"`

	// same as toRuneVolume from pool/stats
	SellVolume string `json:"sellVolume"`

	// same as addLiquidityCount from pool/stats
	StakeTxCount string `json:"stakeTxCount"`

	// same as uniqueMemberCount from pool/stats
	StakersCount string `json:"stakersCount"`

	// same as addLiquidityCount + withdrawCount from pool/stats
	StakingTxCount string `json:"stakingTxCount"`

	// same as status from pool/stats
	Status string `json:"status"`

	// Int64, same as history/swaps:uniqueSwapperCount
	SwappersCount string `json:"swappersCount"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune
	Volume24h string `json:"volume24h"`

	// same as withdrawCount from pool/stats
	WithdrawTxCount string `json:"withdrawTxCount"`
}

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64, same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`
	Asset              string `json:"asset"`

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64, same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64, same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64, same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Int64, number of unique adresses that initiated swaps transactions in the period.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Liquidity Units in the pool
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune
	Volume24h string `json:"volume24h"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64, same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// Queue defines model for Queue.
type Queue struct {
	Outbound string `json:"outbound"`
	Swap     string `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Daily active users (unique addresses interacting)
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Daily transactions
	DailyTx string `json:"dailyTx"`

	// Monthly active users
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Monthly transactions
	MonthlyTx string `json:"monthlyTx"`

	// Total buying transactions
	TotalAssetBuys string `json:"totalAssetBuys"`

	// Total selling transactions
	TotalAssetSells string `json:"totalAssetSells"`

	// Total RUNE balances
	TotalDepth string `json:"totalDepth"`

	// Total staking transactions
	TotalStakeTx string `json:"totalStakeTx"`

	// Total staked (in RUNE Value)
	TotalStaked string `json:"totalStaked"`

	// Total transactions
	TotalTx string `json:"totalTx"`

	// Total unique swappers & members
	TotalUsers string `json:"totalUsers"`

	// Total (in RUNE Value) of all assets swapped since start
	TotalVolume string `json:"totalVolume"`

	// Total withdrawing transactions
	TotalWithdrawTx string `json:"totalWithdrawTx"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float, the average slip by swap. Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64, volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64, volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64, the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64, toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Int64 (10^8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), trade slip percentage
	TradeSlip string `json:"tradeSlip"`

	// Int64 (10^8), minimum output amount specified for the swap
	TradeTarget string `json:"tradeTarget"`
}

// Transaction defines model for Transaction.
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction memo
	Memo string `json:"memo"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolLegacyResponse defines model for PoolLegacyResponse.
type PoolLegacyResponse PoolLegacyDetail

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Address of sender or recipient of any in/out transaction related to the action
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action (swap, addLiquidity, withdraw, donate, refund)
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *string `json:"period,omitempty"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *string `json:"status,omitempty"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Z+LYc/Ck9TifP3/+/P8DAAD//+Jl0MO7twAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
