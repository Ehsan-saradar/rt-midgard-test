// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Action defines model for Action.
type Action struct {

	// Int64, Unix timestamp for when the action was registered
	Date string `json:"date"`

	// Int64, block height at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status string `json:"status"`

	// Type of action
	Type string `json:"type"`
}

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64, Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64, Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64, Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64, Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64, Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64, Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64, Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64, Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64, Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64, Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Coin defines model for Coin.
type Coin struct {

	// Int64 (10^8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64, Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64, Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64, System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64, Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistoryItemPool defines model for EarningsHistoryItemPool.
type EarningsHistoryItemPool struct {

	// Int64, Share of earnings sent to the pool during the time interval
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses struct {
	Current []InboundAddressesItem `json:"current"`
}

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string `json:"address"`
	Chain   string `json:"chain"`

	// indicate whether this chain has halted
	Halted bool   `json:"halted"`
	PubKey string `json:"pub_key"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                  int64 `json:"AsgardSize"`
	BadValidatorRate            int64 `json:"BadValidatorRate"`
	BlocksPerYear               int64 `json:"BlocksPerYear"`
	ChurnInterval               int64 `json:"ChurnInterval"`
	ChurnRetryInterval          int64 `json:"ChurnRetryInterval"`
	CliTxCost                   int64 `json:"CliTxCost"`
	DesiredValidatorSet         int64 `json:"DesiredValidatorSet"`
	DoubleSignMaxAge            int64 `json:"DoubleSignMaxAge"`
	EmissionCurve               int64 `json:"EmissionCurve"`
	FailKeygenSlashPoints       int64 `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints      int64 `json:"FailKeysignSlashPoints"`
	FundMigrationInterval       int64 `json:"FundMigrationInterval"`
	JailTimeKeygen              int64 `json:"JailTimeKeygen"`
	JailTimeKeysign             int64 `json:"JailTimeKeysign"`
	LackOfObservationPenalty    int64 `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks       int64 `json:"LiquidityLockUpBlocks"`
	MinimumBondInRune           int64 `json:"MinimumBondInRune"`
	MinimumNodesForBFT          int64 `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil    int64 `json:"MinimumNodesForYggdrasil"`
	NativeChainGasFee           int64 `json:"NativeChainGasFee"`
	NewPoolCycle                int64 `json:"NewPoolCycle"`
	ObservationDelayFlexibility int64 `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints          int64 `json:"ObserveSlashPoints"`
	OldValidatorRate            int64 `json:"OldValidatorRate"`
	OutboundTransactionFee      int64 `json:"OutboundTransactionFee"`
	SigningTransactionPeriod    int64 `json:"SigningTransactionPeriod"`
	YggFundLimit                int64 `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock struct {
	Current []LastblockItem `json:"current"`
}

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn string `json:"last_observed_in"`
	LastSignedOut  string `json:"last_signed_out"`
	Thorchain      string `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64 (10^8), total deposits in RUNE during the time interval.
	// Accounts for both asset (using the price at deposit time) and RUNE deposited into pools
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64 (10^8), total withdrawals in RUNE during the time interval. Accounts for
	// both asset (using the price at withdrawal time) and RUNE withdrawn from pools
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// Liquidity provider data for all the pools of a given member
	Pools []MemberPoolDetails `json:"pools"`
}

// MemberPoolDetails defines model for MemberPoolDetails.
type MemberPoolDetails struct {

	// Int64, total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// Int64, total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Int64, total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`
	PoolShareFactor         string `json:"poolShareFactor"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64, Total Rune pooled in all pools
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64, Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NetworkFees defines model for NetworkFees.
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolLegacyDetail defines model for PoolLegacyDetail.
type PoolLegacyDetail struct {
	Asset string `json:"asset"`

	// same as assetDepth from pool/stats
	AssetDepth string `json:"assetDepth"`

	// same as toAssetCount from pool/stats
	BuyAssetCount string `json:"buyAssetCount"`

	// same as toAssetVolume / toAssetCount from pool/stats
	BuyTxAverage string `json:"buyTxAverage"`

	// same as toAssetVolume from pool/stats
	BuyVolume string `json:"buyVolume"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// same as 2*runeDepth from pool/stats
	PoolDepth string `json:"poolDepth"`

	// same as totalFees / swapCount from pool/stats
	PoolFeeAverage string `json:"poolFeeAverage"`

	// same as totalFees from pool/stats
	PoolFeesTotal string `json:"poolFeesTotal"`

	// same as averageSlip from pool/stats
	PoolSlipAverage string `json:"poolSlipAverage"`

	// same as addLiquidityVolume from pool/stats
	PoolStakedTotal string `json:"poolStakedTotal"`

	// same as swapVolume / swapCount from pool/stats
	PoolTxAverage string `json:"poolTxAverage"`

	// same as units from pool/stats
	PoolUnits string `json:"poolUnits"`

	// Int64, same as buyVolume + sellVolume
	PoolVolume string `json:"poolVolume"`

	// same as assetPrice from pool/stats
	Price string `json:"price"`

	// same as runeDepth from pool/stats
	RuneDepth string `json:"runeDepth"`

	// same as toRuneCount from pool/stats
	SellAssetCount string `json:"sellAssetCount"`

	// same as toRuneVolume / toRuneCount from pool/stats
	SellTxAverage string `json:"sellTxAverage"`

	// same as toRuneVolume from pool/stats
	SellVolume string `json:"sellVolume"`

	// same as addLiquidityCount from pool/stats
	StakeTxCount string `json:"stakeTxCount"`

	// same as addLiquidityCount + withdrawCount from pool/stats
	StakingTxCount string `json:"stakingTxCount"`

	// same as status from pool/stats
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune
	Volume24h string `json:"volume24h"`

	// same as withdrawCount from pool/stats
	WithdrawTxCount string `json:"withdrawTxCount"`
}

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64, same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`
	Asset              string `json:"asset"`

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64, same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64, same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64, same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, number of unique adresses that initiated swaps transactions in the period.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Liquidity Units in the pool
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune
	Volume24h string `json:"volume24h"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64, same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// Queue defines model for Queue.
type Queue struct {
	Outbound string `json:"outbound"`
	Swap     string `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Daily active users (unique addresses interacting)
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Daily transactions
	DailyTx string `json:"dailyTx"`

	// Monthly active users
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Monthly transactions
	MonthlyTx string `json:"monthlyTx"`

	// Total buying transactions
	TotalAssetBuys string `json:"totalAssetBuys"`

	// Total selling transactions
	TotalAssetSells string `json:"totalAssetSells"`

	// Total RUNE balances
	TotalDepth string `json:"totalDepth"`

	// Total staking transactions
	TotalStakeTx string `json:"totalStakeTx"`

	// Total staked (in RUNE Value)
	TotalStaked string `json:"totalStaked"`

	// Total transactions
	TotalTx string `json:"totalTx"`

	// Total unique swappers & members
	TotalUsers string `json:"totalUsers"`

	// Total (in RUNE Value) of all assets swapped since start
	TotalVolume string `json:"totalVolume"`

	// Total withdrawing transactions
	TotalWithdrawTx string `json:"totalWithdrawTx"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float, the average slip by swap. Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64, volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64, volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64, the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64, toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Int64 (10^8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), trade slip percentage
	TradeSlip string `json:"tradeSlip"`

	// Int64 (10^8), minimum output amount specified for the swap
	TradeTarget string `json:"tradeTarget"`
}

// Transaction defines model for Transaction.
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction memo
	Memo string `json:"memo"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolLegacyResponse defines model for PoolLegacyResponse.
type PoolLegacyResponse PoolLegacyDetail

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Address of sender or recipient of any in/out transaction related to the action
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action (swap, addLiquidity, withdraw, donate, refund)
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is all.
	Period *string `json:"period,omitempty"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *string `json:"status,omitempty"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"63E+f/78+d8DAAD//wMUkGRKtQAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
