// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {

	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Represents a digital currency amount
type Coin struct {

	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {

	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string  `json:"address"`
	Chain   string  `json:"chain"`
	GasRate *string `json:"gas_rate,omitempty"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                    int64  `json:"AsgardSize"`
	BadValidatorRate              int64  `json:"BadValidatorRate"`
	BadValidatorRedline           int    `json:"BadValidatorRedline"`
	BlocksPerYear                 int64  `json:"BlocksPerYear"`
	ChurnInterval                 int64  `json:"ChurnInterval"`
	ChurnRetryInterval            int64  `json:"ChurnRetryInterval"`
	DesiredValidatorSet           int64  `json:"DesiredValidatorSet"`
	DoubleSignMaxAge              int64  `json:"DoubleSignMaxAge"`
	EmissionCurve                 int64  `json:"EmissionCurve"`
	FailKeygenSlashPoints         int64  `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints        int64  `json:"FailKeysignSlashPoints"`
	FullImpLossProtectionBlocks   int64  `json:"FullImpLossProtectionBlocks"`
	FundMigrationInterval         int64  `json:"FundMigrationInterval"`
	IncentiveCurve                int64  `json:"IncentiveCurve"`
	JailTimeKeygen                int64  `json:"JailTimeKeygen"`
	JailTimeKeysign               int64  `json:"JailTimeKeysign"`
	LackOfObservationPenalty      int64  `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks         int64  `json:"LiquidityLockUpBlocks"`
	MaxAvailablePools             int64  `json:"MaxAvailablePools"`
	MaxSwapsPerBlock              int64  `json:"MaxSwapsPerBlock"`
	MinRunePoolDepth              int64  `json:"MinRunePoolDepth"`
	MinSlashPointsForBadValidator int64  `json:"MinSlashPointsForBadValidator"`
	MinSwapsPerBlock              int64  `json:"MinSwapsPerBlock"`
	MinimumBondInRune             int64  `json:"MinimumBondInRune"`
	MinimumNodesForBFT            int64  `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil      int64  `json:"MinimumNodesForYggdrasil"`
	NativeTransactionFee          int64  `json:"NativeTransactionFee"`
	NewPoolCycle                  *int64 `json:"NewPoolCycle,omitempty"`
	ObservationDelayFlexibility   int64  `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints            int64  `json:"ObserveSlashPoints"`
	OldValidatorRate              int64  `json:"OldValidatorRate"`
	OutboundTransactionFee        int64  `json:"OutboundTransactionFee"`
	PoolCycle                     int64  `json:"PoolCycle"`
	SigningTransactionPeriod      int64  `json:"SigningTransactionPeriod"`
	VirtualMultSynths             int64  `json:"VirtualMultSynths"`
	YggFundLimit                  int64  `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock struct {
	Current []LastblockItem `json:"current"`
}

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn int64  `json:"last_observed_in"`
	LastSignedOut  int64  `json:"last_signed_out"`
	Thorchain      int64  `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`
	PoolShareFactor         string `json:"poolShareFactor"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), Total Rune pooled in all pools
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// ObservedChain defines model for ObservedChain.
type ObservedChain struct {
	Chain  string `json:"chain"`
	Height int    `json:"height"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolLegacyDetail defines model for PoolLegacyDetail.
type PoolLegacyDetail struct {
	Asset string `json:"asset"`

	// same as assetDepth from pool/stats
	AssetDepth string `json:"assetDepth"`

	// same as addAssetLiquidityVolume from pool/stats
	AssetStakedTotal string `json:"assetStakedTotal"`

	// same as toAssetCount from pool/stats
	BuyAssetCount string `json:"buyAssetCount"`

	// same as toAssetFees / toAssetCount from pool/stats
	BuyFeeAverage string `json:"buyFeeAverage"`

	// same as toAssetFees from pool/stats
	BuyFeesTotal string `json:"buyFeesTotal"`

	// same as toAssetAverageSlip from pool/stats
	BuySlipAverage string `json:"buySlipAverage"`

	// same as toAssetVolume / toAssetCount from pool/stats
	BuyTxAverage string `json:"buyTxAverage"`

	// same as toAssetVolume from pool/stats
	BuyVolume string `json:"buyVolume"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// same as 2*runeDepth from pool/stats
	PoolDepth string `json:"poolDepth"`

	// same as totalFees / swapCount from pool/stats
	PoolFeeAverage string `json:"poolFeeAverage"`

	// same as totalFees from pool/stats
	PoolFeesTotal string `json:"poolFeesTotal"`

	// same as averageSlip from pool/stats
	PoolSlipAverage string `json:"poolSlipAverage"`

	// same as addLiquidityVolume from pool/stats
	PoolStakedTotal string `json:"poolStakedTotal"`

	// same as swapVolume / swapCount from pool/stats
	PoolTxAverage string `json:"poolTxAverage"`

	// same as units from pool/stats
	PoolUnits string `json:"poolUnits"`

	// Int64(e8), same as buyVolume + sellVolume
	PoolVolume string `json:"poolVolume"`

	// same as assetPrice from pool/stats
	Price string `json:"price"`

	// same as runeDepth from pool/stats
	RuneDepth string `json:"runeDepth"`

	// same as addRuneLiquidityVolume from pool/stats
	RuneStakedTotal string `json:"runeStakedTotal"`

	// same as toRuneCount from pool/stats
	SellAssetCount string `json:"sellAssetCount"`

	// same as toRuneFees / toRuneCount from pool/stats
	SellFeeAverage string `json:"sellFeeAverage"`

	// same as toRuneFees from pool/stats
	SellFeesTotal string `json:"sellFeesTotal"`

	// same as toRuneAverageSlip from pool/stats
	SellSlipAverage string `json:"sellSlipAverage"`

	// same as toRuneVolume / toRuneCount from pool/stats
	SellTxAverage string `json:"sellTxAverage"`

	// same as toRuneVolume from pool/stats
	SellVolume string `json:"sellVolume"`

	// same as addLiquidityCount from pool/stats
	StakeTxCount string `json:"stakeTxCount"`

	// same as uniqueMemberCount from pool/stats
	StakersCount string `json:"stakersCount"`

	// same as addLiquidityCount + withdrawCount from pool/stats
	StakingTxCount string `json:"stakingTxCount"`

	// same as status from pool/stats
	Status string `json:"status"`

	// Int64, same as history/swaps:uniqueSwapperCount
	SwappersCount string `json:"swappersCount"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64(e8), same as swapVolume pool/stats?period=24h
	Volume24h string `json:"volume24h"`

	// same as withdrawCount from pool/stats
	WithdrawTxCount string `json:"withdrawTxCount"`
}

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`
	Asset                  string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Int64, number of unique adresses that initiated swaps transactions in the period.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Liquidity Units in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// PreflightStatus defines model for PreflightStatus.
type PreflightStatus struct {
	Code   int    `json:"code"`
	Reason string `json:"reason"`
	Status string `json:"status"`
}

// ProxiedNode defines model for ProxiedNode.
type ProxiedNode struct {
	ActiveBlockHeight int    `json:"active_block_height"`
	Bond              string `json:"bond"`
	BondAddress       string `json:"bond_address"`
	CurrentAward      string `json:"current_award"`
	ForcedToLeave     bool   `json:"forced_to_leave"`
	IpAddress         string `json:"ip_address"`
	Jail              struct {
		NodeAddress *string `json:"node_address,omitempty"`
	} `json:"jail"`
	LeaveHeight     int             `json:"leave_height"`
	NodeAddress     string          `json:"node_address"`
	ObserveChains   []ObservedChain `json:"observe_chains"`
	PreflightStatus PreflightStatus `json:"preflight_status"`
	PubKeySet       struct {
		Ed25519   string `json:"ed25519"`
		Secp256k1 string `json:"secp256k1"`
	} `json:"pub_key_set"`
	RequestedToLeave    bool     `json:"requested_to_leave"`
	SignerMembership    []string `json:"signer_membership"`
	SlashPoints         int      `json:"slash_points"`
	Status              string   `json:"status"`
	StatusSince         int      `json:"status_since"`
	ValidatorConsPubKey string   `json:"validator_cons_pub_key"`
	Version             string   `json:"version"`
}

// ProxiedNodes defines model for ProxiedNodes.
type ProxiedNodes []ProxiedNode

// Queue defines model for Queue.
type Queue struct {
	Internal int `json:"internal"`
	Outbound int `json:"outbound"`
	Swap     int `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, unique users (addresses) initiating swaps in the last 24 hours.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, unique users (addresses) initiating swaps in the last 30 days.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Int64, unique users (addresses) initiating swaps since beginning.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip by swap.
	// Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps to asset denoted in rune
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps to rune
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64(e8), toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at the end of the interval
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolLegacyResponse defines model for PoolLegacyResponse.
type PoolLegacyResponse PoolLegacyDetail

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ProxiedNodesResponse defines model for ProxiedNodesResponse.
type ProxiedNodesResponse ProxiedNodes

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {

	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9/XIbN/Lgq6B4d7VyMqFJ6stWVWpPsuxffD9/6CwlV6lVTgFnQBLWDDAaYEgxKb/W",
	"vcC92BUawHxihiAt5TaJ9o+NzAEajUZ3oxvobvw+CHmSckaYFIOT3wcZESlngsA/TkNJOROfzG/qp5Az",
	"SZhUf+I0jWmIVZPnnwVn6jcRLkiC1V9pxlOSSaohYQ1J/UklSeCP/5qR2eBk8F+elxg81/3Fcz3y4Esw",
	"kOuUDE4GOMvwWv075LkePiIizGgK7U4Gb5k8OggQy5MpyRCfoYyIPJYCJViGC8rmSC4ImtMlYWhGY0ky",
	"MRwU0IXMKJsPvnwJBhm5y2lGosHJv8xYQYH9L0UHPv1MQjn4onrUEflEZJ4xgTBDgLPCxfRHM5650PgS",
	"DF5xJiRmcjda91GygOxC9mrBM8YjgopWyDIAoHVOUrn4gQrJs/WDY1YF7kIOviPMIpRmNCRoYZsGg9c4",
	"Y5TNxWOh1oDvwo6YJlW0fiA4losHx0aD7WO2BbRAQmKZazZ7T6M5ziKF1Vs25TmLTqMoI0KQh2ex5gC9",
	"nPaWRdAanZrWdY57h4Wcxjy8fXAsC8i96BWtGmjRu5xGVK4fi+OaA7iQ/F9ULqIMr3AsQCwiknJBZY0F",
	"3xOlAM+JxDR++JWuQXehqPUiUoNhquQDxXZiKM34kkYkQxGWGJgUI5GSkM5oiBKAXM7gsXB3Yl0q6jgG",
	"BZ3YtsHgA5Ernj08Oxq4G7aQNj1NPyAi4MejRxBpgLo9bkqC0nwa0xDdknWB4wXn8Tsyx+HDy00JWnOl",
	"C+dLiaXWipwRlHIeoxWVC/TTGDGcUDYfWiQfBb1uxD62KBhp0aoha5GDaTwKhgB5G/oVBBOPSDEn/51a",
	"UYVljGzDYHCR8XtKoscRhyrw3u0DWtS3jv+Zk5w8OEYAtRcVaFFH5XE4SHMPiLrPhjCP+RTH6Oz1xeUK",
	"p4WOUP94rM21AtvJ3woPsPUDtORxnpAAzQiBPVbENK3ur1c/vXssLEvQznXlEseW61O5EAGS8NOUs0gE",
	"gKz+YYnjnCBlw5CoRP1LYNCoeHZtN0p7KoUawglnc60sMxJjSSIkM8yEdYiChpsXYUm6fTPMOJI0IULi",
	"JFUyrLZabWxhiVYLGi7gJ4PECitJmlMhifLHWs5aMFgQOl90O4P680MMRJlrEG3HVglSUolXBhgEfk7v",
	"VQnJ5fkmRGKQlo2Gjmn3JRjw3EGej7n8g1FXbCvaiMAOgihb8nhJIkRZx8it9WjC146Pa40iJYtEIDqr",
	"rjgVSE0iJmrCPFNf7fS5kzg4I0hIGscoJSwCkyEYEJYng5N/DUQehkSANOiPlYOCJs5NDK/WKSmPCKpA",
	"VzgdBAMcRYVrMAgGK+MCDIJBxJmStmCQkVnOFNuKFZXhwjF441hDr4ZpVRAPuFxzTKAFuRCwCu+1j0CC",
	"wWkFx/cVJq3rhsIR+JFRKTqFFidKESuSlJ5DrnogLASds5JDtZGOQHhFHheCXvYzDtLGc54Gaq45nmmf",
	"dIWzSLTnNi2/OvlV6eiezymYnh2fG7hWh6oBroFxToGz6D2RGQ0dM8BLkuE5UfvCkqiWHQu0R148C9Cp",
	"bg17j+XeJUEM7CMH7xvolxKzaLreGrzQ/brhJ/ieJnniif17fE9Znnhjb6D7Yv9eN98CexJRzHyRh8b+",
	"uENzb9TrwDdjTtk2dFdU34buGro38g3wG7EHc8kT96vC1vLBHCD74l0HvQHrhjZoTiFwCLKDwVwr55Ii",
	"x0ycwuziM+f6OYXJrax4XB5dt9TVpVJjUvUudp5PyuZW38g9Vlv74GSGY0EK2FPOY4JZi4SdoFxoveIu",
	"U/ATSTMilEGEMIronKoFDfMsIyxcmx2tZSubn/s4AwtBJDqFhkOnXlUN2iBOoR9l6NUPp28/DC9/fn/2",
	"8Z1y4BO8eTPUMAOLXxcV/O9ygGYOo61nedVa3YAfsxF6nVHAVpc3RweevYHYte6aKp7dL6Fx9YqlTss6",
	"LkFtXs2hXISuXZG0qESZJNkSx2Kbm5a3RSfjUmzTWVl3rUkCkKCCzaaZvK3i7cVCtd6SJC52arVp2ziK",
	"s6FZr9SBn1BYoYUsqZ/B/cYS/iZaX6s/7dQ7RfQio6HD+H8TcywDc72lthU7VpYzMkRvh2QIf1p0npsW",
	"hUbpGe3Hy/POAWEqrUF/vDxHe1MslBOkpxsRkhIh4Yua+jOnEiIsuqJJt99/ZYilXH814DQPb/WIOaP3",
	"5YmAC7an01BobgTtvmK5FLm3ZZFPaol2H1JInMmNFJySOWVwgLY9HRsCWw5YLl5QlY4qGWoc3GSwwMd1",
	"aimQlmA+Jgf9W1DXRZbmHfPu6r0BaWsN3+wPCnYXJd+JiK+ed2LSVvWuZg6Pdv6BR+SV28qaKU2oVt/6",
	"mqU4V417FOWZDR4BzugT5GnjjGCTxW+umaE9IgmVkkTbDcjhuMmSo3fMywXOgLGLwAVlsCLJd5go8Rpw",
	"LSRJEGUhTwiaE0Yy3DfBIXorERXwQeRJ/QRoRoi+864R7SF2Izv8lvvRV9IcjuC2onkx8htCfLirTrsA",
	"hZwtSWYOeD/9+OG1+imOSbgt03Wc5VqClLf7BIcLvR/auKcm7F11woW5FW3qBbVrbWf8wNbda/P0bObD",
	"a/aQO842nOi1o9dZpqGfKlLcViQuRg/qGrVBbcsXPtuCXcEWeYDepMZIPZzpMO7feQtJQ7WUolCx4/4h",
	"kHWGd1OB+j6umBBlIHhoD36v4Yq+tTrtWZfMOS7rwHKvBxVCS5dd67EtAXJmH7SKag9O0OmSPENqHHxL",
	"GJplPEF7jMyx/lDaveKa4cpp/BTHmIVq/aj8h0DCqkNR2xpATwBvuuVJ8dnDLKyaYOdxXW0IpRc8lrYx",
	"2B6siF3PnBH157MShwCJBV+xblQcFzXW5n7XEOY2VTrnUa5+hW9dgmoCDVumlJJEpSQd11dZTlBCcBGD",
	"uIadhmmSS46Kru1zOGVNXq5Z6AN1iN7gWNgfTXCjshb0pVxog3zz1N4OhQtMmXNUEWLGSPZD/+UxwIAj",
	"PGmMjtDtdDfWrDLh+kDFdF2Ub4VQ+lrMzY5dJrOzXdtm1p9rp6iDaZjJ8d3k8Hh+NJLh/TI/iJazOBW/",
	"zW9Xd/sH0eFydZTOjydH89m+S7r0StRAnl29crWcY3GTmRCCsvHh0eRw5Lz+x7EkjrN1am590WpB5IIo",
	"9UiFZgi0wAKZfsHGk+JgkObTm1uyriMk5YJnaT4d4yhasZSkd9FLdneXzPH6KPmcj9Z3x5NUfs7D5PYl",
	"lnglyfJgecCOVreEHK4nR3cvRiQM56P72/1jp8LjuSRZfczR/cvo4OXROTl+8WL/eHaIJ9PTo4NX04PR",
	"66NJOH755iw8OzqeHR7izVHtRjLs3IJi2QuSulm0dlTa4p1ToWTykv5WX779UTAwJ89qZeTRQYmg2szn",
	"OurzDEc/4ZhGWPLsU5MFjnaAQaKYsgYqzk5KtsUFyX4muE7zo/3xeP+l39CvFnnGrL+7C+4A4BORpde8",
	"CxXPiVCrXFDhUt8OFGDGEz8wPJ/G5JLO2Xt8fzqvU3Fy4AXjdUKFoJy9yrNlYzW9+r/BNP5Psp4Tdhlj",
	"sbjg1HBdAed4MtoGkqDzTlB+ZHmTx/HbJH3HhbjIuCQQsqH5p07lg4PRaOSJXM6i93SeQcDY1zDQWxYS",
	"puyxNsHHnrj8D0xj5TposjdAbAtBkXsXEO9wePtx9nEqFCUUUS4Iw7Fc77BehSX0joe3P6aOlfJDSQnB",
	"EtMYT2NyYb3fbef1Ht9frnCqNA0gshMMypRBp0NkzRn1DjAqUvCGZ1WtuSvAB5gYTfLkjLPoLbO2d5V/",
	"9f+2gQWRuGp6b65qwA52AfLzfB5lWNB4B0X2AbykSoDcG+Kenh80slLL/2odxnUoh+MXB34gKrJ1TmK8",
	"fhOTezqlMW0I2eEW0EiXZh37AYm/fve3UY0elPYD6Kbzwf7Es7/aPymbV/C5IBnlUWNj9wP2E81kjuP3",
	"eSwv10wudtm/fp7P1XbzjiZUbr3SDSOyYu05jDe3LdY0tppmk9MKchs1DhulaXJ0mRCdBkH/Bt+1Vbd2",
	"3tY+2t4We3a5rl3LtQs5NhXHHrFJ5Ts0uEshOxVrj6LsUHz96sepThzqoVPaq1LbI4EueWrIh8sFKlMI",
	"W96POSrw9tsLUG6HvemyGei9SLldepf3/eHMecOAhbzhmv7RTaPT+NDTEwIoOlD3xkSfV/TvSy8Yyr9u",
	"4z0+PHixvaKy3m5rdm1UqwM7Kd3M0dz9yrYJaus72xaAnS9tu1Hx5mUnLu0zKGc71xnUae3A8ydIyfE4",
	"jYVzUmGjvvuuGq/ZOWHcngrnjKBc2Jb6bghLCwe6dlz1VKPzX3kWJiiydnuw2zSWN0n4zAQQscgE+tjh",
	"HTTY20CEZ92YfaqeRntjB6N6LdcfHXdEk5RkCVZ8XrcGLjDtj+ZNcVZkIthsDTVPTRSTfLTCAqV4TSI0",
	"JSHOhb7/K8dEMRfimqXFsB0kYKQ/gJQRWbmjCBeYzYlAe6tKIvl3BUc82+oa+M9917oNL1hqgVbaVhnZ",
	"zuwrlZGF06eNbBtfTVTA3FLw2mztK+te1Ogb8isUX4XpPXVfjeZu5ecXWdexo3VqTqeyd+02buZ0rtAm",
	"ndaicZOftLZpCL7LoKgXiWjt7x3xI++okEXeaaUUQ7t+hEA0Ug7XjJJI56aW19/lTYaX5aJRdYeTOJPm",
	"uudrIxocUQmnUUQiX5WhplDmuIFWnK5teYyuiN/T8t7OFSJgqIJypXun60r2XCdEW2uEeeNdyjbEB/hh",
	"H2FJ3tBM9NIoQD/WlHQR8jBTPbX+MMmApTFBWYWEXUMr32mnkZXrsOvAnjHNQLxmDqRcYImmJOZWd/au",
	"pDtsRHEqytS+a/ZYCLTJyEyJluRdm70vF+soku2Y2MB387DW41uxsOqyDQcDzjswsDteozqbhoC2Vr9K",
	"26CqLpqTaMllS3iaLN2tq+quXZ02701WbYFw5d57yqbj2edJfPf5RbTMDtM8mYWL8JjJeHYXTZZHv0X3",
	"d6vPZDU7HASbk7a7U4VrSc+bKsW5ko+/FFnRG3p/glbVfpB37VFPotqnyMre0M8uXtn3i2ONbGUgZxE9",
	"nZhXX8CNlNYde6Khjcr5UJiGOgdQlzPxCXXuzdCqtjVRy5U85P7krrJpGe98evFzp8exN0bfor0yLRp9",
	"o6N3xAXJ3nMmF88bKZPPnqH/jcYT9N24V1dvHlNIfEt6B9UF7coIczAp+sdn5F7CofiGaCXVrlLvYmoP",
	"jZ1bAkweDmCBHSLeqSO1B5eRxNRuse6TdtYKMGiPMjNmZ/gixEK/waG5ZXR5cjYh1KGVirI/Jm8U6XZb",
	"1ohQPbeRAjvYh948X7WfkmhjxOBV6Qal0EP5HsrKrZVjaEH/RODI0ifim8zAo7U9Nu1WVTlsBQdXdU1j",
	"cdr6xEHcNm0a82nzdjdztjmopgsaYvpLt051R4+C68FniJnSajrZQAgeUlsRBTNToWOIPjJSbYl0aFk2",
	"J1EZ9e4qIuLrk3SlyyraOlKnosnh4fhle1LmQ6UcW30vb4awze9X0Ww/z8gonR/O1G/5/f46eclGR5Oj",
	"4/g2I+Lw4LfV58VB+GJ08IL8tvh8OJoc3K2dBhjjUbdBB+WpiqN2t6mx4Nl4NFmPkv08lfPRcplHZL0Y",
	"jbLJjP12PFrdHUcv1sdJPpk7j4VImE4Oj27H7cGLT/9fKNMQwSqZqlgHxbo6mRnUke/pPPCNg5/MTVv0",
	"yl60bL43ckdtllWYyvtoe83ueTljQLgmW6mg5/auncr/YVJ9h39sQu/w3yWjF/Rwj8Fjc+YuSBYSJtWf",
	"P1MSRycIM5Zj5V3KPGOICEkTUKH6dA285hUht8LE/gdI4lv1BfhWKUw4B1QYghuNw7CTMA+RqTvsOFN2",
	"FpO6WhCosEus36wgBIgM50NU3MwHymiYk8gJOd81idkJTZeqmxxsJoCpC6dvIPgMKR+ngA+LMjlY6G0u",
	"0s6vuZmpnZEOvUtHlJjtmlZsObBSnSrvTDCuloz01YrVwpxt3diqKvpAqkfghCBs0oq0OwDkVtN9rmYq",
	"OlXApXIvIrD0euC6T5p9Bpnma+jaYRvbESQvW3mCfUOIURgbwULqzPMdBxEbiFMdww/oZUxTX9RNO9XF",
	"E/rVvS9ss4o7EabrxsQ9hAfMP8XmkFZDZN0Tn3xTaCPfaftxssSx4WOlZ73XygywmYstfE+YXkyMt+Pe",
	"VBcN9lJIO+gi9dVDOhR5C9HYmtYdp+8WuD5v94TlcS1p4RYiib5FgsRxcdvWBuy2MWt7CGyZPlj2WEsW",
	"4FbioBr7coDjitNnCEUdvy1JDeC99gqsnyB/MhmcoHh3GWOzLBdDeAL13JEU2C03JAXda0eqBLPsRJfN",
	"G1JlBB+Yiguv7jcwSevu3Bt0JjaAzhm9y4m+N9kKNGXzHfD+FtXu5T0Hc3o0hSI174Z4QFrhNO0mifFk",
	"LFxTfPo5+Bsnmk6XGsKrrgpWMEIfZXrHgN2xE7afx+TYXkqi/DOFCOLvtXPTGaeycV23XMMOR6twjtKq",
	"H+XyttJKPHi5+1UtxJp01ra1ukNXdxRaarq9gk2uaRi/TdXT3P5blnhbE7YNnYZP0NTITWur6ae0domW",
	"/Vd1UVv+WXt7bJtMDcXVZp2Wjmjooy5PuPqYw4ME1zYlrThsvzEBhSfdAU5fETHrNWwrHuprw2a3G7V3",
	"ntvGxHoN7Q4X6y4M+kgno3/PSocVL6ljxKMDtHeGBRUoheSVAI2+g6yzAK0WJCMI/vH9eDT6b8+69rDq",
	"KH/e0OS/zRnyox0hd1lHD28XlZbOVgqqArpbE7WPxx5RdByDdaO0Gx1rpk4X6I1Vinqh22o+HcC/YqXq",
	"UcKOARqO46MuVXOsToR2W6iyZyfgnZep6NwJ+isWqRa07Q4K2Rlx29d9OVV3YzdSPCZszw5gXsz7p1Jo",
	"3198/PjuWfcYNRdwc5qC7oSwfS8SYmApo1JHZ+jLrNprLVY7g6vWsT/tfBf3ECkim009d1z/jikf/sN1",
	"CsyWOR/+I/Zz+xZ5H/5Ddg23ycnuvbHs9Lxz42m3tG9d0Ct7cGOHqqvBqg3gFCjnluvS7XV7tr531TRk",
	"VenU/N6/SF5LW/M5feuMzGI6XyhP3xh3jYgZE6BVrS7Tzm3OCDavwpWBNR//s9+ILFt+Ijha+6QhaY41",
	"gwUaN/esipcNuwKObyA08MYR5jOe7B8cHrlmOTWPnpSY67bHL152FTK+cRafg1preBq6K8vptPgbbJ9O",
	"ag7n6jTjWUiiG8lvYoJ1YKWjMmHqRmc8Gk5Gw/3R8MBZke6z89CF8Yj0z+7AuaStxQKEXQvh5LTNwzpD",
	"jk2O/A3EZvkHVNTDyVxvwFn5uSkZu//Nzbq8ldX4bszZRmckpKNU3/36t8nGSEF3v/FmefMM3FN9iJAb",
	"uQ9qEmQ3xqZaaDt8i0jnGIvFTdouxnMwcfGJS8/o+PhurXQjKAtdxXVcAyxt7Y6bkDNx011TEU9D5yIt",
	"SSZoU2mOhvuHw5FXiOVNGWJanphXeKkTRaPIAqcmbKitBmlcq+jkgLZGagh6TRuVxGiss1E+TaXYkmeH",
	"IG7YF7YIqqpsJg6+1G/WuotmsEbVOycj2bDqzS1tFk9fq6YQ6wcXizGCEjEXgRqZQ22lX48493gKHJrW",
	"LITmK1Pq9yIFsXj2cQP/V4AXsF0TKp/x7c3H2rrMBYhDmYI/fMjaFp2DuH2+CNN4rVXbj8KkwTmnYVzO",
	"XDVCe9gWzX1m3U7K5s4gSrTgeSaGD3ts2zx8ReXZK0oxhSdLOyaccCYXjznl/RGK8Fp8xeGqrbFcqRJQ",
	"cba7IT907YnhbsetJcNr4vhwewF10010E3gjYrcf+P4o8sa6vqTR8CsOid2xxo1QYk8yURkuPDKryrN5",
	"BiXH9E2S7a4v10kWTkaIZ8W745k7otnzdLhJwDJoWnJzW+YzRZ/zTedQegjJ/am5xdGbvyrwGXjXqiTb",
	"Qd9m1+gewaPER/Vop8ahrQcxaic6NZlvSGn9SKf37Ke1gzl1fMe5kPPwpXU6suk4pe+0pvv0pPlSYsvG",
	"OCcznMfSRjA0HZLXDE9jstncaYNxYrPC6dcXcatA2bp+W7XvzqXbnAj4GustDNoGe7NJ16vRD3ZVBDet",
	"5mJYxDRF0zVomuE1O6NW6SzwUhe+gBPflU56xgKJBMexbvPHFwz7+5TDeqQL3dbSKz/H3O1wHbrxMFzg",
	"tb+H1qKo7LmZ2d473wTyvfyF0jX1x2lggPpsqzZTZhKod78Rbhpk7Rn5jfcYF8T9Sw+G2gOt/GZry7Xw",
	"2Bpb/WT5+nXvh7/rKtfQ91vlIliksyxENRHpW7Txtt3nzrry8J9ayAalfPH2MgSrKU/f1iPO9xoDPdux",
	"6FuvGVcPx+m/GGzE1/hd0u14Bbixtlut8k3LHKg+OOf90pgtnmAirutvanUUvdzxZE3Bd2stwG2roBaF",
	"KiirtAhg6/Kar9QE+wt1mqfyEc9lmsviEbaUhLrMnT30M4eU2xz51RalQoMabq61vvrp3dfbyCWQrU3k",
	"StedLWTX8L4GcnP8tn3caPGHvmv8dzI4lQLEcQ7laDbVoCvS3ctToSlnkUB7Uy4XtvQSZhEyNWuebflc",
	"d4nOOx7eepXEgxf+UQzN7Vmbrn2yZ3eZa3a1oAKRuxzHAv1aKZ4DQ8EuJXGsKQA//RoolUklCnkypYyI",
	"ZrlMeGIW3syF+ZupwWu/wy4DyU5ND90zNbs9Viluyhrp2Rpy6yq4CguYpq15VAl/FT30v2YfuCQn+gE3",
	"KpBcKV4Ge3E+z8gcS1IUkTaltWxBpd3Ltbao4LEvVp4YcD1nWHyEWovtt0u7KuVcEhbVivG1QyC4uaTf",
	"VFII1K68f3vejx+N0AKLxRBd8oTUo+r2RB6qFXVWNxIowVFxdG/OYWH1n6EEr7XRjtFvJOOaQTZXkwBk",
	"q4/T6bm6yN8qrOeo17BOEiL1Xlaf/jkJaYJjtPfdeDhC1/lotB9+D/8haDwcPQuQfVBQoAVfqVmtE6ib",
	"heNaLD2O0QqLIRqZZyqBkeI1Kps7Y1+UzVG+nPOVdklpjYAsFXKJ+IrpW+iyzuVXFCctlWuzQmlGEr60",
	"nk1ZpRMSjIuHYetUe0gjr8FDrWqbJR/UKV8fsc1jX+C50hnXgV5M4lBH4CQQ8TOIyFL896Kk1ZBn+r6x",
	"FfxvXy690LWnTi/eorucZJQIdPXDx0+vdEEsFiHM1nqLECimTO0bS4qBbmd0lv3f/yMkNEszkuKMCKRw",
	"yxJdjQ9Pea5Vqq1TJjmaEpQRHNF4jbDNNACz0pTBgtP+IWzXCqsUZxBrW1ENZEmYNM97q8WtI6zMIL0H",
	"JaDkYU//Tui52UdRFSIJvtU1v7+LSKr0G5MFDQgW62FBpIgTgRiXaMHjCIUZlSBylakO0RXXmwUOdQXi",
	"4n5H4aQfKSL3gbnLEAuexxGMtq6gH9GMhDJeg0qiEs6b2wtVCb04GUyG4+EIQhJSwnBKByeD/eEIwlFS",
	"bF5ner6cPDfKUf3T6QJA6TmrQTGU9bUVrWmGMhLrAnQVPTtEp7YWndoRy3f1p2vEGUE8QwnPyDWjzKGk",
	"i3LZimjKlLCgKvld1TVPSMI1U9gf8NrKMWVqwGtmRnRvC0P0CVoLhDOCUjynzGILlgGfocPREL2hsVQr",
	"pMBPCcJpGlMSXTPJzWpZcLCrK8WuX2GKBieD/yDy1JBZUT/DCZFw0/2vJrVf8STBSCiRASRiKuQQmQJs",
	"cGqi91uuSB/SlBKt45QwUvYcpKpCHLM817bgM67kQ+1aNZcqPGHKSiXhBPyNMsIIVJ4jCOxL0FLU503M",
	"70t+quJbQ3by5mhycLR/fP56fPzy6Ojw7HR/fzI5e3F0cH728s3+aDQavznfPz47eD06n0xOR2dHr1+9",
	"Pjo9PBsdvzg/PTvomIG8h6ujLdA/ZWt7cAXh/qKWvWYWYO/VD6dvPwwvf35/phMOam8cDa8+vv949t34",
	"9biLrjbA2x+tj6WEKbu7xk3m2lTBELbKK2fXbE/52UEtkz8odr8ARVxJRGDieQJzb/2swUUAo1YXuYPS",
	"agZbTcnIpKJnDC9fuQHbb+XuKrOcVEdqvcyU4Hua5Mng5HAUDMwJR0ckVg9SfDbTy+TCqvi4DVp9mPyi",
	"QImUM/MI92Q06rI/inbPjfr5ZH4AK0TkSYKVuTkwX5HS9fBJbQwRDzs3hcsVns9J9vxjSpjai/eHI3sU",
	"FGqalFo/4mGeKHSGLr14zkMd9dWeUaMsQceQ9ZFEY2bnZnBs9IjEc6V2B5dVZAe/2DkviuflndP+BAmf",
	"yllE2upCYGiZysMLYt6CR3Y2Vhnovbk1d/OY/S7rqbt2LKf+iN4qY7CYmck5ATdUPP9dWdxfNk4UNJlO",
	"czb+sfZjhTHtaEiG10xtvuAxKQM65Zm27HQWad1zhtKzlQOba2ZOp1QDcB7g+XO54ijhEREn1+wbpFwn",
	"ZA/HULF9IipNBq5ASsmBeaYIThNiTm/EEL2B+wUWKTMsAgdpReP4miEwN5UxUO42xRhgJGAFcGgRUPuT",
	"AweMBGXzmMA4w+EVR4LgTE1SKEdHSbZ9AoTcKwuwOEcSMH0F3oI9QSkXgiqrV1PzBB0mlAUQshegCCul",
	"TMhtgCCgIkB3Oc4kyQK0JjgDTOFu6AT9azwcHoxGvwzROZnBwUsZvFKcRg7ROWf/kPbREkRn5QSpQPBS",
	"JQScfAPG9HPJTxAHBgELVwb6YEyQkLMIJnNh0c8FnhNjylVW+xsdvjXWEXkn6Nd/2o/fR3it/NnJEczg",
	"+/Ho12ZzNCUztacpNPo66n9J/v34aPTixeTwaKRhQf1xCwvP1OKpafkAU+0UuKPjF6MXBty5RkmuCDGv",
	"MSgmk9xwXKSDPODODM5wFOnBWwrUT9XPjK+Gih8/snhdeTPkYDQq1wpMU83sJDpRrX9tI91A002Ia3ZR",
	"blzgsZs1g8VSICoU0HNaEFZ578ligRIi8dCcSUFVpAW5ZjD5UjzsiZ6iPeyLdT4JOZvRea61ouYXJWd2",
	"aiD9WmyMVClvULkQIOMzNYpav9rEX77s4oB6R5QzSWNFfQeIXy3Xm0NQvYSVHsxa/aU177b7IRDLXlJs",
	"MP611gXFKcx9ChVWwdgIUKqND9g3jIlhH/XoNDA2m+JW8BWX4jjMY2zdldLAi3CXSVc5jC4HJUxZMP8a",
	"KB02CAZKiUF4mOqn1JgNDBsEA6PIBsFAabLK2UY3xh/aCg0ukIGEQ3Sp/egpKWS00InVOe2P3BMKbSJj",
	"k4Q9BuHryjWJYnrjFYrG/cEQvZ0hrmRdi5jykOmSsKClFKqIlqzcYVTzQa9FuRn9S2Bxjwk00DLaxo2W",
	"EqEtEdvJvK1KWYdRpOsGKoWmKxJamWwaSARnypwTG20j29CcN9nrz+JC9MnMeTJznsycJzPnb2HmvDbK",
	"0NPSebI3nuyNP7O90WD3DpPDtuq0NVoFQDYaHdV3kZXWKtILlcrQD4w2H6t9ax7DovqmqjRQrFWhuhZB",
	"CU/GypOx8mSsPBkrf2Vjpbih2vVcRitaOJFBVjNX4sJ1zBidWXntsGLMsc3TMY3LbPqzWE1PRpO30dQU",
	"uw6rqSxs90obRZ3mE2SQbDSZIA4eVtFmnwSQuRHo4HilSVxnNk9m05PZ9GQ2PZlNT2aTNZuqKel+FpNR",
	"1NvaS8Mng+npnOnJZCK1Cggd1tIlZNF2WUhyGW+O8Skj8HVsj80JgqScwGwGriShjrsu/da3TgrSCUjo",
	"e/MAODzPjb5FE/SN+eVCjQt3c0821JMF9WRBPVlQf2ELqpKv/HRB9mS4/IUNl5LTO+wWh5HQNGJ0Wt7z",
	"301yyRefsGxIfIc8GYklFZKG5UFNI/lY73QZPFPKQ/1SA+g9bPwVmxaoh3dGr+uK7OYpsw0ibZN4IMFM",
	"hgsXLkP0msoFGBIQbK0wZzYC2/Q3CUiAY40lB1M2HX++ny0m8xeHd/vLkYzuDo9mjCzvj+7DexmyhRRJ",
	"mB8dJO44wjKLxz+UcCfuqJKtKydBt0H21fQ6Uwh/XmhE6Be1Amvnd2atlRF2WjRQ2yzoBbHgK4Y4Cwno",
	"CrVA5B8C6fRxUynELI5OjKyv2DWDocwYgYapcKn1VHaoWlcYrCOJTNNEnBoMPb1wGM9MEKUZEYTJ5tP9",
	"O7nbX7H2/aveyEQxOaK7pWWY3Fub1t6iqfl+rj9vPx/Tv2M+dnQAX8zHlqzunw0k/yld9oFHxCbB3pK1",
	"4TLDBE69pIti7zQd1bNrMupbfWngRdDfgd036+dIy3K1tMJJ4XNCMkmAJgeL4pT+9OLnIXJN70JzZi/z",
	"g1gDJ29MumtoQbEpX+tB5EDNoTNUtaATBgfZSW7zEGtnila5AZbZ1voI7goKqxSN7XrMKIkjU7wMnG/Y",
	"HG3faxbyTKMfKbkqTxlQzEOT6/wTFVSPtGg68koHRhmN44ivOrNki9dB/41WN2izs/oWSlGU+FBEVN0s",
	"Cc0BAnis+oknUMLDa2aKfyojc38UNRNxdeVVpy4GKE5zfqz66J7HqoWu1/oS/n//6BAKosaxy4bfmW9h",
	"iTqYFw50SubrYd3nMZnjcN2deQ6fA/TTGAm5jgmst963pzi8XeEsghcVsaRTGlO5HqKLmGBBUELnGZaQ",
	"y19lqgCFCxLeXrMKt0fVBEHNpFr6NnGoxu6voIX0TPyWE+0tx2o+lM2f1ZZ2N4vM7gjaQFI2E9fXrqKL",
	"9hs1g87TN4cDsS0yZKoKUPuSeIeYFR/bYlaUpNDPaOjXL0UuoEBE9KDi1Sdajf23fw/oNYzmMZ/iuBLV",
	"Ul7FgH2hPKZKmQTnjZBR1TscbPdokP/QiGngxUR1+u/ws3l4one+izzBuuZHgsMFZbqwCNQTsWnEpipG",
	"PWu549ZLdfDKUd553NaZvmqL3lDgtg05y0VNl+dhtXa1k0C2urVN182FLnRRVhoJkODliYNpFmKmXBO+",
	"JFlGI90loQnNnFKqn1gpC2nvwh9F7y5R0INUEC/HaxPGFBq5KZy/TgK9NSVJSjcR/DLz0m9pkluvLYCD",
	"xJRk+mzQFCKxnjrUfdWhvWgGD+swGa8RnVXwXmCBkjyWNI0JwlAOxm3TmykbDAs3dSfyNoF4U9nSpxy+",
	"TW1l9sAzRH1ymlGy1BYSERJBcyibYwsEhRlX7nQcmxpDfSR5Vwy4U1iS7e1NhHK89uT9fDtd9VDDhR4V",
	"O1lXpeKZ+r1n0ru7eFUA3nPWw7Xne2dfTPKeL/TYfr76aaZd5gs9vSeqx/ny5cuX/xcAAP//i31GAXns",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
