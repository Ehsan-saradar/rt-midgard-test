// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {

	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still
	// pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still
// pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity
	// deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Represents a digital currency amount
type Coin struct {

	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, The liquidity unit value index. Sqrt(assetDepth * runeDepth)/liquidity units
	Luvi string `json:"luvi"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval at time endTime
	EndAssetDepth string `json:"endAssetDepth"`

	// Int64, Liquidity Units in the pool at the end of the interval at time endTime
	EndLPUnits string `json:"endLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval at time endTime
	EndRuneDepth string `json:"endRuneDepth"`

	// Int64, Synth Units in the pool at the end of the interval at time endTime
	EndSynthUnits string `json:"endSynthUnits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, The liquidity unit value index increase between the first and last depth item
	LuviIncrease string `json:"luviIncrease"`

	// Float, The impermanent loss between the first and last depth item
	PriceShiftLoss string `json:"priceShiftLoss"`

	// Int64(e8), the amount of Asset in the pool at the start of the interval at time
	// startTime
	StartAssetDepth string `json:"startAssetDepth"`

	// Int64, Liquidity Units in the pool at the start of the interval at time startTime
	StartLPUnits string `json:"startLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the start of the interval at time startTime
	StartRuneDepth string `json:"startRuneDepth"`

	// Int64, Synth Units in the pool at the start of the interval at time startTime
	StartSynthUnits string `json:"startSynthUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of
	// liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {

	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync         bool     `json:"inSync"`
	LastAggregated HeightTS `json:"lastAggregated"`
	LastCommitted  HeightTS `json:"lastCommitted"`
	LastFetched    HeightTS `json:"lastFetched"`
	LastThorNode   HeightTS `json:"lastThorNode"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// HeightTS defines model for HeightTS.
type HeightTS struct {

	// Block height
	Height int `json:"height"`

	// Block timestamp (seconds since epoch)
	Timestamp int `json:"timestamp"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string  `json:"address"`
	Chain   string  `json:"chain"`
	GasRate *string `json:"gas_rate,omitempty"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                    int64  `json:"AsgardSize"`
	BadValidatorRate              int64  `json:"BadValidatorRate"`
	BadValidatorRedline           int    `json:"BadValidatorRedline"`
	BlocksPerYear                 int64  `json:"BlocksPerYear"`
	ChurnInterval                 int64  `json:"ChurnInterval"`
	ChurnRetryInterval            int64  `json:"ChurnRetryInterval"`
	DesiredValidatorSet           int64  `json:"DesiredValidatorSet"`
	DoubleSignMaxAge              int64  `json:"DoubleSignMaxAge"`
	EmissionCurve                 int64  `json:"EmissionCurve"`
	FailKeygenSlashPoints         int64  `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints        int64  `json:"FailKeysignSlashPoints"`
	FullImpLossProtectionBlocks   int64  `json:"FullImpLossProtectionBlocks"`
	FundMigrationInterval         int64  `json:"FundMigrationInterval"`
	IncentiveCurve                int64  `json:"IncentiveCurve"`
	JailTimeKeygen                int64  `json:"JailTimeKeygen"`
	JailTimeKeysign               int64  `json:"JailTimeKeysign"`
	LackOfObservationPenalty      int64  `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks         int64  `json:"LiquidityLockUpBlocks"`
	MaxAvailablePools             int64  `json:"MaxAvailablePools"`
	MaxSwapsPerBlock              int64  `json:"MaxSwapsPerBlock"`
	MinRunePoolDepth              int64  `json:"MinRunePoolDepth"`
	MinSlashPointsForBadValidator int64  `json:"MinSlashPointsForBadValidator"`
	MinSwapsPerBlock              int64  `json:"MinSwapsPerBlock"`
	MinimumBondInRune             int64  `json:"MinimumBondInRune"`
	MinimumNodesForBFT            int64  `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil      int64  `json:"MinimumNodesForYggdrasil"`
	NativeTransactionFee          int64  `json:"NativeTransactionFee"`
	NewPoolCycle                  *int64 `json:"NewPoolCycle,omitempty"`
	ObservationDelayFlexibility   int64  `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints            int64  `json:"ObserveSlashPoints"`
	OldValidatorRate              int64  `json:"OldValidatorRate"`
	OutboundTransactionFee        int64  `json:"OutboundTransactionFee"`
	PoolCycle                     int64  `json:"PoolCycle"`
	SigningTransactionPeriod      int64  `json:"SigningTransactionPeriod"`
	VirtualMultSynths             int64  `json:"VirtualMultSynths"`
	YggFundLimit                  int64  `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock []LastblockItem

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn int64  `json:"last_observed_in"`
	LastSignedOut  int64  `json:"last_signed_out"`
	Thorchain      int64  `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {

	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and
	// nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each
// outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// ObservedChain defines model for ObservedChain.
type ObservedChain struct {
	Chain  string `json:"chain"`
	Height int    `json:"height"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income,
	// taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	// Doesn't include synth mint or burn.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`
	Asset                  string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income,
	// taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// PreflightStatus defines model for PreflightStatus.
type PreflightStatus struct {
	Code   int    `json:"code"`
	Reason string `json:"reason"`
	Status string `json:"status"`
}

// ProxiedNode defines model for ProxiedNode.
type ProxiedNode struct {
	ActiveBlockHeight int    `json:"active_block_height"`
	Bond              string `json:"bond"`
	BondAddress       string `json:"bond_address"`
	CurrentAward      string `json:"current_award"`
	ForcedToLeave     bool   `json:"forced_to_leave"`
	IpAddress         string `json:"ip_address"`
	Jail              struct {
		NodeAddress *string `json:"node_address,omitempty"`
	} `json:"jail"`
	LeaveHeight     int             `json:"leave_height"`
	NodeAddress     string          `json:"node_address"`
	ObserveChains   []ObservedChain `json:"observe_chains"`
	PreflightStatus PreflightStatus `json:"preflight_status"`
	PubKeySet       struct {
		Ed25519   string `json:"ed25519"`
		Secp256k1 string `json:"secp256k1"`
	} `json:"pub_key_set"`
	RequestedToLeave    bool     `json:"requested_to_leave"`
	SignerMembership    []string `json:"signer_membership"`
	SlashPoints         int      `json:"slash_points"`
	Status              string   `json:"status"`
	StatusSince         int      `json:"status_since"`
	ValidatorConsPubKey string   `json:"validator_cons_pub_key"`
	Version             string   `json:"version"`
}

// ProxiedNodes defines model for ProxiedNodes.
type ProxiedNodes []ProxiedNode

// Queue defines model for Queue.
type Queue struct {
	Internal int `json:"internal"`
	Outbound int `json:"outbound"`
	Swap     int `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Deprecated, it's always 0.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Deprecated, it's always 0.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Synth to Rune since beginning.
	SynthBurnCount string `json:"synthBurnCount"`

	// Int64, number of swaps from Rune to Synth since beginning.
	SynthMintCount string `json:"synthMintCount"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {

	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {

	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of
	// the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity
	// pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at
	// the end of the interval.
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the
	// native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means
	// totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership
	// withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ProxiedNodesResponse defines model for ProxiedNodesResponse.
type ProxiedNodesResponse ProxiedNodes

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// Affiliate address of the action (swap)
	AffiliateAddress *string `json:"affiliate_address,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {

	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
