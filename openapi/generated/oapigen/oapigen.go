// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Action defines model for Action.
type Action struct {

	// Int64, Unix timestamp for when the action was registered
	Date string `json:"date"`

	// Int64, block height at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status string `json:"status"`

	// Type of action
	Type string `json:"type"`
}

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64, Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64, Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64, Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64, Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64, Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64, Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64, Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64, Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64, Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64, Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Coin defines model for Coin.
type Coin struct {

	// Int64 (10^8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64, Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64, Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64, System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64, Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistoryItemPool defines model for EarningsHistoryItemPool.
type EarningsHistoryItemPool struct {

	// Int64, Share of earnings sent to the pool during the time interval
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses struct {
	Current []InboundAddressesItem `json:"current"`
}

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string `json:"address"`
	Chain   string `json:"chain"`

	// indicate whether this chain has halted
	Halted bool   `json:"halted"`
	PubKey string `json:"pub_key"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                  int64 `json:"AsgardSize"`
	BadValidatorRate            int64 `json:"BadValidatorRate"`
	BlocksPerYear               int64 `json:"BlocksPerYear"`
	ChurnInterval               int64 `json:"ChurnInterval"`
	ChurnRetryInterval          int64 `json:"ChurnRetryInterval"`
	CliTxCost                   int64 `json:"CliTxCost"`
	DesiredValidatorSet         int64 `json:"DesiredValidatorSet"`
	DoubleSignMaxAge            int64 `json:"DoubleSignMaxAge"`
	EmissionCurve               int64 `json:"EmissionCurve"`
	FailKeygenSlashPoints       int64 `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints      int64 `json:"FailKeysignSlashPoints"`
	FundMigrationInterval       int64 `json:"FundMigrationInterval"`
	JailTimeKeygen              int64 `json:"JailTimeKeygen"`
	JailTimeKeysign             int64 `json:"JailTimeKeysign"`
	LackOfObservationPenalty    int64 `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks       int64 `json:"LiquidityLockUpBlocks"`
	MinimumBondInRune           int64 `json:"MinimumBondInRune"`
	MinimumNodesForBFT          int64 `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil    int64 `json:"MinimumNodesForYggdrasil"`
	NativeChainGasFee           int64 `json:"NativeChainGasFee"`
	NewPoolCycle                int64 `json:"NewPoolCycle"`
	ObservationDelayFlexibility int64 `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints          int64 `json:"ObserveSlashPoints"`
	OldValidatorRate            int64 `json:"OldValidatorRate"`
	OutboundTransactionFee      int64 `json:"OutboundTransactionFee"`
	SigningTransactionPeriod    int64 `json:"SigningTransactionPeriod"`
	YggFundLimit                int64 `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock struct {
	Current []LastblockItem `json:"current"`
}

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn string `json:"last_observed_in"`
	LastSignedOut  string `json:"last_signed_out"`
	Thorchain      string `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64 (10^8), total deposits in RUNE during the time interval.
	// Accounts for both asset (using the price at deposit time) and RUNE deposited into pools
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64 (10^8), total withdrawals in RUNE during the time interval. Accounts for
	// both asset (using the price at withdrawal time) and RUNE withdrawn from pools
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// Liquidity provider data for all the pools of a given member
	Pools []MemberPoolDetails `json:"pools"`
}

// MemberPoolDetails defines model for MemberPoolDetails.
type MemberPoolDetails struct {

	// Int64, total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// Int64, total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Int64, total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`
	PoolShareFactor         string `json:"poolShareFactor"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64, Total Rune pooled in all pools
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64, Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NetworkFees defines model for NetworkFees.
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolLegacyDetail defines model for PoolLegacyDetail.
type PoolLegacyDetail struct {
	Asset string `json:"asset"`

	// same as assetDepth from pool/stats
	AssetDepth string `json:"assetDepth"`

	// same as toAssetCount from pool/stats
	BuyAssetCount string `json:"buyAssetCount"`

	// same as toAssetVolume / toAssetCount from pool/stats
	BuyTxAverage string `json:"buyTxAverage"`

	// same as toAssetVolume from pool/stats
	BuyVolume string `json:"buyVolume"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// same as 2*runeDepth from pool/stats
	PoolDepth string `json:"poolDepth"`

	// same as totalFees / swapCount from pool/stats
	PoolFeeAverage string `json:"poolFeeAverage"`

	// same as totalFees from pool/stats
	PoolFeesTotal string `json:"poolFeesTotal"`

	// same as averageSlip from pool/stats
	PoolSlipAverage string `json:"poolSlipAverage"`

	// same as addLiquidityVolume from pool/stats
	PoolStakedTotal string `json:"poolStakedTotal"`

	// same as swapVolume / swapCount from pool/stats
	PoolTxAverage string `json:"poolTxAverage"`

	// same as units from pool/stats
	PoolUnits string `json:"poolUnits"`

	// Int64, same as buyVolume + sellVolume
	PoolVolume string `json:"poolVolume"`

	// same as assetPrice from pool/stats
	Price string `json:"price"`

	// same as runeDepth from pool/stats
	RuneDepth string `json:"runeDepth"`

	// same as toRuneCount from pool/stats
	SellAssetCount string `json:"sellAssetCount"`

	// same as toRuneVolume / toRuneCount from pool/stats
	SellTxAverage string `json:"sellTxAverage"`

	// same as toRuneVolume from pool/stats
	SellVolume string `json:"sellVolume"`

	// same as addLiquidityCount from pool/stats
	StakeTxCount string `json:"stakeTxCount"`

	// same as addLiquidityCount + withdrawCount from pool/stats
	StakingTxCount string `json:"stakingTxCount"`

	// same as status from pool/stats
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune
	Volume24h string `json:"volume24h"`

	// same as withdrawCount from pool/stats
	WithdrawTxCount string `json:"withdrawTxCount"`
}

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64, same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`
	Asset              string `json:"asset"`

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64, same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64, same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64, same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, Liquidity Units in the pool
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune
	Volume24h string `json:"volume24h"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64, same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// Queue defines model for Queue.
type Queue struct {
	Outbound string `json:"outbound"`
	Swap     string `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Daily active users (unique addresses interacting)
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Daily transactions
	DailyTx string `json:"dailyTx"`

	// Monthly active users
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Monthly transactions
	MonthlyTx string `json:"monthlyTx"`

	// Total buying transactions
	TotalAssetBuys string `json:"totalAssetBuys"`

	// Total selling transactions
	TotalAssetSells string `json:"totalAssetSells"`

	// Total RUNE balances
	TotalDepth string `json:"totalDepth"`

	// Total staking transactions
	TotalStakeTx string `json:"totalStakeTx"`

	// Total staked (in RUNE Value)
	TotalStaked string `json:"totalStaked"`

	// Total transactions
	TotalTx string `json:"totalTx"`

	// Total unique swappers & members
	TotalUsers string `json:"totalUsers"`

	// Total (in RUNE Value) of all assets swapped since start
	TotalVolume string `json:"totalVolume"`

	// Total withdrawing transactions
	TotalWithdrawTx string `json:"totalWithdrawTx"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float, the average slip by swap. Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64, volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64, volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64, the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64, toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Int64 (10^8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), trade slip percentage
	TradeSlip string `json:"tradeSlip"`

	// Int64 (10^8), minimum output amount specified for the swap
	TradeTarget string `json:"tradeTarget"`
}

// Transaction defines model for Transaction.
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction memo
	Memo string `json:"memo"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolLegacyResponse defines model for PoolLegacyResponse.
type PoolLegacyResponse PoolLegacyDetail

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Address of sender or recipient of any in/out transaction related to the action
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action (swap, addLiquidity, withdraw, donate, refund)
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is all.
	Period *string `json:"period,omitempty"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *string `json:"status,omitempty"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
