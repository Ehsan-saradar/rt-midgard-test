// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {
	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {
	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {
	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Represents a digital currency amount
type Coin struct {
	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {
	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {
	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {
	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {
	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {
	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync         bool     `json:"inSync"`
	LastAggregated HeightTS `json:"lastAggregated"`
	LastCommitted  HeightTS `json:"lastCommitted"`
	LastFetched    HeightTS `json:"lastFetched"`
	LastQueried    HeightTS `json:"lastQueried"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// HeightTS defines model for HeightTS.
type HeightTS struct {
	// Block height
	Height int `json:"height"`

	// Block timestamp (seconds since epoch)
	Timestamp int `json:"timestamp"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string  `json:"address"`
	Chain   string  `json:"chain"`
	GasRate *string `json:"gas_rate,omitempty"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                    int64  `json:"AsgardSize"`
	BadValidatorRate              int64  `json:"BadValidatorRate"`
	BadValidatorRedline           int    `json:"BadValidatorRedline"`
	BlocksPerYear                 int64  `json:"BlocksPerYear"`
	ChurnInterval                 int64  `json:"ChurnInterval"`
	ChurnRetryInterval            int64  `json:"ChurnRetryInterval"`
	DesiredValidatorSet           int64  `json:"DesiredValidatorSet"`
	DoubleSignMaxAge              int64  `json:"DoubleSignMaxAge"`
	EmissionCurve                 int64  `json:"EmissionCurve"`
	FailKeygenSlashPoints         int64  `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints        int64  `json:"FailKeysignSlashPoints"`
	FullImpLossProtectionBlocks   int64  `json:"FullImpLossProtectionBlocks"`
	FundMigrationInterval         int64  `json:"FundMigrationInterval"`
	IncentiveCurve                int64  `json:"IncentiveCurve"`
	JailTimeKeygen                int64  `json:"JailTimeKeygen"`
	JailTimeKeysign               int64  `json:"JailTimeKeysign"`
	LackOfObservationPenalty      int64  `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks         int64  `json:"LiquidityLockUpBlocks"`
	MaxAvailablePools             int64  `json:"MaxAvailablePools"`
	MaxSwapsPerBlock              int64  `json:"MaxSwapsPerBlock"`
	MinRunePoolDepth              int64  `json:"MinRunePoolDepth"`
	MinSlashPointsForBadValidator int64  `json:"MinSlashPointsForBadValidator"`
	MinSwapsPerBlock              int64  `json:"MinSwapsPerBlock"`
	MinimumBondInRune             int64  `json:"MinimumBondInRune"`
	MinimumNodesForBFT            int64  `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil      int64  `json:"MinimumNodesForYggdrasil"`
	NativeTransactionFee          int64  `json:"NativeTransactionFee"`
	NewPoolCycle                  *int64 `json:"NewPoolCycle,omitempty"`
	ObservationDelayFlexibility   int64  `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints            int64  `json:"ObserveSlashPoints"`
	OldValidatorRate              int64  `json:"OldValidatorRate"`
	OutboundTransactionFee        int64  `json:"OutboundTransactionFee"`
	PoolCycle                     int64  `json:"PoolCycle"`
	SigningTransactionPeriod      int64  `json:"SigningTransactionPeriod"`
	VirtualMultSynths             int64  `json:"VirtualMultSynths"`
	YggFundLimit                  int64  `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock []LastblockItem

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn int64  `json:"last_observed_in"`
	LastSignedOut  int64  `json:"last_signed_out"`
	Thorchain      int64  `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {
	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {
	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {
	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {
	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// OHLCVHistory defines model for OHLCVHistory.
type OHLCVHistory struct {
	Intervals OHLCVHistoryIntervals `json:"intervals"`
	Meta      OHLCVHistoryMeta      `json:"meta"`
}

// OHLCVHistoryIntervals defines model for OHLCVHistoryIntervals.
type OHLCVHistoryIntervals []OHLCVHistoryItem

// OHLCVHistoryItem defines model for OHLCVHistoryItem.
type OHLCVHistoryItem struct {
	// Float, close price of asset in USD
	ClosePrice string `json:"closePrice"`

	// Int64, The end time of bucket in unix timestamp
	CloseTime string `json:"closeTime"`

	// Float, high price of asset in USD
	HighPrice string `json:"highPrice"`

	// Int64, The high time of bucket in unix timestamp
	HighTime string `json:"highTime"`

	// Int64, Liquidty is USD
	Liquidity string `json:"liquidity"`

	// Float, low price of asset in USD
	LowPrice string `json:"lowPrice"`

	// Int64, The low time of bucket in unix timestamp
	LowTime string `json:"lowTime"`

	// Float, open price of asset in USD
	OpenPrice string `json:"openPrice"`

	// Int64, The beginning time of bucket in unix timestamp
	OpenTime string `json:"openTime"`

	// Int64, Volume in USD
	Volume string `json:"volume"`
}

// OHLCVHistoryMeta defines model for OHLCVHistoryMeta.
type OHLCVHistoryMeta struct {
	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// ObservedChain defines model for ObservedChain.
type ObservedChain struct {
	Chain  string `json:"chain"`
	Height int    `json:"height"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {
	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`
	Asset                  string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Int64, number of unique adresses that initiated swaps transactions in the period.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// PreflightStatus defines model for PreflightStatus.
type PreflightStatus struct {
	Code   int    `json:"code"`
	Reason string `json:"reason"`
	Status string `json:"status"`
}

// ProxiedNode defines model for ProxiedNode.
type ProxiedNode struct {
	ActiveBlockHeight int    `json:"active_block_height"`
	Bond              string `json:"bond"`
	BondAddress       string `json:"bond_address"`
	CurrentAward      string `json:"current_award"`
	ForcedToLeave     bool   `json:"forced_to_leave"`
	IpAddress         string `json:"ip_address"`
	Jail              struct {
		NodeAddress *string `json:"node_address,omitempty"`
	} `json:"jail"`
	LeaveHeight     int             `json:"leave_height"`
	NodeAddress     string          `json:"node_address"`
	ObserveChains   []ObservedChain `json:"observe_chains"`
	PreflightStatus PreflightStatus `json:"preflight_status"`
	PubKeySet       struct {
		Ed25519   string `json:"ed25519"`
		Secp256k1 string `json:"secp256k1"`
	} `json:"pub_key_set"`
	RequestedToLeave    bool     `json:"requested_to_leave"`
	SignerMembership    []string `json:"signer_membership"`
	SlashPoints         int      `json:"slash_points"`
	Status              string   `json:"status"`
	StatusSince         int      `json:"status_since"`
	ValidatorConsPubKey string   `json:"validator_cons_pub_key"`
	Version             string   `json:"version"`
}

// ProxiedNodes defines model for ProxiedNodes.
type ProxiedNodes []ProxiedNode

// Queue defines model for Queue.
type Queue struct {
	Internal int `json:"internal"`
	Outbound int `json:"outbound"`
	Swap     int `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {
	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// StatsData defines model for StatsData.
type StatsData struct {
	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, unique users (addresses) initiating swaps in the last 24 hours.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, unique users (addresses) initiating swaps in the last 30 days.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Int64, unique users (addresses) initiating swaps since beginning.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {
	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {
	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {
	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {
	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {
	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at the end of the interval
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {
	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {
	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// OHLCVHistoryResponse defines model for OHLCVHistoryResponse.
type OHLCVHistoryResponse OHLCVHistory

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ProxiedNodesResponse defines model for ProxiedNodesResponse.
type ProxiedNodesResponse ProxiedNodes

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {
	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {
	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {
	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {
	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetOHLCVHistoryParams defines parameters for GetOHLCVHistory.
type GetOHLCVHistoryParams struct {
	// Interval of calculations
	Interval *GetOHLCVHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetOHLCVHistoryParamsInterval defines parameters for GetOHLCVHistory.
type GetOHLCVHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {
	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTSSwapHistoryParams defines parameters for GetTSSwapHistory.
type GetTSSwapHistoryParams struct {
	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetTSSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTSSwapHistoryParamsInterval defines parameters for GetTSSwapHistory.
type GetTSSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {
	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {
	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {
	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {
	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
