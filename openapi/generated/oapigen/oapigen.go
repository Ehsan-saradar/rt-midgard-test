// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// AssetSummary defines model for AssetSummary.
type AssetSummary struct {
	Asset string `json:"asset"`

	// Int64, unix timestamp (second).
	DateCreated string `json:"dateCreated"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	PriceRune string `json:"priceRune"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	Price string `json:"price"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Enabled, Bootstrap.
	Status string `json:"status"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Two4HVolume string `json:"two4HVolume"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`
}

// AssetsSummaryResponse defines model for AssetsSummaryResponse.
type AssetsSummaryResponse []AssetSummary

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {

	// True means healthy, connected to database.
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain.
	InSync bool `json:"inSync"`

	// Int64, the current block count.
	ScannerHeight string `json:"scannerHeight"`
}

// PoolDetailResponse defines model for PoolDetailResponse.
type PoolDetailResponse PoolDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse []string

// GetAssetInfoParams defines parameters for GetAssetInfo.
type GetAssetInfoParams struct {

	// One or more comma separated unique asset (CHAIN.SYMBOL)
	Asset string `json:"asset"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"LR6GvnhuBKRL3Xq9/l8AAAD///mAl9JBEQAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
