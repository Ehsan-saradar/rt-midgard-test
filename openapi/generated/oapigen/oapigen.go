// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Action defines model for Action.
type Action struct {

	// Int64, Unix timestamp for when the action was registered
	Date string `json:"date"`

	// Int64, block height at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status string `json:"status"`

	// Type of action
	Type string `json:"type"`
}

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Coin defines model for Coin.
type Coin struct {

	// Int64 (10^8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistoryItemPool defines model for EarningsHistoryItemPool.
type EarningsHistoryItemPool struct {

	// Int64 (10^8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64 (10^8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64 (10^8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64 (10^8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64 (10^8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string `json:"address"`
	Chain   string `json:"chain"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                  int64 `json:"AsgardSize"`
	BadValidatorRate            int64 `json:"BadValidatorRate"`
	BlocksPerYear               int64 `json:"BlocksPerYear"`
	ChurnInterval               int64 `json:"ChurnInterval"`
	ChurnRetryInterval          int64 `json:"ChurnRetryInterval"`
	CliTxCost                   int64 `json:"CliTxCost"`
	DesiredValidatorSet         int64 `json:"DesiredValidatorSet"`
	DoubleSignMaxAge            int64 `json:"DoubleSignMaxAge"`
	EmissionCurve               int64 `json:"EmissionCurve"`
	FailKeygenSlashPoints       int64 `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints      int64 `json:"FailKeysignSlashPoints"`
	FundMigrationInterval       int64 `json:"FundMigrationInterval"`
	JailTimeKeygen              int64 `json:"JailTimeKeygen"`
	JailTimeKeysign             int64 `json:"JailTimeKeysign"`
	LackOfObservationPenalty    int64 `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks       int64 `json:"LiquidityLockUpBlocks"`
	MinimumBondInRune           int64 `json:"MinimumBondInRune"`
	MinimumNodesForBFT          int64 `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil    int64 `json:"MinimumNodesForYggdrasil"`
	NativeChainGasFee           int64 `json:"NativeChainGasFee"`
	NewPoolCycle                int64 `json:"NewPoolCycle"`
	ObservationDelayFlexibility int64 `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints          int64 `json:"ObserveSlashPoints"`
	OldValidatorRate            int64 `json:"OldValidatorRate"`
	OutboundTransactionFee      int64 `json:"OutboundTransactionFee"`
	SigningTransactionPeriod    int64 `json:"SigningTransactionPeriod"`
	YggFundLimit                int64 `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock struct {
	Current []LastblockItem `json:"current"`
}

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn string `json:"last_observed_in"`
	LastSignedOut  string `json:"last_signed_out"`
	Thorchain      string `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64 (10^8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64 (10^8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64 (10^8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`
	PoolShareFactor         string `json:"poolShareFactor"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), Total Rune pooled in all pools
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NetworkFees defines model for NetworkFees.
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolLegacyDetail defines model for PoolLegacyDetail.
type PoolLegacyDetail struct {
	Asset string `json:"asset"`

	// same as assetDepth from pool/stats
	AssetDepth string `json:"assetDepth"`

	// same as addAssetLiquidityVolume from pool/stats
	AssetStakedTotal string `json:"assetStakedTotal"`

	// same as toAssetCount from pool/stats
	BuyAssetCount string `json:"buyAssetCount"`

	// same as toAssetFees / toAssetCount from pool/stats
	BuyFeeAverage string `json:"buyFeeAverage"`

	// same as toAssetFees from pool/stats
	BuyFeesTotal string `json:"buyFeesTotal"`

	// same as toAssetAverageSlip from pool/stats
	BuySlipAverage string `json:"buySlipAverage"`

	// same as toAssetVolume / toAssetCount from pool/stats
	BuyTxAverage string `json:"buyTxAverage"`

	// same as toAssetVolume from pool/stats
	BuyVolume string `json:"buyVolume"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// same as 2*runeDepth from pool/stats
	PoolDepth string `json:"poolDepth"`

	// same as totalFees / swapCount from pool/stats
	PoolFeeAverage string `json:"poolFeeAverage"`

	// same as totalFees from pool/stats
	PoolFeesTotal string `json:"poolFeesTotal"`

	// same as averageSlip from pool/stats
	PoolSlipAverage string `json:"poolSlipAverage"`

	// same as addLiquidityVolume from pool/stats
	PoolStakedTotal string `json:"poolStakedTotal"`

	// same as swapVolume / swapCount from pool/stats
	PoolTxAverage string `json:"poolTxAverage"`

	// same as units from pool/stats
	PoolUnits string `json:"poolUnits"`

	// Int64(e8), same as buyVolume + sellVolume
	PoolVolume string `json:"poolVolume"`

	// same as assetPrice from pool/stats
	Price string `json:"price"`

	// same as runeDepth from pool/stats
	RuneDepth string `json:"runeDepth"`

	// same as addRuneLiquidityVolume from pool/stats
	RuneStakedTotal string `json:"runeStakedTotal"`

	// same as toRuneCount from pool/stats
	SellAssetCount string `json:"sellAssetCount"`

	// same as toRuneFees / toRuneCount from pool/stats
	SellFeeAverage string `json:"sellFeeAverage"`

	// same as toRuneFees from pool/stats
	SellFeesTotal string `json:"sellFeesTotal"`

	// same as toRuneAverageSlip from pool/stats
	SellSlipAverage string `json:"sellSlipAverage"`

	// same as toRuneVolume / toRuneCount from pool/stats
	SellTxAverage string `json:"sellTxAverage"`

	// same as toRuneVolume from pool/stats
	SellVolume string `json:"sellVolume"`

	// same as addLiquidityCount from pool/stats
	StakeTxCount string `json:"stakeTxCount"`

	// same as uniqueMemberCount from pool/stats
	StakersCount string `json:"stakersCount"`

	// same as addLiquidityCount + withdrawCount from pool/stats
	StakingTxCount string `json:"stakingTxCount"`

	// same as status from pool/stats
	Status string `json:"status"`

	// Int64, same as history/swaps:uniqueSwapperCount
	SwappersCount string `json:"swappersCount"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64(e8), same as swapVolume pool/stats?period=24h
	Volume24h string `json:"volume24h"`

	// same as withdrawCount from pool/stats
	WithdrawTxCount string `json:"withdrawTxCount"`
}

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`
	Asset                  string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Int64, number of unique adresses that initiated swaps transactions in the period.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Liquidity Units in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// Queue defines model for Queue.
type Queue struct {
	Internal int `json:"internal"`
	Outbound int `json:"outbound"`
	Swap     int `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64 (10^8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, unique users (addresses) initiating swaps in the last 24 hours.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64, unique users (addresses) initiating swaps in the last 30 days.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64 (10^8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Int64, unique users (addresses) initiating swaps since beginning.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64 (10^8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip by swap.
	// Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps to asset denoted in rune
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps to rune
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64(e8), toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Int64 (10^8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), trade slip percentage
	TradeSlip string `json:"tradeSlip"`

	// Int64 (10^8), minimum output amount specified for the swap
	TradeTarget string `json:"tradeTarget"`
}

// Transaction defines model for Transaction.
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolLegacyResponse defines model for PoolLegacyResponse.
type PoolLegacyResponse PoolLegacyDetail

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Address of sender or recipient of any in/out transaction related to the action
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action (swap, addLiquidity, withdraw, donate, refund)
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *string `json:"period,omitempty"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *string `json:"status,omitempty"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"tMbz9evXr/8vAAD///QV1IlezAAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
