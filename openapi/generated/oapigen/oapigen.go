// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {

	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Represents a digital currency amount
type Coin struct {

	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, The liquidity unit value index. Sqrt(assetDepth * runeDepth)/liquidity units
	Luvi string `json:"luvi"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval at time endTime
	EndAssetDepth string `json:"endAssetDepth"`

	// Int64, Liquidity Units in the pool at the end of the interval at time endTime
	EndLPUnits string `json:"endLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval at time endTime
	EndRuneDepth string `json:"endRuneDepth"`

	// Int64, Synth Units in the pool at the end of the interval at time endTime
	EndSynthUnits string `json:"endSynthUnits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, The liquidity unit value index increase between the first and last depth item
	LuviIncrease string `json:"luviIncrease"`

	// Float, The impermanent loss between the first and last depth item
	PriceShiftLoss string `json:"priceShiftLoss"`

	// Int64(e8), the amount of Asset in the pool at the start of the interval at time startTime
	StartAssetDepth string `json:"startAssetDepth"`

	// Int64, Liquidity Units in the pool at the start of the interval at time startTime
	StartLPUnits string `json:"startLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the start of the interval at time startTime
	StartRuneDepth string `json:"startRuneDepth"`

	// Int64, Synth Units in the pool at the start of the interval at time startTime
	StartSynthUnits string `json:"startSynthUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {

	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync         bool     `json:"inSync"`
	LastAggregated HeightTS `json:"lastAggregated"`
	LastCommitted  HeightTS `json:"lastCommitted"`
	LastFetched    HeightTS `json:"lastFetched"`
	LastThorNode   HeightTS `json:"lastThorNode"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// HeightTS defines model for HeightTS.
type HeightTS struct {

	// Block height
	Height int `json:"height"`

	// Block timestamp (seconds since epoch)
	Timestamp int `json:"timestamp"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string  `json:"address"`
	Chain   string  `json:"chain"`
	GasRate *string `json:"gas_rate,omitempty"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                    int64  `json:"AsgardSize"`
	BadValidatorRate              int64  `json:"BadValidatorRate"`
	BadValidatorRedline           int    `json:"BadValidatorRedline"`
	BlocksPerYear                 int64  `json:"BlocksPerYear"`
	ChurnInterval                 int64  `json:"ChurnInterval"`
	ChurnRetryInterval            int64  `json:"ChurnRetryInterval"`
	DesiredValidatorSet           int64  `json:"DesiredValidatorSet"`
	DoubleSignMaxAge              int64  `json:"DoubleSignMaxAge"`
	EmissionCurve                 int64  `json:"EmissionCurve"`
	FailKeygenSlashPoints         int64  `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints        int64  `json:"FailKeysignSlashPoints"`
	FullImpLossProtectionBlocks   int64  `json:"FullImpLossProtectionBlocks"`
	FundMigrationInterval         int64  `json:"FundMigrationInterval"`
	IncentiveCurve                int64  `json:"IncentiveCurve"`
	JailTimeKeygen                int64  `json:"JailTimeKeygen"`
	JailTimeKeysign               int64  `json:"JailTimeKeysign"`
	LackOfObservationPenalty      int64  `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks         int64  `json:"LiquidityLockUpBlocks"`
	MaxAvailablePools             int64  `json:"MaxAvailablePools"`
	MaxSwapsPerBlock              int64  `json:"MaxSwapsPerBlock"`
	MinRunePoolDepth              int64  `json:"MinRunePoolDepth"`
	MinSlashPointsForBadValidator int64  `json:"MinSlashPointsForBadValidator"`
	MinSwapsPerBlock              int64  `json:"MinSwapsPerBlock"`
	MinimumBondInRune             int64  `json:"MinimumBondInRune"`
	MinimumNodesForBFT            int64  `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil      int64  `json:"MinimumNodesForYggdrasil"`
	NativeTransactionFee          int64  `json:"NativeTransactionFee"`
	NewPoolCycle                  *int64 `json:"NewPoolCycle,omitempty"`
	ObservationDelayFlexibility   int64  `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints            int64  `json:"ObserveSlashPoints"`
	OldValidatorRate              int64  `json:"OldValidatorRate"`
	OutboundTransactionFee        int64  `json:"OutboundTransactionFee"`
	PoolCycle                     int64  `json:"PoolCycle"`
	SigningTransactionPeriod      int64  `json:"SigningTransactionPeriod"`
	VirtualMultSynths             int64  `json:"VirtualMultSynths"`
	YggFundLimit                  int64  `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock []LastblockItem

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn int64  `json:"last_observed_in"`
	LastSignedOut  int64  `json:"last_signed_out"`
	Thorchain      int64  `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {

	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// ObservedChain defines model for ObservedChain.
type ObservedChain struct {
	Chain  string `json:"chain"`
	Height int    `json:"height"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`
	Asset                  string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Int64, number of unique adresses that initiated swaps transactions in the period.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// PreflightStatus defines model for PreflightStatus.
type PreflightStatus struct {
	Code   int    `json:"code"`
	Reason string `json:"reason"`
	Status string `json:"status"`
}

// ProxiedNode defines model for ProxiedNode.
type ProxiedNode struct {
	ActiveBlockHeight int    `json:"active_block_height"`
	Bond              string `json:"bond"`
	BondAddress       string `json:"bond_address"`
	CurrentAward      string `json:"current_award"`
	ForcedToLeave     bool   `json:"forced_to_leave"`
	IpAddress         string `json:"ip_address"`
	Jail              struct {
		NodeAddress *string `json:"node_address,omitempty"`
	} `json:"jail"`
	LeaveHeight     int             `json:"leave_height"`
	NodeAddress     string          `json:"node_address"`
	ObserveChains   []ObservedChain `json:"observe_chains"`
	PreflightStatus PreflightStatus `json:"preflight_status"`
	PubKeySet       struct {
		Ed25519   string `json:"ed25519"`
		Secp256k1 string `json:"secp256k1"`
	} `json:"pub_key_set"`
	RequestedToLeave    bool     `json:"requested_to_leave"`
	SignerMembership    []string `json:"signer_membership"`
	SlashPoints         int      `json:"slash_points"`
	Status              string   `json:"status"`
	StatusSince         int      `json:"status_since"`
	ValidatorConsPubKey string   `json:"validator_cons_pub_key"`
	Version             string   `json:"version"`
}

// ProxiedNodes defines model for ProxiedNodes.
type ProxiedNodes []ProxiedNode

// Queue defines model for Queue.
type Queue struct {
	Internal int `json:"internal"`
	Outbound int `json:"outbound"`
	Swap     int `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, unique users (addresses) initiating swaps in the last 24 hours.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, unique users (addresses) initiating swaps in the last 30 days.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Int64, unique users (addresses) initiating swaps since beginning.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {

	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {

	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at the end of the interval
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ProxiedNodesResponse defines model for ProxiedNodesResponse.
type ProxiedNodesResponse ProxiedNodes

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// Affiliate address of the action (swap)
	AffiliateAddress *string `json:"affiliate_address,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {

	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"+wAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
