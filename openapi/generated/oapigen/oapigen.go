// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {
	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still
	// pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still
// pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {
	// Int64, amount of liquidity units assigned to the member as result of the liquidity
	// deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {
	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Represents a digital currency amount
type Coin struct {
	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {
	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, The liquidity unit value index. Sqrt(assetDepth * runeDepth)/liquidity units
	Luvi string `json:"luvi"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {
	// Int64(e8), the amount of Asset in the pool at the end of the interval at time endTime
	EndAssetDepth string `json:"endAssetDepth"`

	// Int64, Liquidity Units in the pool at the end of the interval at time endTime
	EndLPUnits string `json:"endLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval at time endTime
	EndRuneDepth string `json:"endRuneDepth"`

	// Int64, Synth Units in the pool at the end of the interval at time endTime
	EndSynthUnits string `json:"endSynthUnits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, The liquidity unit value index increase between the first and last depth item
	LuviIncrease string `json:"luviIncrease"`

	// Float, The impermanent loss between the first and last depth item
	PriceShiftLoss string `json:"priceShiftLoss"`

	// Int64(e8), the amount of Asset in the pool at the start of the interval at time
	// startTime
	StartAssetDepth string `json:"startAssetDepth"`

	// Int64, Liquidity Units in the pool at the start of the interval at time startTime
	StartLPUnits string `json:"startLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the start of the interval at time startTime
	StartRuneDepth string `json:"startRuneDepth"`

	// Int64, Synth Units in the pool at the start of the interval at time startTime
	StartSynthUnits string `json:"startSynthUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {
	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of
	// liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {
	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// FullMemberDetails defines model for FullMemberDetails.
type FullMemberDetails struct {
	// List details of all the liquidity providers identified with the given address
	Pools []FullMemberPool `json:"pools"`
}

// FullMemberPool defines model for FullMemberPool.
type FullMemberPool struct {
	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total units of the pool
	PoolUnits string `json:"poolUnits"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`

	// Int64, total units that belong the the member
	SharedUnits string `json:"sharedUnits"`
}

// Health defines model for Health.
type Health struct {
	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync         bool     `json:"inSync"`
	LastAggregated HeightTS `json:"lastAggregated"`
	LastCommitted  HeightTS `json:"lastCommitted"`
	LastFetched    HeightTS `json:"lastFetched"`
	LastThorNode   HeightTS `json:"lastThorNode"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// HeightTS defines model for HeightTS.
type HeightTS struct {
	// Block height
	Height int `json:"height"`

	// Block timestamp (seconds since epoch)
	Timestamp int `json:"timestamp"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string  `json:"address"`
	Chain   string  `json:"chain"`
	GasRate *string `json:"gas_rate,omitempty"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                    int64  `json:"AsgardSize"`
	BadValidatorRate              int64  `json:"BadValidatorRate"`
	BadValidatorRedline           int    `json:"BadValidatorRedline"`
	BlocksPerYear                 int64  `json:"BlocksPerYear"`
	ChurnInterval                 int64  `json:"ChurnInterval"`
	ChurnRetryInterval            int64  `json:"ChurnRetryInterval"`
	DesiredValidatorSet           int64  `json:"DesiredValidatorSet"`
	DoubleSignMaxAge              int64  `json:"DoubleSignMaxAge"`
	EmissionCurve                 int64  `json:"EmissionCurve"`
	FailKeygenSlashPoints         int64  `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints        int64  `json:"FailKeysignSlashPoints"`
	FullImpLossProtectionBlocks   int64  `json:"FullImpLossProtectionBlocks"`
	FundMigrationInterval         int64  `json:"FundMigrationInterval"`
	IncentiveCurve                int64  `json:"IncentiveCurve"`
	JailTimeKeygen                int64  `json:"JailTimeKeygen"`
	JailTimeKeysign               int64  `json:"JailTimeKeysign"`
	LackOfObservationPenalty      int64  `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks         int64  `json:"LiquidityLockUpBlocks"`
	MaxAvailablePools             int64  `json:"MaxAvailablePools"`
	MaxSwapsPerBlock              int64  `json:"MaxSwapsPerBlock"`
	MinRunePoolDepth              int64  `json:"MinRunePoolDepth"`
	MinSlashPointsForBadValidator int64  `json:"MinSlashPointsForBadValidator"`
	MinSwapsPerBlock              int64  `json:"MinSwapsPerBlock"`
	MinimumBondInRune             int64  `json:"MinimumBondInRune"`
	MinimumNodesForBFT            int64  `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil      int64  `json:"MinimumNodesForYggdrasil"`
	NativeTransactionFee          int64  `json:"NativeTransactionFee"`
	NewPoolCycle                  *int64 `json:"NewPoolCycle,omitempty"`
	ObservationDelayFlexibility   int64  `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints            int64  `json:"ObserveSlashPoints"`
	OldValidatorRate              int64  `json:"OldValidatorRate"`
	OutboundTransactionFee        int64  `json:"OutboundTransactionFee"`
	PoolCycle                     int64  `json:"PoolCycle"`
	SigningTransactionPeriod      int64  `json:"SigningTransactionPeriod"`
	VirtualMultSynths             int64  `json:"VirtualMultSynths"`
	YggFundLimit                  int64  `json:"YggFundLimit"`
}

// LPDetail defines model for LPDetail.
type LPDetail struct {
	// asset address
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, total asset earned
	AssetEarned string `json:"assetEarned"`

	// Float, current asset price in rune
	AssetPrice string `json:"assetPrice"`

	// Float, current asset price in usd
	AssetPriceUsd string `json:"assetPriceUsd"`

	// pool name
	Pool string `json:"pool"`

	// Int64(e8), pool units
	PoolUnits string `json:"poolUnits"`

	// Int64(e8), total block reward
	Rewards string `json:"rewards"`

	// rune address
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// Float, total rune earned
	RuneEarned string `json:"runeEarned"`

	// Int64(e8), current rune price in usd
	RunePriceUsd string `json:"runePriceUsd"`

	// Int64(e8), share units
	SharedUnits string        `json:"sharedUnits"`
	StakeDetail []StakeDetail `json:"stakeDetail"`

	// Int64(e8), total rune price in usd
	UsdEarned      string        `json:"usdEarned"`
	WithdrawDetail []StakeDetail `json:"withdrawDetail"`
}

// LPDetails defines model for LPDetails.
type LPDetails []LPDetail

// Lastblock defines model for Lastblock.
type Lastblock []LastblockItem

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn int64  `json:"last_observed_in"`
	LastSignedOut  int64  `json:"last_signed_out"`
	Thorchain      int64  `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {
	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {
	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {
	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and
	// nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each
// outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {
	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// OHLCVHistory defines model for OHLCVHistory.
type OHLCVHistory struct {
	Intervals OHLCVHistoryIntervals `json:"intervals"`
	Meta      OHLCVHistoryMeta      `json:"meta"`
}

// OHLCVHistoryIntervals defines model for OHLCVHistoryIntervals.
type OHLCVHistoryIntervals []OHLCVHistoryItem

// OHLCVHistoryItem defines model for OHLCVHistoryItem.
type OHLCVHistoryItem struct {
	// Float, close price of asset in USD
	ClosePrice string `json:"closePrice"`

	// Int64, The end time of bucket in unix timestamp
	CloseTime string `json:"closeTime"`

	// Float, high price of asset in USD
	HighPrice string `json:"highPrice"`

	// Int64, The high time of bucket in unix timestamp
	HighTime string `json:"highTime"`

	// Int64, Liquidty is USD
	Liquidity string `json:"liquidity"`

	// Float, low price of asset in USD
	LowPrice string `json:"lowPrice"`

	// Int64, The low time of bucket in unix timestamp
	LowTime string `json:"lowTime"`

	// Float, open price of asset in USD
	OpenPrice string `json:"openPrice"`

	// Int64, The beginning time of bucket in unix timestamp
	OpenTime string `json:"openTime"`

	// Int64, Volume in USD
	Volume string `json:"volume"`
}

// OHLCVHistoryMeta defines model for OHLCVHistoryMeta.
type OHLCVHistoryMeta struct {
	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// ObservedChain defines model for ObservedChain.
type ObservedChain struct {
	Chain  string `json:"chain"`
	Height int    `json:"height"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income,
	// taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	// It includes synth mint or burn.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {
	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`
	Asset                  string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income,
	// taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// PreflightStatus defines model for PreflightStatus.
type PreflightStatus struct {
	Code   int    `json:"code"`
	Reason string `json:"reason"`
	Status string `json:"status"`
}

// ProxiedNode defines model for ProxiedNode.
type ProxiedNode struct {
	ActiveBlockHeight int    `json:"active_block_height"`
	Bond              string `json:"bond"`
	BondAddress       string `json:"bond_address"`
	CurrentAward      string `json:"current_award"`
	ForcedToLeave     bool   `json:"forced_to_leave"`
	IpAddress         string `json:"ip_address"`
	Jail              struct {
		NodeAddress *string `json:"node_address,omitempty"`
	} `json:"jail"`
	LeaveHeight     int             `json:"leave_height"`
	NodeAddress     string          `json:"node_address"`
	ObserveChains   []ObservedChain `json:"observe_chains"`
	PreflightStatus PreflightStatus `json:"preflight_status"`
	PubKeySet       struct {
		Ed25519   string `json:"ed25519"`
		Secp256k1 string `json:"secp256k1"`
	} `json:"pub_key_set"`
	RequestedToLeave    bool     `json:"requested_to_leave"`
	SignerMembership    []string `json:"signer_membership"`
	SlashPoints         int      `json:"slash_points"`
	Status              string   `json:"status"`
	StatusSince         int      `json:"status_since"`
	ValidatorConsPubKey string   `json:"validator_cons_pub_key"`
	Version             string   `json:"version"`
}

// ProxiedNodes defines model for ProxiedNodes.
type ProxiedNodes []ProxiedNode

// Queue defines model for Queue.
type Queue struct {
	Internal int `json:"internal"`
	Outbound int `json:"outbound"`
	Swap     int `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {
	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// StatsData defines model for StatsData.
type StatsData struct {
	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Deprecated, it's always 0.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Deprecated, it's always 0.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps (including synths) since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps (including synths) in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps (including synths) in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps (including synths) denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Synth to Rune since beginning.
	SynthBurnCount string `json:"synthBurnCount"`

	// Int64, number of swaps from Rune to Synth since beginning.
	SynthMintCount string `json:"synthMintCount"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {
	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {
	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {
	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {
	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {
	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of
	// the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity
	// pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at
	// the end of the interval.
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {
	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the
	// native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {
	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means
	// totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership
	// withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// StakeDetail defines model for stakeDetail.
type StakeDetail struct {
	// Int64(e8), asset amount
	AssetAmount string `json:"assetAmount"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, asset price in rune
	AssetPrice string `json:"assetPrice"`

	// Float, asset price in usd
	AssetPriceUsd string `json:"assetPriceUsd"`

	// Float, withdraw percentage
	BasisPoint string `json:"basisPoint"`

	// Int64, nano timestamp of the block
	Date string `json:"date"`

	// Int64, block height
	Height string `json:"height"`

	// Int64, total number of pool units
	PoolUnits string `json:"poolUnits"`

	// Int64(e8), rune amount
	RuneAmount string `json:"runeAmount"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// Float, rune price in usd
	RunePriceUsd string `json:"runePriceUsd"`

	// Int64, total number of units changed
	SharedUnits string `json:"sharedUnits"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// FullMembersResponse defines model for FullMembersResponse.
type FullMembersResponse FullMemberDetails

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LPDetailsResponse defines model for LPDetailsResponse.
type LPDetailsResponse LPDetails

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// OHLCVHistoryResponse defines model for OHLCVHistoryResponse.
type OHLCVHistoryResponse OHLCVHistory

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ProxiedNodesResponse defines model for ProxiedNodesResponse.
type ProxiedNodesResponse ProxiedNodes

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {
	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// Affiliate address of the action (swap)
	AffiliateAddress *string `json:"affiliate_address,omitempty"`
	AssetType        *string `json:"assetType,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`
}

// GetFullMembersAdressesParams defines parameters for GetFullMembersAdresses.
type GetFullMembersAdressesParams struct {
	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {
	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {
	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {
	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetOHLCVHistoryParams defines parameters for GetOHLCVHistory.
type GetOHLCVHistoryParams struct {
	// Interval of calculations
	Interval *GetOHLCVHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetOHLCVHistoryParamsInterval defines parameters for GetOHLCVHistory.
type GetOHLCVHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {
	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTSSwapHistoryParams defines parameters for GetTSSwapHistory.
type GetTSSwapHistoryParams struct {
	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetTSSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTSSwapHistoryParamsInterval defines parameters for GetTSSwapHistory.
type GetTSSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {
	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetLPDetailParams defines parameters for GetLPDetail.
type GetLPDetailParams struct {
	// Return information for given pools
	Pools *string `json:"pools,omitempty"`
}

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {
	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {
	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {
	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
