// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64, Average bond of active nodes.
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64, Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64, Maxinum bond of active nodes.
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64, Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64, Median bond of active nodes.
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64, Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64, Minumum bond of active nodes.
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64, Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64, Total bond of active nodes.
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64, Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryInterval  `json:"meta"`
}

// EarningsHistoryInterval defines model for EarningsHistoryInterval.
type EarningsHistoryInterval struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64, Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64, Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64, System income generated during the time interval. It is the sum of liquidity fees and block rewards.
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64, Total liquidity fees, converted to RUNE, collected during the time interval.
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryIntervalPool `json:"pools"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistoryIntervalPool defines model for EarningsHistoryIntervalPool.
type EarningsHistoryIntervalPool struct {

	// Int64, Share of earnings sent to the pool during the time interval
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryInterval

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// Liquidity provider data for all the pools of a given member
	Pools []MemberPoolDetails `json:"pools"`
}

// MemberPoolDetails defines model for MemberPoolDetails.
type MemberPoolDetails struct {

	// Int64, total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// Int64, total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Int64, total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`
	BondingROI string `json:"bondingROI"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks).
	PoolActivationCountdown string  `json:"poolActivationCountdown"`
	PoolShareFactor         string  `json:"poolShareFactor"`
	StakingROI              *string `json:"stakingROI,omitempty"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64, Total Rune pooled in all pools.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64, Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NodeKey defines model for NodeKey.
type NodeKey struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	Price string `json:"price"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Enabled, Bootstrap.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Daily active users (unique addresses interacting)
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Daily transactions
	DailyTx string `json:"dailyTx"`

	// Monthly active users
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Monthly transactions
	MonthlyTx string `json:"monthlyTx"`

	// Total buying transactions
	TotalAssetBuys string `json:"totalAssetBuys"`

	// Total selling transactions
	TotalAssetSells string `json:"totalAssetSells"`

	// Total RUNE balances
	TotalDepth string `json:"totalDepth"`

	// Total staking transactions
	TotalStakeTx string `json:"totalStakeTx"`

	// Total staked (in RUNE Value).
	TotalStaked string `json:"totalStaked"`

	// Total transactions
	TotalTx string `json:"totalTx"`

	// Total unique swappers & members
	TotalUsers string `json:"totalUsers"`

	// Total (in RUNE Value) of all assets swapped since start.
	TotalVolume string `json:"totalVolume"`

	// Total withdrawing transactions
	TotalWithdrawTx string `json:"totalWithdrawTx"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Int64, the average slip by swap. Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64, volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64, volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64, the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64, toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// TxDetails defines model for TxDetails.
type TxDetails struct {

	// Int64, Unix timestamp.
	Date   string `json:"date"`
	Events Event  `json:"events"`
	Height string `json:"height"`
	In     Tx     `json:"in"`
	Out    []Tx   `json:"out"`
	Pool   string `json:"pool"`
	Status string `json:"status"`
	Type   string `json:"type"`
}

// Coin defines model for coin.
type Coin struct {
	Amount string `json:"amount"`
	Asset  string `json:"asset"`
}

// Coins defines model for coins.
type Coins []Coin

// Event defines model for event.
type Event struct {
	Fee        string `json:"fee"`
	Slip       string `json:"slip"`
	StakeUnits string `json:"stakeUnits"`
}

// Option defines model for option.
type Option struct {
	Asymmetry           string `json:"asymmetry"`
	PriceTarget         string `json:"priceTarget"`
	WithdrawBasisPoints string `json:"withdrawBasisPoints"`
}

// Tx defines model for tx.
type Tx struct {
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`
	Memo    string `json:"memo"`
	Options Option `json:"options"`
	TxID    string `json:"txID"`
}

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse []string

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodeKeyResponse defines model for NodeKeyResponse.
type NodeKeyResponse []NodeKey

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse []PoolDetail

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// TxResponse defines model for TxResponse.
type TxResponse struct {

	// Int64, count of txs matching the filters.
	Count string      `json:"count"`
	Txs   []TxDetails `json:"txs"`
}

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval string `json:"interval"`

	// Start time of the query as unix timestamp
	From int64 `json:"from"`

	// End time of the query as unix timestamp
	To int64 `json:"to"`
}

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return stats for this single pool. Returns sum of all pools if missing.
	Pool *int64 `json:"pool,omitempty"`

	// Interval of calculations
	Interval string `json:"interval"`

	// Start time of the query as unix timestamp
	From int64 `json:"from"`

	// End time of the query as unix timestamp
	To int64 `json:"to"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Interval of calculations
	Status string `json:"status"`
}

// GetTxDetailsParams defines parameters for GetTxDetails.
type GetTxDetailsParams struct {

	// Address of sender or recipient of any in/out tx in event
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx in event
	Txid *string `json:"txid,omitempty"`

	// Any asset used in event (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of event
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
