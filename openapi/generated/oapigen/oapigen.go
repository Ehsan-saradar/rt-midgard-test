// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Action defines model for Action.
type Action struct {

	// Int64, Unix timestamp for when the action was registered
	Date string `json:"date"`

	// Int64, block height at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status string `json:"status"`

	// Type of action
	Type string `json:"type"`
}

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64, Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64, Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64, Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64, Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64, Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64, Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64, Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64, Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64, Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64, Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Coin defines model for Coin.
type Coin struct {

	// Int64 (10^8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64, the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Int64, the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64, Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64, Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64, System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64, Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistoryItemPool defines model for EarningsHistoryItemPool.
type EarningsHistoryItemPool struct {

	// Int64, Share of earnings sent to the pool during the time interval
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string `json:"address"`
	Chain   string `json:"chain"`

	// indicate whether this chain has halted
	Halted bool   `json:"halted"`
	PubKey string `json:"pub_key"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                  int64 `json:"AsgardSize"`
	BadValidatorRate            int64 `json:"BadValidatorRate"`
	BlocksPerYear               int64 `json:"BlocksPerYear"`
	ChurnInterval               int64 `json:"ChurnInterval"`
	ChurnRetryInterval          int64 `json:"ChurnRetryInterval"`
	CliTxCost                   int64 `json:"CliTxCost"`
	DesiredValidatorSet         int64 `json:"DesiredValidatorSet"`
	DoubleSignMaxAge            int64 `json:"DoubleSignMaxAge"`
	EmissionCurve               int64 `json:"EmissionCurve"`
	FailKeygenSlashPoints       int64 `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints      int64 `json:"FailKeysignSlashPoints"`
	FundMigrationInterval       int64 `json:"FundMigrationInterval"`
	JailTimeKeygen              int64 `json:"JailTimeKeygen"`
	JailTimeKeysign             int64 `json:"JailTimeKeysign"`
	LackOfObservationPenalty    int64 `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks       int64 `json:"LiquidityLockUpBlocks"`
	MinimumBondInRune           int64 `json:"MinimumBondInRune"`
	MinimumNodesForBFT          int64 `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil    int64 `json:"MinimumNodesForYggdrasil"`
	NativeChainGasFee           int64 `json:"NativeChainGasFee"`
	NewPoolCycle                int64 `json:"NewPoolCycle"`
	ObservationDelayFlexibility int64 `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints          int64 `json:"ObserveSlashPoints"`
	OldValidatorRate            int64 `json:"OldValidatorRate"`
	OutboundTransactionFee      int64 `json:"OutboundTransactionFee"`
	SigningTransactionPeriod    int64 `json:"SigningTransactionPeriod"`
	YggFundLimit                int64 `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock struct {
	Current []LastblockItem `json:"current"`
}

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn string `json:"last_observed_in"`
	LastSignedOut  string `json:"last_signed_out"`
	Thorchain      string `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64 (10^8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64 (10^8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64 (10^8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64 (10^8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64 (10^8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64 (10^8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64, total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64, total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64, total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`
	PoolShareFactor         string `json:"poolShareFactor"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64, Total Rune pooled in all pools
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64, Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NetworkFees defines model for NetworkFees.
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolLegacyDetail defines model for PoolLegacyDetail.
type PoolLegacyDetail struct {
	Asset string `json:"asset"`

	// same as assetDepth from pool/stats
	AssetDepth string `json:"assetDepth"`

	// same as addAssetLiquidityVolume from pool/stats
	AssetStakedTotal string `json:"assetStakedTotal"`

	// same as toAssetCount from pool/stats
	BuyAssetCount string `json:"buyAssetCount"`

	// same as toAssetFees / toAssetCount from pool/stats
	BuyFeeAverage string `json:"buyFeeAverage"`

	// same as toAssetFees from pool/stats
	BuyFeesTotal string `json:"buyFeesTotal"`

	// same as toAssetAverageSlip from pool/stats
	BuySlipAverage string `json:"buySlipAverage"`

	// same as toAssetVolume / toAssetCount from pool/stats
	BuyTxAverage string `json:"buyTxAverage"`

	// same as toAssetVolume from pool/stats
	BuyVolume string `json:"buyVolume"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// same as 2*runeDepth from pool/stats
	PoolDepth string `json:"poolDepth"`

	// same as totalFees / swapCount from pool/stats
	PoolFeeAverage string `json:"poolFeeAverage"`

	// same as totalFees from pool/stats
	PoolFeesTotal string `json:"poolFeesTotal"`

	// same as averageSlip from pool/stats
	PoolSlipAverage string `json:"poolSlipAverage"`

	// same as addLiquidityVolume from pool/stats
	PoolStakedTotal string `json:"poolStakedTotal"`

	// same as swapVolume / swapCount from pool/stats
	PoolTxAverage string `json:"poolTxAverage"`

	// same as units from pool/stats
	PoolUnits string `json:"poolUnits"`

	// Int64, same as buyVolume + sellVolume
	PoolVolume string `json:"poolVolume"`

	// same as assetPrice from pool/stats
	Price string `json:"price"`

	// same as runeDepth from pool/stats
	RuneDepth string `json:"runeDepth"`

	// same as addRuneLiquidityVolume from pool/stats
	RuneStakedTotal string `json:"runeStakedTotal"`

	// same as toRuneCount from pool/stats
	SellAssetCount string `json:"sellAssetCount"`

	// same as toRuneFees / toRuneCount from pool/stats
	SellFeeAverage string `json:"sellFeeAverage"`

	// same as toRuneFees from pool/stats
	SellFeesTotal string `json:"sellFeesTotal"`

	// same as toRuneAverageSlip from pool/stats
	SellSlipAverage string `json:"sellSlipAverage"`

	// same as toRuneVolume / toRuneCount from pool/stats
	SellTxAverage string `json:"sellTxAverage"`

	// same as toRuneVolume from pool/stats
	SellVolume string `json:"sellVolume"`

	// same as addLiquidityCount from pool/stats
	StakeTxCount string `json:"stakeTxCount"`

	// same as uniqueMemberCount from pool/stats
	StakersCount string `json:"stakersCount"`

	// same as addLiquidityCount + withdrawCount from pool/stats
	StakingTxCount string `json:"stakingTxCount"`

	// same as status from pool/stats
	Status string `json:"status"`

	// Int64, same as history/swaps:uniqueSwapperCount
	SwappersCount string `json:"swappersCount"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64, same as swapVolume pool/stats?period=24h
	Volume24h string `json:"volume24h"`

	// same as withdrawCount from pool/stats
	WithdrawTxCount string `json:"withdrawTxCount"`
}

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64, same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64, same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`
	Asset                  string `json:"asset"`

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64, same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Float, same as history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64, same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64, same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float, same as history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64, same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64, same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Int64, number of unique adresses that initiated swaps transactions in the period.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Liquidity Units in the pool
	Units string `json:"units"`

	// Int64, same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64, same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64, same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// Queue defines model for Queue.
type Queue struct {
	Outbound string `json:"outbound"`
	Swap     string `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64 (10^8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, unique users (addresses) initiating swaps in the last 24 hours.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64, unique users (addresses) initiating swaps in the last 30 days.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64 (10^8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps since beginning.
	SwapCount string `json:"swapCount"`

	// Int64, number of swaps in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64, total volume of swaps denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Int64, unique users (addresses) initiating swaps since beginning.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64 (10^8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float, the average slip by swap. Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float, the average slip for swaps to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64, the fees collected from swaps to asset denoted in rune
	ToAssetFees string `json:"toAssetFees"`

	// Int64, volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float, the average slip for swaps to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64, the fees collected from swaps to rune
	ToRuneFees string `json:"toRuneFees"`

	// Int64, volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64, the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64, toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Int64 (10^8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), trade slip percentage
	TradeSlip string `json:"tradeSlip"`

	// Int64 (10^8), minimum output amount specified for the swap
	TradeTarget string `json:"tradeTarget"`
}

// Transaction defines model for Transaction.
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolLegacyResponse defines model for PoolLegacyResponse.
type PoolLegacyResponse PoolLegacyDetail

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Address of sender or recipient of any in/out transaction related to the action
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action (swap, addLiquidity, withdraw, donate, refund)
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *string `json:"period,omitempty"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *string `json:"status,omitempty"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Nw/GAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
