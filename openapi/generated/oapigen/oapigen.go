// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {
	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {
	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {
	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Represents a digital currency amount
type Coin struct {
	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {
	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {
	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {
	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {
	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// FullMemberDetails defines model for FullMemberDetails.
type FullMemberDetails struct {
	// List details of all the liquidity providers identified with the given address
	Pools []FullMemberPool `json:"pools"`
}

// FullMemberPool defines model for FullMemberPool.
type FullMemberPool struct {
	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total units of the pool
	PoolUnits string `json:"poolUnits"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`

	// Int64, total units that belong the the member
	SharedUnits string `json:"sharedUnits"`
}

// Health defines model for Health.
type Health struct {
	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync         bool     `json:"inSync"`
	LastAggregated HeightTS `json:"lastAggregated"`
	LastCommitted  HeightTS `json:"lastCommitted"`
	LastFetched    HeightTS `json:"lastFetched"`
	LastThorNode   HeightTS `json:"lastThorNode"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// HeightTS defines model for HeightTS.
type HeightTS struct {
	// Block height
	Height int `json:"height"`

	// Block timestamp (seconds since epoch)
	Timestamp int `json:"timestamp"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string  `json:"address"`
	Chain   string  `json:"chain"`
	GasRate *string `json:"gas_rate,omitempty"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                    int64  `json:"AsgardSize"`
	BadValidatorRate              int64  `json:"BadValidatorRate"`
	BadValidatorRedline           int    `json:"BadValidatorRedline"`
	BlocksPerYear                 int64  `json:"BlocksPerYear"`
	ChurnInterval                 int64  `json:"ChurnInterval"`
	ChurnRetryInterval            int64  `json:"ChurnRetryInterval"`
	DesiredValidatorSet           int64  `json:"DesiredValidatorSet"`
	DoubleSignMaxAge              int64  `json:"DoubleSignMaxAge"`
	EmissionCurve                 int64  `json:"EmissionCurve"`
	FailKeygenSlashPoints         int64  `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints        int64  `json:"FailKeysignSlashPoints"`
	FullImpLossProtectionBlocks   int64  `json:"FullImpLossProtectionBlocks"`
	FundMigrationInterval         int64  `json:"FundMigrationInterval"`
	IncentiveCurve                int64  `json:"IncentiveCurve"`
	JailTimeKeygen                int64  `json:"JailTimeKeygen"`
	JailTimeKeysign               int64  `json:"JailTimeKeysign"`
	LackOfObservationPenalty      int64  `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks         int64  `json:"LiquidityLockUpBlocks"`
	MaxAvailablePools             int64  `json:"MaxAvailablePools"`
	MaxSwapsPerBlock              int64  `json:"MaxSwapsPerBlock"`
	MinRunePoolDepth              int64  `json:"MinRunePoolDepth"`
	MinSlashPointsForBadValidator int64  `json:"MinSlashPointsForBadValidator"`
	MinSwapsPerBlock              int64  `json:"MinSwapsPerBlock"`
	MinimumBondInRune             int64  `json:"MinimumBondInRune"`
	MinimumNodesForBFT            int64  `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil      int64  `json:"MinimumNodesForYggdrasil"`
	NativeTransactionFee          int64  `json:"NativeTransactionFee"`
	NewPoolCycle                  *int64 `json:"NewPoolCycle,omitempty"`
	ObservationDelayFlexibility   int64  `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints            int64  `json:"ObserveSlashPoints"`
	OldValidatorRate              int64  `json:"OldValidatorRate"`
	OutboundTransactionFee        int64  `json:"OutboundTransactionFee"`
	PoolCycle                     int64  `json:"PoolCycle"`
	SigningTransactionPeriod      int64  `json:"SigningTransactionPeriod"`
	VirtualMultSynths             int64  `json:"VirtualMultSynths"`
	YggFundLimit                  int64  `json:"YggFundLimit"`
}

// LPDetail defines model for LPDetail.
type LPDetail struct {
	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, total asset earned
	AssetEarned string `json:"assetEarned"`

	// Float, current asset price in rune
	AssetPrice string `json:"assetPrice"`

	// Float, current asset price in usd
	AssetPriceUsd string `json:"assetPriceUsd"`

	// pool name
	Pool string `json:"pool"`

	// Int64(e8), pool units
	PoolUnits string `json:"poolUnits"`

	// Int64(e8), total block reward
	Rewards string `json:"rewards"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// Float, total rune earned
	RuneEarned string `json:"runeEarned"`

	// Int64(e8), current rune price in usd
	RunePriceUsd string `json:"runePriceUsd"`

	// Int64(e8), share units
	SharedUnits string        `json:"sharedUnits"`
	StakeDetail []StakeDetail `json:"stakeDetail"`

	// Int64(e8), total rune price in usd
	UsdEarned      string        `json:"usdEarned"`
	WithdrawDetail []StakeDetail `json:"withdrawDetail"`
}

// LPDetails defines model for LPDetails.
type LPDetails []LPDetail

// Lastblock defines model for Lastblock.
type Lastblock []LastblockItem

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn int64  `json:"last_observed_in"`
	LastSignedOut  int64  `json:"last_signed_out"`
	Thorchain      int64  `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {
	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {
	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {
	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {
	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// OHLCVHistory defines model for OHLCVHistory.
type OHLCVHistory struct {
	Intervals OHLCVHistoryIntervals `json:"intervals"`
	Meta      OHLCVHistoryMeta      `json:"meta"`
}

// OHLCVHistoryIntervals defines model for OHLCVHistoryIntervals.
type OHLCVHistoryIntervals []OHLCVHistoryItem

// OHLCVHistoryItem defines model for OHLCVHistoryItem.
type OHLCVHistoryItem struct {
	// Float, close price of asset in USD
	ClosePrice string `json:"closePrice"`

	// Int64, The end time of bucket in unix timestamp
	CloseTime string `json:"closeTime"`

	// Float, high price of asset in USD
	HighPrice string `json:"highPrice"`

	// Int64, The high time of bucket in unix timestamp
	HighTime string `json:"highTime"`

	// Int64, Liquidty is USD
	Liquidity string `json:"liquidity"`

	// Float, low price of asset in USD
	LowPrice string `json:"lowPrice"`

	// Int64, The low time of bucket in unix timestamp
	LowTime string `json:"lowTime"`

	// Float, open price of asset in USD
	OpenPrice string `json:"openPrice"`

	// Int64, The beginning time of bucket in unix timestamp
	OpenTime string `json:"openTime"`

	// Int64, Volume in USD
	Volume string `json:"volume"`
}

// OHLCVHistoryMeta defines model for OHLCVHistoryMeta.
type OHLCVHistoryMeta struct {
	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// ObservedChain defines model for ObservedChain.
type ObservedChain struct {
	Chain  string `json:"chain"`
	Height int    `json:"height"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {
	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`
	Asset                  string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Int64, number of unique adresses that initiated swaps transactions in the period.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// PreflightStatus defines model for PreflightStatus.
type PreflightStatus struct {
	Code   int    `json:"code"`
	Reason string `json:"reason"`
	Status string `json:"status"`
}

// ProxiedNode defines model for ProxiedNode.
type ProxiedNode struct {
	ActiveBlockHeight int    `json:"active_block_height"`
	Bond              string `json:"bond"`
	BondAddress       string `json:"bond_address"`
	CurrentAward      string `json:"current_award"`
	ForcedToLeave     bool   `json:"forced_to_leave"`
	IpAddress         string `json:"ip_address"`
	Jail              struct {
		NodeAddress *string `json:"node_address,omitempty"`
	} `json:"jail"`
	LeaveHeight     int             `json:"leave_height"`
	NodeAddress     string          `json:"node_address"`
	ObserveChains   []ObservedChain `json:"observe_chains"`
	PreflightStatus PreflightStatus `json:"preflight_status"`
	PubKeySet       struct {
		Ed25519   string `json:"ed25519"`
		Secp256k1 string `json:"secp256k1"`
	} `json:"pub_key_set"`
	RequestedToLeave    bool     `json:"requested_to_leave"`
	SignerMembership    []string `json:"signer_membership"`
	SlashPoints         int      `json:"slash_points"`
	Status              string   `json:"status"`
	StatusSince         int      `json:"status_since"`
	ValidatorConsPubKey string   `json:"validator_cons_pub_key"`
	Version             string   `json:"version"`
}

// ProxiedNodes defines model for ProxiedNodes.
type ProxiedNodes []ProxiedNode

// Queue defines model for Queue.
type Queue struct {
	Internal int `json:"internal"`
	Outbound int `json:"outbound"`
	Swap     int `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {
	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// StatsData defines model for StatsData.
type StatsData struct {
	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, unique users (addresses) initiating swaps in the last 24 hours.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, unique users (addresses) initiating swaps in the last 30 days.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Int64, unique users (addresses) initiating swaps since beginning.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {
	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {
	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {
	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {
	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {
	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at the end of the interval
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {
	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {
	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// StakeDetail defines model for stakeDetail.
type StakeDetail struct {
	// Int64(e8), asset amount
	AssetAmount string `json:"assetAmount"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, asset price in rune
	AssetPrice string `json:"assetPrice"`

	// Float, asset price in usd
	AssetPriceUsd string `json:"assetPriceUsd"`

	// Float, withdraw percentage
	BasisPoint string `json:"basisPoint"`

	// Int64, nano timestamp of the block
	Date string `json:"date"`

	// Int64, block height
	Height string `json:"height"`

	// Int64, total number of pool units
	PoolUnits string `json:"poolUnits"`

	// Int64(e8), rune amount
	RuneAmount string `json:"runeAmount"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// Float, rune price in usd
	RunePriceUsd string `json:"runePriceUsd"`

	// Int64, total number of units changed
	SharedUnits string `json:"sharedUnits"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// FullMembersResponse defines model for FullMembersResponse.
type FullMembersResponse FullMemberDetails

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LPDetailsResponse defines model for LPDetailsResponse.
type LPDetailsResponse LPDetails

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// OHLCVHistoryResponse defines model for OHLCVHistoryResponse.
type OHLCVHistoryResponse OHLCVHistory

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ProxiedNodesResponse defines model for ProxiedNodesResponse.
type ProxiedNodesResponse ProxiedNodes

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {
	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`
}

// GetFullMembersAdressesParams defines parameters for GetFullMembersAdresses.
type GetFullMembersAdressesParams struct {
	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {
	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {
	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {
	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetOHLCVHistoryParams defines parameters for GetOHLCVHistory.
type GetOHLCVHistoryParams struct {
	// Interval of calculations
	Interval *GetOHLCVHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetOHLCVHistoryParamsInterval defines parameters for GetOHLCVHistory.
type GetOHLCVHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {
	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTSSwapHistoryParams defines parameters for GetTSSwapHistory.
type GetTSSwapHistoryParams struct {
	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetTSSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTSSwapHistoryParamsInterval defines parameters for GetTSSwapHistory.
type GetTSSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {
	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetLPDetailParams defines parameters for GetLPDetail.
type GetLPDetailParams struct {
	// Return information for given pools
	Pools *string `json:"pools,omitempty"`
}

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {
	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {
	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {
	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
