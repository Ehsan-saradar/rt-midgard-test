// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {
	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still
	// pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still
// pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {
	// Int64, amount of liquidity units assigned to the member as result of the liquidity
	// deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// Balance defines model for Balance.
type Balance struct {
	Coins Coins `json:"coins"`

	// full timestamp (nanoseconds since 1970) of the block at which the returned balance snapshot was valid
	Date string `json:"date"`

	// height of the block at which the returned balance snapshot was valid
	Height string `json:"height"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {
	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Represents a digital currency amount
type Coin struct {
	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {
	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, The liquidity unit value index. Sqrt(assetDepth * runeDepth)/liquidity units
	Luvi string `json:"luvi"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {
	// Int64(e8), the amount of Asset in the pool at the end of the interval at time endTime
	EndAssetDepth string `json:"endAssetDepth"`

	// Int64, Liquidity Units in the pool at the end of the interval at time endTime
	EndLPUnits string `json:"endLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval at time endTime
	EndRuneDepth string `json:"endRuneDepth"`

	// Int64, Synth Units in the pool at the end of the interval at time endTime
	EndSynthUnits string `json:"endSynthUnits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, The liquidity unit value index increase between startTime and endTime
	LuviIncrease string `json:"luviIncrease"`

	// Float, The impermanent loss between the first and last depth item
	PriceShiftLoss string `json:"priceShiftLoss"`

	// Int64(e8), the amount of Asset in the pool at the start of the interval at time
	// startTime
	StartAssetDepth string `json:"startAssetDepth"`

	// Int64, Liquidity Units in the pool at the start of the interval at time startTime
	StartLPUnits string `json:"startLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the start of the interval at time startTime
	StartRuneDepth string `json:"startRuneDepth"`

	// Int64, Synth Units in the pool at the start of the interval at time startTime
	StartSynthUnits string `json:"startSynthUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {
	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of
	// liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {
	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// FullMemberDetails defines model for FullMemberDetails.
type FullMemberDetails struct {
	// List details of all the liquidity providers identified with the given address
	Pools []FullMemberPool `json:"pools"`
}

// FullMemberPool defines model for FullMemberPool.
type FullMemberPool struct {
	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total units of the pool
	PoolUnits string `json:"poolUnits"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`

	// Int64, total units that belong the the member
	SharedUnits string `json:"sharedUnits"`
}

// Health defines model for Health.
type Health struct {
	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync         bool     `json:"inSync"`
	LastAggregated HeightTS `json:"lastAggregated"`
	LastCommitted  HeightTS `json:"lastCommitted"`
	LastFetched    HeightTS `json:"lastFetched"`
	LastThorNode   HeightTS `json:"lastThorNode"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// HeightTS defines model for HeightTS.
type HeightTS struct {
	// Block height
	Height int `json:"height"`

	// Block timestamp (seconds since epoch)
	Timestamp int `json:"timestamp"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string  `json:"address"`
	Chain   string  `json:"chain"`
	GasRate *string `json:"gas_rate,omitempty"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                    int64  `json:"AsgardSize"`
	BadValidatorRate              int64  `json:"BadValidatorRate"`
	BadValidatorRedline           int    `json:"BadValidatorRedline"`
	BlocksPerYear                 int64  `json:"BlocksPerYear"`
	ChurnInterval                 int64  `json:"ChurnInterval"`
	ChurnRetryInterval            int64  `json:"ChurnRetryInterval"`
	DesiredValidatorSet           int64  `json:"DesiredValidatorSet"`
	DoubleSignMaxAge              int64  `json:"DoubleSignMaxAge"`
	EmissionCurve                 int64  `json:"EmissionCurve"`
	FailKeygenSlashPoints         int64  `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints        int64  `json:"FailKeysignSlashPoints"`
	FullImpLossProtectionBlocks   int64  `json:"FullImpLossProtectionBlocks"`
	FundMigrationInterval         int64  `json:"FundMigrationInterval"`
	IncentiveCurve                int64  `json:"IncentiveCurve"`
	JailTimeKeygen                int64  `json:"JailTimeKeygen"`
	JailTimeKeysign               int64  `json:"JailTimeKeysign"`
	LackOfObservationPenalty      int64  `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks         int64  `json:"LiquidityLockUpBlocks"`
	MaxAvailablePools             int64  `json:"MaxAvailablePools"`
	MaxSwapsPerBlock              int64  `json:"MaxSwapsPerBlock"`
	MinRunePoolDepth              int64  `json:"MinRunePoolDepth"`
	MinSlashPointsForBadValidator int64  `json:"MinSlashPointsForBadValidator"`
	MinSwapsPerBlock              int64  `json:"MinSwapsPerBlock"`
	MinimumBondInRune             int64  `json:"MinimumBondInRune"`
	MinimumNodesForBFT            int64  `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil      int64  `json:"MinimumNodesForYggdrasil"`
	NativeTransactionFee          int64  `json:"NativeTransactionFee"`
	NewPoolCycle                  *int64 `json:"NewPoolCycle,omitempty"`
	ObservationDelayFlexibility   int64  `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints            int64  `json:"ObserveSlashPoints"`
	OldValidatorRate              int64  `json:"OldValidatorRate"`
	OutboundTransactionFee        int64  `json:"OutboundTransactionFee"`
	PoolCycle                     int64  `json:"PoolCycle"`
	SigningTransactionPeriod      int64  `json:"SigningTransactionPeriod"`
	VirtualMultSynths             int64  `json:"VirtualMultSynths"`
	YggFundLimit                  int64  `json:"YggFundLimit"`
}

// LPDetail defines model for LPDetail.
type LPDetail struct {
	// asset address
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, total asset earned
	AssetEarned string `json:"assetEarned"`

	// Float, current asset price in rune
	AssetPrice string `json:"assetPrice"`

	// Float, current asset price in usd
	AssetPriceUsd string `json:"assetPriceUsd"`

	// pool name
	Pool string `json:"pool"`

	// Int64(e8), pool units
	PoolUnits string `json:"poolUnits"`

	// Int64(e8), total block reward
	Rewards string `json:"rewards"`

	// rune address
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// Float, total rune earned
	RuneEarned string `json:"runeEarned"`

	// Int64(e8), current rune price in usd
	RunePriceUsd string `json:"runePriceUsd"`

	// Int64(e8), share units
	SharedUnits string        `json:"sharedUnits"`
	StakeDetail []StakeDetail `json:"stakeDetail"`

	// Int64(e8), total rune price in usd
	UsdEarned      string        `json:"usdEarned"`
	WithdrawDetail []StakeDetail `json:"withdrawDetail"`
}

// LPDetails defines model for LPDetails.
type LPDetails []LPDetail

// Lastblock defines model for Lastblock.
type Lastblock []LastblockItem

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn int64  `json:"last_observed_in"`
	LastSignedOut  int64  `json:"last_signed_out"`
	Thorchain      int64  `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {
	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {
	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {
	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and
	// nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each
// outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {
	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// OHLCVHistory defines model for OHLCVHistory.
type OHLCVHistory struct {
	Intervals OHLCVHistoryIntervals `json:"intervals"`
	Meta      OHLCVHistoryMeta      `json:"meta"`
}

// OHLCVHistoryIntervals defines model for OHLCVHistoryIntervals.
type OHLCVHistoryIntervals []OHLCVHistoryItem

// OHLCVHistoryItem defines model for OHLCVHistoryItem.
type OHLCVHistoryItem struct {
	// Float, close price of asset in USD
	ClosePrice string `json:"closePrice"`

	// Int64, The end time of bucket in unix timestamp
	CloseTime string `json:"closeTime"`

	// Float, high price of asset in USD
	HighPrice string `json:"highPrice"`

	// Int64, The high time of bucket in unix timestamp
	HighTime string `json:"highTime"`

	// Int64, Liquidty is USD
	Liquidity string `json:"liquidity"`

	// Float, low price of asset in USD
	LowPrice string `json:"lowPrice"`

	// Int64, The low time of bucket in unix timestamp
	LowTime string `json:"lowTime"`

	// Float, open price of asset in USD
	OpenPrice string `json:"openPrice"`

	// Int64, The beginning time of bucket in unix timestamp
	OpenTime string `json:"openTime"`

	// Int64, Volume in USD
	Volume string `json:"volume"`
}

// OHLCVHistoryMeta defines model for OHLCVHistoryMeta.
type OHLCVHistoryMeta struct {
	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// ObservedChain defines model for ObservedChain.
type ObservedChain struct {
	Chain  string `json:"chain"`
	Height int    `json:"height"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	// Float, Also called APR. Annual return estimated linearly (not compounded) from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// Due to Impermanent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	// It includes synth mint or burn.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {
	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Float, Also called APR. Annual return estimated linearly (not compounded) from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// Due to Impermanent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// PreflightStatus defines model for PreflightStatus.
type PreflightStatus struct {
	Code   int    `json:"code"`
	Reason string `json:"reason"`
	Status string `json:"status"`
}

// ProxiedNode defines model for ProxiedNode.
type ProxiedNode struct {
	ActiveBlockHeight int    `json:"active_block_height"`
	Bond              string `json:"bond"`
	BondAddress       string `json:"bond_address"`
	CurrentAward      string `json:"current_award"`
	ForcedToLeave     bool   `json:"forced_to_leave"`
	IpAddress         string `json:"ip_address"`
	Jail              struct {
		NodeAddress *string `json:"node_address,omitempty"`
	} `json:"jail"`
	LeaveHeight     int             `json:"leave_height"`
	NodeAddress     string          `json:"node_address"`
	ObserveChains   []ObservedChain `json:"observe_chains"`
	PreflightStatus PreflightStatus `json:"preflight_status"`
	PubKeySet       struct {
		Ed25519   string `json:"ed25519"`
		Secp256k1 string `json:"secp256k1"`
	} `json:"pub_key_set"`
	RequestedToLeave    bool     `json:"requested_to_leave"`
	SignerMembership    []string `json:"signer_membership"`
	SlashPoints         int      `json:"slash_points"`
	Status              string   `json:"status"`
	StatusSince         int      `json:"status_since"`
	ValidatorConsPubKey string   `json:"validator_cons_pub_key"`
	Version             string   `json:"version"`
}

// ProxiedNodes defines model for ProxiedNodes.
type ProxiedNodes []ProxiedNode

// Queue defines model for Queue.
type Queue struct {
	Internal int `json:"internal"`
	Outbound int `json:"outbound"`
	Swap     int `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {
	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// StatsData defines model for StatsData.
type StatsData struct {
	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Deprecated, it's always 0.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Deprecated, it's always 0.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps (including synths) since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps (including synths) in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps (including synths) in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps (including synths) denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Synth to Rune since beginning.
	SynthBurnCount string `json:"synthBurnCount"`

	// Int64, number of swaps from Rune to Synth since beginning.
	SynthMintCount string `json:"synthMintCount"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {
	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {
	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {
	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {
	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {
	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of
	// the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity
	// pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at
	// the end of the interval.
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {
	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the
	// native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {
	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means
	// totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership
	// withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// StakeDetail defines model for stakeDetail.
type StakeDetail struct {
	// Int64(e8), asset amount
	AssetAmount string `json:"assetAmount"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, asset price in rune
	AssetPrice string `json:"assetPrice"`

	// Float, asset price in usd
	AssetPriceUsd string `json:"assetPriceUsd"`

	// Float, withdraw percentage
	BasisPoint string `json:"basisPoint"`

	// Int64, nano timestamp of the block
	Date string `json:"date"`

	// Int64, block height
	Height string `json:"height"`

	// Int64, total number of pool units
	PoolUnits string `json:"poolUnits"`

	// Int64(e8), rune amount
	RuneAmount string `json:"runeAmount"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// Float, rune price in usd
	RunePriceUsd string `json:"runePriceUsd"`

	// Int64, total number of units changed
	SharedUnits string `json:"sharedUnits"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// BalanceResponse defines model for BalanceResponse.
type BalanceResponse Balance

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// FullMembersResponse defines model for FullMembersResponse.
type FullMembersResponse FullMemberDetails

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LPDetailsResponse defines model for LPDetailsResponse.
type LPDetailsResponse LPDetails

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// OHLCVHistoryResponse defines model for OHLCVHistoryResponse.
type OHLCVHistoryResponse OHLCVHistory

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ProxiedNodesResponse defines model for ProxiedNodesResponse.
type ProxiedNodesResponse ProxiedNodes

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {
	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// Affiliate address of the action (swap)
	Affiliate *string `json:"affiliate,omitempty"`
	AssetType *string `json:"assetType,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`
}

// GetBalanceParams defines parameters for GetBalance.
type GetBalanceParams struct {
	// Unix timestamp as seconds since 1970 (if provided, height must not be provided)
	Timestamp *int64 `json:"timestamp,omitempty"`

	// Block height (if provided, timestamp must not be provided)
	Height *int64 `json:"height,omitempty"`
}

// GetFullMembersAdressesParams defines parameters for GetFullMembersAdresses.
type GetFullMembersAdressesParams struct {
	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {
	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {
	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {
	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetOHLCVHistoryParams defines parameters for GetOHLCVHistory.
type GetOHLCVHistoryParams struct {
	// Interval of calculations
	Interval *GetOHLCVHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetOHLCVHistoryParamsInterval defines parameters for GetOHLCVHistory.
type GetOHLCVHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {
	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTSSwapHistoryParams defines parameters for GetTSSwapHistory.
type GetTSSwapHistoryParams struct {
	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetTSSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTSSwapHistoryParamsInterval defines parameters for GetTSSwapHistory.
type GetTSSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {
	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetLPDetailParams defines parameters for GetLPDetail.
type GetLPDetailParams struct {
	// Return information for given pools
	Pools *string `json:"pools,omitempty"`
}

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {
	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolParams defines parameters for GetPool.
type GetPoolParams struct {
	// Specifies the base interval from which APY is extrapolated.
	// Default is 30d.
	Period *GetPoolParamsPeriod `json:"period,omitempty"`
}

// GetPoolParamsPeriod defines parameters for GetPool.
type GetPoolParamsPeriod string

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {
	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {
	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`

	// Specifies the base interval from which annualPercentageRate and poolAPY is extrapolated.
	// Default is 30d.
	Period *GetPoolsParamsPeriod `json:"period,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// GetPoolsParamsPeriod defines parameters for GetPools.
type GetPoolsParamsPeriod string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
