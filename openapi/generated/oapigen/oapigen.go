// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Action defines model for Action.
type Action struct {

	// Int64, Unix timestamp
	Date     string        `json:"date"`
	Height   string        `json:"height"`
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`
	Out      []Transaction `json:"out"`
	Pools    []string      `json:"pools"`
	Status   string        `json:"status"`
	Type     string        `json:"type"`
}

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64, Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64, Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64, Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64, Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64, Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64, Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64, Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64, Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64, Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64, Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Coin defines model for Coin.
type Coin struct {
	Amount string `json:"amount"`
	Asset  string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64, Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64, Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64, System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64, Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistoryItemPool defines model for EarningsHistoryItemPool.
type EarningsHistoryItemPool struct {

	// Int64, Share of earnings sent to the pool during the time interval
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses struct {
	Current []InboundAddressesItem `json:"current"`
}

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string `json:"address"`
	Chain   string `json:"chain"`

	// indicate whether this chain has halted
	Halted bool   `json:"halted"`
	PubKey string `json:"pub_key"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                  int64 `json:"AsgardSize"`
	BadValidatorRate            int64 `json:"BadValidatorRate"`
	BlocksPerYear               int64 `json:"BlocksPerYear"`
	ChurnInterval               int64 `json:"ChurnInterval"`
	ChurnRetryInterval          int64 `json:"ChurnRetryInterval"`
	CliTxCost                   int64 `json:"CliTxCost"`
	DesiredValidatorSet         int64 `json:"DesiredValidatorSet"`
	DoubleSignMaxAge            int64 `json:"DoubleSignMaxAge"`
	EmissionCurve               int64 `json:"EmissionCurve"`
	FailKeygenSlashPoints       int64 `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints      int64 `json:"FailKeysignSlashPoints"`
	FundMigrationInterval       int64 `json:"FundMigrationInterval"`
	JailTimeKeygen              int64 `json:"JailTimeKeygen"`
	JailTimeKeysign             int64 `json:"JailTimeKeysign"`
	LackOfObservationPenalty    int64 `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks       int64 `json:"LiquidityLockUpBlocks"`
	MinimumBondInRune           int64 `json:"MinimumBondInRune"`
	MinimumNodesForBFT          int64 `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil    int64 `json:"MinimumNodesForYggdrasil"`
	NativeChainGasFee           int64 `json:"NativeChainGasFee"`
	NewPoolCycle                int64 `json:"NewPoolCycle"`
	ObservationDelayFlexibility int64 `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints          int64 `json:"ObserveSlashPoints"`
	OldValidatorRate            int64 `json:"OldValidatorRate"`
	OutboundTransactionFee      int64 `json:"OutboundTransactionFee"`
	SigningTransactionPeriod    int64 `json:"SigningTransactionPeriod"`
	YggFundLimit                int64 `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock struct {
	Current []LastblockItem `json:"current"`
}

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn string `json:"last_observed_in"`
	LastSignedOut  string `json:"last_signed_out"`
	Thorchain      string `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64, total deposits (liquidity additions) during the time interval
	Deposits string `json:"deposits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, total withdrawals during the time interval
	Withdrawals string `json:"withdrawals"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// Liquidity provider data for all the pools of a given member
	Pools []MemberPoolDetails `json:"pools"`
}

// MemberPoolDetails defines model for MemberPoolDetails.
type MemberPoolDetails struct {

	// Int64, total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// Int64, total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Int64, total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`
	PoolShareFactor         string `json:"poolShareFactor"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64, Total Rune pooled in all pools
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64, Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NodeKey defines model for NodeKey.
type NodeKey struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// NodeKeys defines model for NodeKeys.
type NodeKeys []NodeKey

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolLegacyDetail defines model for PoolLegacyDetail.
type PoolLegacyDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Int64, same as history/swaps:toAssetCount
	BuyAssetCount string `json:"buyAssetCount"`

	// Float, same as history/swaps:toRuneVolume/toRuneCount
	BuyTxAverage string `json:"buyTxAverage"`

	// Int64, same as history/swaps:toAssetVolume
	BuyVolume string `json:"buyVolume"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, same as assetDepth + runeDepth
	PoolDepth string `json:"poolDepth"`

	// Float, same as history/swaps:totalFees/totalCount
	PoolFeeAverage string `json:"poolFeeAverage"`

	// Int64, same as history/swaps:totalFees
	PoolFeesTotal string `json:"poolFeesTotal"`

	// Float, same as history/swaps:averageSlip
	PoolSlipAverage string `json:"poolSlipAverage"`

	// Float, same as history/swaps:totalVolume/totalCount
	PoolTxAverage string `json:"poolTxAverage"`

	// Int64, same as buyVolume + sellVolume
	PoolVolume string `json:"poolVolume"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// Int64, same as history/swaps:toRuneCount
	SellAssetCount string `json:"sellAssetCount"`

	// Float, same as history/swaps:toAssetVolume/toAssetCount
	SellTxAverage string `json:"sellTxAverage"`

	// Int64, same as history/swaps:toRuneVolume
	SellVolume string `json:"sellVolume"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64, Liquidity Units in the pool
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune
	Volume24h string `json:"volume24h"`
}

// Queue defines model for Queue.
type Queue struct {
	Outbound string `json:"outbound"`
	Swap     string `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {
	NetworkFees []Coin `json:"networkFees"`
	Reason      string `json:"reason"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Daily active users (unique addresses interacting)
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Daily transactions
	DailyTx string `json:"dailyTx"`

	// Monthly active users
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Monthly transactions
	MonthlyTx string `json:"monthlyTx"`

	// Total buying transactions
	TotalAssetBuys string `json:"totalAssetBuys"`

	// Total selling transactions
	TotalAssetSells string `json:"totalAssetSells"`

	// Total RUNE balances
	TotalDepth string `json:"totalDepth"`

	// Total staking transactions
	TotalStakeTx string `json:"totalStakeTx"`

	// Total staked (in RUNE Value)
	TotalStaked string `json:"totalStaked"`

	// Total transactions
	TotalTx string `json:"totalTx"`

	// Total unique swappers & members
	TotalUsers string `json:"totalUsers"`

	// Total (in RUNE Value) of all assets swapped since start
	TotalVolume string `json:"totalVolume"`

	// Total withdrawing transactions
	TotalWithdrawTx string `json:"totalWithdrawTx"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float, the average slip by swap. Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64, volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64, volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64, the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64, toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {
	LiquidityFee string `json:"liquidityFee"`
	NetworkFees  []Coin `json:"networkFees"`
	TradeSlip    string `json:"tradeSlip"`
	TradeTarget  string `json:"tradeTarget"`
}

// Transaction defines model for Transaction.
type Transaction struct {
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`
	Memo    string `json:"memo"`
	TxID    string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {
	Asymmetry      string `json:"asymmetry"`
	LiquidityUnits string `json:"liquidityUnits"`
	NetworkFees    []Coin `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodeKeyResponse defines model for NodeKeyResponse.
type NodeKeyResponse NodeKeys

// PoolLegacyResponse defines model for PoolLegacyResponse.
type PoolLegacyResponse PoolLegacyDetail

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// GetTxDetailsParams defines parameters for GetTxDetails.
type GetTxDetailsParams struct {

	// Address of sender or recipient of any in/out tx in event
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx in event
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of event
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *string `json:"status,omitempty"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"bJFP+n2cAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
