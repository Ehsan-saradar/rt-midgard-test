// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/pkg/errors"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {

	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still
	// pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still
// pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity
	// deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// Balance defines model for Balance.
type Balance struct {
	Coins Coins `json:"coins"`

	// full timestamp (nanoseconds since 1970) of the block at which the returned balance snapshot was valid
	Date string `json:"date"`

	// height of the block at which the returned balance snapshot was valid
	Height string `json:"height"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// ChurnItem defines model for ChurnItem.
type ChurnItem struct {

	// full timestamp (nanoseconds since 1970) of the block at which the churn occurred
	Date string `json:"date"`

	// height of the block at which the churn occurred
	Height string `json:"height"`
}

// Churns defines model for Churns.
type Churns []ChurnItem

// Represents a digital currency amount
type Coin struct {

	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, The liquidity unit value index. Sqrt(assetDepth * runeDepth)/liquidity units
	Luvi string `json:"luvi"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval at time endTime
	EndAssetDepth string `json:"endAssetDepth"`

	// Int64, Liquidity Units in the pool at the end of the interval at time endTime
	EndLPUnits string `json:"endLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval at time endTime
	EndRuneDepth string `json:"endRuneDepth"`

	// Int64, Synth Units in the pool at the end of the interval at time endTime
	EndSynthUnits string `json:"endSynthUnits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, The liquidity unit value index increase between startTime and endTime
	LuviIncrease string `json:"luviIncrease"`

	// Float, The impermanent loss between the first and last depth item
	PriceShiftLoss string `json:"priceShiftLoss"`

	// Int64(e8), the amount of Asset in the pool at the start of the interval at time
	// startTime
	StartAssetDepth string `json:"startAssetDepth"`

	// Int64, Liquidity Units in the pool at the start of the interval at time startTime
	StartLPUnits string `json:"startLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the start of the interval at time startTime
	StartRuneDepth string `json:"startRuneDepth"`

	// Int64, Synth Units in the pool at the start of the interval at time startTime
	StartSynthUnits string `json:"startSynthUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of
	// liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {

	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync         bool     `json:"inSync"`
	LastAggregated HeightTS `json:"lastAggregated"`
	LastCommitted  HeightTS `json:"lastCommitted"`
	LastFetched    HeightTS `json:"lastFetched"`
	LastThorNode   HeightTS `json:"lastThorNode"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// HeightTS defines model for HeightTS.
type HeightTS struct {

	// Block height
	Height int `json:"height"`

	// Block timestamp (seconds since epoch)
	Timestamp int `json:"timestamp"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string  `json:"address"`
	Chain   string  `json:"chain"`
	GasRate *string `json:"gas_rate,omitempty"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                    int64  `json:"AsgardSize"`
	BadValidatorRate              int64  `json:"BadValidatorRate"`
	BadValidatorRedline           int    `json:"BadValidatorRedline"`
	BlocksPerYear                 int64  `json:"BlocksPerYear"`
	ChurnInterval                 int64  `json:"ChurnInterval"`
	ChurnRetryInterval            int64  `json:"ChurnRetryInterval"`
	DesiredValidatorSet           int64  `json:"DesiredValidatorSet"`
	DoubleSignMaxAge              int64  `json:"DoubleSignMaxAge"`
	EmissionCurve                 int64  `json:"EmissionCurve"`
	FailKeygenSlashPoints         int64  `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints        int64  `json:"FailKeysignSlashPoints"`
	FullImpLossProtectionBlocks   int64  `json:"FullImpLossProtectionBlocks"`
	FundMigrationInterval         int64  `json:"FundMigrationInterval"`
	IncentiveCurve                int64  `json:"IncentiveCurve"`
	JailTimeKeygen                int64  `json:"JailTimeKeygen"`
	JailTimeKeysign               int64  `json:"JailTimeKeysign"`
	LackOfObservationPenalty      int64  `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks         int64  `json:"LiquidityLockUpBlocks"`
	MaxAvailablePools             int64  `json:"MaxAvailablePools"`
	MaxSwapsPerBlock              int64  `json:"MaxSwapsPerBlock"`
	MinRunePoolDepth              int64  `json:"MinRunePoolDepth"`
	MinSlashPointsForBadValidator int64  `json:"MinSlashPointsForBadValidator"`
	MinSwapsPerBlock              int64  `json:"MinSwapsPerBlock"`
	MinimumBondInRune             int64  `json:"MinimumBondInRune"`
	MinimumNodesForBFT            int64  `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil      int64  `json:"MinimumNodesForYggdrasil"`
	NativeTransactionFee          int64  `json:"NativeTransactionFee"`
	NewPoolCycle                  *int64 `json:"NewPoolCycle,omitempty"`
	ObservationDelayFlexibility   int64  `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints            int64  `json:"ObserveSlashPoints"`
	OldValidatorRate              int64  `json:"OldValidatorRate"`
	OutboundTransactionFee        int64  `json:"OutboundTransactionFee"`
	PoolCycle                     int64  `json:"PoolCycle"`
	SigningTransactionPeriod      int64  `json:"SigningTransactionPeriod"`
	VirtualMultSynths             int64  `json:"VirtualMultSynths"`
	YggFundLimit                  int64  `json:"YggFundLimit"`
}

// KnownPools defines model for KnownPools.
type KnownPools struct {
	AdditionalProperties map[string]string `json:"-"`
}

// Lastblock defines model for Lastblock.
type Lastblock []LastblockItem

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn int64  `json:"last_observed_in"`
	LastSignedOut  int64  `json:"last_signed_out"`
	Thorchain      int64  `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {

	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and
	// nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each
// outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// ObservedChain defines model for ObservedChain.
type ObservedChain struct {
	Chain  string `json:"chain"`
	Height int    `json:"height"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {

	// Float, Also called APR. Annual return estimated linearly (not compounded) from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// Due to Impermanent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Int64, The native decimal number of the pool asset.
	NativeDecimal string `json:"nativeDecimal"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	// It includes synth mint or burn.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Float, Also called APR. Annual return estimated linearly (not compounded) from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// Due to Impermanent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// PreflightStatus defines model for PreflightStatus.
type PreflightStatus struct {
	Code   int    `json:"code"`
	Reason string `json:"reason"`
	Status string `json:"status"`
}

// ProxiedNode defines model for ProxiedNode.
type ProxiedNode struct {
	ActiveBlockHeight int    `json:"active_block_height"`
	Bond              string `json:"bond"`
	BondAddress       string `json:"bond_address"`
	CurrentAward      string `json:"current_award"`
	ForcedToLeave     bool   `json:"forced_to_leave"`
	IpAddress         string `json:"ip_address"`
	Jail              struct {
		NodeAddress *string `json:"node_address,omitempty"`
	} `json:"jail"`
	LeaveHeight     int             `json:"leave_height"`
	NodeAddress     string          `json:"node_address"`
	ObserveChains   []ObservedChain `json:"observe_chains"`
	PreflightStatus PreflightStatus `json:"preflight_status"`
	PubKeySet       struct {
		Ed25519   string `json:"ed25519"`
		Secp256k1 string `json:"secp256k1"`
	} `json:"pub_key_set"`
	RequestedToLeave    bool     `json:"requested_to_leave"`
	SignerMembership    []string `json:"signer_membership"`
	SlashPoints         int      `json:"slash_points"`
	Status              string   `json:"status"`
	StatusSince         int      `json:"status_since"`
	ValidatorConsPubKey string   `json:"validator_cons_pub_key"`
	Version             string   `json:"version"`
}

// ProxiedNodes defines model for ProxiedNodes.
type ProxiedNodes []ProxiedNode

// Queue defines model for Queue.
type Queue struct {
	Internal int `json:"internal"`
	Outbound int `json:"outbound"`
	Swap     int `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// Transaction memo of the refund action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Deprecated, it's always 0.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Deprecated, it's always 0.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps (including synths) since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps (including synths) in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps (including synths) in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps (including synths) denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Synth to Rune since beginning.
	SynthBurnCount string `json:"synthBurnCount"`

	// Int64, number of swaps from Rune to Synth since beginning.
	SynthMintCount string `json:"synthMintCount"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// Transaction memo of the swap action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {

	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {

	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of
	// the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity
	// pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at
	// the end of the interval.
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the
	// native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means
	// totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership
	// withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// Transaction memo of the withdraw action
	Memo string `json:"memo"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// BalanceResponse defines model for BalanceResponse.
type BalanceResponse Balance

// ChurnsResponse defines model for ChurnsResponse.
type ChurnsResponse Churns

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// KnownPoolsResponse defines model for KnownPoolsResponse.
type KnownPoolsResponse KnownPools

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ProxiedNodesResponse defines model for ProxiedNodesResponse.
type ProxiedNodesResponse ProxiedNodes

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// Affiliate address of the action (swap)
	Affiliate *string `json:"affiliate,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`
}

// GetBalanceParams defines parameters for GetBalance.
type GetBalanceParams struct {

	// Unix timestamp as seconds since 1970 (if provided, height must not be provided)
	Timestamp *int64 `json:"timestamp,omitempty"`

	// Block height (if provided, timestamp must not be provided)
	Height *int64 `json:"height,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {

	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolParams defines parameters for GetPool.
type GetPoolParams struct {

	// Specifies the base interval from which APY is extrapolated.
	// Default is 30d.
	Period *GetPoolParamsPeriod `json:"period,omitempty"`
}

// GetPoolParamsPeriod defines parameters for GetPool.
type GetPoolParamsPeriod string

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`

	// Specifies the base interval from which annualPercentageRate and poolAPY is extrapolated.
	// Default is 30d.
	Period *GetPoolsParamsPeriod `json:"period,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// GetPoolsParamsPeriod defines parameters for GetPools.
type GetPoolsParamsPeriod string

// Getter for additional properties for KnownPools. Returns the specified
// element and whether it was found
func (a KnownPools) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for KnownPools
func (a *KnownPools) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for KnownPools to handle AdditionalProperties
func (a *KnownPools) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for KnownPools to handle AdditionalProperties
func (a KnownPools) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
