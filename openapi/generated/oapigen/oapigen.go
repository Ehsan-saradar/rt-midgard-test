// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Action defines model for Action.
type Action struct {

	// Int64, Unix timestamp for when the action was registered
	Date string `json:"date"`

	// Int64, block height at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status string `json:"status"`

	// Type of action
	Type string `json:"type"`
}

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64, Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64, Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64, Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64, Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64, Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64, Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64, Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64, Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64, Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64, Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Coin defines model for Coin.
type Coin struct {

	// Int64 (10^8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64, Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64, Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64, System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64, Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistoryItemPool defines model for EarningsHistoryItemPool.
type EarningsHistoryItemPool struct {

	// Int64, Share of earnings sent to the pool during the time interval
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses struct {
	Current []InboundAddressesItem `json:"current"`
}

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string `json:"address"`
	Chain   string `json:"chain"`

	// indicate whether this chain has halted
	Halted bool   `json:"halted"`
	PubKey string `json:"pub_key"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                  int64 `json:"AsgardSize"`
	BadValidatorRate            int64 `json:"BadValidatorRate"`
	BlocksPerYear               int64 `json:"BlocksPerYear"`
	ChurnInterval               int64 `json:"ChurnInterval"`
	ChurnRetryInterval          int64 `json:"ChurnRetryInterval"`
	CliTxCost                   int64 `json:"CliTxCost"`
	DesiredValidatorSet         int64 `json:"DesiredValidatorSet"`
	DoubleSignMaxAge            int64 `json:"DoubleSignMaxAge"`
	EmissionCurve               int64 `json:"EmissionCurve"`
	FailKeygenSlashPoints       int64 `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints      int64 `json:"FailKeysignSlashPoints"`
	FundMigrationInterval       int64 `json:"FundMigrationInterval"`
	JailTimeKeygen              int64 `json:"JailTimeKeygen"`
	JailTimeKeysign             int64 `json:"JailTimeKeysign"`
	LackOfObservationPenalty    int64 `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks       int64 `json:"LiquidityLockUpBlocks"`
	MinimumBondInRune           int64 `json:"MinimumBondInRune"`
	MinimumNodesForBFT          int64 `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil    int64 `json:"MinimumNodesForYggdrasil"`
	NativeChainGasFee           int64 `json:"NativeChainGasFee"`
	NewPoolCycle                int64 `json:"NewPoolCycle"`
	ObservationDelayFlexibility int64 `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints          int64 `json:"ObserveSlashPoints"`
	OldValidatorRate            int64 `json:"OldValidatorRate"`
	OutboundTransactionFee      int64 `json:"OutboundTransactionFee"`
	SigningTransactionPeriod    int64 `json:"SigningTransactionPeriod"`
	YggFundLimit                int64 `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock struct {
	Current []LastblockItem `json:"current"`
}

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn string `json:"last_observed_in"`
	LastSignedOut  string `json:"last_signed_out"`
	Thorchain      string `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64 (10^8), total deposits in RUNE during the time interval.
	// Accounts for both asset (using the price at deposit time) and RUNE deposited into pools
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64 (10^8), total withdrawals in RUNE during the time interval. Accounts for
	// both asset (using the price at withdrawal time) and RUNE withdrawn from pools
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64, total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64, total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64, total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`
	PoolShareFactor         string `json:"poolShareFactor"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64, Total Rune pooled in all pools
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64, Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NetworkFees defines model for NetworkFees.
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolLegacyDetail defines model for PoolLegacyDetail.
type PoolLegacyDetail struct {
	Asset string `json:"asset"`

	// same as assetDepth from pool/stats
	AssetDepth string `json:"assetDepth"`

	// same as toAssetCount from pool/stats
	BuyAssetCount string `json:"buyAssetCount"`

	// same as toAssetVolume / toAssetCount from pool/stats
	BuyTxAverage string `json:"buyTxAverage"`

	// same as toAssetVolume from pool/stats
	BuyVolume string `json:"buyVolume"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// same as 2*runeDepth from pool/stats
	PoolDepth string `json:"poolDepth"`

	// same as totalFees / swapCount from pool/stats
	PoolFeeAverage string `json:"poolFeeAverage"`

	// same as totalFees from pool/stats
	PoolFeesTotal string `json:"poolFeesTotal"`

	// same as averageSlip from pool/stats
	PoolSlipAverage string `json:"poolSlipAverage"`

	// same as addLiquidityVolume from pool/stats
	PoolStakedTotal string `json:"poolStakedTotal"`

	// same as swapVolume / swapCount from pool/stats
	PoolTxAverage string `json:"poolTxAverage"`

	// same as units from pool/stats
	PoolUnits string `json:"poolUnits"`

	// Int64, same as buyVolume + sellVolume
	PoolVolume string `json:"poolVolume"`

	// same as assetPrice from pool/stats
	Price string `json:"price"`

	// same as runeDepth from pool/stats
	RuneDepth string `json:"runeDepth"`

	// same as toRuneCount from pool/stats
	SellAssetCount string `json:"sellAssetCount"`

	// same as toRuneVolume / toRuneCount from pool/stats
	SellTxAverage string `json:"sellTxAverage"`

	// same as toRuneVolume from pool/stats
	SellVolume string `json:"sellVolume"`

	// same as addLiquidityCount from pool/stats
	StakeTxCount string `json:"stakeTxCount"`

	// same as addLiquidityCount + withdrawCount from pool/stats
	StakingTxCount string `json:"stakingTxCount"`

	// same as status from pool/stats
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune
	Volume24h string `json:"volume24h"`

	// same as withdrawCount from pool/stats
	WithdrawTxCount string `json:"withdrawTxCount"`
}

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64, same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`
	Asset              string `json:"asset"`

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64, same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64, same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64, same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, number of unique adresses that initiated swaps transactions in the period.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Liquidity Units in the pool
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune
	Volume24h string `json:"volume24h"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64, same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// Queue defines model for Queue.
type Queue struct {
	Outbound string `json:"outbound"`
	Swap     string `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Daily active users (unique addresses interacting)
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Daily transactions
	DailyTx string `json:"dailyTx"`

	// Monthly active users
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Monthly transactions
	MonthlyTx string `json:"monthlyTx"`

	// Total buying transactions
	TotalAssetBuys string `json:"totalAssetBuys"`

	// Total selling transactions
	TotalAssetSells string `json:"totalAssetSells"`

	// Total RUNE balances
	TotalDepth string `json:"totalDepth"`

	// Total staking transactions
	TotalStakeTx string `json:"totalStakeTx"`

	// Total staked (in RUNE Value)
	TotalStaked string `json:"totalStaked"`

	// Total transactions
	TotalTx string `json:"totalTx"`

	// Total unique swappers & members
	TotalUsers string `json:"totalUsers"`

	// Total (in RUNE Value) of all assets swapped since start
	TotalVolume string `json:"totalVolume"`

	// Total withdrawing transactions
	TotalWithdrawTx string `json:"totalWithdrawTx"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float, the average slip by swap. Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64, volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64, volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64, the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64, toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Int64 (10^8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), trade slip percentage
	TradeSlip string `json:"tradeSlip"`

	// Int64 (10^8), minimum output amount specified for the swap
	TradeTarget string `json:"tradeTarget"`
}

// Transaction defines model for Transaction.
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction memo
	Memo string `json:"memo"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolLegacyResponse defines model for PoolLegacyResponse.
type PoolLegacyResponse PoolLegacyDetail

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Address of sender or recipient of any in/out transaction related to the action
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action (swap, addLiquidity, withdraw, donate, refund)
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is all.
	Period *string `json:"period,omitempty"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *string `json:"status,omitempty"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
