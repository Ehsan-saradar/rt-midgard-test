// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Action defines model for Action.
type Action struct {

	// Int64, Unix timestamp for when the action was registered
	Date string `json:"date"`

	// Int64, block height at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status string `json:"status"`

	// Type of action
	Type string `json:"type"`
}

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64, Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64, Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64, Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64, Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64, Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64, Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64, Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64, Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64, Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64, Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Coin defines model for Coin.
type Coin struct {

	// Int64 (10^8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64, Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64, Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64, System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64, Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistoryItemPool defines model for EarningsHistoryItemPool.
type EarningsHistoryItemPool struct {

	// Int64, Share of earnings sent to the pool during the time interval
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses struct {
	Current []InboundAddressesItem `json:"current"`
}

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string `json:"address"`
	Chain   string `json:"chain"`

	// indicate whether this chain has halted
	Halted bool   `json:"halted"`
	PubKey string `json:"pub_key"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                  int64 `json:"AsgardSize"`
	BadValidatorRate            int64 `json:"BadValidatorRate"`
	BlocksPerYear               int64 `json:"BlocksPerYear"`
	ChurnInterval               int64 `json:"ChurnInterval"`
	ChurnRetryInterval          int64 `json:"ChurnRetryInterval"`
	CliTxCost                   int64 `json:"CliTxCost"`
	DesiredValidatorSet         int64 `json:"DesiredValidatorSet"`
	DoubleSignMaxAge            int64 `json:"DoubleSignMaxAge"`
	EmissionCurve               int64 `json:"EmissionCurve"`
	FailKeygenSlashPoints       int64 `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints      int64 `json:"FailKeysignSlashPoints"`
	FundMigrationInterval       int64 `json:"FundMigrationInterval"`
	JailTimeKeygen              int64 `json:"JailTimeKeygen"`
	JailTimeKeysign             int64 `json:"JailTimeKeysign"`
	LackOfObservationPenalty    int64 `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks       int64 `json:"LiquidityLockUpBlocks"`
	MinimumBondInRune           int64 `json:"MinimumBondInRune"`
	MinimumNodesForBFT          int64 `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil    int64 `json:"MinimumNodesForYggdrasil"`
	NativeChainGasFee           int64 `json:"NativeChainGasFee"`
	NewPoolCycle                int64 `json:"NewPoolCycle"`
	ObservationDelayFlexibility int64 `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints          int64 `json:"ObserveSlashPoints"`
	OldValidatorRate            int64 `json:"OldValidatorRate"`
	OutboundTransactionFee      int64 `json:"OutboundTransactionFee"`
	SigningTransactionPeriod    int64 `json:"SigningTransactionPeriod"`
	YggFundLimit                int64 `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock struct {
	Current []LastblockItem `json:"current"`
}

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn string `json:"last_observed_in"`
	LastSignedOut  string `json:"last_signed_out"`
	Thorchain      string `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64 (10^8), total deposits in RUNE during the time interval.
	// Accounts for both asset (using the price at deposit time) and RUNE deposited into pools
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64 (10^8), total withdrawals in RUNE during the time interval. Accounts for
	// both asset (using the price at withdrawal time) and RUNE withdrawn from pools
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// Liquidity provider data for all the pools of a given member
	Pools []MemberPoolDetails `json:"pools"`
}

// MemberPoolDetails defines model for MemberPoolDetails.
type MemberPoolDetails struct {

	// Int64, total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// Int64, total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Int64, total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`
	PoolShareFactor         string `json:"poolShareFactor"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64, Total Rune pooled in all pools
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64, Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NetworkFees defines model for NetworkFees.
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolLegacyDetail defines model for PoolLegacyDetail.
type PoolLegacyDetail struct {
	Asset string `json:"asset"`

	// same as assetDepth from pool/stats
	AssetDepth string `json:"assetDepth"`

	// same as toAssetCount from pool/stats
	BuyAssetCount string `json:"buyAssetCount"`

	// same as toAssetVolume / toAssetCount from pool/stats
	BuyTxAverage string `json:"buyTxAverage"`

	// same as toAssetVolume from pool/stats
	BuyVolume string `json:"buyVolume"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// same as 2*runeDepth from pool/stats
	PoolDepth string `json:"poolDepth"`

	// same as totalFees / swapCount from pool/stats
	PoolFeeAverage string `json:"poolFeeAverage"`

	// same as totalFees from pool/stats
	PoolFeesTotal string `json:"poolFeesTotal"`

	// same as averageSlip from pool/stats
	PoolSlipAverage string `json:"poolSlipAverage"`

	// same as addLiquidityVolume from pool/stats
	PoolStakedTotal string `json:"poolStakedTotal"`

	// same as swapVolume / swapCount from pool/stats
	PoolTxAverage string `json:"poolTxAverage"`

	// same as units from pool/stats
	PoolUnits string `json:"poolUnits"`

	// Int64, same as buyVolume + sellVolume
	PoolVolume string `json:"poolVolume"`

	// same as assetPrice from pool/stats
	Price string `json:"price"`

	// same as runeDepth from pool/stats
	RuneDepth string `json:"runeDepth"`

	// same as toRuneCount from pool/stats
	SellAssetCount string `json:"sellAssetCount"`

	// same as toRuneVolume / toRuneCount from pool/stats
	SellTxAverage string `json:"sellTxAverage"`

	// same as toRuneVolume from pool/stats
	SellVolume string `json:"sellVolume"`

	// same as addLiquidityCount from pool/stats
	StakeTxCount string `json:"stakeTxCount"`

	// same as addLiquidityCount + withdrawCount from pool/stats
	StakingTxCount string `json:"stakingTxCount"`

	// same as status from pool/stats
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune
	Volume24h string `json:"volume24h"`

	// same as withdrawCount from pool/stats
	WithdrawTxCount string `json:"withdrawTxCount"`
}

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64, same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`
	Asset              string `json:"asset"`

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64, same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64, same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64, same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, Liquidity Units in the pool
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune
	Volume24h string `json:"volume24h"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64, same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// Queue defines model for Queue.
type Queue struct {
	Outbound string `json:"outbound"`
	Swap     string `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Daily active users (unique addresses interacting)
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Daily transactions
	DailyTx string `json:"dailyTx"`

	// Monthly active users
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Monthly transactions
	MonthlyTx string `json:"monthlyTx"`

	// Total buying transactions
	TotalAssetBuys string `json:"totalAssetBuys"`

	// Total selling transactions
	TotalAssetSells string `json:"totalAssetSells"`

	// Total RUNE balances
	TotalDepth string `json:"totalDepth"`

	// Total staking transactions
	TotalStakeTx string `json:"totalStakeTx"`

	// Total staked (in RUNE Value)
	TotalStaked string `json:"totalStaked"`

	// Total transactions
	TotalTx string `json:"totalTx"`

	// Total unique swappers & members
	TotalUsers string `json:"totalUsers"`

	// Total (in RUNE Value) of all assets swapped since start
	TotalVolume string `json:"totalVolume"`

	// Total withdrawing transactions
	TotalWithdrawTx string `json:"totalWithdrawTx"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float, the average slip by swap. Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64, volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64, volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64, the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64, toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Int64 (10^8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), trade slip percentage
	TradeSlip string `json:"tradeSlip"`

	// Int64 (10^8), minimum output amount specified for the swap
	TradeTarget string `json:"tradeTarget"`
}

// Transaction defines model for Transaction.
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction memo
	Memo string `json:"memo"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolLegacyResponse defines model for PoolLegacyResponse.
type PoolLegacyResponse PoolLegacyDetail

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Address of sender or recipient of any in/out transaction related to the action
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action (swap, addLiquidity, withdraw, donate, refund)
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is all.
	Period *string `json:"period,omitempty"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *string `json:"status,omitempty"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
