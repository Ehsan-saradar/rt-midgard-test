// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Action defines model for Action.
type Action struct {

	// Int64, Unix timestamp for when the action was registered
	Date string `json:"date"`

	// Int64, block height at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status string `json:"status"`

	// Type of action
	Type string `json:"type"`
}

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64, Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64, Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64, Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64, Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64, Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64, Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64, Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64, Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64, Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64, Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Coin defines model for Coin.
type Coin struct {

	// Int64 (10^8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64, Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64, Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64, System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64, Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistoryItemPool defines model for EarningsHistoryItemPool.
type EarningsHistoryItemPool struct {

	// Int64, Share of earnings sent to the pool during the time interval
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses struct {
	Current []InboundAddressesItem `json:"current"`
}

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string `json:"address"`
	Chain   string `json:"chain"`

	// indicate whether this chain has halted
	Halted bool   `json:"halted"`
	PubKey string `json:"pub_key"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                  int64 `json:"AsgardSize"`
	BadValidatorRate            int64 `json:"BadValidatorRate"`
	BlocksPerYear               int64 `json:"BlocksPerYear"`
	ChurnInterval               int64 `json:"ChurnInterval"`
	ChurnRetryInterval          int64 `json:"ChurnRetryInterval"`
	CliTxCost                   int64 `json:"CliTxCost"`
	DesiredValidatorSet         int64 `json:"DesiredValidatorSet"`
	DoubleSignMaxAge            int64 `json:"DoubleSignMaxAge"`
	EmissionCurve               int64 `json:"EmissionCurve"`
	FailKeygenSlashPoints       int64 `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints      int64 `json:"FailKeysignSlashPoints"`
	FundMigrationInterval       int64 `json:"FundMigrationInterval"`
	JailTimeKeygen              int64 `json:"JailTimeKeygen"`
	JailTimeKeysign             int64 `json:"JailTimeKeysign"`
	LackOfObservationPenalty    int64 `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks       int64 `json:"LiquidityLockUpBlocks"`
	MinimumBondInRune           int64 `json:"MinimumBondInRune"`
	MinimumNodesForBFT          int64 `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil    int64 `json:"MinimumNodesForYggdrasil"`
	NativeChainGasFee           int64 `json:"NativeChainGasFee"`
	NewPoolCycle                int64 `json:"NewPoolCycle"`
	ObservationDelayFlexibility int64 `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints          int64 `json:"ObserveSlashPoints"`
	OldValidatorRate            int64 `json:"OldValidatorRate"`
	OutboundTransactionFee      int64 `json:"OutboundTransactionFee"`
	SigningTransactionPeriod    int64 `json:"SigningTransactionPeriod"`
	YggFundLimit                int64 `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock struct {
	Current []LastblockItem `json:"current"`
}

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn string `json:"last_observed_in"`
	LastSignedOut  string `json:"last_signed_out"`
	Thorchain      string `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64 (10^8), total deposits in RUNE during the time interval.
	// Accounts for both asset (using the price at deposit time) and RUNE deposited into pools
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64 (10^8), total withdrawals in RUNE during the time interval. Accounts for
	// both asset (using the price at withdrawal time) and RUNE withdrawn from pools
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64, total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64, total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64, total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`
	PoolShareFactor         string `json:"poolShareFactor"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64, Total Rune pooled in all pools
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64, Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NetworkFees defines model for NetworkFees.
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolLegacyDetail defines model for PoolLegacyDetail.
type PoolLegacyDetail struct {
	Asset string `json:"asset"`

	// same as assetDepth from pool/stats
	AssetDepth string `json:"assetDepth"`

	// same as toAssetCount from pool/stats
	BuyAssetCount string `json:"buyAssetCount"`

	// same as toAssetVolume / toAssetCount from pool/stats
	BuyTxAverage string `json:"buyTxAverage"`

	// same as toAssetVolume from pool/stats
	BuyVolume string `json:"buyVolume"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// same as 2*runeDepth from pool/stats
	PoolDepth string `json:"poolDepth"`

	// same as totalFees / swapCount from pool/stats
	PoolFeeAverage string `json:"poolFeeAverage"`

	// same as totalFees from pool/stats
	PoolFeesTotal string `json:"poolFeesTotal"`

	// same as averageSlip from pool/stats
	PoolSlipAverage string `json:"poolSlipAverage"`

	// same as addLiquidityVolume from pool/stats
	PoolStakedTotal string `json:"poolStakedTotal"`

	// same as swapVolume / swapCount from pool/stats
	PoolTxAverage string `json:"poolTxAverage"`

	// same as units from pool/stats
	PoolUnits string `json:"poolUnits"`

	// Int64, same as buyVolume + sellVolume
	PoolVolume string `json:"poolVolume"`

	// same as assetPrice from pool/stats
	Price string `json:"price"`

	// same as runeDepth from pool/stats
	RuneDepth string `json:"runeDepth"`

	// same as toRuneCount from pool/stats
	SellAssetCount string `json:"sellAssetCount"`

	// same as toRuneVolume / toRuneCount from pool/stats
	SellTxAverage string `json:"sellTxAverage"`

	// same as toRuneVolume from pool/stats
	SellVolume string `json:"sellVolume"`

	// same as addLiquidityCount from pool/stats
	StakeTxCount string `json:"stakeTxCount"`

	// same as addLiquidityCount + withdrawCount from pool/stats
	StakingTxCount string `json:"stakingTxCount"`

	// same as status from pool/stats
	Status string `json:"status"`

	// Int64, same as history/swaps:uniqueSwapperCount
	SwappersCount string `json:"swappersCount"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune
	Volume24h string `json:"volume24h"`

	// same as withdrawCount from pool/stats
	WithdrawTxCount string `json:"withdrawTxCount"`
}

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64, same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`
	Asset              string `json:"asset"`

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64, same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64, same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64, same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, number of unique adresses that initiated swaps transactions in the period.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Liquidity Units in the pool
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune
	Volume24h string `json:"volume24h"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64, same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// Queue defines model for Queue.
type Queue struct {
	Outbound string `json:"outbound"`
	Swap     string `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Daily active users (unique addresses interacting)
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Daily transactions
	DailyTx string `json:"dailyTx"`

	// Monthly active users
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Monthly transactions
	MonthlyTx string `json:"monthlyTx"`

	// Total buying transactions
	TotalAssetBuys string `json:"totalAssetBuys"`

	// Total selling transactions
	TotalAssetSells string `json:"totalAssetSells"`

	// Total RUNE balances
	TotalDepth string `json:"totalDepth"`

	// Total staking transactions
	TotalStakeTx string `json:"totalStakeTx"`

	// Total staked (in RUNE Value)
	TotalStaked string `json:"totalStaked"`

	// Total transactions
	TotalTx string `json:"totalTx"`

	// Total unique swappers & members
	TotalUsers string `json:"totalUsers"`

	// Total (in RUNE Value) of all assets swapped since start
	TotalVolume string `json:"totalVolume"`

	// Total withdrawing transactions
	TotalWithdrawTx string `json:"totalWithdrawTx"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float, the average slip by swap. Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64, volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64, volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64, the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64, toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Int64 (10^8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), trade slip percentage
	TradeSlip string `json:"tradeSlip"`

	// Int64 (10^8), minimum output amount specified for the swap
	TradeTarget string `json:"tradeTarget"`
}

// Transaction defines model for Transaction.
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction memo
	Memo string `json:"memo"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolLegacyResponse defines model for PoolLegacyResponse.
type PoolLegacyResponse PoolLegacyDetail

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Address of sender or recipient of any in/out transaction related to the action
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action (swap, addLiquidity, withdraw, donate, refund)
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is all.
	Period *string `json:"period,omitempty"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *string `json:"status,omitempty"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
