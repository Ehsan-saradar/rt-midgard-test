// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Action defines model for Action.
type Action struct {

	// Int64, Unix timestamp for when the action was registered
	Date string `json:"date"`

	// Int64, block height at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status string `json:"status"`

	// Type of action
	Type string `json:"type"`
}

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64, Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64, Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64, Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64, Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64, Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64, Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64, Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64, Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64, Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64, Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Coin defines model for Coin.
type Coin struct {

	// Int64 (10^8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64, Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64, Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64, System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64, Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistoryItemPool defines model for EarningsHistoryItemPool.
type EarningsHistoryItemPool struct {

	// Int64, Share of earnings sent to the pool during the time interval
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses struct {
	Current []InboundAddressesItem `json:"current"`
}

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string `json:"address"`
	Chain   string `json:"chain"`

	// indicate whether this chain has halted
	Halted bool   `json:"halted"`
	PubKey string `json:"pub_key"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                  int64 `json:"AsgardSize"`
	BadValidatorRate            int64 `json:"BadValidatorRate"`
	BlocksPerYear               int64 `json:"BlocksPerYear"`
	ChurnInterval               int64 `json:"ChurnInterval"`
	ChurnRetryInterval          int64 `json:"ChurnRetryInterval"`
	CliTxCost                   int64 `json:"CliTxCost"`
	DesiredValidatorSet         int64 `json:"DesiredValidatorSet"`
	DoubleSignMaxAge            int64 `json:"DoubleSignMaxAge"`
	EmissionCurve               int64 `json:"EmissionCurve"`
	FailKeygenSlashPoints       int64 `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints      int64 `json:"FailKeysignSlashPoints"`
	FundMigrationInterval       int64 `json:"FundMigrationInterval"`
	JailTimeKeygen              int64 `json:"JailTimeKeygen"`
	JailTimeKeysign             int64 `json:"JailTimeKeysign"`
	LackOfObservationPenalty    int64 `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks       int64 `json:"LiquidityLockUpBlocks"`
	MinimumBondInRune           int64 `json:"MinimumBondInRune"`
	MinimumNodesForBFT          int64 `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil    int64 `json:"MinimumNodesForYggdrasil"`
	NativeChainGasFee           int64 `json:"NativeChainGasFee"`
	NewPoolCycle                int64 `json:"NewPoolCycle"`
	ObservationDelayFlexibility int64 `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints          int64 `json:"ObserveSlashPoints"`
	OldValidatorRate            int64 `json:"OldValidatorRate"`
	OutboundTransactionFee      int64 `json:"OutboundTransactionFee"`
	SigningTransactionPeriod    int64 `json:"SigningTransactionPeriod"`
	YggFundLimit                int64 `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock struct {
	Current []LastblockItem `json:"current"`
}

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn string `json:"last_observed_in"`
	LastSignedOut  string `json:"last_signed_out"`
	Thorchain      string `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64, total deposits (liquidity additions) during the time interval
	Deposits string `json:"deposits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, total withdrawals during the time interval
	Withdrawals string `json:"withdrawals"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// Liquidity provider data for all the pools of a given member
	Pools []MemberPoolDetails `json:"pools"`
}

// MemberPoolDetails defines model for MemberPoolDetails.
type MemberPoolDetails struct {

	// Int64, total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// Int64, total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Int64, total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`
	PoolShareFactor         string `json:"poolShareFactor"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64, Total Rune pooled in all pools
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64, Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NetworkFees defines model for NetworkFees.
type NetworkFees []Coin

// NodeKey defines model for NodeKey.
type NodeKey struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// NodeKeys defines model for NodeKeys.
type NodeKeys []NodeKey

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolLegacyDetail defines model for PoolLegacyDetail.
type PoolLegacyDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Int64, same as history/swaps:toAssetCount
	BuyAssetCount string `json:"buyAssetCount"`

	// Float, same as history/swaps:toRuneVolume/toRuneCount
	BuyTxAverage string `json:"buyTxAverage"`

	// Int64, same as history/swaps:toAssetVolume
	BuyVolume string `json:"buyVolume"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, same as assetDepth + runeDepth
	PoolDepth string `json:"poolDepth"`

	// Float, same as history/swaps:totalFees/totalCount
	PoolFeeAverage string `json:"poolFeeAverage"`

	// Int64, same as history/swaps:totalFees
	PoolFeesTotal string `json:"poolFeesTotal"`

	// Float, same as history/swaps:averageSlip
	PoolSlipAverage string `json:"poolSlipAverage"`

	// Float, same as history/swaps:totalVolume/totalCount
	PoolTxAverage string `json:"poolTxAverage"`

	// Int64, same as buyVolume + sellVolume
	PoolVolume string `json:"poolVolume"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// Int64, same as history/swaps:toRuneCount
	SellAssetCount string `json:"sellAssetCount"`

	// Float, same as history/swaps:toAssetVolume/toAssetCount
	SellTxAverage string `json:"sellTxAverage"`

	// Int64, same as history/swaps:toRuneVolume
	SellVolume string `json:"sellVolume"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64, Liquidity Units in the pool
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune
	Volume24h string `json:"volume24h"`
}

// Queue defines model for Queue.
type Queue struct {
	Outbound string `json:"outbound"`
	Swap     string `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Daily active users (unique addresses interacting)
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Daily transactions
	DailyTx string `json:"dailyTx"`

	// Monthly active users
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Monthly transactions
	MonthlyTx string `json:"monthlyTx"`

	// Total buying transactions
	TotalAssetBuys string `json:"totalAssetBuys"`

	// Total selling transactions
	TotalAssetSells string `json:"totalAssetSells"`

	// Total RUNE balances
	TotalDepth string `json:"totalDepth"`

	// Total staking transactions
	TotalStakeTx string `json:"totalStakeTx"`

	// Total staked (in RUNE Value)
	TotalStaked string `json:"totalStaked"`

	// Total transactions
	TotalTx string `json:"totalTx"`

	// Total unique swappers & members
	TotalUsers string `json:"totalUsers"`

	// Total (in RUNE Value) of all assets swapped since start
	TotalVolume string `json:"totalVolume"`

	// Total withdrawing transactions
	TotalWithdrawTx string `json:"totalWithdrawTx"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float, the average slip by swap. Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64, volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64, volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64, the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64, toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Int64 (10^8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), trade slip percentage
	TradeSlip string `json:"tradeSlip"`

	// Int64 (10^8), minimum output amount specified for the swap
	TradeTarget string `json:"tradeTarget"`
}

// Transaction defines model for Transaction.
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction memo
	Memo string `json:"memo"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodeKeyResponse defines model for NodeKeyResponse.
type NodeKeyResponse NodeKeys

// PoolLegacyResponse defines model for PoolLegacyResponse.
type PoolLegacyResponse PoolLegacyDetail

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Address of sender or recipient of any in/out transaction related to the action
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action (swap, addLiquidity, withdraw, donate, refund)
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *string `json:"status,omitempty"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
