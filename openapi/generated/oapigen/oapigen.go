// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {
	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {
	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {
	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Represents a digital currency amount
type Coin struct {
	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {
	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {
	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {
	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {
	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {
	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync         bool     `json:"inSync"`
	LastAggregated HeightTS `json:"lastAggregated"`
	LastCommitted  HeightTS `json:"lastCommitted"`
	LastFetched    HeightTS `json:"lastFetched"`
	LastThorNode   HeightTS `json:"lastThorNode"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// HeightTS defines model for HeightTS.
type HeightTS struct {
	// Block height
	Height int `json:"height"`

	// Block timestamp (seconds since epoch)
	Timestamp int `json:"timestamp"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string  `json:"address"`
	Chain   string  `json:"chain"`
	GasRate *string `json:"gas_rate,omitempty"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                    int64  `json:"AsgardSize"`
	BadValidatorRate              int64  `json:"BadValidatorRate"`
	BadValidatorRedline           int    `json:"BadValidatorRedline"`
	BlocksPerYear                 int64  `json:"BlocksPerYear"`
	ChurnInterval                 int64  `json:"ChurnInterval"`
	ChurnRetryInterval            int64  `json:"ChurnRetryInterval"`
	DesiredValidatorSet           int64  `json:"DesiredValidatorSet"`
	DoubleSignMaxAge              int64  `json:"DoubleSignMaxAge"`
	EmissionCurve                 int64  `json:"EmissionCurve"`
	FailKeygenSlashPoints         int64  `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints        int64  `json:"FailKeysignSlashPoints"`
	FullImpLossProtectionBlocks   int64  `json:"FullImpLossProtectionBlocks"`
	FundMigrationInterval         int64  `json:"FundMigrationInterval"`
	IncentiveCurve                int64  `json:"IncentiveCurve"`
	JailTimeKeygen                int64  `json:"JailTimeKeygen"`
	JailTimeKeysign               int64  `json:"JailTimeKeysign"`
	LackOfObservationPenalty      int64  `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks         int64  `json:"LiquidityLockUpBlocks"`
	MaxAvailablePools             int64  `json:"MaxAvailablePools"`
	MaxSwapsPerBlock              int64  `json:"MaxSwapsPerBlock"`
	MinRunePoolDepth              int64  `json:"MinRunePoolDepth"`
	MinSlashPointsForBadValidator int64  `json:"MinSlashPointsForBadValidator"`
	MinSwapsPerBlock              int64  `json:"MinSwapsPerBlock"`
	MinimumBondInRune             int64  `json:"MinimumBondInRune"`
	MinimumNodesForBFT            int64  `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil      int64  `json:"MinimumNodesForYggdrasil"`
	NativeTransactionFee          int64  `json:"NativeTransactionFee"`
	NewPoolCycle                  *int64 `json:"NewPoolCycle,omitempty"`
	ObservationDelayFlexibility   int64  `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints            int64  `json:"ObserveSlashPoints"`
	OldValidatorRate              int64  `json:"OldValidatorRate"`
	OutboundTransactionFee        int64  `json:"OutboundTransactionFee"`
	PoolCycle                     int64  `json:"PoolCycle"`
	SigningTransactionPeriod      int64  `json:"SigningTransactionPeriod"`
	VirtualMultSynths             int64  `json:"VirtualMultSynths"`
	YggFundLimit                  int64  `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock []LastblockItem

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn int64  `json:"last_observed_in"`
	LastSignedOut  int64  `json:"last_signed_out"`
	Thorchain      int64  `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {
	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {
	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {
	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {
	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// OHLCVHistory defines model for OHLCVHistory.
type OHLCVHistory struct {
	Intervals OHLCVHistoryIntervals `json:"intervals"`
	Meta      OHLCVHistoryMeta      `json:"meta"`
}

// OHLCVHistoryIntervals defines model for OHLCVHistoryIntervals.
type OHLCVHistoryIntervals []OHLCVHistoryItem

// OHLCVHistoryItem defines model for OHLCVHistoryItem.
type OHLCVHistoryItem struct {
	// Float, close price of asset in USD
	ClosePrice string `json:"closePrice"`

	// Int64, The end time of bucket in unix timestamp
	CloseTime string `json:"closeTime"`

	// Float, high price of asset in USD
	HighPrice string `json:"highPrice"`

	// Int64, The high time of bucket in unix timestamp
	HighTime string `json:"highTime"`

	// Int64, Liquidty is USD
	Liquidity string `json:"liquidity"`

	// Float, low price of asset in USD
	LowPrice string `json:"lowPrice"`

	// Int64, The low time of bucket in unix timestamp
	LowTime string `json:"lowTime"`

	// Float, open price of asset in USD
	OpenPrice string `json:"openPrice"`

	// Int64, The beginning time of bucket in unix timestamp
	OpenTime string `json:"openTime"`

	// Int64, Volume in USD
	Volume string `json:"volume"`
}

// OHLCVHistoryMeta defines model for OHLCVHistoryMeta.
type OHLCVHistoryMeta struct {
	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// ObservedChain defines model for ObservedChain.
type ObservedChain struct {
	Chain  string `json:"chain"`
	Height int    `json:"height"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {
	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`
	Asset                  string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Int64, number of unique adresses that initiated swaps transactions in the period.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// PreflightStatus defines model for PreflightStatus.
type PreflightStatus struct {
	Code   int    `json:"code"`
	Reason string `json:"reason"`
	Status string `json:"status"`
}

// ProxiedNode defines model for ProxiedNode.
type ProxiedNode struct {
	ActiveBlockHeight int    `json:"active_block_height"`
	Bond              string `json:"bond"`
	BondAddress       string `json:"bond_address"`
	CurrentAward      string `json:"current_award"`
	ForcedToLeave     bool   `json:"forced_to_leave"`
	IpAddress         string `json:"ip_address"`
	Jail              struct {
		NodeAddress *string `json:"node_address,omitempty"`
	} `json:"jail"`
	LeaveHeight     int             `json:"leave_height"`
	NodeAddress     string          `json:"node_address"`
	ObserveChains   []ObservedChain `json:"observe_chains"`
	PreflightStatus PreflightStatus `json:"preflight_status"`
	PubKeySet       struct {
		Ed25519   string `json:"ed25519"`
		Secp256k1 string `json:"secp256k1"`
	} `json:"pub_key_set"`
	RequestedToLeave    bool     `json:"requested_to_leave"`
	SignerMembership    []string `json:"signer_membership"`
	SlashPoints         int      `json:"slash_points"`
	Status              string   `json:"status"`
	StatusSince         int      `json:"status_since"`
	ValidatorConsPubKey string   `json:"validator_cons_pub_key"`
	Version             string   `json:"version"`
}

// ProxiedNodes defines model for ProxiedNodes.
type ProxiedNodes []ProxiedNode

// Queue defines model for Queue.
type Queue struct {
	Internal int `json:"internal"`
	Outbound int `json:"outbound"`
	Swap     int `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {
	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// StatsData defines model for StatsData.
type StatsData struct {
	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, unique users (addresses) initiating swaps in the last 24 hours.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, unique users (addresses) initiating swaps in the last 30 days.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Int64, unique users (addresses) initiating swaps since beginning.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {
	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {
	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {
	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {
	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {
	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at the end of the interval
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {
	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {
	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// OHLCVHistoryResponse defines model for OHLCVHistoryResponse.
type OHLCVHistoryResponse OHLCVHistory

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ProxiedNodesResponse defines model for ProxiedNodesResponse.
type ProxiedNodesResponse ProxiedNodes

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {
	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {
	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {
	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {
	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetOHLCVHistoryParams defines parameters for GetOHLCVHistory.
type GetOHLCVHistoryParams struct {
	// Interval of calculations
	Interval *GetOHLCVHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetOHLCVHistoryParamsInterval defines parameters for GetOHLCVHistory.
type GetOHLCVHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {
	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTSSwapHistoryParams defines parameters for GetTSSwapHistory.
type GetTSSwapHistoryParams struct {
	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetTSSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTSSwapHistoryParamsInterval defines parameters for GetTSSwapHistory.
type GetTSSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {
	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {
	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {
	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {
	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
