// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Action defines model for Action.
type Action struct {

	// Int64, Unix timestamp for when the action was registered
	Date string `json:"date"`

	// Int64, block height at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status string `json:"status"`

	// Type of action
	Type string `json:"type"`
}

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64, Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64, Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64, Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64, Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64, Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64, Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64, Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64, Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64, Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64, Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Coin defines model for Coin.
type Coin struct {

	// Int64 (10^8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64, the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Int64, the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64, Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64, Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64, System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64, Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistoryItemPool defines model for EarningsHistoryItemPool.
type EarningsHistoryItemPool struct {

	// Int64, Share of earnings sent to the pool during the time interval
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses struct {
	Current []InboundAddressesItem `json:"current"`
}

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string `json:"address"`
	Chain   string `json:"chain"`

	// indicate whether this chain has halted
	Halted bool   `json:"halted"`
	PubKey string `json:"pub_key"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                  int64 `json:"AsgardSize"`
	BadValidatorRate            int64 `json:"BadValidatorRate"`
	BlocksPerYear               int64 `json:"BlocksPerYear"`
	ChurnInterval               int64 `json:"ChurnInterval"`
	ChurnRetryInterval          int64 `json:"ChurnRetryInterval"`
	CliTxCost                   int64 `json:"CliTxCost"`
	DesiredValidatorSet         int64 `json:"DesiredValidatorSet"`
	DoubleSignMaxAge            int64 `json:"DoubleSignMaxAge"`
	EmissionCurve               int64 `json:"EmissionCurve"`
	FailKeygenSlashPoints       int64 `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints      int64 `json:"FailKeysignSlashPoints"`
	FundMigrationInterval       int64 `json:"FundMigrationInterval"`
	JailTimeKeygen              int64 `json:"JailTimeKeygen"`
	JailTimeKeysign             int64 `json:"JailTimeKeysign"`
	LackOfObservationPenalty    int64 `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks       int64 `json:"LiquidityLockUpBlocks"`
	MinimumBondInRune           int64 `json:"MinimumBondInRune"`
	MinimumNodesForBFT          int64 `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil    int64 `json:"MinimumNodesForYggdrasil"`
	NativeChainGasFee           int64 `json:"NativeChainGasFee"`
	NewPoolCycle                int64 `json:"NewPoolCycle"`
	ObservationDelayFlexibility int64 `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints          int64 `json:"ObserveSlashPoints"`
	OldValidatorRate            int64 `json:"OldValidatorRate"`
	OutboundTransactionFee      int64 `json:"OutboundTransactionFee"`
	SigningTransactionPeriod    int64 `json:"SigningTransactionPeriod"`
	YggFundLimit                int64 `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock struct {
	Current []LastblockItem `json:"current"`
}

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn string `json:"last_observed_in"`
	LastSignedOut  string `json:"last_signed_out"`
	Thorchain      string `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64 (10^8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64 (10^8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64 (10^8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64 (10^8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64 (10^8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64 (10^8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64, total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64, total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64, total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`
	PoolShareFactor         string `json:"poolShareFactor"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64, Total Rune pooled in all pools
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64, Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NetworkFees defines model for NetworkFees.
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolLegacyDetail defines model for PoolLegacyDetail.
type PoolLegacyDetail struct {
	Asset string `json:"asset"`

	// same as assetDepth from pool/stats
	AssetDepth string `json:"assetDepth"`

	// same as addAssetLiquidityVolume from pool/stats
	AssetStakedTotal string `json:"assetStakedTotal"`

	// same as toAssetCount from pool/stats
	BuyAssetCount string `json:"buyAssetCount"`

	// same as toAssetFees / toAssetCount from pool/stats
	BuyFeeAverage string `json:"buyFeeAverage"`

	// same as toAssetFees from pool/stats
	BuyFeesTotal string `json:"buyFeesTotal"`

	// same as toAssetAverageSlip from pool/stats
	BuySlipAverage string `json:"buySlipAverage"`

	// same as toAssetVolume / toAssetCount from pool/stats
	BuyTxAverage string `json:"buyTxAverage"`

	// same as toAssetVolume from pool/stats
	BuyVolume string `json:"buyVolume"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// same as 2*runeDepth from pool/stats
	PoolDepth string `json:"poolDepth"`

	// same as totalFees / swapCount from pool/stats
	PoolFeeAverage string `json:"poolFeeAverage"`

	// same as totalFees from pool/stats
	PoolFeesTotal string `json:"poolFeesTotal"`

	// same as averageSlip from pool/stats
	PoolSlipAverage string `json:"poolSlipAverage"`

	// same as addLiquidityVolume from pool/stats
	PoolStakedTotal string `json:"poolStakedTotal"`

	// same as swapVolume / swapCount from pool/stats
	PoolTxAverage string `json:"poolTxAverage"`

	// same as units from pool/stats
	PoolUnits string `json:"poolUnits"`

	// Int64, same as buyVolume + sellVolume
	PoolVolume string `json:"poolVolume"`

	// same as assetPrice from pool/stats
	Price string `json:"price"`

	// same as runeDepth from pool/stats
	RuneDepth string `json:"runeDepth"`

	// same as addRuneLiquidityVolume from pool/stats
	RuneStakedTotal string `json:"runeStakedTotal"`

	// same as toRuneCount from pool/stats
	SellAssetCount string `json:"sellAssetCount"`

	// same as toRuneFees / toRuneCount from pool/stats
	SellFeeAverage string `json:"sellFeeAverage"`

	// same as toRuneFees from pool/stats
	SellFeesTotal string `json:"sellFeesTotal"`

	// same as toRuneAverageSlip from pool/stats
	SellSlipAverage string `json:"sellSlipAverage"`

	// same as toRuneVolume / toRuneCount from pool/stats
	SellTxAverage string `json:"sellTxAverage"`

	// same as toRuneVolume from pool/stats
	SellVolume string `json:"sellVolume"`

	// same as addLiquidityCount from pool/stats
	StakeTxCount string `json:"stakeTxCount"`

	// same as uniqueMemberCount from pool/stats
	StakersCount string `json:"stakersCount"`

	// same as addLiquidityCount + withdrawCount from pool/stats
	StakingTxCount string `json:"stakingTxCount"`

	// same as status from pool/stats
	Status string `json:"status"`

	// Int64, same as history/swaps:uniqueSwapperCount
	SwappersCount string `json:"swappersCount"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64, same as swapVolume pool/stats?period=24h
	Volume24h string `json:"volume24h"`

	// same as withdrawCount from pool/stats
	WithdrawTxCount string `json:"withdrawTxCount"`
}

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64, same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64, same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`
	Asset                  string `json:"asset"`

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64, same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Float, same as history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64, same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64, same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float, same as history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64, same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64, same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Int64, number of unique adresses that initiated swaps transactions in the period.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Liquidity Units in the pool
	Units string `json:"units"`

	// Int64, same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64, same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64, same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// Queue defines model for Queue.
type Queue struct {
	Outbound string `json:"outbound"`
	Swap     string `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64 (10^8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64 (10^8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Int64, number of swaps since beginning.
	SwapCount string `json:"swapCount"`

	// Int64, number of swaps in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64, total volume of swaps denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Int64, unique users (addresses) initiating swaps since beginning.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, unique users (addresses) initiating swaps in the last 24 hours.
	UniqueSwapperCount24h string `json:"uniqueSwapperCount24h"`

	// Int64, unique users (addresses) initiating swaps in the last 30 days.
	UniqueSwapperCount30d string `json:"uniqueSwapperCount30d"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64 (10^8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float, the average slip by swap. Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float, the average slip for swaps to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64, the fees collected from swaps to asset denoted in rune
	ToAssetFees string `json:"toAssetFees"`

	// Int64, volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float, the average slip for swaps to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64, the fees collected from swaps to rune
	ToRuneFees string `json:"toRuneFees"`

	// Int64, volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64, the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64, toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Int64 (10^8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), trade slip percentage
	TradeSlip string `json:"tradeSlip"`

	// Int64 (10^8), minimum output amount specified for the swap
	TradeTarget string `json:"tradeTarget"`
}

// Transaction defines model for Transaction.
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction memo
	Memo string `json:"memo"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolLegacyResponse defines model for PoolLegacyResponse.
type PoolLegacyResponse PoolLegacyDetail

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Address of sender or recipient of any in/out transaction related to the action
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action (swap, addLiquidity, withdraw, donate, refund)
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *string `json:"period,omitempty"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *string `json:"status,omitempty"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP//8/q9mprFAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
