// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64, Average bond of active nodes.
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64, Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64, Maxinum bond of active nodes.
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64, Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64, Median bond of active nodes.
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64, Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64, Minumum bond of active nodes.
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64, Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64, Total bond of active nodes.
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64, Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// Liquidity provider data for all the pools of a given member
	Pools []MemberPoolDetails `json:"pools"`
}

// MemberPoolDetails defines model for MemberPoolDetails.
type MemberPoolDetails struct {

	// Int64, total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// Int64, total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Int64, total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`
	BondingROI string `json:"bondingROI"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks).
	PoolActivationCountdown string  `json:"poolActivationCountdown"`
	PoolShareFactor         string  `json:"poolShareFactor"`
	StakingROI              *string `json:"stakingROI,omitempty"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64, Total Rune pooled in all pools.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64, Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NodeKey defines model for NodeKey.
type NodeKey struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	Price string `json:"price"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Enabled, Bootstrap.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolSummary defines model for PoolSummary.
type PoolSummary struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Int64, unix timestamp (second).
	DateCreated string `json:"dateCreated"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	Price string `json:"price"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Daily active users (unique addresses interacting)
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Daily transactions
	DailyTx string `json:"dailyTx"`

	// Monthly active users
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Monthly transactions
	MonthlyTx string `json:"monthlyTx"`

	// Total buying transactions
	TotalAssetBuys string `json:"totalAssetBuys"`

	// Total selling transactions
	TotalAssetSells string `json:"totalAssetSells"`

	// Total RUNE balances
	TotalDepth string `json:"totalDepth"`

	// Total staking transactions
	TotalStakeTx string `json:"totalStakeTx"`

	// Total staked (in RUNE Value).
	TotalStaked string `json:"totalStaked"`

	// Total transactions
	TotalTx string `json:"totalTx"`

	// Total unique swappers & members
	TotalUsers string `json:"totalUsers"`

	// Total (in RUNE Value) of all assets swapped since start.
	TotalVolume string `json:"totalVolume"`

	// Total withdrawing transactions
	TotalWithdrawTx string `json:"totalWithdrawTx"`
}

// TxDetails defines model for TxDetails.
type TxDetails struct {

	// Int64, Unix timestamp.
	Date   string `json:"date"`
	Events Event  `json:"events"`
	Height string `json:"height"`
	In     Tx     `json:"in"`
	Out    []Tx   `json:"out"`
	Pool   string `json:"pool"`
	Status string `json:"status"`
	Type   string `json:"type"`
}

// Volume defines model for Volume.
type Volume struct {

	// Sum of "rune_amount" of buy swap events.
	BuyVolume string `json:"buyVolume"`

	// Sum of "rune_amount" of sell swap events.
	SellVolume string `json:"sellVolume"`

	// Int64, The beginning time of bucket in unix timestamp.
	Time string `json:"time"`

	// buyVolume + sellVolume
	TotalVolume string `json:"totalVolume"`
}

// Coin defines model for coin.
type Coin struct {
	Amount string `json:"amount"`
	Asset  string `json:"asset"`
}

// Coins defines model for coins.
type Coins []Coin

// Event defines model for event.
type Event struct {
	Fee        string `json:"fee"`
	Slip       string `json:"slip"`
	StakeUnits string `json:"stakeUnits"`
}

// Option defines model for option.
type Option struct {
	Asymmetry           string `json:"asymmetry"`
	PriceTarget         string `json:"priceTarget"`
	WithdrawBasisPoints string `json:"withdrawBasisPoints"`
}

// Tx defines model for tx.
type Tx struct {
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`
	Memo    string `json:"memo"`
	Options Option `json:"options"`
	TxID    string `json:"txID"`
}

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {

	// True means healthy, connected to database.
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain.
	InSync bool `json:"inSync"`

	// Int64, the current block count.
	ScannerHeight string `json:"scannerHeight"`
}

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse []string

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodeKeyResponse defines model for NodeKeyResponse.
type NodeKeyResponse []NodeKey

// PoolDetailResponse defines model for PoolDetailResponse.
type PoolDetailResponse PoolDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse []PoolSummary

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// TxResponse defines model for TxResponse.
type TxResponse struct {

	// Int64, count of txs matching the filters.
	Count string      `json:"count"`
	Txs   []TxDetails `json:"txs"`
}

// VolumeResponse defines model for VolumeResponse.
type VolumeResponse []Volume

// GetTotalVolumeParams defines parameters for GetTotalVolume.
type GetTotalVolumeParams struct {

	// Return volume for this single pool. Returns volume for all pools if missing.
	Pool *int64 `json:"pool,omitempty"`

	// Interval of calculations
	Interval string `json:"interval"`

	// Start time of the query as unix timestamp
	From int64 `json:"from"`

	// End time of the query as unix timestamp
	To int64 `json:"to"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Interval of calculations
	Status string `json:"status"`
}

// GetTxDetailsParams defines parameters for GetTxDetails.
type GetTxDetailsParams struct {

	// Address of sender or recipient of any in/out tx in event
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx in event
	Txid *string `json:"txid,omitempty"`

	// Any asset used in event (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of event
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
