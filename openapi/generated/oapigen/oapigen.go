// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Action defines model for Action.
type Action struct {

	// Int64, Unix timestamp for when the action was registered
	Date string `json:"date"`

	// Int64, block height at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status string `json:"status"`

	// Type of action
	Type string `json:"type"`
}

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64, Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64, Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64, Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64, Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64, Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64, Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64, Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64, Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64, Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64, Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Coin defines model for Coin.
type Coin struct {

	// Int64 (10^8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64, Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64, Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64, System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64, Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistoryItemPool defines model for EarningsHistoryItemPool.
type EarningsHistoryItemPool struct {

	// Int64, Share of earnings sent to the pool during the time interval
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses struct {
	Current []InboundAddressesItem `json:"current"`
}

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string `json:"address"`
	Chain   string `json:"chain"`

	// indicate whether this chain has halted
	Halted bool   `json:"halted"`
	PubKey string `json:"pub_key"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                  int64 `json:"AsgardSize"`
	BadValidatorRate            int64 `json:"BadValidatorRate"`
	BlocksPerYear               int64 `json:"BlocksPerYear"`
	ChurnInterval               int64 `json:"ChurnInterval"`
	ChurnRetryInterval          int64 `json:"ChurnRetryInterval"`
	CliTxCost                   int64 `json:"CliTxCost"`
	DesiredValidatorSet         int64 `json:"DesiredValidatorSet"`
	DoubleSignMaxAge            int64 `json:"DoubleSignMaxAge"`
	EmissionCurve               int64 `json:"EmissionCurve"`
	FailKeygenSlashPoints       int64 `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints      int64 `json:"FailKeysignSlashPoints"`
	FundMigrationInterval       int64 `json:"FundMigrationInterval"`
	JailTimeKeygen              int64 `json:"JailTimeKeygen"`
	JailTimeKeysign             int64 `json:"JailTimeKeysign"`
	LackOfObservationPenalty    int64 `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks       int64 `json:"LiquidityLockUpBlocks"`
	MinimumBondInRune           int64 `json:"MinimumBondInRune"`
	MinimumNodesForBFT          int64 `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil    int64 `json:"MinimumNodesForYggdrasil"`
	NativeChainGasFee           int64 `json:"NativeChainGasFee"`
	NewPoolCycle                int64 `json:"NewPoolCycle"`
	ObservationDelayFlexibility int64 `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints          int64 `json:"ObserveSlashPoints"`
	OldValidatorRate            int64 `json:"OldValidatorRate"`
	OutboundTransactionFee      int64 `json:"OutboundTransactionFee"`
	SigningTransactionPeriod    int64 `json:"SigningTransactionPeriod"`
	YggFundLimit                int64 `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock struct {
	Current []LastblockItem `json:"current"`
}

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn string `json:"last_observed_in"`
	LastSignedOut  string `json:"last_signed_out"`
	Thorchain      string `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64 (10^8), total deposits (liquidity additions) in RUNE during the time interval. Accounts for both asset (using the price at deposit time) and RUNE deposited into pools
	Deposits string `json:"deposits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64 (10^8), total withdrawals in RUNE during the time interval. Accounts for both asset (using the price at withdrawal time) and RUNE withdrawn from pools
	Withdrawals string `json:"withdrawals"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// Liquidity provider data for all the pools of a given member
	Pools []MemberPoolDetails `json:"pools"`
}

// MemberPoolDetails defines model for MemberPoolDetails.
type MemberPoolDetails struct {

	// Int64, total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// Int64, total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Int64, total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`
	PoolShareFactor         string `json:"poolShareFactor"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64, Total Rune pooled in all pools
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64, Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NetworkFees defines model for NetworkFees.
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolLegacyDetail defines model for PoolLegacyDetail.
type PoolLegacyDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Int64, same as history/swaps:toAssetCount
	BuyAssetCount string `json:"buyAssetCount"`

	// Float, same as history/swaps:toRuneVolume/toRuneCount
	BuyTxAverage string `json:"buyTxAverage"`

	// Int64, same as history/swaps:toAssetVolume
	BuyVolume string `json:"buyVolume"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, same as assetDepth + runeDepth
	PoolDepth string `json:"poolDepth"`

	// Float, same as history/swaps:totalFees/totalCount
	PoolFeeAverage string `json:"poolFeeAverage"`

	// Int64, same as history/swaps:totalFees
	PoolFeesTotal string `json:"poolFeesTotal"`

	// Float, same as history/swaps:averageSlip
	PoolSlipAverage string `json:"poolSlipAverage"`

	// Float, same as history/swaps:totalVolume/totalCount
	PoolTxAverage string `json:"poolTxAverage"`

	// Int64, same as buyVolume + sellVolume
	PoolVolume string `json:"poolVolume"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// Int64, same as history/swaps:toRuneCount
	SellAssetCount string `json:"sellAssetCount"`

	// Float, same as history/swaps:toAssetVolume/toAssetCount
	SellTxAverage string `json:"sellTxAverage"`

	// Int64, same as history/swaps:toRuneVolume
	SellVolume string `json:"sellVolume"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64, Liquidity Units in the pool
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune
	Volume24h string `json:"volume24h"`
}

// Queue defines model for Queue.
type Queue struct {
	Outbound string `json:"outbound"`
	Swap     string `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Daily active users (unique addresses interacting)
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Daily transactions
	DailyTx string `json:"dailyTx"`

	// Monthly active users
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Monthly transactions
	MonthlyTx string `json:"monthlyTx"`

	// Total buying transactions
	TotalAssetBuys string `json:"totalAssetBuys"`

	// Total selling transactions
	TotalAssetSells string `json:"totalAssetSells"`

	// Total RUNE balances
	TotalDepth string `json:"totalDepth"`

	// Total staking transactions
	TotalStakeTx string `json:"totalStakeTx"`

	// Total staked (in RUNE Value)
	TotalStaked string `json:"totalStaked"`

	// Total transactions
	TotalTx string `json:"totalTx"`

	// Total unique swappers & members
	TotalUsers string `json:"totalUsers"`

	// Total (in RUNE Value) of all assets swapped since start
	TotalVolume string `json:"totalVolume"`

	// Total withdrawing transactions
	TotalWithdrawTx string `json:"totalWithdrawTx"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float, the average slip by swap. Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64, volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64, volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64, the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64, toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Int64 (10^8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), trade slip percentage
	TradeSlip string `json:"tradeSlip"`

	// Int64 (10^8), minimum output amount specified for the swap
	TradeTarget string `json:"tradeTarget"`
}

// Transaction defines model for Transaction.
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction memo
	Memo string `json:"memo"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolLegacyResponse defines model for PoolLegacyResponse.
type PoolLegacyResponse PoolLegacyDetail

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Address of sender or recipient of any in/out transaction related to the action
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action (swap, addLiquidity, withdraw, donate, refund)
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *string `json:"status,omitempty"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
