// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// AssetSummary defines model for AssetSummary.
type AssetSummary struct {
	Asset string `json:"asset"`

	// Int64, unix timestamp (second).
	DateCreated string `json:"dateCreated"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	Price string `json:"price"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64, Average bond of active nodes.
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64, Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64, Maxinum bond of active nodes.
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64, Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64, Median bond of active nodes.
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64, Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64, Minumum bond of active nodes.
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64, Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64, Total bond of active nodes.
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64, Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`
	BondingROI string `json:"bondingROI"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks).
	PoolActivationCountdown string  `json:"poolActivationCountdown"`
	PoolShareFactor         string  `json:"poolShareFactor"`
	StakingROI              *string `json:"stakingROI,omitempty"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64, Total Rune pooled in all pools.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64, Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NodeKey defines model for NodeKey.
type NodeKey struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	Price string `json:"price"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Enabled, Bootstrap.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// TxDetails defines model for TxDetails.
type TxDetails struct {

	// Int64, Unix timestamp.
	Date   string `json:"date"`
	Events Event  `json:"events"`
	Height string `json:"height"`
	In     Tx     `json:"in"`
	Out    []Tx   `json:"out"`
	Pool   string `json:"pool"`
	Status string `json:"status"`
	Type   string `json:"type"`
}

// Volume defines model for Volume.
type Volume struct {

	// Sum of "rune_amount" of buy swap events.
	BuyVolume string `json:"buyVolume"`

	// Sum of "rune_amount" of sell swap events.
	SellVolume string `json:"sellVolume"`

	// Int64, The beginning time of bucket in unix timestamp.
	Time string `json:"time"`

	// buyVolume + sellVolume
	TotalVolume string `json:"totalVolume"`
}

// Coin defines model for coin.
type Coin struct {
	Amount string `json:"amount"`
	Asset  string `json:"asset"`
}

// Coins defines model for coins.
type Coins []Coin

// Event defines model for event.
type Event struct {
	Fee        string `json:"fee"`
	Slip       string `json:"slip"`
	StakeUnits string `json:"stakeUnits"`
}

// Option defines model for option.
type Option struct {
	Asymmetry           string `json:"asymmetry"`
	PriceTarget         string `json:"priceTarget"`
	WithdrawBasisPoints string `json:"withdrawBasisPoints"`
}

// Tx defines model for tx.
type Tx struct {
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`
	Memo    string `json:"memo"`
	Options Option `json:"options"`
	TxID    string `json:"txID"`
}

// AssetsSummaryResponse defines model for AssetsSummaryResponse.
type AssetsSummaryResponse []AssetSummary

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {

	// True means healthy, connected to database.
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain.
	InSync bool `json:"inSync"`

	// Int64, the current block count.
	ScannerHeight string `json:"scannerHeight"`
}

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodeKeyResponse defines model for NodeKeyResponse.
type NodeKeyResponse []NodeKey

// PoolDetailResponse defines model for PoolDetailResponse.
type PoolDetailResponse PoolDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse []string

// TxResponse defines model for TxResponse.
type TxResponse struct {

	// Int64, count of txs matching the filters.
	Count string      `json:"count"`
	Txs   []TxDetails `json:"txs"`
}

// VolumeResponse defines model for VolumeResponse.
type VolumeResponse []Volume

// GetAssetInfoParams defines parameters for GetAssetInfo.
type GetAssetInfoParams struct {

	// One or more comma separated unique asset (CHAIN.SYMBOL)
	Asset string `json:"asset"`
}

// GetTotalVolumeParams defines parameters for GetTotalVolume.
type GetTotalVolumeParams struct {

	// Return volume for this single pool. Returns volume for all pools if missing.
	Pool *int64 `json:"pool,omitempty"`

	// Interval of calculations
	Interval string `json:"interval"`

	// Start time of the query as unix timestamp
	From int64 `json:"from"`

	// End time of the query as unix timestamp
	To int64 `json:"to"`
}

// GetTxDetailsParams defines parameters for GetTxDetails.
type GetTxDetailsParams struct {

	// Address of sender or recipient of any in/out tx in event
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx in event
	Txid *string `json:"txid,omitempty"`

	// Any asset used in event (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of event
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
