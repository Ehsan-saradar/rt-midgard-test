// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {
	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {
	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {
	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Represents a digital currency amount
type Coin struct {
	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {
	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {
	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {
	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {
	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {
	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync         bool     `json:"inSync"`
	LastAggregated HeightTS `json:"lastAggregated"`
	LastCommitted  HeightTS `json:"lastCommitted"`
	LastFetched    HeightTS `json:"lastFetched"`
	LastQueried    HeightTS `json:"lastQueried"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// HeightTS defines model for HeightTS.
type HeightTS struct {
	// Block height
	Height int `json:"height"`

	// Block timestamp (seconds since epoch)
	Timestamp int `json:"timestamp"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string  `json:"address"`
	Chain   string  `json:"chain"`
	GasRate *string `json:"gas_rate,omitempty"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                    int64  `json:"AsgardSize"`
	BadValidatorRate              int64  `json:"BadValidatorRate"`
	BadValidatorRedline           int    `json:"BadValidatorRedline"`
	BlocksPerYear                 int64  `json:"BlocksPerYear"`
	ChurnInterval                 int64  `json:"ChurnInterval"`
	ChurnRetryInterval            int64  `json:"ChurnRetryInterval"`
	DesiredValidatorSet           int64  `json:"DesiredValidatorSet"`
	DoubleSignMaxAge              int64  `json:"DoubleSignMaxAge"`
	EmissionCurve                 int64  `json:"EmissionCurve"`
	FailKeygenSlashPoints         int64  `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints        int64  `json:"FailKeysignSlashPoints"`
	FullImpLossProtectionBlocks   int64  `json:"FullImpLossProtectionBlocks"`
	FundMigrationInterval         int64  `json:"FundMigrationInterval"`
	IncentiveCurve                int64  `json:"IncentiveCurve"`
	JailTimeKeygen                int64  `json:"JailTimeKeygen"`
	JailTimeKeysign               int64  `json:"JailTimeKeysign"`
	LackOfObservationPenalty      int64  `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks         int64  `json:"LiquidityLockUpBlocks"`
	MaxAvailablePools             int64  `json:"MaxAvailablePools"`
	MaxSwapsPerBlock              int64  `json:"MaxSwapsPerBlock"`
	MinRunePoolDepth              int64  `json:"MinRunePoolDepth"`
	MinSlashPointsForBadValidator int64  `json:"MinSlashPointsForBadValidator"`
	MinSwapsPerBlock              int64  `json:"MinSwapsPerBlock"`
	MinimumBondInRune             int64  `json:"MinimumBondInRune"`
	MinimumNodesForBFT            int64  `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil      int64  `json:"MinimumNodesForYggdrasil"`
	NativeTransactionFee          int64  `json:"NativeTransactionFee"`
	NewPoolCycle                  *int64 `json:"NewPoolCycle,omitempty"`
	ObservationDelayFlexibility   int64  `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints            int64  `json:"ObserveSlashPoints"`
	OldValidatorRate              int64  `json:"OldValidatorRate"`
	OutboundTransactionFee        int64  `json:"OutboundTransactionFee"`
	PoolCycle                     int64  `json:"PoolCycle"`
	SigningTransactionPeriod      int64  `json:"SigningTransactionPeriod"`
	VirtualMultSynths             int64  `json:"VirtualMultSynths"`
	YggFundLimit                  int64  `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock []LastblockItem

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn int64  `json:"last_observed_in"`
	LastSignedOut  int64  `json:"last_signed_out"`
	Thorchain      int64  `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {
	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {
	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {
	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {
	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// OHLCVHistory defines model for OHLCVHistory.
type OHLCVHistory struct {
	Intervals OHLCVHistoryIntervals `json:"intervals"`
	Meta      OHLCVHistoryMeta      `json:"meta"`
}

// OHLCVHistoryIntervals defines model for OHLCVHistoryIntervals.
type OHLCVHistoryIntervals []OHLCVHistoryItem

// OHLCVHistoryItem defines model for OHLCVHistoryItem.
type OHLCVHistoryItem struct {
	// Float, close price of asset in USD
	ClosePrice string `json:"closePrice"`

	// Int64, The end time of bucket in unix timestamp
	CloseTime string `json:"closeTime"`

	// Float, high price of asset in USD
	HighPrice string `json:"highPrice"`

	// Int64, The high time of bucket in unix timestamp
	HighTime string `json:"highTime"`

	// Int64, Liquidty is USD
	Liquidity string `json:"liquidity"`

	// Float, low price of asset in USD
	LowPrice string `json:"lowPrice"`

	// Int64, The low time of bucket in unix timestamp
	LowTime string `json:"lowTime"`

	// Float, open price of asset in USD
	OpenPrice string `json:"openPrice"`

	// Int64, The beginning time of bucket in unix timestamp
	OpenTime string `json:"openTime"`

	// Int64, Volume in USD
	Volume string `json:"volume"`
}

// OHLCVHistoryMeta defines model for OHLCVHistoryMeta.
type OHLCVHistoryMeta struct {
	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// ObservedChain defines model for ObservedChain.
type ObservedChain struct {
	Chain  string `json:"chain"`
	Height int    `json:"height"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {
	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`
	Asset                  string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Int64, number of unique adresses that initiated swaps transactions in the period.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// PreflightStatus defines model for PreflightStatus.
type PreflightStatus struct {
	Code   int    `json:"code"`
	Reason string `json:"reason"`
	Status string `json:"status"`
}

// ProxiedNode defines model for ProxiedNode.
type ProxiedNode struct {
	ActiveBlockHeight int    `json:"active_block_height"`
	Bond              string `json:"bond"`
	BondAddress       string `json:"bond_address"`
	CurrentAward      string `json:"current_award"`
	ForcedToLeave     bool   `json:"forced_to_leave"`
	IpAddress         string `json:"ip_address"`
	Jail              struct {
		NodeAddress *string `json:"node_address,omitempty"`
	} `json:"jail"`
	LeaveHeight     int             `json:"leave_height"`
	NodeAddress     string          `json:"node_address"`
	ObserveChains   []ObservedChain `json:"observe_chains"`
	PreflightStatus PreflightStatus `json:"preflight_status"`
	PubKeySet       struct {
		Ed25519   string `json:"ed25519"`
		Secp256k1 string `json:"secp256k1"`
	} `json:"pub_key_set"`
	RequestedToLeave    bool     `json:"requested_to_leave"`
	SignerMembership    []string `json:"signer_membership"`
	SlashPoints         int      `json:"slash_points"`
	Status              string   `json:"status"`
	StatusSince         int      `json:"status_since"`
	ValidatorConsPubKey string   `json:"validator_cons_pub_key"`
	Version             string   `json:"version"`
}

// ProxiedNodes defines model for ProxiedNodes.
type ProxiedNodes []ProxiedNode

// Queue defines model for Queue.
type Queue struct {
	Internal int `json:"internal"`
	Outbound int `json:"outbound"`
	Swap     int `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {
	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// StatsData defines model for StatsData.
type StatsData struct {
	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, unique users (addresses) initiating swaps in the last 24 hours.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, unique users (addresses) initiating swaps in the last 30 days.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Int64, unique users (addresses) initiating swaps since beginning.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {
	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {
	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {
	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {
	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {
	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at the end of the interval
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {
	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {
	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// OHLCVHistoryResponse defines model for OHLCVHistoryResponse.
type OHLCVHistoryResponse OHLCVHistory

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ProxiedNodesResponse defines model for ProxiedNodesResponse.
type ProxiedNodesResponse ProxiedNodes

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {
	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {
	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {
	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {
	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetOHLCVHistoryParams defines parameters for GetOHLCVHistory.
type GetOHLCVHistoryParams struct {
	// Interval of calculations
	Interval *GetOHLCVHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetOHLCVHistoryParamsInterval defines parameters for GetOHLCVHistory.
type GetOHLCVHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {
	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTSSwapHistoryParams defines parameters for GetTSSwapHistory.
type GetTSSwapHistoryParams struct {
	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetTSSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTSSwapHistoryParamsInterval defines parameters for GetTSSwapHistory.
type GetTSSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {
	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {
	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {
	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {
	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
