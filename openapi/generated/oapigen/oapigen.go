// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64, Average bond of active nodes.
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64, Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64, Maxinum bond of active nodes.
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64, Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64, Median bond of active nodes.
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64, Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64, Minumum bond of active nodes.
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64, Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64, Total bond of active nodes.
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64, Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryInterval  `json:"meta"`
}

// EarningsHistoryInterval defines model for EarningsHistoryInterval.
type EarningsHistoryInterval struct {

	// Int64, Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64, Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64, System income generated during the time interval. It is the sum of liquidity fees and block rewards.
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64, Total liquidity fees, converted to RUNE, collected during the time interval.
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryIntervalPool `json:"pools"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistoryIntervalPool defines model for EarningsHistoryIntervalPool.
type EarningsHistoryIntervalPool struct {

	// Int64, Share of earnings sent to the pool during the time interval
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryInterval

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// Liquidity provider data for all the pools of a given member
	Pools []MemberPoolDetails `json:"pools"`
}

// MemberPoolDetails defines model for MemberPoolDetails.
type MemberPoolDetails struct {

	// Int64, total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// Int64, total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Int64, total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`
	BondingROI string `json:"bondingROI"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks).
	PoolActivationCountdown string  `json:"poolActivationCountdown"`
	PoolShareFactor         string  `json:"poolShareFactor"`
	StakingROI              *string `json:"stakingROI,omitempty"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64, Total Rune pooled in all pools.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64, Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NodeKey defines model for NodeKey.
type NodeKey struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	Price string `json:"price"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Enabled, Bootstrap.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Daily active users (unique addresses interacting)
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Daily transactions
	DailyTx string `json:"dailyTx"`

	// Monthly active users
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Monthly transactions
	MonthlyTx string `json:"monthlyTx"`

	// Total buying transactions
	TotalAssetBuys string `json:"totalAssetBuys"`

	// Total selling transactions
	TotalAssetSells string `json:"totalAssetSells"`

	// Total RUNE balances
	TotalDepth string `json:"totalDepth"`

	// Total staking transactions
	TotalStakeTx string `json:"totalStakeTx"`

	// Total staked (in RUNE Value).
	TotalStaked string `json:"totalStaked"`

	// Total transactions
	TotalTx string `json:"totalTx"`

	// Total unique swappers & members
	TotalUsers string `json:"totalUsers"`

	// Total (in RUNE Value) of all assets swapped since start.
	TotalVolume string `json:"totalVolume"`

	// Total withdrawing transactions
	TotalWithdrawTx string `json:"totalWithdrawTx"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Int64, the average slip by swap. Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64, volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64, volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64, the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64, toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// TxDetails defines model for TxDetails.
type TxDetails struct {

	// Int64, Unix timestamp.
	Date   string `json:"date"`
	Events Event  `json:"events"`
	Height string `json:"height"`
	In     Tx     `json:"in"`
	Out    []Tx   `json:"out"`
	Pool   string `json:"pool"`
	Status string `json:"status"`
	Type   string `json:"type"`
}

// Coin defines model for coin.
type Coin struct {
	Amount string `json:"amount"`
	Asset  string `json:"asset"`
}

// Coins defines model for coins.
type Coins []Coin

// Event defines model for event.
type Event struct {
	Fee        string `json:"fee"`
	Slip       string `json:"slip"`
	StakeUnits string `json:"stakeUnits"`
}

// Option defines model for option.
type Option struct {
	Asymmetry           string `json:"asymmetry"`
	PriceTarget         string `json:"priceTarget"`
	WithdrawBasisPoints string `json:"withdrawBasisPoints"`
}

// Tx defines model for tx.
type Tx struct {
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`
	Memo    string `json:"memo"`
	Options Option `json:"options"`
	TxID    string `json:"txID"`
}

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse []string

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodeKeyResponse defines model for NodeKeyResponse.
type NodeKeyResponse []NodeKey

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse []PoolDetail

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// TxResponse defines model for TxResponse.
type TxResponse struct {

	// Int64, count of txs matching the filters.
	Count string      `json:"count"`
	Txs   []TxDetails `json:"txs"`
}

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval string `json:"interval"`

	// Start time of the query as unix timestamp
	From int64 `json:"from"`

	// End time of the query as unix timestamp
	To int64 `json:"to"`
}

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return stats for this single pool. Returns sum of all pools if missing.
	Pool *int64 `json:"pool,omitempty"`

	// Interval of calculations
	Interval string `json:"interval"`

	// Start time of the query as unix timestamp
	From int64 `json:"from"`

	// End time of the query as unix timestamp
	To int64 `json:"to"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Interval of calculations
	Status string `json:"status"`
}

// GetTxDetailsParams defines parameters for GetTxDetails.
type GetTxDetailsParams struct {

	// Address of sender or recipient of any in/out tx in event
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx in event
	Txid *string `json:"txid,omitempty"`

	// Any asset used in event (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of event
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"vJtcPrl0BD+Ne+gefpr4c56KUe2DA0r1+jYlCnQ+jOZ3pnu3t//IdLboiw1vjGAnK3AMyY1WmH08U1iQ",
	"+vp/x/lN/fJ6WxF2PscKo6aDkz+xnTYc6aLS6/KxjisSQao3yk3FTHAUI8/P5ve/TUmXRoYUgrHTSHta",
	"C2OLj4vp46e7T4ufTm9OOyKVaw7+xXGq9k8GbXE3jDT/Lw37VwNO/JgqHufW7v59mWyWuSS2dOL6KbzX",
	"MXAc5Si3r/8FQZv5v1vqLIKCW9sQmOb36nuZ3mQJtc2ehIYbxm1HCRtJeWPBtUPqfYyOHN68MKprcTTe",
	"thBKtHkD46H2RtHAsH3PHnF0plWuTeaOYjysl+c0A+42t9s7JjEmLkkiJJEQspSBPUmkfE8YP8F2384U",
	"XLY3fvwftvjiaplldHtru6y5Hknf2fvLs/PLN2+vb07f/nJ5ebGYv3lzdrb4+fL8evHL+zez2ez0/fWb",
	"t4vzm9n12dl8tri8eXdzOb9YzN7+fD1fnHel9DsWHUbxnO/dmWmm7Hmg1eSrdx/mtx+nD7/dLT79+no4",
	"8DWl5yLfAZR84mA0nQgJJBRJYvZTYyg4WWkzSwMDDaMl0J6DKXsc1XEC5RWiO3AaT3pK14zb5mXMEqY7",
	"hJI/O6Dmcje1g6uLWXGXO7iajSkOK0SJ1cqqw0dV8fAQsvooOWoPq/wPSj1+/cqUrm0gxkjWjW2t2NTq",
	"O823b9++/W8AAAD//+wVYzh/TQAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
