// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Action defines model for Action.
type Action struct {

	// Int64, Unix timestamp for when the action was registered
	Date string `json:"date"`

	// Int64, block height at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status string `json:"status"`

	// Type of action
	Type string `json:"type"`
}

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64, Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64, Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64, Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64, Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64, Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64, Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64, Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64, Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64, Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64, Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Coin defines model for Coin.
type Coin struct {

	// Int64 (10^8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64, Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64, Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64, System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64, Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistoryItemPool defines model for EarningsHistoryItemPool.
type EarningsHistoryItemPool struct {

	// Int64, Share of earnings sent to the pool during the time interval
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses struct {
	Current []InboundAddressesItem `json:"current"`
}

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string `json:"address"`
	Chain   string `json:"chain"`

	// indicate whether this chain has halted
	Halted bool   `json:"halted"`
	PubKey string `json:"pub_key"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                  int64 `json:"AsgardSize"`
	BadValidatorRate            int64 `json:"BadValidatorRate"`
	BlocksPerYear               int64 `json:"BlocksPerYear"`
	ChurnInterval               int64 `json:"ChurnInterval"`
	ChurnRetryInterval          int64 `json:"ChurnRetryInterval"`
	CliTxCost                   int64 `json:"CliTxCost"`
	DesiredValidatorSet         int64 `json:"DesiredValidatorSet"`
	DoubleSignMaxAge            int64 `json:"DoubleSignMaxAge"`
	EmissionCurve               int64 `json:"EmissionCurve"`
	FailKeygenSlashPoints       int64 `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints      int64 `json:"FailKeysignSlashPoints"`
	FundMigrationInterval       int64 `json:"FundMigrationInterval"`
	JailTimeKeygen              int64 `json:"JailTimeKeygen"`
	JailTimeKeysign             int64 `json:"JailTimeKeysign"`
	LackOfObservationPenalty    int64 `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks       int64 `json:"LiquidityLockUpBlocks"`
	MinimumBondInRune           int64 `json:"MinimumBondInRune"`
	MinimumNodesForBFT          int64 `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil    int64 `json:"MinimumNodesForYggdrasil"`
	NativeChainGasFee           int64 `json:"NativeChainGasFee"`
	NewPoolCycle                int64 `json:"NewPoolCycle"`
	ObservationDelayFlexibility int64 `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints          int64 `json:"ObserveSlashPoints"`
	OldValidatorRate            int64 `json:"OldValidatorRate"`
	OutboundTransactionFee      int64 `json:"OutboundTransactionFee"`
	SigningTransactionPeriod    int64 `json:"SigningTransactionPeriod"`
	YggFundLimit                int64 `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock struct {
	Current []LastblockItem `json:"current"`
}

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn string `json:"last_observed_in"`
	LastSignedOut  string `json:"last_signed_out"`
	Thorchain      string `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64 (10^8), total deposits in RUNE during the time interval.
	// Accounts for both asset (using the price at deposit time) and RUNE deposited into pools
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64 (10^8), total withdrawals in RUNE during the time interval. Accounts for
	// both asset (using the price at withdrawal time) and RUNE withdrawn from pools
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64, total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64, total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64, total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`
	PoolShareFactor         string `json:"poolShareFactor"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64, Total Rune pooled in all pools
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64, Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NetworkFees defines model for NetworkFees.
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolLegacyDetail defines model for PoolLegacyDetail.
type PoolLegacyDetail struct {
	Asset string `json:"asset"`

	// same as assetDepth from pool/stats
	AssetDepth string `json:"assetDepth"`

	// same as toAssetCount from pool/stats
	BuyAssetCount string `json:"buyAssetCount"`

	// same as toAssetFees / toAssetCount from pool/stats
	BuyFeeAverage string `json:"buyFeeAverage"`

	// same as toAssetFees from pool/stats
	BuyFeesTotal string `json:"buyFeesTotal"`

	// same as toAssetAverageSlip from pool/stats
	BuySlipAverage string `json:"buySlipAverage"`

	// same as toAssetVolume / toAssetCount from pool/stats
	BuyTxAverage string `json:"buyTxAverage"`

	// same as toAssetVolume from pool/stats
	BuyVolume string `json:"buyVolume"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// same as 2*runeDepth from pool/stats
	PoolDepth string `json:"poolDepth"`

	// same as totalFees / swapCount from pool/stats
	PoolFeeAverage string `json:"poolFeeAverage"`

	// same as totalFees from pool/stats
	PoolFeesTotal string `json:"poolFeesTotal"`

	// same as averageSlip from pool/stats
	PoolSlipAverage string `json:"poolSlipAverage"`

	// same as addLiquidityVolume from pool/stats
	PoolStakedTotal string `json:"poolStakedTotal"`

	// same as swapVolume / swapCount from pool/stats
	PoolTxAverage string `json:"poolTxAverage"`

	// same as units from pool/stats
	PoolUnits string `json:"poolUnits"`

	// Int64, same as buyVolume + sellVolume
	PoolVolume string `json:"poolVolume"`

	// same as assetPrice from pool/stats
	Price string `json:"price"`

	// same as runeDepth from pool/stats
	RuneDepth string `json:"runeDepth"`

	// same as toRuneCount from pool/stats
	SellAssetCount string `json:"sellAssetCount"`

	// same as toRuneFees / toRuneCount from pool/stats
	SellFeeAverage string `json:"sellFeeAverage"`

	// same as toRuneFees from pool/stats
	SellFeesTotal string `json:"sellFeesTotal"`

	// same as toRuneAverageSlip from pool/stats
	SellSlipAverage string `json:"sellSlipAverage"`

	// same as toRuneVolume / toRuneCount from pool/stats
	SellTxAverage string `json:"sellTxAverage"`

	// same as toRuneVolume from pool/stats
	SellVolume string `json:"sellVolume"`

	// same as addLiquidityCount from pool/stats
	StakeTxCount string `json:"stakeTxCount"`

	// same as uniqueMemberCount from pool/stats
	StakersCount string `json:"stakersCount"`

	// same as addLiquidityCount + withdrawCount from pool/stats
	StakingTxCount string `json:"stakingTxCount"`

	// same as status from pool/stats
	Status string `json:"status"`

	// Int64, same as history/swaps:uniqueSwapperCount
	SwappersCount string `json:"swappersCount"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64, same as swapVolume pool/stats?period=24h
	Volume24h string `json:"volume24h"`

	// same as withdrawCount from pool/stats
	WithdrawTxCount string `json:"withdrawTxCount"`
}

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64, same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`
	Asset              string `json:"asset"`

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64, same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Float, same as history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64, same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64, same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float, same as history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64, same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64, same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Int64, number of unique adresses that initiated swaps transactions in the period.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Liquidity Units in the pool
	Units string `json:"units"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64, same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// Queue defines model for Queue.
type Queue struct {
	Outbound string `json:"outbound"`
	Swap     string `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Daily active users (unique addresses interacting)
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Daily transactions
	DailyTx string `json:"dailyTx"`

	// Monthly active users
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Monthly transactions
	MonthlyTx string `json:"monthlyTx"`

	// Total buying transactions
	TotalAssetBuys string `json:"totalAssetBuys"`

	// Total selling transactions
	TotalAssetSells string `json:"totalAssetSells"`

	// Total RUNE balances
	TotalDepth string `json:"totalDepth"`

	// Total staking transactions
	TotalStakeTx string `json:"totalStakeTx"`

	// Total staked (in RUNE Value)
	TotalStaked string `json:"totalStaked"`

	// Total transactions
	TotalTx string `json:"totalTx"`

	// Total unique swappers & members
	TotalUsers string `json:"totalUsers"`

	// Total (in RUNE Value) of all assets swapped since start
	TotalVolume string `json:"totalVolume"`

	// Total withdrawing transactions
	TotalWithdrawTx string `json:"totalWithdrawTx"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float, the average slip by swap. Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float, the average slip for swaps to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64, the fees collected from swaps to asset denoted in rune
	ToAssetFees string `json:"toAssetFees"`

	// Int64, volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float, the average slip for swaps to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64, the fees collected from swaps to rune
	ToRuneFees string `json:"toRuneFees"`

	// Int64, volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64, the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64, toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Int64 (10^8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), trade slip percentage
	TradeSlip string `json:"tradeSlip"`

	// Int64 (10^8), minimum output amount specified for the swap
	TradeTarget string `json:"tradeTarget"`
}

// Transaction defines model for Transaction.
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction memo
	Memo string `json:"memo"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolLegacyResponse defines model for PoolLegacyResponse.
type PoolLegacyResponse PoolLegacyDetail

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Address of sender or recipient of any in/out transaction related to the action
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action (swap, addLiquidity, withdraw, donate, refund)
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *string `json:"period,omitempty"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *string `json:"status,omitempty"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x97XIbOZLgqyB4d7H2dDVFUh+2FdExJ1nWtO/8obPUvdEx6u0Bq5IsWFUoqoAixe7w",
	"a90L3ItdIAHUJ+qDtNy7s6v50WOxgEQikZnITGQCf4z8JF4lHLgUo9M/RimIVcIF4B9nvmQJF5/Mb+on",
	"P+ESuFT/pKtVxHyqmhx8FglXvwk/hJiqf63SZAWpZBoS1ZDUP5mEGP/x31NYjE5H/+2gwOBA9xcHeuTR",
	"F28ktysYnY5omtKt+ttPMj18AMJP2QrbnY7ecnly5BGexXNISbIgKYgskoLEVPoh40siQyBLtgZOFiyS",
	"kIrxKIcuZMr4cvTlizdK4T5jKQSj07+bsbwc+1/zDsn8M/hy9EX1qCLyCWSWckEoJ4izwsX0J4skdaHx",
	"xRu9TriQlMv9aN1FyRyyC9mbMEl5EgDJWxHLAIjWBaxk+CMTMkm3j45ZGbgLOfxOKA/IKmU+kNA29UZv",
	"aMoZX4pvhVoNvgs7ME3KaP0INJLho2OjwXYxW4gtiJBUZprN3rNgSdNAYfWWz5OMB2dBkIIQ8PgsVh+g",
	"k9Pe8gBbkzPTuspx76iQ8yjx7x4dyxxyJ3p5qxpa7D5jAZPbb8Vx9QFcSP4rk2GQ0g2NBIpFAKtEMFlh",
	"wfegFOAFSMqix1/pCnQXilovEjUYZUo+SGQnRlZpsmYBpCSgkiKTUiJW4LMF80mMkIsZfCvcnVgXijqK",
	"UEHHtq03+gByk6SPz44Gbs8W0qSn6YdERPyS4BuINELdHTclQatsHjGf3ME2x/EqSaJ3sKT+48tNAVpz",
	"pQvna0ml1ooJB7JKkohsmAzJz1PCacz4cmyR/CbotSP2sUHBQItWBVmLHE7jm2CIkHehX04w8Q0p5uS/",
	"MyuquIyBbeiN/k8GGTw6Ngi1c8PAFtXN4tsslF4klKghencZJXMakfM3V9cbuspFUf3xrfawEmwnGyk8",
	"0KT2yDqJshg8sgDArUxEbFVsY188M2LJC2ma/NqqzkWGxglfasFOIaISAiJTyoU13r2aSxJQCa1+xE+c",
	"PRDJYhCSxivk/U0IHDcHM+6GKtNlyYQE5S40fAlvFAJbhu2+ijYzdCNCJdmEzA93G4FxF3RtX5UnX1Ak",
	"KQ0w8oY5YzcFJJdHFoOkyF69G7Bp98UbJZmDLh8z+SejrpSIaCKCmo0wvk6iNQSE8ZaRG+tRh68Nctca",
	"BUrEQBC2KK84E0RNIgI14SRVX+30EydxaApESBZFZAU8wK3MGwHPYuW+isz3QSDn648lB7aOcx3Dm+0K",
	"Cte1DHRDV8olDoLcZB15o40xTUfeKEi4kizlSS8yHjjGrHnZehFMq5xmyNyaUTwtq7lAlViu6ZF7o7MS",
	"au9LvFkV/9wu/YkzKVqFlMZKYSlKFIZspnoQKgRb8oIxtc1IUGZFFmEf9XvRz9jrvWGHGmquOZ5rF2lD",
	"00A05zYvvjrZdJ7woOPzCi2hls81XMtDVQBXwDinkPDgPciU+Y4Z0DWkdAlK9a9BtWxdoDPdkqihLcOu",
	"gXA0YB3sbiBfS8qD+XYn0EL3aYcd0wcWZ/EArN/TB8azeDDWBvIQrN/rpjtgDQGjfAjS2HA4zth8EMpV",
	"wP0YMz6UzorKu9BZQx6EdA10L9YykTQagPONajcYY4Q6BN8q2B5sa1JeR91zCKiDkVwr5ZISxyycguri",
	"KeeaOQXGrYSSqIiQNtTQtVJPUvXOd5RPyjJW3+CBqp16dLqgkYAc9jxJIqC8QcJWUC60Xicuy+4TrFIQ",
	"yr4hlARsydSC+lmaAve3ZqdqmLnmZzdXkGfTyb+9fO6pzQwkOcO2Y6faVA2aUM6wH+Pk9Y9nbz+Mr395",
	"f/7xnTKXY9q/z2mYnkWxjRDDTw2QbA4zrGOF1XL9tqZRBr3Qq7yC1rf87eRoYG+kd6W7psrA7tfYuBzM",
	"r9KyiotXmVd9KBehK8H4BpUYl5CuaSR2iem/zTsZJ2GXzspwa0wSgXglbPpm8raM9yAWqvSWELvYqdGm",
	"ab4ozsZmreoYrf7cuMzlSP2MQZ82GbxKme+w1y+jhErPnJSobcMCTDMOY/J2DGP8px3zwLTItUZjNODB",
	"DYvbXeSbEAgof4TFOOI88+/0kFnFeXbBVpjsQp5PCvMe6ghJU9mL8RyWjGOAZHe8a9xYDFgQyysvfXme",
	"ldXrY9v34PJYvuWC/Icgnoss9ZO4/VVTDdLO2qneH5XDPgqqFZGhOsqJSVNNuZo5HK3lhySA124jYaG0",
	"StkVKkSybJeSIEvtETtyhiWAi9XmNde1y1g1B3HYlkDMpIRgt8ESDHxYUrSOdx3SFBk6P9ZVdpZy7Xef",
	"IPQOthUSYsK4n8RAlsAhpV0TG5O3kjCBH0QWV4MRCwB9Glgh1mModDv8MA2SY/QVtMZI0E60zke9BOjj",
	"pirNPOInfA2pCS1++unDG/VTFIG/K5O1RBEtIYrzTqB+qA8ubCZIHfa+8n9lzokcAci99Pouaz9oW6wu",
	"VE0LlGSmKbIu1vKqessuwRBta4nVoAeuC1TWrIMJalvz/jxvTZqdOc5xIIIWXTXJyG0tOSKw5UVw0dEk",
	"oTQ2EEWoORWuEHKaAYmB5vkpW5Q5rgVMJiTv2nSe1R56veX+EKhjcqk8cPOjSXxR+lIHxn2bAJatLL39",
	"kGJwuTmq8CnnkP7YfXKDMNDvlkbt+m4rukbn0oSrA+XTdVG+kV7TWAODy2ADog7RbUHUk+HMIENQbLE1",
	"9OdK8GQ091M5vZ8dv1ieTKT/sM6OgvUiWonfl3eb+8Oj4Hi9OVktX8xOlotDlyjotayAPL957TyOo5EE",
	"R3yMmcMYsglBhqCkhwnNIySkgph+Xm/Exxutsvlvd7CtoiNlmKSrbD6lQbDhK1jdB6/4/X28pNuT+HM2",
	"2d6/mK3k58yP715RSTcS1kfrI36yuQM43s5O7l9OwPeXk4e7wxf9KYuGtS0mXk71nADuBaxEJxpLdyaU",
	"UF2z36Eyt8OJNzLBHkVHeXJUIKj011Kn9JzT4GcasYDKJP1kjl1zGCcDYSg5E1eQ/gI0rQI4nE4PXw2D",
	"8jrMUm4t7n3QQACfQBZ2+z4EeR2xm4fXiZCVzsP6XoBQi50T9BqqUKazYWCSbB7BNVvy9/ThbFldk9nR",
	"IBhvYiYES/jrLF3XFnVQ/0vKov8N2yXw64iK8CphhvlyOC9mk10gCbZsBTWMLJcZD96zZYr5D1/DKP+L",
	"skjZPnp+1RXaGYKa1z4g3lH/7uPi41yoaagZXQGnkdzuQZg8av0u8e9+Wmlx3IN93+to/XnCg7f8U8ah",
	"Ni/zv11gYbLaZZKeX95UgB3tA+SX5TJIqWDRHvz8gSqf+LVSwX+j4hLccxsGCjbKTH299aMqlOPpy6Nh",
	"IErLfgER3V5G8MDmLGK19T/eARq0Sdd0GJDo6zcCmyVSSu1oo/QwgEoHMr4swbuClCVBTbEPA/bLcqlU",
	"yDsWM7kzlWt7eWnTdeyh9S2xvrk596ry1uPeShw7Q13RtynuVjXcplYbWrKp9Dp0WJtOcukYp67okH2X",
	"LNeEslvAnALjEIBWfu7gyxqXuey5Itn9q52FHNRXewlVSE3EHJb8h3Nn1IcK+Vui6Rv8Vu80PX41ae2l",
	"c3Z+M/lnpU6TV87T9TBJHXhNj49eDjbFG9g2USkP5KRcvTpg/zB4HdTOcfAGgL0D4e2oDOZNJy7NMJiz",
	"ncs/zRu+HlhmltdgtAZvb7nzLK801s+YDNt3RI8pEsV4jGPMsmvcMx/DEjp1e57I0Jz5PcuE7aLPC6m0",
	"cBHGc4wna+j6Z0yCtAFa94S+5ekUh46lAFmK7Poh5UsQ5NmmVCvzfU615ztF2b79oViRODmU32z7XfnN",
	"9tuF18o07GU3Uua2W97DbgXoOsfZL5ws0iRu57hhh7FNKfMcYt4gT31dNAu6dFi1IqqhUlqOBt4xIfPE",
	"9VLdUbNYShAWAJdswSDQye1FbLeI7AxSlhpV90mBMyW3fb42gu7IejgLAmhPQtOMZVIPVMtKCHy+tXVg",
	"bdkPZ0UI0RX7NhQhmYBAQSvyclsh2qI6PgjnGncOwzygEi5ZKnpo46g5UPAXqqcWNpNiXFPKXUkRamhl",
	"du01srJS9h14YHo1Eq+eWS1DKskcosQqms5VdJ+FKA4lKYg8DRsPdFJYKJGSSVtSyhDuRTW1I/Ma2G7e",
	"1Xk5O7Gu6jKUc11qdQjW7kOi8kxqQtlY9TJNvbJ6qE+gIYsNoamzcrtuqlqPVbq8Nzn6OcKlKP2cz6eL",
	"z7Po/vPLYJ0er7J44Yf+Cy6jxX0wW5/8Hjzcbz7DZnE88vorP9oLDyqVE33XILhKGb7kpRU9vT9hq3I/",
	"LN4YUMVV7pOXdvT0s4tX9P3iWCNb9uq8IUKnA1cXsJfSumNHEosRhg+5DaUzj8mHtpTqeoZKZ1Joua1J",
	"OClVNXTnkxZNi1SVs6tfWrP7nk3Jd+RZUWRB/qKPH8UVpO8TLsODWqL28+fk38h0Rr6fduro/jGFpHfQ",
	"Oai+raFIDEITont8Dg8SY1Q9x62qna2TU+a1DfM4twKcPMZkkB2CpEs/hkBSiE3FpDXfUS/SHAx5xrgZ",
	"83nboHi8f0l9maROnhVFGrpDK+U1rSZbneh2OxaaqZ67SIEd7ENnZYHaRyGwcfqO7BpM0Vxha+UsKIu2",
	"UtjVgPwJMCLSl7QDC/SkbOu+Xaosf40sk7KOqS1KU484iNqkSW0uTZ5uZ8om51R0QE08f23Xpe7UJ3Qx",
	"koXyj/G+AJ0nJkTiM1tOSbkp7xuTjxzKLYk+AE+XEBSJS64KxKG+R1tmvqKtI9M1mB0fT181J2U+lO4Y",
	"qO7h9YP25cMmWBxmKUxWy+OF+i17ONzGr/jkZHbyIrpLQRwf/b75HB75LydHL+H38PPxZHZ0v3UaXTwJ",
	"2o04LAbPo3huEyNM0ulktp3Eh9lKLifrdRbANpxM0tmC//5isrl/Ebzcvoiz2dIZjgB/NTs+uZs2B88/",
	"/btQpiaCZTKVsfbydXUyM6qhoYE/5BsHP5XuW3C7p05t+vXp+uM/N19/3Lr7dezkNof3ClIfuFT//IVB",
	"FJwSynlGlbsks5QTEJLFqCN04AbdwA3AnTApqx6R9E59wYVRGgGjQMrZQr+Q6kjQ+Ftk/o9bAnXOMuub",
	"EPBOJLBOoILgERgvx+RsTVlE5xF4aidcQuCEnHV6r7ltTtDf6cVT33owO+qevPbadFss1dvQVQ4bF2N2",
	"FGr9HWhvDokUAE+0a45/jweXXxVYDateKDitVKydtZYqly/0GCre5WtT3EJeufPlkURd0BgIFaRoU8Qg",
	"D9RM3d5CtkV10GJ3WaAyKVoNBHsJYGS2F6yyAcjBnoMINLWGjTEM6HXEVkNRN+1Ul4HQbx6Gwtbh3P0I",
	"0xYpdw8xAOY/hX5eoeR1isfsL7liGDrtYZwsaWT4WKm8wWtlBujnYgt/IMxBTEx3496Vvm3pDoIebJsn",
	"F0PBD5AORd5cNHamdUtE1wLXMdyBsDqPozxiYebiSL4jAqIoP6ZpAnWbWxXVjtvYEAw7jBULcCdRUKgP",
	"2yvUDj54URTYYRKmwOZbxT5j9AtZPsRAoAO3CgV2x51CQR+0VSjYpZ1iZ7r07xSlEYbAVAri5qGHSRrH",
	"mINBp6IHdMbZfQY6WL4TaMaXe+D9Hamctg4czGnx5xrO3IQ6ANKGrlbtJKkpInNF2QHa5KeaTtcawuu2",
	"QmocoYsynWPgttUKu9+jcOj8giB/XWFG2Q/a+G9NGuhd0x3Xr8URyZ2JlfEzWr2Rwkopb0lls60imZW9",
	"purwVK33hopurl6dY2oWaV3t1Pfkhnnc1IJN66NmqNe1cd0EqjsPjR2iYZSVXbq6iVLTR02uaIh+Tc20",
	"OYXlWye/IherLjZ52PQ3kwx06kr42D8ha9cR222VbxmQ+ve/P6JkGbcO51Z55Z7/VeNc3yzM1bZDPf7e",
	"VOw4+4BtF5tm3GBH/nIAaB9mP7pUtpA20J01652QTRF1G+A9qV7u6wReM8J3Jnu9f+sg+xG96NkKeC+S",
	"5x1bwe5J8FLXtlPSvRC2/dwB7app3ws8Av7MDmDuRf+rUjA/XH38+O55+xgVs7g/sVV3ItS+CoBJYIwz",
	"qY8rdRC8cvep1ZZowrakve4dv98/V7ffOqjnlu6XrLvLSG1M1meIV6L+rdZ4ZqzvhgapMnhpP6hp16rY",
	"l/cjJzM5twCXfqoaIVW9W9EIZWEr28KPlz/clDuXWayvG28Yw/bkvVqEMmnbdHub1XOn9ZW++SguzGq5",
	"ZA0UeTUXYcDLB9gUMaEicd52qH7Pk1FNylvv4XMJeA7bNaHiOnXHlRYs2uokqp+ESSisPU2jWthMp0y1",
	"Ic9yBWY1GBqLqg1fPnfn5rJoe/PQBr12eXnzqtKEy7AHz/e6TQXTDlguZCyIPnR05pkSr/Ns6zJS9Y1O",
	"2RZTrQYDu4YoaoWm3NrB4Fqs8ZsiR3ZOI8r97mtWlSPcio5xFwaho13sLlAQYOoZovYzjTJ43gqsHadB",
	"uLRwj4Zg+NpGPchtNpnMTvInUtpgtu1dGmhtYrYGArcYYcYKiGDcR9cmla3j/GsejWgby6ri/qVpXNdS",
	"0wOFzDrFryxHFcoWq1QlTpUVKnzaEKimUNSYskkPt9qr3iPaUH4XsKBZJG2AJqtd1/KGK2eyXw83wTix",
	"Kb0YsX9JYwnKztWM5b57FzI6ERia69DAoJnwUG/Sdl16p1OG8QYTGsHnNuZbFLQxOWdLY1+HdK3LLdC0",
	"3JinKQQRsZJObPNn1/79GUV4O0QUGlRU9olxThKtv8a3fCeKuj2XQeEH34aP9GAYeMconcVl3+gDFh4B",
	"iNKNeAi8OtNyzlFq0mH3C0nUs52aMxk21tAIRfcyYszzkVaxP5zhWkQ9ZYPKnuGM3jXshr3PilXQHrZi",
	"eQSxvYiplLrzHekN8/QFTUq3aKrFq1FoKM491KkmB31XPQJ+Vhvk+Z7VrZ0+dDU22+2Z122SQV7yXj54",
	"2+454J0Wc8lLV9myrszTMXWbvm6OPqu3f7YUme/pwcqUBi3qxuB3TgUTZIW3gHhk8j1eUOORTQgpEPzj",
	"h+lk8j+eewRhaZW0ys8vnFyoGt6oOfZe7m8eSCBJJleZPbKxTy+aDH+UCh0H2MXBrqxOmRJVBF3LXn6a",
	"yXHLY/5RP13mtd8lWHtlDHhQKfFr3hho3xToK1gwRmScdOOHLVwr9PD2orsnC0hIRTgm10kM1eDmM5H5",
	"oWJe97tPseISE67keFON1r3PSUy3erui5HdIE4J3/vcnAyOyZrblOwM1sVzr16j3c2ThbuMYpLbt62/7",
	"+ixWfuD30/EEXcpD/wf8PyDT8eS5R1j+RFaYbNTktjGW9VBdKV+6QGBDxZhMzPWfqKGiLSmaO9M7lTwW",
	"t1h9pcwWgooHcOh0YhFZsuGQipCtivLbr6iVbn+KKoU4WdvtvestqoJqj6kBu5+v8kp8UKV8dUT349qM",
	"LxL7QCH19aU9MWYMjAJYi/+ZV9yMk1RH1RpHo/ZG2CtdGnN29ZbcZ5AyEOTmx4+fXut6HR4Qyrf62k9B",
	"IsbvICBrRpFu52yR/r//K6R5jRpWNMUAn77RS4kynSeZ1OJoyqhkQuZAUqABxgrtOSxqW1Olg/G4MTow",
	"CqsVTfHko6QhYA1cmguk1eJWEVYeIR6V4G3ihKKX873Qc7OXzSpEYnqn7+v4PoCVUpBc5jQAKrbjnEhB",
	"AoLwRJIwiQLip0yiyJWmOiY3SR7b1FdS2EcmFU760jJ48ExcVIRJFgU42raEfsBS8GW0Rc3EJMYWmgs1",
	"8kZrSIVey9l4Mp58T6NVSMczfERwBZyu2Oh0dKg+qT2CyhB592A9Oyi9Oe/cJLFCLn9IL8pfj5QhsNT5",
	"huSYnPHSU33Fze3zLT6NmqQkTlK45cz1BmN+e4ciHg+UbaJBlVI3lP7VDGE3F7q1Msy4GuSWm1HcO8OY",
	"fDIP39MUyIouGbcYYmgtWZDjyZhc6rfnEfwcCL75CcEtl4lZKQsO3Rql1PXNbcHodPQ3kGfFm5o0pTFI",
	"jB/+vVHYau40UE6C3pYTRVifrRiYVwT4ljB+gLJTYvu2Nx/3LddnChucmFI6NMboSlGilr9u2tgjG6r4",
	"oo71wwBkZ5cns6OTwxcXb6YvXp2cHJ+fHR7OZucvT44uzl9dHk4mk+nlxeGL86M3k4vZ7GxyfvLm9ZuT",
	"s+PzyYuXF2fnRy0zkA8s2A39M761Phoerwqlc/LdwRD/Wfktp+eViZx/OB/ffHz/8fz76ZtpG13tIeJw",
	"tD4WskP8JI4pEUrF6twcHX5WMETxICV5poxVr5JM6uXbm0f0I5SeOTWqTgJ71t6vdJLXvEc5fB5G3BR+",
	"EV7N5wZsvxWbpkwzKI/UuCnSPGc2Oj2e5A+e4Y2rzSskO5BKFgu9Ni6s8o+7oNWFya8KlH5iGJXwbDJp",
	"MyvydgdGs+RvE+NbwFkcU2VFmqeABVGqGz8pPR8kfquOv97Q5RLSg48r4GqLPRxP8jfnNU1Kz28kfhYr",
	"dMYulXeR+PpEsTmjWk5sy5DVkURtZhdmcGqUh6RLgc/GlZEd/WrnHOa38Tun3flKuxJ13T9/ttpqAL3l",
	"NuZu7v7fZz1115bl1B/JW2Xj5TMzyQwBrGQoDv5QhvSX3omi+tIJiTyw0ScFwFhszIfxLVf7qn4DjaSw",
	"SlJtsOnUOar/AP08Iha8l65Uu+Um/q4aoE+AV8PLTULiJABxesv/QpRHROwBAMl3RsKkSTkURGk2tLoU",
	"wVkMJkwtxuQS42c8UNZVgH7PhkXRLSdoRap9vthi8jFw/6cK4NgioDYlBw6UCMaXEeA44/FNQgTQVE1S",
	"KP9FSba9YAwelGGXB8wFTl+Bt2BPySoRgiljVlPzlBzHjHskTLLUIwFVqhjgziN4HuaR+4ymElKPbIGm",
	"iCnGPE/J36fj8XQy+XVMLmDBuDI984Sg/MhlTC4S/i/SXolG2KKYIBMEr6blSwSrbOQDmZySBBkEDVfp",
	"6RMAAX7CA5zMlUU/E3QJxjIrrfZfdC7odKLmIk7JP/5qP/4Q0K0+AMUZ/DCd/KPenMxhoTYyhUZXR/2X",
	"TH6Ynkxevpwdn0w0LLztxMKiC7V4alpDgKl2CtzJi5eTlwbchUZJbgDM3U+KyWRiOC7Q53QYD8YooyI9",
	"OkEePtFR+syTzVjx40cebUs3k00nk2Kt0OrUzA7BqWr9jybSNTTdhLjlV8XGhY64WTNcLAWiRAE9pxA4",
	"Ke4atFiQGCQdm6gpluOEcMtx8oV4GP2HtMd9sconfsIXbJlpraj5RcmZnRpKvxYbI1XKyVMeAcr4Qo2i",
	"1q8y8Vev2jig2pFkXLJIUd8B4h+W6817FXoJSz24NegLQ91t0lcegOyx67XWRcUpTPSQCatgbPU708YH",
	"7hvGxLBXiLUaGP32txV8xaU08rOIWk+kMPAC2mbSlW77LAa1L5srHTbyRkqJ4Uk/vmsOcGfP9UfeyCiy",
	"kTdSmsz5tHkd4w9NhYYHJEjCMbnW7vEcchnNdWJ5TocT94TsuzMNEnYYhG9KJ7GK6Y3DJ2oHpWPydkES",
	"JetaxJTDy9bAvYZSKCNasHKLUZ2MOi3KfvSvkcUHTKCGltE2brSUCO2I2F7mbVnKWowiXU2qFJquU7Uy",
	"WTeQym9OddpG0HiHDK2ePPz/ZOY8mTlPZs6TmfNfwsypvyfbY+k82RtP9sY/s71RY/cWkyN/qbTN1mhU",
	"lvQaHeW745XWyt8tUCpDX19ev7b+rbl6k+kDqMJAsVaF6prfK/lkrDwZK0/GypOx8p/ZWGk8+7NrXKZ4",
	"A3hMrGYu5T7q97bZwsprixVjwjZPYRqX2fTPYjU9GU2Djaa62LVYTUX18Gvz6lCb+aQLJ/pMJkxTxVW0",
	"2dWeeake00GVJnHFbJ7Mpiez6clsejKbnswmazaVqwqHWUxGUe9qL42fDKanONOTyQSVItYWa+kaq8Tq",
	"FpJOVD/4wyRjfhmS0UTtcynKz2FCMr+wcdoe0Ss9fIFKlxpRjysPQjkTv8ov/A1NeMWUa+mHLlzG5A2T",
	"IdoxmKekMOek+n6dSctFHCtsOJrz+fTzwyKcLV8e3x+uJzK4Pz5ZcFg/nDz4D9LnoRSxn50cxe4j+CLr",
	"dfgp/F4cUXkYsYUnzHNc9nb4KlOI4bxQS24rruAom772xoIxOcu/qy0eVYEIkw0nCfcB1YNaH/gXYR5N",
	"zV98w7XRlQK1BcOBzAieBqkwqXRURrBaVRyrg9XEmUFvtD/duyleS6DkxZtcu2cTmkoQW6XVmJP5fqE/",
	"7z4f079lPnb0C/vgGM7HPiXSPRsSmSdyPiQBlB5OMUtsFsG5UPbNpD2mo3q2TUZ9qy4N3qL6B/Jav24s",
	"PShqr7E6NWmQ5mZHD5+OsM7l2dUvY+Ka3pW2XzpVHYoUKpXeBPGaBhJ9acaPon/UHFozLIqHV4l+D9VB",
	"bnN5bWtmcbH5FLU/2nK8CYGUGtv1WDCIAlNLjn43bky27y33k1SjHyi5KsIHJEp8U3nzM8M3mkPILdbc",
	"h1caKEhZFAXJprVuI7929T/Q6npNdlbffCkIXS5TWGq/SXWzJDSxA3RV9fVvqHLHt9xcO6KMusOJuRSu",
	"VIeBV/46LXb7sn7TfJ6qPrrnC9XicKL++wr/e3hyjC9bRpHLZt6bb3GJWpgXHzYtmK+DdQ8ifCOlvf4J",
	"P3vk5ykRchsBrrd5LJz6d/jWn0KRSjZnEZPbMbmKgAogMVumVGJlWZmpPOKH4N/d8hK3B+W8ds2kWvr6",
	"OFRj959BC+mZDFtO8mw9VfPBO8PKS7ufNWR3BG2eKIPFvG8o2mjfqxl05ZiJCkRb4xOb2jZmb15vEbP8",
	"Y1PM8gJJff+gvqlWZALLFYNHFa8u0artv917QKdhtIySub7JS9ZisNq+iBqXczUDGUZV7+GPdWiQv2nE",
	"NPB8orpqZfzZ3MXXOd8wi6muQI2pHzKuy1yxutVWv5jazGqxTUuwRnUYVFqz97gNV1S1JZcMua2n1Cav",
	"MD7wy7dmOQlk79WyVSb2Meei7tUjIik8fNPMp1w5Bska0pQFukvMYpY6pTRNHhgExRVe+/BH3rtNFPQg",
	"JcSL8ZqEMeWuv+WOVyuB3prC2MJFQ6/I3MhdmOTWZ/IwgriCVAcFTWms9ZLxGh6dkUIWSpMDl9GWsEUJ",
	"75AKEmeRZKsICMXiZLdNb6ZsMMx9xL3IWwcymMqWPsXwTWorswcfNu2S05TBWltIIKR+vhaLuG25up8m",
	"ypeNIlPx3kWSd/mAe52m2d6DiVCM15z8vb0htbccbGXgYo+SnYznBmhTR/hep/IWOyavr2TdZ+LYc/Ck",
	"9Thfvnz58v8DAAD//zaU93CTvQAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
