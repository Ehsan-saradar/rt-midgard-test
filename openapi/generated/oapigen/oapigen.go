// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Action defines model for Action.
type Action struct {

	// Int64, Unix timestamp for when the action was registered
	Date string `json:"date"`

	// Int64, block height at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status string `json:"status"`

	// Type of action
	Type string `json:"type"`
}

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64, Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64, Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64, Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64, Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64, Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64, Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64, Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64, Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64, Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64, Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Coin defines model for Coin.
type Coin struct {

	// Int64 (10^8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64, Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64, Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64, System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64, Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistoryItemPool defines model for EarningsHistoryItemPool.
type EarningsHistoryItemPool struct {

	// Int64, Share of earnings sent to the pool during the time interval
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses struct {
	Current []InboundAddressesItem `json:"current"`
}

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string `json:"address"`
	Chain   string `json:"chain"`

	// indicate whether this chain has halted
	Halted bool   `json:"halted"`
	PubKey string `json:"pub_key"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                  int64 `json:"AsgardSize"`
	BadValidatorRate            int64 `json:"BadValidatorRate"`
	BlocksPerYear               int64 `json:"BlocksPerYear"`
	ChurnInterval               int64 `json:"ChurnInterval"`
	ChurnRetryInterval          int64 `json:"ChurnRetryInterval"`
	CliTxCost                   int64 `json:"CliTxCost"`
	DesiredValidatorSet         int64 `json:"DesiredValidatorSet"`
	DoubleSignMaxAge            int64 `json:"DoubleSignMaxAge"`
	EmissionCurve               int64 `json:"EmissionCurve"`
	FailKeygenSlashPoints       int64 `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints      int64 `json:"FailKeysignSlashPoints"`
	FundMigrationInterval       int64 `json:"FundMigrationInterval"`
	JailTimeKeygen              int64 `json:"JailTimeKeygen"`
	JailTimeKeysign             int64 `json:"JailTimeKeysign"`
	LackOfObservationPenalty    int64 `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks       int64 `json:"LiquidityLockUpBlocks"`
	MinimumBondInRune           int64 `json:"MinimumBondInRune"`
	MinimumNodesForBFT          int64 `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil    int64 `json:"MinimumNodesForYggdrasil"`
	NativeChainGasFee           int64 `json:"NativeChainGasFee"`
	NewPoolCycle                int64 `json:"NewPoolCycle"`
	ObservationDelayFlexibility int64 `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints          int64 `json:"ObserveSlashPoints"`
	OldValidatorRate            int64 `json:"OldValidatorRate"`
	OutboundTransactionFee      int64 `json:"OutboundTransactionFee"`
	SigningTransactionPeriod    int64 `json:"SigningTransactionPeriod"`
	YggFundLimit                int64 `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock struct {
	Current []LastblockItem `json:"current"`
}

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn string `json:"last_observed_in"`
	LastSignedOut  string `json:"last_signed_out"`
	Thorchain      string `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64 (10^8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64 (10^8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64 (10^8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64 (10^8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64 (10^8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64 (10^8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64, total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64, total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64, total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`
	PoolShareFactor         string `json:"poolShareFactor"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64, Total Rune pooled in all pools
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64, Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NetworkFees defines model for NetworkFees.
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolLegacyDetail defines model for PoolLegacyDetail.
type PoolLegacyDetail struct {
	Asset string `json:"asset"`

	// same as assetDepth from pool/stats
	AssetDepth string `json:"assetDepth"`

	// same as addAssetLiquidityVolume from pool/stats
	AssetStakedTotal string `json:"assetStakedTotal"`

	// same as toAssetCount from pool/stats
	BuyAssetCount string `json:"buyAssetCount"`

	// same as toAssetFees / toAssetCount from pool/stats
	BuyFeeAverage string `json:"buyFeeAverage"`

	// same as toAssetFees from pool/stats
	BuyFeesTotal string `json:"buyFeesTotal"`

	// same as toAssetAverageSlip from pool/stats
	BuySlipAverage string `json:"buySlipAverage"`

	// same as toAssetVolume / toAssetCount from pool/stats
	BuyTxAverage string `json:"buyTxAverage"`

	// same as toAssetVolume from pool/stats
	BuyVolume string `json:"buyVolume"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// same as 2*runeDepth from pool/stats
	PoolDepth string `json:"poolDepth"`

	// same as totalFees / swapCount from pool/stats
	PoolFeeAverage string `json:"poolFeeAverage"`

	// same as totalFees from pool/stats
	PoolFeesTotal string `json:"poolFeesTotal"`

	// same as averageSlip from pool/stats
	PoolSlipAverage string `json:"poolSlipAverage"`

	// same as addLiquidityVolume from pool/stats
	PoolStakedTotal string `json:"poolStakedTotal"`

	// same as swapVolume / swapCount from pool/stats
	PoolTxAverage string `json:"poolTxAverage"`

	// same as units from pool/stats
	PoolUnits string `json:"poolUnits"`

	// Int64, same as buyVolume + sellVolume
	PoolVolume string `json:"poolVolume"`

	// same as assetPrice from pool/stats
	Price string `json:"price"`

	// same as runeDepth from pool/stats
	RuneDepth string `json:"runeDepth"`

	// same as addRuneLiquidityVolume from pool/stats
	RuneStakedTotal string `json:"runeStakedTotal"`

	// same as toRuneCount from pool/stats
	SellAssetCount string `json:"sellAssetCount"`

	// same as toRuneFees / toRuneCount from pool/stats
	SellFeeAverage string `json:"sellFeeAverage"`

	// same as toRuneFees from pool/stats
	SellFeesTotal string `json:"sellFeesTotal"`

	// same as toRuneAverageSlip from pool/stats
	SellSlipAverage string `json:"sellSlipAverage"`

	// same as toRuneVolume / toRuneCount from pool/stats
	SellTxAverage string `json:"sellTxAverage"`

	// same as toRuneVolume from pool/stats
	SellVolume string `json:"sellVolume"`

	// same as addLiquidityCount from pool/stats
	StakeTxCount string `json:"stakeTxCount"`

	// same as uniqueMemberCount from pool/stats
	StakersCount string `json:"stakersCount"`

	// same as addLiquidityCount + withdrawCount from pool/stats
	StakingTxCount string `json:"stakingTxCount"`

	// same as status from pool/stats
	Status string `json:"status"`

	// Int64, same as history/swaps:uniqueSwapperCount
	SwappersCount string `json:"swappersCount"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64, same as swapVolume pool/stats?period=24h
	Volume24h string `json:"volume24h"`

	// same as withdrawCount from pool/stats
	WithdrawTxCount string `json:"withdrawTxCount"`
}

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64, same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64, same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`
	Asset                  string `json:"asset"`

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64, same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Float, same as history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64, same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64, same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float, same as history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64, same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64, same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Int64, number of unique adresses that initiated swaps transactions in the period.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Liquidity Units in the pool
	Units string `json:"units"`

	// Int64, same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64, same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64, same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// Queue defines model for Queue.
type Queue struct {
	Outbound string `json:"outbound"`
	Swap     string `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64 (10^8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64 (10^8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Int64, number of swaps since beginning.
	SwapCount string `json:"swapCount"`

	// Int64, number of swaps in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64, total volume of swaps denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Int64, unique users (addresses) initiating swaps since beginning.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, unique users (addresses) initiating swaps in the last 24 hours.
	UniqueSwapperCount24h string `json:"uniqueSwapperCount24h"`

	// Int64, unique users (addresses) initiating swaps in the last 30 days.
	UniqueSwapperCount30d string `json:"uniqueSwapperCount30d"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64 (10^8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float, the average slip by swap. Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float, the average slip for swaps to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64, the fees collected from swaps to asset denoted in rune
	ToAssetFees string `json:"toAssetFees"`

	// Int64, volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float, the average slip for swaps to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64, the fees collected from swaps to rune
	ToRuneFees string `json:"toRuneFees"`

	// Int64, volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64, the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64, toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Int64 (10^8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), trade slip percentage
	TradeSlip string `json:"tradeSlip"`

	// Int64 (10^8), minimum output amount specified for the swap
	TradeTarget string `json:"tradeTarget"`
}

// Transaction defines model for Transaction.
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction memo
	Memo string `json:"memo"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolLegacyResponse defines model for PoolLegacyResponse.
type PoolLegacyResponse PoolLegacyDetail

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Address of sender or recipient of any in/out transaction related to the action
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action (swap, addLiquidity, withdraw, donate, refund)
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *string `json:"period,omitempty"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *string `json:"status,omitempty"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"fdTixAAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
