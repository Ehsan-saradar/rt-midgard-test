// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Action defines model for Action.
type Action struct {

	// Int64, Unix timestamp for when the action was registered
	Date string `json:"date"`

	// Int64, block height at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status string `json:"status"`

	// Type of action
	Type string `json:"type"`
}

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64, Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64, Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64, Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64, Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64, Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64, Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64, Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64, Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64, Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64, Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Coin defines model for Coin.
type Coin struct {

	// Int64 (10^8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64, Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64, Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64, System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64, Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistoryItemPool defines model for EarningsHistoryItemPool.
type EarningsHistoryItemPool struct {

	// Int64, Share of earnings sent to the pool during the time interval
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses struct {
	Current []InboundAddressesItem `json:"current"`
}

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string `json:"address"`
	Chain   string `json:"chain"`

	// indicate whether this chain has halted
	Halted bool   `json:"halted"`
	PubKey string `json:"pub_key"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                  int64 `json:"AsgardSize"`
	BadValidatorRate            int64 `json:"BadValidatorRate"`
	BlocksPerYear               int64 `json:"BlocksPerYear"`
	ChurnInterval               int64 `json:"ChurnInterval"`
	ChurnRetryInterval          int64 `json:"ChurnRetryInterval"`
	CliTxCost                   int64 `json:"CliTxCost"`
	DesiredValidatorSet         int64 `json:"DesiredValidatorSet"`
	DoubleSignMaxAge            int64 `json:"DoubleSignMaxAge"`
	EmissionCurve               int64 `json:"EmissionCurve"`
	FailKeygenSlashPoints       int64 `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints      int64 `json:"FailKeysignSlashPoints"`
	FundMigrationInterval       int64 `json:"FundMigrationInterval"`
	JailTimeKeygen              int64 `json:"JailTimeKeygen"`
	JailTimeKeysign             int64 `json:"JailTimeKeysign"`
	LackOfObservationPenalty    int64 `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks       int64 `json:"LiquidityLockUpBlocks"`
	MinimumBondInRune           int64 `json:"MinimumBondInRune"`
	MinimumNodesForBFT          int64 `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil    int64 `json:"MinimumNodesForYggdrasil"`
	NativeChainGasFee           int64 `json:"NativeChainGasFee"`
	NewPoolCycle                int64 `json:"NewPoolCycle"`
	ObservationDelayFlexibility int64 `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints          int64 `json:"ObserveSlashPoints"`
	OldValidatorRate            int64 `json:"OldValidatorRate"`
	OutboundTransactionFee      int64 `json:"OutboundTransactionFee"`
	SigningTransactionPeriod    int64 `json:"SigningTransactionPeriod"`
	YggFundLimit                int64 `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock struct {
	Current []LastblockItem `json:"current"`
}

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn string `json:"last_observed_in"`
	LastSignedOut  string `json:"last_signed_out"`
	Thorchain      string `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64 (10^8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64 (10^8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64 (10^8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64 (10^8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64 (10^8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64 (10^8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64, total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64, total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64, total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`
	PoolShareFactor         string `json:"poolShareFactor"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64, Total Rune pooled in all pools
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64, Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NetworkFees defines model for NetworkFees.
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolLegacyDetail defines model for PoolLegacyDetail.
type PoolLegacyDetail struct {
	Asset string `json:"asset"`

	// same as assetDepth from pool/stats
	AssetDepth string `json:"assetDepth"`

	// same as toAssetCount from pool/stats
	BuyAssetCount string `json:"buyAssetCount"`

	// same as toAssetFees / toAssetCount from pool/stats
	BuyFeeAverage string `json:"buyFeeAverage"`

	// same as toAssetFees from pool/stats
	BuyFeesTotal string `json:"buyFeesTotal"`

	// same as toAssetAverageSlip from pool/stats
	BuySlipAverage string `json:"buySlipAverage"`

	// same as toAssetVolume / toAssetCount from pool/stats
	BuyTxAverage string `json:"buyTxAverage"`

	// same as toAssetVolume from pool/stats
	BuyVolume string `json:"buyVolume"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// same as 2*runeDepth from pool/stats
	PoolDepth string `json:"poolDepth"`

	// same as totalFees / swapCount from pool/stats
	PoolFeeAverage string `json:"poolFeeAverage"`

	// same as totalFees from pool/stats
	PoolFeesTotal string `json:"poolFeesTotal"`

	// same as averageSlip from pool/stats
	PoolSlipAverage string `json:"poolSlipAverage"`

	// same as addLiquidityVolume from pool/stats
	PoolStakedTotal string `json:"poolStakedTotal"`

	// same as swapVolume / swapCount from pool/stats
	PoolTxAverage string `json:"poolTxAverage"`

	// same as units from pool/stats
	PoolUnits string `json:"poolUnits"`

	// Int64, same as buyVolume + sellVolume
	PoolVolume string `json:"poolVolume"`

	// same as assetPrice from pool/stats
	Price string `json:"price"`

	// same as runeDepth from pool/stats
	RuneDepth string `json:"runeDepth"`

	// same as toRuneCount from pool/stats
	SellAssetCount string `json:"sellAssetCount"`

	// same as toRuneFees / toRuneCount from pool/stats
	SellFeeAverage string `json:"sellFeeAverage"`

	// same as toRuneFees from pool/stats
	SellFeesTotal string `json:"sellFeesTotal"`

	// same as toRuneAverageSlip from pool/stats
	SellSlipAverage string `json:"sellSlipAverage"`

	// same as toRuneVolume / toRuneCount from pool/stats
	SellTxAverage string `json:"sellTxAverage"`

	// same as toRuneVolume from pool/stats
	SellVolume string `json:"sellVolume"`

	// same as addLiquidityCount from pool/stats
	StakeTxCount string `json:"stakeTxCount"`

	// same as uniqueMemberCount from pool/stats
	StakersCount string `json:"stakersCount"`

	// same as addLiquidityCount + withdrawCount from pool/stats
	StakingTxCount string `json:"stakingTxCount"`

	// same as status from pool/stats
	Status string `json:"status"`

	// Int64, same as history/swaps:uniqueSwapperCount
	SwappersCount string `json:"swappersCount"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64, same as swapVolume pool/stats?period=24h
	Volume24h string `json:"volume24h"`

	// same as withdrawCount from pool/stats
	WithdrawTxCount string `json:"withdrawTxCount"`
}

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64, same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`
	Asset              string `json:"asset"`

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64, same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Float, same as history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64, same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64, same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float, same as history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64, same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64, same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Int64, number of unique adresses that initiated swaps transactions in the period.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Liquidity Units in the pool
	Units string `json:"units"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64, same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// Queue defines model for Queue.
type Queue struct {
	Outbound string `json:"outbound"`
	Swap     string `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Daily active users (unique addresses interacting)
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Daily transactions
	DailyTx string `json:"dailyTx"`

	// Monthly active users
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Monthly transactions
	MonthlyTx string `json:"monthlyTx"`

	// Total buying transactions
	TotalAssetBuys string `json:"totalAssetBuys"`

	// Total selling transactions
	TotalAssetSells string `json:"totalAssetSells"`

	// Total RUNE balances
	TotalDepth string `json:"totalDepth"`

	// Total staking transactions
	TotalStakeTx string `json:"totalStakeTx"`

	// Total staked (in RUNE Value)
	TotalStaked string `json:"totalStaked"`

	// Total transactions
	TotalTx string `json:"totalTx"`

	// Total unique swappers & members
	TotalUsers string `json:"totalUsers"`

	// Total (in RUNE Value) of all assets swapped since start
	TotalVolume string `json:"totalVolume"`

	// Total withdrawing transactions
	TotalWithdrawTx string `json:"totalWithdrawTx"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float, the average slip by swap. Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float, the average slip for swaps to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64, the fees collected from swaps to asset denoted in rune
	ToAssetFees string `json:"toAssetFees"`

	// Int64, volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float, the average slip for swaps to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64, the fees collected from swaps to rune
	ToRuneFees string `json:"toRuneFees"`

	// Int64, volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64, the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64, toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Int64 (10^8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), trade slip percentage
	TradeSlip string `json:"tradeSlip"`

	// Int64 (10^8), minimum output amount specified for the swap
	TradeTarget string `json:"tradeTarget"`
}

// Transaction defines model for Transaction.
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction memo
	Memo string `json:"memo"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolLegacyResponse defines model for PoolLegacyResponse.
type PoolLegacyResponse PoolLegacyDetail

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Address of sender or recipient of any in/out transaction related to the action
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action (swap, addLiquidity, withdraw, donate, refund)
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *string `json:"period,omitempty"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *string `json:"status,omitempty"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP//QtVfvNK/AAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
