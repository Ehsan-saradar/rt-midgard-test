// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {
	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still
	// pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still
// pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {
	// Int64, amount of liquidity units assigned to the member as result of the liquidity
	// deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// Balance defines model for Balance.
type Balance struct {
	Coins Coins `json:"coins"`

	// full timestamp (nanoseconds since 1970) of the block at which the returned balance snapshot was valid
	Date string `json:"date"`

	// height of the block at which the returned balance snapshot was valid
	Height string `json:"height"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {
	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Represents a digital currency amount
type Coin struct {
	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {
	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, The liquidity unit value index. Sqrt(assetDepth * runeDepth)/liquidity units
	Luvi string `json:"luvi"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {
	// Int64(e8), the amount of Asset in the pool at the end of the interval at time endTime
	EndAssetDepth string `json:"endAssetDepth"`

	// Int64, Liquidity Units in the pool at the end of the interval at time endTime
	EndLPUnits string `json:"endLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval at time endTime
	EndRuneDepth string `json:"endRuneDepth"`

	// Int64, Synth Units in the pool at the end of the interval at time endTime
	EndSynthUnits string `json:"endSynthUnits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, The liquidity unit value index increase between startTime and endTime
	LuviIncrease string `json:"luviIncrease"`

	// Float, The impermanent loss between the first and last depth item
	PriceShiftLoss string `json:"priceShiftLoss"`

	// Int64(e8), the amount of Asset in the pool at the start of the interval at time
	// startTime
	StartAssetDepth string `json:"startAssetDepth"`

	// Int64, Liquidity Units in the pool at the start of the interval at time startTime
	StartLPUnits string `json:"startLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the start of the interval at time startTime
	StartRuneDepth string `json:"startRuneDepth"`

	// Int64, Synth Units in the pool at the start of the interval at time startTime
	StartSynthUnits string `json:"startSynthUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {
	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of
	// liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {
	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// FullMemberDetails defines model for FullMemberDetails.
type FullMemberDetails struct {
	// List details of all the liquidity providers identified with the given address
	Pools []FullMemberPool `json:"pools"`
}

// FullMemberPool defines model for FullMemberPool.
type FullMemberPool struct {
	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total units of the pool
	PoolUnits string `json:"poolUnits"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`

	// Int64, total units that belong the the member
	SharedUnits string `json:"sharedUnits"`
}

// Health defines model for Health.
type Health struct {
	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync         bool     `json:"inSync"`
	LastAggregated HeightTS `json:"lastAggregated"`
	LastCommitted  HeightTS `json:"lastCommitted"`
	LastFetched    HeightTS `json:"lastFetched"`
	LastThorNode   HeightTS `json:"lastThorNode"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// HeightTS defines model for HeightTS.
type HeightTS struct {
	// Block height
	Height int `json:"height"`

	// Block timestamp (seconds since epoch)
	Timestamp int `json:"timestamp"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string  `json:"address"`
	Chain   string  `json:"chain"`
	GasRate *string `json:"gas_rate,omitempty"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                    int64  `json:"AsgardSize"`
	BadValidatorRate              int64  `json:"BadValidatorRate"`
	BadValidatorRedline           int    `json:"BadValidatorRedline"`
	BlocksPerYear                 int64  `json:"BlocksPerYear"`
	ChurnInterval                 int64  `json:"ChurnInterval"`
	ChurnRetryInterval            int64  `json:"ChurnRetryInterval"`
	DesiredValidatorSet           int64  `json:"DesiredValidatorSet"`
	DoubleSignMaxAge              int64  `json:"DoubleSignMaxAge"`
	EmissionCurve                 int64  `json:"EmissionCurve"`
	FailKeygenSlashPoints         int64  `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints        int64  `json:"FailKeysignSlashPoints"`
	FullImpLossProtectionBlocks   int64  `json:"FullImpLossProtectionBlocks"`
	FundMigrationInterval         int64  `json:"FundMigrationInterval"`
	IncentiveCurve                int64  `json:"IncentiveCurve"`
	JailTimeKeygen                int64  `json:"JailTimeKeygen"`
	JailTimeKeysign               int64  `json:"JailTimeKeysign"`
	LackOfObservationPenalty      int64  `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks         int64  `json:"LiquidityLockUpBlocks"`
	MaxAvailablePools             int64  `json:"MaxAvailablePools"`
	MaxSwapsPerBlock              int64  `json:"MaxSwapsPerBlock"`
	MinRunePoolDepth              int64  `json:"MinRunePoolDepth"`
	MinSlashPointsForBadValidator int64  `json:"MinSlashPointsForBadValidator"`
	MinSwapsPerBlock              int64  `json:"MinSwapsPerBlock"`
	MinimumBondInRune             int64  `json:"MinimumBondInRune"`
	MinimumNodesForBFT            int64  `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil      int64  `json:"MinimumNodesForYggdrasil"`
	NativeTransactionFee          int64  `json:"NativeTransactionFee"`
	NewPoolCycle                  *int64 `json:"NewPoolCycle,omitempty"`
	ObservationDelayFlexibility   int64  `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints            int64  `json:"ObserveSlashPoints"`
	OldValidatorRate              int64  `json:"OldValidatorRate"`
	OutboundTransactionFee        int64  `json:"OutboundTransactionFee"`
	PoolCycle                     int64  `json:"PoolCycle"`
	SigningTransactionPeriod      int64  `json:"SigningTransactionPeriod"`
	VirtualMultSynths             int64  `json:"VirtualMultSynths"`
	YggFundLimit                  int64  `json:"YggFundLimit"`
}

// LPDetail defines model for LPDetail.
type LPDetail struct {
	// asset address
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, total asset earned
	AssetEarned string `json:"assetEarned"`

	// Float, current asset price in rune
	AssetPrice string `json:"assetPrice"`

	// Float, current asset price in usd
	AssetPriceUsd string `json:"assetPriceUsd"`

	// pool name
	Pool string `json:"pool"`

	// Int64(e8), pool units
	PoolUnits string `json:"poolUnits"`

	// Int64(e8), total block reward
	Rewards string `json:"rewards"`

	// rune address
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// Float, total rune earned
	RuneEarned string `json:"runeEarned"`

	// Int64(e8), current rune price in usd
	RunePriceUsd string `json:"runePriceUsd"`

	// Int64(e8), share units
	SharedUnits string        `json:"sharedUnits"`
	StakeDetail []StakeDetail `json:"stakeDetail"`

	// Int64(e8), total rune price in usd
	UsdEarned      string        `json:"usdEarned"`
	WithdrawDetail []StakeDetail `json:"withdrawDetail"`
}

// LPDetails defines model for LPDetails.
type LPDetails []LPDetail

// Lastblock defines model for Lastblock.
type Lastblock []LastblockItem

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn int64  `json:"last_observed_in"`
	LastSignedOut  int64  `json:"last_signed_out"`
	Thorchain      int64  `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {
	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {
	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {
	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and
	// nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each
// outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {
	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// OHLCVHistory defines model for OHLCVHistory.
type OHLCVHistory struct {
	Intervals OHLCVHistoryIntervals `json:"intervals"`
	Meta      OHLCVHistoryMeta      `json:"meta"`
}

// OHLCVHistoryIntervals defines model for OHLCVHistoryIntervals.
type OHLCVHistoryIntervals []OHLCVHistoryItem

// OHLCVHistoryItem defines model for OHLCVHistoryItem.
type OHLCVHistoryItem struct {
	// Float, close price of asset in USD
	ClosePrice string `json:"closePrice"`

	// Int64, The end time of bucket in unix timestamp
	CloseTime string `json:"closeTime"`

	// Float, high price of asset in USD
	HighPrice string `json:"highPrice"`

	// Int64, The high time of bucket in unix timestamp
	HighTime string `json:"highTime"`

	// Int64, Liquidty is USD
	Liquidity string `json:"liquidity"`

	// Float, low price of asset in USD
	LowPrice string `json:"lowPrice"`

	// Int64, The low time of bucket in unix timestamp
	LowTime string `json:"lowTime"`

	// Float, open price of asset in USD
	OpenPrice string `json:"openPrice"`

	// Int64, The beginning time of bucket in unix timestamp
	OpenTime string `json:"openTime"`

	// Int64, Volume in USD
	Volume string `json:"volume"`
}

// OHLCVHistoryMeta defines model for OHLCVHistoryMeta.
type OHLCVHistoryMeta struct {
	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// ObservedChain defines model for ObservedChain.
type ObservedChain struct {
	Chain  string `json:"chain"`
	Height int    `json:"height"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	// Float, Also called APR. Annual return estimated linearly (not compounded) from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// Due to Impermanent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	// It includes synth mint or burn.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {
	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Float, Also called APR. Annual return estimated linearly (not compounded) from
	// a period of typically the last 30 or 100 days (configurable by the period parameter,
	// default is 30). E.g. 0.1 means 10% yearly return.
	// Due to Impermanent Loss and Synths this might be negative, but given Impermanent
	// Loss Protection for 100+ day members, frontends might show MAX(APR, 0).
	AnnualPercentageRate string `json:"annualPercentageRate"`
	Asset                string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, MAX(AnnualPercentageRate, 0)
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// PreflightStatus defines model for PreflightStatus.
type PreflightStatus struct {
	Code   int    `json:"code"`
	Reason string `json:"reason"`
	Status string `json:"status"`
}

// ProxiedNode defines model for ProxiedNode.
type ProxiedNode struct {
	ActiveBlockHeight int    `json:"active_block_height"`
	Bond              string `json:"bond"`
	BondAddress       string `json:"bond_address"`
	CurrentAward      string `json:"current_award"`
	ForcedToLeave     bool   `json:"forced_to_leave"`
	IpAddress         string `json:"ip_address"`
	Jail              struct {
		NodeAddress *string `json:"node_address,omitempty"`
	} `json:"jail"`
	LeaveHeight     int             `json:"leave_height"`
	NodeAddress     string          `json:"node_address"`
	ObserveChains   []ObservedChain `json:"observe_chains"`
	PreflightStatus PreflightStatus `json:"preflight_status"`
	PubKeySet       struct {
		Ed25519   string `json:"ed25519"`
		Secp256k1 string `json:"secp256k1"`
	} `json:"pub_key_set"`
	RequestedToLeave    bool     `json:"requested_to_leave"`
	SignerMembership    []string `json:"signer_membership"`
	SlashPoints         int      `json:"slash_points"`
	Status              string   `json:"status"`
	StatusSince         int      `json:"status_since"`
	ValidatorConsPubKey string   `json:"validator_cons_pub_key"`
	Version             string   `json:"version"`
}

// ProxiedNodes defines model for ProxiedNodes.
type ProxiedNodes []ProxiedNode

// Queue defines model for Queue.
type Queue struct {
	Internal int `json:"internal"`
	Outbound int `json:"outbound"`
	Swap     int `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {
	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// StatsData defines model for StatsData.
type StatsData struct {
	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, unique users (addresses) initiating swaps in the last 24 hours.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, unique users (addresses) initiating swaps in the last 30 days.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps (including synths) since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps (including synths) in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps (including synths) in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps (including synths) denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Synth to Rune since beginning.
	SynthBurnCount string `json:"synthBurnCount"`

	// Int64, number of swaps from Rune to Synth since beginning.
	SynthMintCount string `json:"synthMintCount"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Int64, unique users (addresses) initiating swaps since beginning.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {
	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolumeUsd string `json:"totalVolumeUsd"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {
	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {
	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {
	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {
	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of
	// the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity
	// pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at
	// the end of the interval.
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {
	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the
	// native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {
	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means
	// totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership
	// withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// StakeDetail defines model for stakeDetail.
type StakeDetail struct {
	// Int64(e8), asset amount
	AssetAmount string `json:"assetAmount"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, asset price in rune
	AssetPrice string `json:"assetPrice"`

	// Float, asset price in usd
	AssetPriceUsd string `json:"assetPriceUsd"`

	// Float, withdraw percentage
	BasisPoint string `json:"basisPoint"`

	// Int64, nano timestamp of the block
	Date string `json:"date"`

	// Int64, block height
	Height string `json:"height"`

	// Int64, total number of pool units
	PoolUnits string `json:"poolUnits"`

	// Int64(e8), rune amount
	RuneAmount string `json:"runeAmount"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// Float, rune price in usd
	RunePriceUsd string `json:"runePriceUsd"`

	// Int64, total number of units changed
	SharedUnits string `json:"sharedUnits"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// BalanceResponse defines model for BalanceResponse.
type BalanceResponse Balance

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// FullMembersResponse defines model for FullMembersResponse.
type FullMembersResponse FullMemberDetails

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LPDetailsResponse defines model for LPDetailsResponse.
type LPDetailsResponse LPDetails

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// OHLCVHistoryResponse defines model for OHLCVHistoryResponse.
type OHLCVHistoryResponse OHLCVHistory

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ProxiedNodesResponse defines model for ProxiedNodesResponse.
type ProxiedNodesResponse ProxiedNodes

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {
	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// Affiliate address of the action (swap)
	Affiliate *string `json:"affiliate,omitempty"`
	AssetType *string `json:"assetType,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`
}

// GetBalanceParams defines parameters for GetBalance.
type GetBalanceParams struct {
	// Unix timestamp as seconds since 1970 (if provided, height must not be provided)
	Timestamp *int64 `json:"timestamp,omitempty"`

	// Block height (if provided, timestamp must not be provided)
	Height *int64 `json:"height,omitempty"`
}

// GetFullMembersAdressesParams defines parameters for GetFullMembersAdresses.
type GetFullMembersAdressesParams struct {
	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {
	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {
	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {
	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetOHLCVHistoryParams defines parameters for GetOHLCVHistory.
type GetOHLCVHistoryParams struct {
	// Interval of calculations
	Interval *GetOHLCVHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetOHLCVHistoryParamsInterval defines parameters for GetOHLCVHistory.
type GetOHLCVHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {
	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTSSwapHistoryParams defines parameters for GetTSSwapHistory.
type GetTSSwapHistoryParams struct {
	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetTSSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTSSwapHistoryParamsInterval defines parameters for GetTSSwapHistory.
type GetTSSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {
	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetLPDetailParams defines parameters for GetLPDetail.
type GetLPDetailParams struct {
	// Return information for given pools
	Pools *string `json:"pools,omitempty"`
}

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {
	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolParams defines parameters for GetPool.
type GetPoolParams struct {
	// Specifies the base interval from which APY is extrapolated.
	// Default is 30d.
	Period *GetPoolParamsPeriod `json:"period,omitempty"`
}

// GetPoolParamsPeriod defines parameters for GetPool.
type GetPoolParamsPeriod string

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {
	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {
	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`

	// Specifies the base interval from which annualPercentageRate and poolAPY is extrapolated.
	// Default is 30d.
	Period *GetPoolsParamsPeriod `json:"period,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// GetPoolsParamsPeriod defines parameters for GetPools.
type GetPoolsParamsPeriod string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"169f/38AAAD//9I3Zhx4PQEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
