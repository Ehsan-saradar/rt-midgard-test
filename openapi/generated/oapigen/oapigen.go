// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {

	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Represents a digital currency amount
type Coin struct {

	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {

	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string  `json:"address"`
	Chain   string  `json:"chain"`
	GasRate *string `json:"gas_rate,omitempty"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                    int64  `json:"AsgardSize"`
	BadValidatorRate              int64  `json:"BadValidatorRate"`
	BadValidatorRedline           int    `json:"BadValidatorRedline"`
	BlocksPerYear                 int64  `json:"BlocksPerYear"`
	ChurnInterval                 int64  `json:"ChurnInterval"`
	ChurnRetryInterval            int64  `json:"ChurnRetryInterval"`
	DesiredValidatorSet           int64  `json:"DesiredValidatorSet"`
	DoubleSignMaxAge              int64  `json:"DoubleSignMaxAge"`
	EmissionCurve                 int64  `json:"EmissionCurve"`
	FailKeygenSlashPoints         int64  `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints        int64  `json:"FailKeysignSlashPoints"`
	FullImpLossProtectionBlocks   int64  `json:"FullImpLossProtectionBlocks"`
	FundMigrationInterval         int64  `json:"FundMigrationInterval"`
	IncentiveCurve                int64  `json:"IncentiveCurve"`
	JailTimeKeygen                int64  `json:"JailTimeKeygen"`
	JailTimeKeysign               int64  `json:"JailTimeKeysign"`
	LackOfObservationPenalty      int64  `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks         int64  `json:"LiquidityLockUpBlocks"`
	MaxAvailablePools             int64  `json:"MaxAvailablePools"`
	MaxSwapsPerBlock              int64  `json:"MaxSwapsPerBlock"`
	MinRunePoolDepth              int64  `json:"MinRunePoolDepth"`
	MinSlashPointsForBadValidator int64  `json:"MinSlashPointsForBadValidator"`
	MinSwapsPerBlock              int64  `json:"MinSwapsPerBlock"`
	MinimumBondInRune             int64  `json:"MinimumBondInRune"`
	MinimumNodesForBFT            int64  `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil      int64  `json:"MinimumNodesForYggdrasil"`
	NativeTransactionFee          int64  `json:"NativeTransactionFee"`
	NewPoolCycle                  *int64 `json:"NewPoolCycle,omitempty"`
	ObservationDelayFlexibility   int64  `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints            int64  `json:"ObserveSlashPoints"`
	OldValidatorRate              int64  `json:"OldValidatorRate"`
	OutboundTransactionFee        int64  `json:"OutboundTransactionFee"`
	PoolCycle                     int64  `json:"PoolCycle"`
	SigningTransactionPeriod      int64  `json:"SigningTransactionPeriod"`
	VirtualMultSynths             int64  `json:"VirtualMultSynths"`
	YggFundLimit                  int64  `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock []LastblockItem

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn int64  `json:"last_observed_in"`
	LastSignedOut  int64  `json:"last_signed_out"`
	Thorchain      int64  `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`
	PoolShareFactor         string `json:"poolShareFactor"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), Total Rune pooled in all pools
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// ObservedChain defines model for ObservedChain.
type ObservedChain struct {
	Chain  string `json:"chain"`
	Height int    `json:"height"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`
	Asset                  string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Int64, number of unique adresses that initiated swaps transactions in the period.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// PreflightStatus defines model for PreflightStatus.
type PreflightStatus struct {
	Code   int    `json:"code"`
	Reason string `json:"reason"`
	Status string `json:"status"`
}

// ProxiedNode defines model for ProxiedNode.
type ProxiedNode struct {
	ActiveBlockHeight int    `json:"active_block_height"`
	Bond              string `json:"bond"`
	BondAddress       string `json:"bond_address"`
	CurrentAward      string `json:"current_award"`
	ForcedToLeave     bool   `json:"forced_to_leave"`
	IpAddress         string `json:"ip_address"`
	Jail              struct {
		NodeAddress *string `json:"node_address,omitempty"`
	} `json:"jail"`
	LeaveHeight     int             `json:"leave_height"`
	NodeAddress     string          `json:"node_address"`
	ObserveChains   []ObservedChain `json:"observe_chains"`
	PreflightStatus PreflightStatus `json:"preflight_status"`
	PubKeySet       struct {
		Ed25519   string `json:"ed25519"`
		Secp256k1 string `json:"secp256k1"`
	} `json:"pub_key_set"`
	RequestedToLeave    bool     `json:"requested_to_leave"`
	SignerMembership    []string `json:"signer_membership"`
	SlashPoints         int      `json:"slash_points"`
	Status              string   `json:"status"`
	StatusSince         int      `json:"status_since"`
	ValidatorConsPubKey string   `json:"validator_cons_pub_key"`
	Version             string   `json:"version"`
}

// ProxiedNodes defines model for ProxiedNodes.
type ProxiedNodes []ProxiedNode

// Queue defines model for Queue.
type Queue struct {
	Internal int `json:"internal"`
	Outbound int `json:"outbound"`
	Swap     int `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, unique users (addresses) initiating swaps in the last 24 hours.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, unique users (addresses) initiating swaps in the last 30 days.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Int64, unique users (addresses) initiating swaps since beginning.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {

	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {

	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at the end of the interval
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ProxiedNodesResponse defines model for ProxiedNodesResponse.
type ProxiedNodesResponse ProxiedNodes

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {

	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"VVjd7gAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
