// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Action defines model for Action.
type Action struct {

	// Int64, Unix timestamp for when the action was registered
	Date string `json:"date"`

	// Int64, block height at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status string `json:"status"`

	// Type of action
	Type string `json:"type"`
}

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64, Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64, Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64, Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64, Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64, Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64, Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64, Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64, Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64, Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64, Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Coin defines model for Coin.
type Coin struct {

	// Int64 (10^8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64, the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Int64, the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64, Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64, Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64, System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64, Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistoryItemPool defines model for EarningsHistoryItemPool.
type EarningsHistoryItemPool struct {

	// Int64 (10^8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64 (10^8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64 (10^8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64 (10^8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64 (10^8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string `json:"address"`
	Chain   string `json:"chain"`

	// indicate whether this chain has halted
	Halted bool   `json:"halted"`
	PubKey string `json:"pub_key"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                  int64 `json:"AsgardSize"`
	BadValidatorRate            int64 `json:"BadValidatorRate"`
	BlocksPerYear               int64 `json:"BlocksPerYear"`
	ChurnInterval               int64 `json:"ChurnInterval"`
	ChurnRetryInterval          int64 `json:"ChurnRetryInterval"`
	CliTxCost                   int64 `json:"CliTxCost"`
	DesiredValidatorSet         int64 `json:"DesiredValidatorSet"`
	DoubleSignMaxAge            int64 `json:"DoubleSignMaxAge"`
	EmissionCurve               int64 `json:"EmissionCurve"`
	FailKeygenSlashPoints       int64 `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints      int64 `json:"FailKeysignSlashPoints"`
	FundMigrationInterval       int64 `json:"FundMigrationInterval"`
	JailTimeKeygen              int64 `json:"JailTimeKeygen"`
	JailTimeKeysign             int64 `json:"JailTimeKeysign"`
	LackOfObservationPenalty    int64 `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks       int64 `json:"LiquidityLockUpBlocks"`
	MinimumBondInRune           int64 `json:"MinimumBondInRune"`
	MinimumNodesForBFT          int64 `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil    int64 `json:"MinimumNodesForYggdrasil"`
	NativeChainGasFee           int64 `json:"NativeChainGasFee"`
	NewPoolCycle                int64 `json:"NewPoolCycle"`
	ObservationDelayFlexibility int64 `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints          int64 `json:"ObserveSlashPoints"`
	OldValidatorRate            int64 `json:"OldValidatorRate"`
	OutboundTransactionFee      int64 `json:"OutboundTransactionFee"`
	SigningTransactionPeriod    int64 `json:"SigningTransactionPeriod"`
	YggFundLimit                int64 `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock struct {
	Current []LastblockItem `json:"current"`
}

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn string `json:"last_observed_in"`
	LastSignedOut  string `json:"last_signed_out"`
	Thorchain      string `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64 (10^8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64 (10^8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64 (10^8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64 (10^8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64 (10^8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64 (10^8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64, total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64, total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64, total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`
	PoolShareFactor         string `json:"poolShareFactor"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64, Total Rune pooled in all pools
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64, Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NetworkFees defines model for NetworkFees.
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolLegacyDetail defines model for PoolLegacyDetail.
type PoolLegacyDetail struct {
	Asset string `json:"asset"`

	// same as assetDepth from pool/stats
	AssetDepth string `json:"assetDepth"`

	// same as addAssetLiquidityVolume from pool/stats
	AssetStakedTotal string `json:"assetStakedTotal"`

	// same as toAssetCount from pool/stats
	BuyAssetCount string `json:"buyAssetCount"`

	// same as toAssetFees / toAssetCount from pool/stats
	BuyFeeAverage string `json:"buyFeeAverage"`

	// same as toAssetFees from pool/stats
	BuyFeesTotal string `json:"buyFeesTotal"`

	// same as toAssetAverageSlip from pool/stats
	BuySlipAverage string `json:"buySlipAverage"`

	// same as toAssetVolume / toAssetCount from pool/stats
	BuyTxAverage string `json:"buyTxAverage"`

	// same as toAssetVolume from pool/stats
	BuyVolume string `json:"buyVolume"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// same as 2*runeDepth from pool/stats
	PoolDepth string `json:"poolDepth"`

	// same as totalFees / swapCount from pool/stats
	PoolFeeAverage string `json:"poolFeeAverage"`

	// same as totalFees from pool/stats
	PoolFeesTotal string `json:"poolFeesTotal"`

	// same as averageSlip from pool/stats
	PoolSlipAverage string `json:"poolSlipAverage"`

	// same as addLiquidityVolume from pool/stats
	PoolStakedTotal string `json:"poolStakedTotal"`

	// same as swapVolume / swapCount from pool/stats
	PoolTxAverage string `json:"poolTxAverage"`

	// same as units from pool/stats
	PoolUnits string `json:"poolUnits"`

	// Int64, same as buyVolume + sellVolume
	PoolVolume string `json:"poolVolume"`

	// same as assetPrice from pool/stats
	Price string `json:"price"`

	// same as runeDepth from pool/stats
	RuneDepth string `json:"runeDepth"`

	// same as addRuneLiquidityVolume from pool/stats
	RuneStakedTotal string `json:"runeStakedTotal"`

	// same as toRuneCount from pool/stats
	SellAssetCount string `json:"sellAssetCount"`

	// same as toRuneFees / toRuneCount from pool/stats
	SellFeeAverage string `json:"sellFeeAverage"`

	// same as toRuneFees from pool/stats
	SellFeesTotal string `json:"sellFeesTotal"`

	// same as toRuneAverageSlip from pool/stats
	SellSlipAverage string `json:"sellSlipAverage"`

	// same as toRuneVolume / toRuneCount from pool/stats
	SellTxAverage string `json:"sellTxAverage"`

	// same as toRuneVolume from pool/stats
	SellVolume string `json:"sellVolume"`

	// same as addLiquidityCount from pool/stats
	StakeTxCount string `json:"stakeTxCount"`

	// same as uniqueMemberCount from pool/stats
	StakersCount string `json:"stakersCount"`

	// same as addLiquidityCount + withdrawCount from pool/stats
	StakingTxCount string `json:"stakingTxCount"`

	// same as status from pool/stats
	Status string `json:"status"`

	// Int64, same as history/swaps:uniqueSwapperCount
	SwappersCount string `json:"swappersCount"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64, same as swapVolume pool/stats?period=24h
	Volume24h string `json:"volume24h"`

	// same as withdrawCount from pool/stats
	WithdrawTxCount string `json:"withdrawTxCount"`
}

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64, same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64, same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`
	Asset                  string `json:"asset"`

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64, same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64, same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64, same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64, same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64, same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Int64, number of unique adresses that initiated swaps transactions in the period.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Liquidity Units in the pool
	Units string `json:"units"`

	// Int64, same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64, same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64, same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// Queue defines model for Queue.
type Queue struct {
	Outbound string `json:"outbound"`
	Swap     string `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64 (10^8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, unique users (addresses) initiating swaps in the last 24 hours.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64, unique users (addresses) initiating swaps in the last 30 days.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64 (10^8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps since beginning.
	SwapCount string `json:"swapCount"`

	// Int64, number of swaps in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64, total volume of swaps denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Int64, unique users (addresses) initiating swaps since beginning.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64 (10^8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip by swap.
	// Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64, the fees collected from swaps to asset denoted in rune
	ToAssetFees string `json:"toAssetFees"`

	// Int64, volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64, the fees collected from swaps to rune
	ToRuneFees string `json:"toRuneFees"`

	// Int64, volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64, the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64, toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Int64 (10^8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), trade slip percentage
	TradeSlip string `json:"tradeSlip"`

	// Int64 (10^8), minimum output amount specified for the swap
	TradeTarget string `json:"tradeTarget"`
}

// Transaction defines model for Transaction.
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolLegacyResponse defines model for PoolLegacyResponse.
type PoolLegacyResponse PoolLegacyDetail

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Address of sender or recipient of any in/out transaction related to the action
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action (swap, addLiquidity, withdraw, donate, refund)
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *string `json:"period,omitempty"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *string `json:"status,omitempty"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
