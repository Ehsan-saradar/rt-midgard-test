// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Action defines model for Action.
type Action struct {

	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status string `json:"status"`

	// Type of action
	Type string `json:"type"`
}

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Coin defines model for Coin.
type Coin struct {

	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistoryItemPool defines model for EarningsHistoryItemPool.
type EarningsHistoryItemPool struct {

	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string  `json:"address"`
	Chain   string  `json:"chain"`
	GasRate *string `json:"gas_rate,omitempty"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                  int64 `json:"AsgardSize"`
	BadValidatorRate            int64 `json:"BadValidatorRate"`
	BlocksPerYear               int64 `json:"BlocksPerYear"`
	ChurnInterval               int64 `json:"ChurnInterval"`
	ChurnRetryInterval          int64 `json:"ChurnRetryInterval"`
	CliTxCost                   int64 `json:"CliTxCost"`
	DesiredValidatorSet         int64 `json:"DesiredValidatorSet"`
	DoubleSignMaxAge            int64 `json:"DoubleSignMaxAge"`
	EmissionCurve               int64 `json:"EmissionCurve"`
	FailKeygenSlashPoints       int64 `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints      int64 `json:"FailKeysignSlashPoints"`
	FundMigrationInterval       int64 `json:"FundMigrationInterval"`
	JailTimeKeygen              int64 `json:"JailTimeKeygen"`
	JailTimeKeysign             int64 `json:"JailTimeKeysign"`
	LackOfObservationPenalty    int64 `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks       int64 `json:"LiquidityLockUpBlocks"`
	MinimumBondInRune           int64 `json:"MinimumBondInRune"`
	MinimumNodesForBFT          int64 `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil    int64 `json:"MinimumNodesForYggdrasil"`
	NativeChainGasFee           int64 `json:"NativeChainGasFee"`
	NewPoolCycle                int64 `json:"NewPoolCycle"`
	ObservationDelayFlexibility int64 `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints          int64 `json:"ObserveSlashPoints"`
	OldValidatorRate            int64 `json:"OldValidatorRate"`
	OutboundTransactionFee      int64 `json:"OutboundTransactionFee"`
	SigningTransactionPeriod    int64 `json:"SigningTransactionPeriod"`
	YggFundLimit                int64 `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock struct {
	Current []LastblockItem `json:"current"`
}

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn string `json:"last_observed_in"`
	LastSignedOut  string `json:"last_signed_out"`
	Thorchain      string `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`
	PoolShareFactor         string `json:"poolShareFactor"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), Total Rune pooled in all pools
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NetworkFees defines model for NetworkFees.
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// ObservedChain defines model for ObservedChain.
type ObservedChain struct {
	Chain  string `json:"chain"`
	Height int    `json:"height"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolLegacyDetail defines model for PoolLegacyDetail.
type PoolLegacyDetail struct {
	Asset string `json:"asset"`

	// same as assetDepth from pool/stats
	AssetDepth string `json:"assetDepth"`

	// same as addAssetLiquidityVolume from pool/stats
	AssetStakedTotal string `json:"assetStakedTotal"`

	// same as toAssetCount from pool/stats
	BuyAssetCount string `json:"buyAssetCount"`

	// same as toAssetFees / toAssetCount from pool/stats
	BuyFeeAverage string `json:"buyFeeAverage"`

	// same as toAssetFees from pool/stats
	BuyFeesTotal string `json:"buyFeesTotal"`

	// same as toAssetAverageSlip from pool/stats
	BuySlipAverage string `json:"buySlipAverage"`

	// same as toAssetVolume / toAssetCount from pool/stats
	BuyTxAverage string `json:"buyTxAverage"`

	// same as toAssetVolume from pool/stats
	BuyVolume string `json:"buyVolume"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// same as 2*runeDepth from pool/stats
	PoolDepth string `json:"poolDepth"`

	// same as totalFees / swapCount from pool/stats
	PoolFeeAverage string `json:"poolFeeAverage"`

	// same as totalFees from pool/stats
	PoolFeesTotal string `json:"poolFeesTotal"`

	// same as averageSlip from pool/stats
	PoolSlipAverage string `json:"poolSlipAverage"`

	// same as addLiquidityVolume from pool/stats
	PoolStakedTotal string `json:"poolStakedTotal"`

	// same as swapVolume / swapCount from pool/stats
	PoolTxAverage string `json:"poolTxAverage"`

	// same as units from pool/stats
	PoolUnits string `json:"poolUnits"`

	// Int64(e8), same as buyVolume + sellVolume
	PoolVolume string `json:"poolVolume"`

	// same as assetPrice from pool/stats
	Price string `json:"price"`

	// same as runeDepth from pool/stats
	RuneDepth string `json:"runeDepth"`

	// same as addRuneLiquidityVolume from pool/stats
	RuneStakedTotal string `json:"runeStakedTotal"`

	// same as toRuneCount from pool/stats
	SellAssetCount string `json:"sellAssetCount"`

	// same as toRuneFees / toRuneCount from pool/stats
	SellFeeAverage string `json:"sellFeeAverage"`

	// same as toRuneFees from pool/stats
	SellFeesTotal string `json:"sellFeesTotal"`

	// same as toRuneAverageSlip from pool/stats
	SellSlipAverage string `json:"sellSlipAverage"`

	// same as toRuneVolume / toRuneCount from pool/stats
	SellTxAverage string `json:"sellTxAverage"`

	// same as toRuneVolume from pool/stats
	SellVolume string `json:"sellVolume"`

	// same as addLiquidityCount from pool/stats
	StakeTxCount string `json:"stakeTxCount"`

	// same as uniqueMemberCount from pool/stats
	StakersCount string `json:"stakersCount"`

	// same as addLiquidityCount + withdrawCount from pool/stats
	StakingTxCount string `json:"stakingTxCount"`

	// same as status from pool/stats
	Status string `json:"status"`

	// Int64, same as history/swaps:uniqueSwapperCount
	SwappersCount string `json:"swappersCount"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64(e8), same as swapVolume pool/stats?period=24h
	Volume24h string `json:"volume24h"`

	// same as withdrawCount from pool/stats
	WithdrawTxCount string `json:"withdrawTxCount"`
}

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`
	Asset                  string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Int64, number of unique adresses that initiated swaps transactions in the period.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Liquidity Units in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// PreflightStatus defines model for PreflightStatus.
type PreflightStatus struct {
	Code   int    `json:"code"`
	Reason string `json:"reason"`
	Status string `json:"status"`
}

// ProxiedNode defines model for ProxiedNode.
type ProxiedNode struct {
	ActiveBlockHeight int    `json:"active_block_height"`
	Bond              string `json:"bond"`
	BondAddress       string `json:"bond_address"`
	CurrentAward      string `json:"current_award"`
	ForcedToLeave     bool   `json:"forced_to_leave"`
	IpAddress         string `json:"ip_address"`
	Jail              struct {
		NodeAddress *string `json:"node_address,omitempty"`
	} `json:"jail"`
	LeaveHeight     int             `json:"leave_height"`
	NodeAddress     string          `json:"node_address"`
	ObserveChains   []ObservedChain `json:"observe_chains"`
	PreflightStatus PreflightStatus `json:"preflight_status"`
	PubKeySet       struct {
		Ed25519   string `json:"ed25519"`
		Secp256k1 string `json:"secp256k1"`
	} `json:"pub_key_set"`
	RequestedToLeave    bool     `json:"requested_to_leave"`
	SignerMembership    []string `json:"signer_membership"`
	SlashPoints         int      `json:"slash_points"`
	Status              string   `json:"status"`
	StatusSince         int      `json:"status_since"`
	ValidatorConsPubKey string   `json:"validator_cons_pub_key"`
	Version             string   `json:"version"`
}

// ProxiedNodes defines model for ProxiedNodes.
type ProxiedNodes []ProxiedNode

// Queue defines model for Queue.
type Queue struct {
	Internal int `json:"internal"`
	Outbound int `json:"outbound"`
	Swap     int `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, unique users (addresses) initiating swaps in the last 24 hours.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64, unique users (addresses) initiating swaps in the last 30 days.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Int64, unique users (addresses) initiating swaps since beginning.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip by swap.
	// Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps to asset denoted in rune
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps to rune
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64(e8), toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// Transaction defines model for Transaction.
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolLegacyResponse defines model for PoolLegacyResponse.
type PoolLegacyResponse PoolLegacyDetail

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ProxiedNodesResponse defines model for ProxiedNodesResponse.
type ProxiedNodesResponse ProxiedNodes

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action (swap, addLiquidity, withdraw, donate, refund)
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *string `json:"period,omitempty"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *string `json:"status,omitempty"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9/XIjN/LYq6CYpE5rjymSkqhdVbku+lidN7/9UFayU66TowNnQBKrGYAaYEjRrn2t",
	"vEBeLIUGMJ+YIciVLuff6f44azlAo9HobnQD3Y0/eiFPFpwRJkXv5I9eSsSCM0HgH6ehpJyJz+Y39VPI",
	"mSRMqj/xYhHTEKsm+18EZ+o3Ec5JgtVfi5QvSCqphoQ1JPUnlSSBP/5rSqa9k95/2S8w2Nf9xb4eufc1",
	"6Mn1gvROejhN8Vr9O+SZHj4iIkzpAtqd9N4xOT4MEMuSCUkRn6KUiCyWAiVYhnPKZkjOCZrRJWFoSmNJ",
	"UtHv5dCFTCmb9b5+DXopechoSqLeyd/NWEGO/W95Bz75QkLZ+6p6VBH5TGSWMoEwQ4CzwsX0R1OeutD4",
	"GvTOORMSM7kbrbsomUN2IXsz5ynjEUF5K2QZANC6IAs5/4kKydP1k2NWBu5CDr4jzCK0SGlI0Nw2DXpv",
	"ccoom4nnQq0G34UdMU3KaP1EcCznT46NBtvFbHNogYTEMtNs9oFGM5xGCqt3bMIzFp1GUUqEIE/PYvUB",
	"OjntHYugNTo1rasc9x4LOYl5eP/kWOaQO9HLW9XQog8ZjahcPxfH1QdwIfm/qJxHKV7hWIBYRGTBBZUV",
	"FvxAlAK8IBLT+OlXugLdhaLWi0gNhqmSDxTbiaFFypc0IimKsMTApBiJBQnplIYoAcjFDJ4LdyfWhaKO",
	"Y1DQiW0b9D4SueLp07OjgbthC2nS0/QDIgJ+PHoGkQao2+OmJGiRTWIaonuyznG84jx+T2Y4fHq5KUBr",
	"rnThfC2x1FqRM4IWnMdoReUc/TJEDCeUzfoWyWdBrx2xTw0KRlq0Ksha5GAaz4IhQN6GfjnBxDNSzMl/",
	"p1ZUYRkj2zDoXaX8kZLoecShDLxz+4AW1a3jf2YkI0+OEUDtRAVaVFF5Hg7S3AOi7rMhzGI+wTE6e3t1",
	"vcKLXEeofzzX5lqC7eRvhQfY+gFa8jhLSICmhMAeK2K6KPbXr4EZseQeNX0Rbe7nsowTzmZa46QkxpJE",
	"SKaYCetVBDVfKcKStDs4mHEkaUKExMlCCYLar7TFgiVazWk4h58MEius2HFGhSTKqWl4PEFvTuhs3u5R",
	"6c9PMRBlrkG0MVgmSEElXhqgF/h5jjcFJJf7mBCJgeU2Wgum3degxzMHeT5l8p+MutJ4ookIqGFE2ZLH",
	"SxIhylpGbqxHHb72HlxrFCmxIwLRaXnFqUBqEjFRE+ap+mqnz53EwSlBQtI4RgvCIth3gx5hWaJ8bZGF",
	"IREgDfpjyduu41zH8Ga9IIWfXQa6wgvlv0dRbl/3gt7K2NG9oBdxpqRNuf3TjEWOMWtHAnoRTKucZsDc",
	"mlECLb+5XJVYrnl8EPROS6h9KPFmVSXkRvTPjErRKqs4UUpMUaKwujPVA2Eh6IwVjKkNXAQyK7I4l++i",
	"n3EuNp6R1FBzzfFM+3MrnEaiObdJ8dXJphPOoo7PCzDbWj7XcC0PVQFcAeOcAmfRByJTGjpmgJckxTOi",
	"toMlUS1bFmiPvH4VoFPdGqnhLdMuCWJgWzhY3kC/lphFk/XW4IXu1w4/wY80yRJP7D/gR8qyxBt7A90X",
	"+w+6+RbYk4hi5os8NPbHHZp7o14Fvhlzyrahu6L6NnTX0L2Rr4HfiL3kEseeuN+ott6YA2RfvKugN2Bd",
	"0wb1KQQOQXYwmGvlXFLkmIlTmF185lw/pzC5lRWPi2Pfhrq6VmpMqt75zvNZWdXqG3nEakfvnUxxLEgO",
	"e8J5TDBrkLAVlAutc+6yAD+TRUqEsoMQRhGdUbWgYZamhIVrs6M1TGTzcxdnYCGIRKfQsO/Uq6pBE8Qp",
	"9KMMnf90+u5j//rXD2ef3ivnN8GbN0MNM7D4tVHB/x4EaOaw1TqWV63V3RLHGdkIvcooYKLLu/GhZ28g",
	"dqW7popn92toXL6eqNKyiktQmVd9KBehK9cLDSpRJkm6xLHY5pbiXd7JeBLbdFbWXWOSACQoYbNpJu/K",
	"eHuxUKW3JImLnRptmjaO4mxo1il14B7kVmguS+pnOLDBEv4mWl+rP+3UW0X0KqWhw+a/jDmWgbkaUtuK",
	"HSvNGOmjd33Shz8tOvumRa5ROkb7+fqidUCYSmPQn68v0N4EC+X76OlGhCyIkPBFTf2VUwkRFt3QpN3d",
	"vzHEUh6/GnCShfd6xIzRx+IgwAXb02nINTeCdt+wXIrc27LIZ7VEuw8pJE7lRgpOyIwyOHzano41gS0G",
	"LBYvKEtHmQwVDq4zWODjOjUUSEMwn5OD/iWo6yJL/X52d/Veg7S1hq/3BwW7i5JvRcRXzzsxaap6VzOH",
	"Rzv7yCNy7raypkoTqtW3vmYhzmXjHkVZagMvgDO6BHlSOyPYZPGbK1poj0hCpSTRdgNyOGWy5Ogc83qO",
	"U2Ds/NJfGaxI8h0mSrwGXAtJEkRZyBOCZoSRFHdNsI/eSUQFfBBZUj0BmhKi74srRHuK3cgOv+V+9I00",
	"hyO4rWiej3xJiA93VWkXoJCzJUnNue7nnz++VT/FMQm3ZbqWI1xLkOJmnOBwrvdDGzNUh72rTrgyN4p1",
	"vaB2re2MH9i6O22ejs28f8uecsfZhhO9dvQqy9T0U0mKm4rExehBVaPWqG35wmdbsCvYIA/Qm1QYqYMz",
	"Hcb9e28hqamWQhRKdtxfBLLO8G4qEA5PiglRBoKH9uD3Cq7oe6vTXrXJnOOODiz3akAetHTZtR7bEiBn",
	"9kGrqPbgBJ0uySukxsH3hKFpyhO0x8gM6w+F3StuGS6dxk9wjFmo1o/KvwgkrDoUla0B9ATwplueFJ89",
	"zcKqCbYe11WGUHrBY2lrg+3Bitj1zBhRf74qcAiQmPMVa0fFcVFjbe73NWFuUqV1HsXql/jWJagmSK9h",
	"SilJVErScWuVZgQlBOfxe2vYaZgmueQo79o8h1PW5PWahT5Q++gSx8L+aAIDlbWg7+JCGyCbLeztUDjH",
	"lDlHFSFmjKQ/dd8ZAww4wpPG6AjdTndtzUoTrg6UT9dF+Ub4oa/FXO/YZjI72zVtZv25coram4SpHD6M",
	"jo5n44EMH5fZYbScxgvx++x+9XBwGB0tV+PF7Hg0nk0PXNKlV6IC8uzm3NVyhsVdaiIHisZH49HRwHnr",
	"j2NJHGfr1Fz2otWcyDlR6pEKzRBojgUy/YKNJ8VBb5FN7u7JuoqQlHOeLrLJEEfRii3I4iF6wx4ekhle",
	"j5Mv2WD9cDxayC9ZmNy/wRKvJFkeLg/ZeHVPyNF6NH54PSBhOBs83h8cOxUezyRJq2MOHt9Eh2/GF+T4",
	"9euD4+kRHk1Ox4fnk8PB2/EoHL65PAvPxsfToyO8OSLcSIadW5Ave05SN4tWjkobvHMqlExe09+ry3cw",
	"CHrm5FmtjBwfFgiqzXymIybPcPQLjmmEJU8/11lg7AlDiam4IumvBFfJNz4YDg/e+EE5n2cps67rLmgA",
	"gM9EFg7wLgQ5j+nN4zkXstLZr+8FEWqxc4JekyqU4cgPDM8mMbmmM/YBP57OqmsyOvSC8TahQlDOzrN0",
	"WVtUr/6XmMb/QdYzwq5jLOZXnBrmy+EcjwbbQBJ01grKjyyXGYs+0FkKUVzfwij/A9NYmep6ftUV2hqC",
	"mtcuIN7j8P7T9NNEqGmoGV0RhmO53oEwueXxnof3Py+0OO7Avh/0veEZZ9E7Zi2x0rzM/7aBBTGNlzw9",
	"u7ypADvcBcivs1mUYkHjHfj5I9jM50oF/w2LS+Kemx8oslJu1Pk6jKtQjoavD/1AlJb9gsR4fRmTRzqh",
	"Ma2t/9EW0EibdA39gMTfvhHYuLZSMFobpf0AKh1I2awE74qklEc1xe4H7NfZTKmQ9zShcmsq1/by0qbr",
	"2EPrW2J9c3PuVeWtx72VOHaGuqJvU9ytarhNrTa0ZFPpdeiwNp3k0jFOXdEh+y5Zrgllt4A5BcYhAK38",
	"3MGXNS5z2XNFLlHDlDN+j7cTkoNyex91+9NA70TK7Z+4XImPZ87jUizkHdf0je7qnYZHbwatvXSU4Z2J",
	"mC11GrxxHh7MeerAa3h0+NrbFG9g20SlPJCTcvXkq93vk+qgtr5QagDY+UapHRVv3nTi0nSQne1cDvJp",
	"5TTmF4i19zgqgkMcYUNSu+5BbtkFYdweWWWMoEzYlvrgGksLB7q2nEOXI4bPPTOO83S8Duw2jeVNEj41",
	"0Q0sMlEIdngHDfY2EOFVO2afy0dl3tjBqF7L9c8OimCkO2yMEVk6mQznmM2IQHurUurlDzmpX211+fPn",
	"vmHZhsiWWiDu20q57cy+UcotnC4xt218RTyHuSVH234K1+2EyIsaXUN+g0YpMb2nUqnQ3K1V/OJpWraK",
	"VpXk1KIuNe5mTucKNWhY5xetTWqC7dqJq2nTjY2x5Vb4PRUyTyIrJSc3M6oFohFhkk4piXSiWXGpVZxP",
	"em35GlX3JbEzFaZ9vvae0nHXeBpFJPJVCWoKReYKaL3J2iaMt8XxnRan8a6LP0MVlCndOlmXcmJaIdrs",
	"e+aNdyG7cOvnh32EJbmkqeikUYB+rijh/CJzqnpq/WBSfIpdmLISCduGVk7ETiMrm3vXgT0jFYF49cwm",
	"OccSTUjMrW7sXEn3ZbDiVJSqfdXsoXB9npKpEi3J2zZzXy7Wd8PbMbGB7+Zhrae3YmHVZRsOBpx3YGD3",
	"LWx5NjUBbax+mbZBWV3UJ9GQy4bw1Fm6XVdVfaIqbT6YXLkc4dJt1oRNhtMvo/jhy+tomR4tsmQazsNj",
	"JuPpQzRajn+PHh9WX8hqetQLNmdgticAVjIYN9VOcqUUfs1THDf0/gytyv0gidIjw7rcJ0+x3NDPLl7R",
	"96tjjWytDGdZKZ1uU13AjZTWHTtiHI3K+ZibfjqzRyf4+wQwduZdlNuaWMRSdmF3ykbRtIhiPL36tdWj",
	"2Bui79FekeyIvtN38uKKpB84k/P9WiLUq1fof6PhCP0w7NTVm8cUEt+TzkF1iacibhRMiu7xGXmUcPK6",
	"IQZBtSslr0/s4aVzS4DJw0kjsEPEW3Wk9tBSkphqBtY90s5YDgbtUWbGbA1KggjHSxxKnjp5VhRpXg6t",
	"lBfCMNlgSLfbMuFb9dxGCuxgHzuz99R+SqKNcUA3hZuzgB7Kt1BWbiXJugH9M4GzPp84TjIFj9X22LRb",
	"leWwEfJX1jW1xWnqEwdxm7SpzafJ2+3M2eSgii6oielv7TrVHRMGrgefImaKDekQYiF4SG15A8xMun0f",
	"fWKk3BLpgJF0RqIiltVVEcDXJ2lLglO0dSRERKOjo+Gb5qTMh1KBoupeXg9MmT2uoulBlpLBYnY0Vb9l",
	"jwfr5A0bjEfj4/g+JeLo8PfVl/lh+Hpw+Jr8Pv9yNBgdPqydBhjjUbtBBwVb8jNqt6kx5+lwMFoPkoNs",
	"IWeD5TKLyHo+GKSjKfv9eLB6OI5er4+TbDRzHvuQcDE6Gt8Pm4Pnn/6/UKYmgmUylbEO8nV1MjOoI99j",
	"beAbBz+ZK6Xo3N5IbL5AccdiFSVViigAe2O64VLS3moYEK7JlmpKub1rp/J/mgS+/j83Ta//r5KnB3q4",
	"w+CxmTBXJA0Jk+rPXymJoxOEGcuw8i5lljJEhKQJqFB9egZe84qQe2EiegMk8b36AnyrFCac8ykMwY3G",
	"YdhKmKfIv+u3nBk7K8PczAnUnCTWb1YQAkT6sz46XWIa40lMAmU0zEjkhJztmprohKaLN40ONxNAO7m6",
	"PURVr/Aihw+LMjqc620u0s6vudKonIH2vRPCC8x2TRa0HFiqOZO1pg2Wi6j5asVyqbqmbmzU2Xsi1SNw",
	"QhA2yQLaHQByq+nuq5mKVhVwrdyLCCy9Drjuk2SfQSbZGrq22MZ2BMmLVp5gLwkxCmMjWAiI399xELGB",
	"OOUx/IBex3Thi7ppp7p4Qr959IVtVnEnwrTdiLiH8ID5p9gcFiDenTI4+i7XRr7T9uNkiWPDx0rPeq+V",
	"GWAzF1v4njC9mBhvx70LXUbTSyHtoIvUVw/pUOTNRWNrWrecvlvg+rzdE5bHtaOFm4sk+h4JEsf5bVsT",
	"sNvGrOwhsGX6YNlhLVmAW4mDauzLAY4rTJ8hFHX8tiQ1gPfaK7B+gvzZ5GWB4t1ljM2ynA/hCdRzR1Jg",
	"t9yQFHSvHam4M96NLps3pNIIPjAVF948bmCSxt24N+hUbACdMfqQEX1vshVoymY74P09qtzLew7m9Ghy",
	"RWoq6XtAWuHFop0kxpOxcE0l2X3wN040na41hPO2ujQwQhdlOseA3bEVtp/H5NheCqL8dQFhsz9q56Y1",
	"DmXjum65hi2OVu4cLcp+lMvbKgyi8u5XthAr0lnZ1qoOXdVRaKjp5grWuaZm/NZVT337b1jiTU3YNHRq",
	"PkFdI9etrbqf0tglGvZf2UVt+GfN7bFpMtUUV5N1Gjqipo/aPOFyefMniUqtS1p+2H5nAgZP2gOYviHU",
	"1GvYRrzTt8abbjdq5zy3DSb1GtodDtZe7u+ZTkb/PeuXlbyklhHHh2jvDAsq0AKyNAI0+AESiAK0mpOU",
	"IPjHj8PB4L+9atvDyqP8Ox/OPtvZbJvZ8fQGR2FCbCX5JdDtIt48d3pGnnQM1o7SbnSs2BBtoDcW9eiE",
	"botftAD/hpWqhtc6Bqh5ZM+6VPWxWhHabaGKnq2Ad16mvHMr6G9YpEq0szvaYmfEbV/3rU/VP9xI8Ziw",
	"PTuAeZzpr0qh/Xj16dP7V+1jVHyrzfH9uhPC9mkyCC6ljEod9qBviSpvGljtDD5QSyj+zpdcT5FbsdmG",
	"cgfE75gr4T9cq8BsmSzhP2I3t2+RMOE/ZNtwm7zXzqvAVpc2My5sQ/tWBb20B9d2qKoaLNsAToFybrku",
	"3V41FKt7V0VDlpVOxaH8kySENDWb0ylNyTSms7lykY3xVgs1MZFN5eIPzWT4lGDzDFIRkfLpP7qNxKLl",
	"Z4KjtU9+juZIM1igcXPPKn8kqy1S9w5i6u4c8THD0cHh0dg1y4l5A6CUHgxtj1+/aavreeesxQSlh/Ak",
	"dBda0onVd9i+JFIfztVpytOQRHeS38UE64hER6GuhRud4aA/GvQPBv1DZzr1F+dpBeMR6Z7doXNJG4sF",
	"CLsWwslpm4d1xuqarOw7CGryj0SoxmG5XkKy8nNXMHb3821VeSuKU92ZQ4HWEEJH5arH9e+jjSF27n7D",
	"zfLmGfGm+hAhN3IfZMGnd8Zmmms7e4sQ4RiL+d2iWZDkcOTiE5ee0YHl7VrpTlAWugqMuAZY2uoOdyFn",
	"4q69xBiehM5FWpJU0LrSHPQPjvoDr9jEuyI2szhqLvFSK4pGkQVOTVhTWzXSuFbRyQFNjVQT9Io2KohR",
	"W2ejfOpKsSHPDkHcsC9sEY1U2kwcfKmfP3SXaWC1ilJORrLxyJtb2vSXrlZ1IdbPjuVjBAViLgLVUm6a",
	"Sr8aqu3xqiw0rVgI9UdX1O957p7JDNrI/yXgOWzXhIoXITsTmbYurADiUOSm95+ymkLrIG6fLsI0XmvV",
	"9rMw+WPOaRiXMlON0B62NSRfWbeSspkz+hDNeeZ8oz7oJZzJ+XOOfjBAEV6LbzjHtNU/S5nsJb+2HfJT",
	"10fo73ayWfCeJo4P4+VQN92m1oHXok67gR8MIm+sq0sa9b/hPNYdL1sLh/Uik9eJaH0mRQSu5ObqxW+s",
	"zWd6zqH0EJL7T2uL4yZ/mfQZeNcSFttB30aTto/gUQ+ifJxRK5JeObaoSFtNPqrnFp0HHA017tSuLYcf",
	"zhOGxhFB15FD+xFB/XWsxkZ6QaY4i6W9365b3W8ZnsRk857eBOPEpvSA8u61sUpQti6LVe67c0UsJwK+",
	"FmkDg6ZVWm/S9lLok913wHWhud2El6ona1Ad/Vt2Rq0WmeOlLosAx5YrnRKLBRIJjmPd5p9fh+nfpxjS",
	"M91KNpZeGfPmgoLri/2n4QKvDTu0V9alTTQ1+3XrOxC+N5hQ2KT6IAEMUJ1t2RpJTXrt7teadVOnOSO/",
	"8Z7jlrN76SF+5IlWfrP55Fp4bK2nbrJ8+7p3w991lSvo+61yHvHQWjSgnKbyPdp4Zexz8Vp67EktZI1S",
	"vnh7WXblhJjvq/HIe7WBXu1Y8qvTTKvGlHTfbtWCRPxumna8x9pY+atSF6X9WXdTYdnrdRmbWm/icavv",
	"qLSUPNzx+EjBd2stwG2ryAyFKiirRR6F1eaP3qgJdpdpNM8jI57JRSbzh3cWJNRF0OzJljmJ2+Zcq7Io",
	"JRpUcHOtdamSsOtZlvwjVJdqvsHUVhvgmrCoUn6oeXdlnxTeVEQBFlU+vrvoxo9GaI7FvI+ueUKq4Q57",
	"IgvnivVc9RwESnCUH/QwqPCstekrlOC13ogw+p2kHMHDvZvzZwHZ8iMbeq4u8jdKCTkyVNdJQqT2YarT",
	"vyAhTXCM9n4Y9gfoNhsMDsIf4T8EDfuDVwGyD6MINOcrNat1ApVCsC7KV9RKRCss+mhgntsBJROvUdHc",
	"eWmp5Kgo+/6NslZIGJjB4JeDfcxXTF8fFJW9vqEcWxGnWK/JlpKEL+1uXdQlg5Sq/IGrKtWeUnHVeKhR",
	"X6zggyrlqyM2eewrPLs05fqGnkkc6qvTBK5qexFZiv+eF/Ho81QfFDeiMu0LTFe62sbp1Tv0kJGUEoFu",
	"fvr0+VyXAGERwmytX94RKKbsnkRoSTHQ7YxO0//7f4SEZouULHBKBFK4pYmuP4QnPNPekK3MIjmaEJQS",
	"HNF4jbANAQVVaQp/wJFUH3wehdUCpxAEVVINZEmYNM8UqsWtIqw8X4iaggfKEAbH6Aeh52Yfd1KIJPhe",
	"VzH9ISILpd+YzGlAsFj3cyJFnAjEuERzHkcoTKkEkStNtY9uuPbzcKhrLqKzt1dq4wWcdJV/8hiYAzcx",
	"51kcwWjrEvoRTUko4zWoJCrhDKW5UKU7s5PeqD/oD37A8WKO+wdwp7QgDC9o76R3oD4pFY/lHHh3fzna",
	"N0pS/dO5vUHRHatJMRQ0tLU8aYpSEuvSOyV920entgoPoqL0TuhkjTgjiKco4Sm5ZZQ5lHVeKFQRj0XK",
	"pNCgSpHt5bVPSMI1c9gf8NrKM2VqwFtmRnRvD330GVoLhFOCFnhGmcUWKv/yKToa9NEljaVaKQV+QhBe",
	"LGJKolsmuVk1Cw68FqXg9bMHUe+k9zciTw2ZFfVTnBAJ9yN/r1P7nCcJRkKJDiARUyH7yJSeAY9A77tc",
	"kT6kC0rMC7dsjSjbB+kqEccsz60tdWlqIwGKu9YLpApPmLJSTTiBs6biihhUn+MW/2vQUNgXdcwfC34q",
	"41tBdnQ5Hh2OD44v3g6P34zHR2enBwej0dnr8eHF2ZvLg8FgMLy8ODg+O3w7uBiNTgdn47fnb8enR2eD",
	"49cXp2eHLTOQjzTaDv1TtrZOGcRjCqWZ8j3ELMDe+U+n7z72r3/9cKYjQivPHPRvPn34dPbD8O2wja42",
	"As8frU+FhKGwxk3mjF/BELa+nUJSmZBBJYUxyDfBAEVcCURg7mOrk4CelTKQLeRVaG81DyOICr8YXrxw",
	"A7bfiq1Vphkpj9R4gCXBj8pK750cDYKeMdlb7s87kOLTqV4bF1b5x23Q6sLkNwVKLDgzLwmOBoM24yNv",
	"t290zmfzA5ggIksSrGzNnvmKlIKHT2o3iHjYuhNcr/BsRtL9TwvC1EZ80B9Y3ybUNCk9Cc3DLFHo9F3K",
	"8IKH+q6+OaNaFmbLkNWRRG1mF2ZwbJSHxDOla3vXZWR7v9k5z/M3Mp3T/gxpOAJhhrTJhcDKMoUW58Q8",
	"aInsbKwG0BtzY+7mRc5d1lN3bVlO/RG9U5ZgPjMTCRyRhZyL/T+Uuf1140RBfemsLhbZ4yYFwNh1NCT9",
	"W6Z2XHCXlPW84Kk263RuT/XEGyrtlY68b5m5jVANwHOANxzliqOER0Sc3LLvkPKbkL0OQfmeiag0eVEC",
	"Kc0GtpkiOE2IOf8WfXQJB2YsUjZYBN7RisbxLUNgayoLoNhi8jHAMsAKYN8ioDYlBw4YCcpmMYFx+v0b",
	"jgTBqZqkUF6Okmxb8Zw8KvMvP4kXMH0F3oI9QQsuBFUmr6bmCTpKKAsg0CJAEVaqmJD7AMENYIAeMpxK",
	"kgZoTXAKmMJh5wn6+7DfPxwMfuujCzKlTBmo+fVqfgHVRxec/UXaGu2ITosJUoHgxSe4Ev0OLOl9yU8Q",
	"BwYB81YG+mpBkJCzCCZzZdHPBJ4RY7+VVvs7fdM/1MEbJ+gff7Uff4zwWjmzozHM4Mfh4B/15mhCpmoj",
	"U2h0ddT/kvzH4Xjw+vXoaDzQsKDcqoWFp2rx1LR8gKl2Ctz4+PXgtQF3oVGSK2LfTFZMJrnhuEjfWsIh",
	"MBwnKtKDqxTAw7mlz4yv+oofP7F4XSqRfjgYFGsF9qhmdhKdqNb/aCJdQ9NNiFt2VWxc4K6bNYPFUiBK",
	"FNBzmhNWer7CYoESInHfHI9CEYg5uWUw+UI8jP4D2sO+WOWTkLMpnWVaK2p+UXJmpwbSr8XGSJVyBZXf",
	"ADI+VaOo9atM/M2bNg6odkQZkzRW1HeA+IflevOwrF7CUg9mTf3ChHcb+xAqYG+mN1j8WuuC4hTmgJAK",
	"q2BssBDVxgfsG8bEsDXMWw2Mzfa3FXzFpTgOsxhbH6Uw8CLcZtKVHpUpBiVMWTB/7ykd1gt6SolBPIPq",
	"p9SYjWToBT2jyHpBT2my0sFGO8YfmwoNbkSAhH10rZ3oCcllNNeJ5TkdDNwTsq9BN0jYYRC+LV00K6Y3",
	"rqCo3cD20bsp4krWtYgpt5guCQsaSqGMaMHKLUY173ValJvRvwYW95hADS2jbdxoKRHaErGdzNuylLUY",
	"RbpMklJougCTlcm6gVR++7/TNspf/teHTfY8Pz/hfzFzXsycFzPnxcz5tzBz3hpl6GnpvNgbL/bGn9ne",
	"qLF7i8lhW7XaGo207I1GR/mZR6W18qQQpTL0e2r1t/fembc/qL6mKgwUa1WorvmjFi/Gyoux8mKsvBgr",
	"/5mNlcZr2tuey2hFCycyyGrmUqAjKFIlu0ZeW6wYc2zzckzjMpv+LFbTi9HkbTTVxa7FairKDZ2bx63b",
	"zCcIid5oMkFgJ6yiDacOIBQ50NGeSpO4zmxezKYXs+nFbHoxm17MJms2lXMs/Swmo6i3tZf6LwbTyznT",
	"i8lEKim9LdbSNaSF1S0kHc6+/4cJxvzqE9GE7Xutys+hQtKwsHHaXvUvvbgJShcbUU8qL1I7A790CTpT",
	"9HyDOrFBrxCYLcO5C5c+ekvlHOwYiFNSmDNUfUzfBOwCjhU27E3YZPjlcTofzV4fPRwsBzJ6OBpPGVk+",
	"jh/DRxmyuRRJmI0PE/cVfBH16n8LvxNHlMnWFs5n3gO376tVmUL480ItuC0vBFExfc1aKxvwNG+g9njQ",
	"BWLOVwxxFhLQD2qByF8EmnBgFvvuPCyOTiiortgtg6HMGIGGqXCp9FRmsFpXGKwl6Nq8on5qMPTcwGA8",
	"M0G0SIkgrPHa5E471Tesffeq14I4WfEw+fYRjSZnxaaDNWhqvl/oz9vPx/RvmY8d/cK+ug7zsTW6umcD",
	"wfJKl33kESm9Gmu4zDCBUy/Zh6N3mI7q2TYZ9a26NPB2yB/A7pv1c6RluVwq/cSEYpoS/QE8CGkd3NOr",
	"X/vINb0rzZmdzA9iDZy8MUi9pgXFplDnJ5EDNYfWKI+cThjBXF3kNk+2tEY3FxtgkaWkrdcbqOqQN7br",
	"MaUkjkwiO/j+sDnavrcs5KlGP1JyVRxhoJiHJkfoFyqoHmleP0dQOjBKaRxHfNWaVZK/I/IvtLpBk53V",
	"t1AKhGezlMy076a6WRKa8wtwl3XNalDC/VtmCsEow/JgENUTV3SVHacuBihOE36o+uiex6qFrs3zBv7/",
	"YHwExRDj2GW378y3sEQtzKu+o4L5Olh3P4aXTtszteBzgH4ZIiHXMYH11vv2BIf3K5xG8EQElnRCYyrX",
	"fXQVEywISugsxRJy4MpMFaBwTsL7W1bi9qgcW6+ZVEvfJg7V2P1n0EJ6Jn7LifaWQzUfymavKku7m0Vm",
	"dwRtICmbiesTS9FG+42aQee1mZOJeG38cpOFR+2bYy1iln9silmeyqnrhurnPEQmILEyelLx6hKt2v7b",
	"vQd0GkazmE9wXLoQKk4xwL5QHlMprdB5mGJU9Q4+YYcG+ZtGTAPPJ6ozZ/pfTKXNzvnOswTrXNkEh3PK",
	"dEIu5OHaDByTRVpN+Gk5MFIdvNJ7dh634Q6rtuiSArdtSPfJc6H3w3IdMyeBbKUzm+mSCZ0YWmToBkjw",
	"4pTBNAsxU64JX5I0pZHuktCEpk4p1TVli6Jqu/BH3rtNFPQgJcSL8ZqEMYm5d7nz10qgdyaFt3ATwS8z",
	"TxcVJrn12gI4xVyQVB9MmsRd66lDDSAdFYOmUEmYyXiN6LSE9xwLlGSxpIuYIAxp1G6b3kzZYJi7qTuR",
	"tw7Em8qWPsXwTWorswfqLnfJaUrJUltIREgEzSHd3CbWhylX7nQcm9z8LpK8zwfc6UbP9vYmQjFec/J+",
	"vp0uuabhQo+SnayrOfBU/d4x6d1dvDIA7znr4ZrzfbAlor3nCz22n6+uRb3LfKGn90T1OF+/fv36/wIA",
	"AP//m+CdTbXXAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
