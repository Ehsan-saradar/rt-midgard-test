// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Action defines model for Action.
type Action struct {

	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status string `json:"status"`

	// Type of action
	Type string `json:"type"`
}

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Coin defines model for Coin.
type Coin struct {

	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistoryItemPool defines model for EarningsHistoryItemPool.
type EarningsHistoryItemPool struct {

	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string  `json:"address"`
	Chain   string  `json:"chain"`
	GasRate *string `json:"gas_rate,omitempty"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                    int64  `json:"AsgardSize"`
	BadValidatorRate              int64  `json:"BadValidatorRate"`
	BadValidatorRedline           int    `json:"BadValidatorRedline"`
	BlocksPerYear                 int64  `json:"BlocksPerYear"`
	ChurnInterval                 int64  `json:"ChurnInterval"`
	ChurnRetryInterval            int64  `json:"ChurnRetryInterval"`
	DesiredValidatorSet           int64  `json:"DesiredValidatorSet"`
	DoubleSignMaxAge              int64  `json:"DoubleSignMaxAge"`
	EmissionCurve                 int64  `json:"EmissionCurve"`
	FailKeygenSlashPoints         int64  `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints        int64  `json:"FailKeysignSlashPoints"`
	FullImpLossProtectionBlocks   int64  `json:"FullImpLossProtectionBlocks"`
	FundMigrationInterval         int64  `json:"FundMigrationInterval"`
	IncentiveCurve                int64  `json:"IncentiveCurve"`
	JailTimeKeygen                int64  `json:"JailTimeKeygen"`
	JailTimeKeysign               int64  `json:"JailTimeKeysign"`
	LackOfObservationPenalty      int64  `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks         int64  `json:"LiquidityLockUpBlocks"`
	MaxAvailablePools             int64  `json:"MaxAvailablePools"`
	MaxSwapsPerBlock              int64  `json:"MaxSwapsPerBlock"`
	MinRunePoolDepth              int64  `json:"MinRunePoolDepth"`
	MinSlashPointsForBadValidator int64  `json:"MinSlashPointsForBadValidator"`
	MinSwapsPerBlock              int64  `json:"MinSwapsPerBlock"`
	MinimumBondInRune             int64  `json:"MinimumBondInRune"`
	MinimumNodesForBFT            int64  `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil      int64  `json:"MinimumNodesForYggdrasil"`
	NativeTransactionFee          int64  `json:"NativeTransactionFee"`
	NewPoolCycle                  *int64 `json:"NewPoolCycle,omitempty"`
	ObservationDelayFlexibility   int64  `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints            int64  `json:"ObserveSlashPoints"`
	OldValidatorRate              int64  `json:"OldValidatorRate"`
	OutboundTransactionFee        int64  `json:"OutboundTransactionFee"`
	PoolCycle                     int64  `json:"PoolCycle"`
	SigningTransactionPeriod      int64  `json:"SigningTransactionPeriod"`
	VirtualMultSynths             int64  `json:"VirtualMultSynths"`
	YggFundLimit                  int64  `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock struct {
	Current []LastblockItem `json:"current"`
}

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn int64  `json:"last_observed_in"`
	LastSignedOut  int64  `json:"last_signed_out"`
	Thorchain      int64  `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`
	PoolShareFactor         string `json:"poolShareFactor"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), Total Rune pooled in all pools
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NetworkFees defines model for NetworkFees.
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// ObservedChain defines model for ObservedChain.
type ObservedChain struct {
	Chain  string `json:"chain"`
	Height int    `json:"height"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolLegacyDetail defines model for PoolLegacyDetail.
type PoolLegacyDetail struct {
	Asset string `json:"asset"`

	// same as assetDepth from pool/stats
	AssetDepth string `json:"assetDepth"`

	// same as addAssetLiquidityVolume from pool/stats
	AssetStakedTotal string `json:"assetStakedTotal"`

	// same as toAssetCount from pool/stats
	BuyAssetCount string `json:"buyAssetCount"`

	// same as toAssetFees / toAssetCount from pool/stats
	BuyFeeAverage string `json:"buyFeeAverage"`

	// same as toAssetFees from pool/stats
	BuyFeesTotal string `json:"buyFeesTotal"`

	// same as toAssetAverageSlip from pool/stats
	BuySlipAverage string `json:"buySlipAverage"`

	// same as toAssetVolume / toAssetCount from pool/stats
	BuyTxAverage string `json:"buyTxAverage"`

	// same as toAssetVolume from pool/stats
	BuyVolume string `json:"buyVolume"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// same as 2*runeDepth from pool/stats
	PoolDepth string `json:"poolDepth"`

	// same as totalFees / swapCount from pool/stats
	PoolFeeAverage string `json:"poolFeeAverage"`

	// same as totalFees from pool/stats
	PoolFeesTotal string `json:"poolFeesTotal"`

	// same as averageSlip from pool/stats
	PoolSlipAverage string `json:"poolSlipAverage"`

	// same as addLiquidityVolume from pool/stats
	PoolStakedTotal string `json:"poolStakedTotal"`

	// same as swapVolume / swapCount from pool/stats
	PoolTxAverage string `json:"poolTxAverage"`

	// same as units from pool/stats
	PoolUnits string `json:"poolUnits"`

	// Int64(e8), same as buyVolume + sellVolume
	PoolVolume string `json:"poolVolume"`

	// same as assetPrice from pool/stats
	Price string `json:"price"`

	// same as runeDepth from pool/stats
	RuneDepth string `json:"runeDepth"`

	// same as addRuneLiquidityVolume from pool/stats
	RuneStakedTotal string `json:"runeStakedTotal"`

	// same as toRuneCount from pool/stats
	SellAssetCount string `json:"sellAssetCount"`

	// same as toRuneFees / toRuneCount from pool/stats
	SellFeeAverage string `json:"sellFeeAverage"`

	// same as toRuneFees from pool/stats
	SellFeesTotal string `json:"sellFeesTotal"`

	// same as toRuneAverageSlip from pool/stats
	SellSlipAverage string `json:"sellSlipAverage"`

	// same as toRuneVolume / toRuneCount from pool/stats
	SellTxAverage string `json:"sellTxAverage"`

	// same as toRuneVolume from pool/stats
	SellVolume string `json:"sellVolume"`

	// same as addLiquidityCount from pool/stats
	StakeTxCount string `json:"stakeTxCount"`

	// same as uniqueMemberCount from pool/stats
	StakersCount string `json:"stakersCount"`

	// same as addLiquidityCount + withdrawCount from pool/stats
	StakingTxCount string `json:"stakingTxCount"`

	// same as status from pool/stats
	Status string `json:"status"`

	// Int64, same as history/swaps:uniqueSwapperCount
	SwappersCount string `json:"swappersCount"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64(e8), same as swapVolume pool/stats?period=24h
	Volume24h string `json:"volume24h"`

	// same as withdrawCount from pool/stats
	WithdrawTxCount string `json:"withdrawTxCount"`
}

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`
	Asset                  string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Int64, number of unique adresses that initiated swaps transactions in the period.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Liquidity Units in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// PreflightStatus defines model for PreflightStatus.
type PreflightStatus struct {
	Code   int    `json:"code"`
	Reason string `json:"reason"`
	Status string `json:"status"`
}

// ProxiedNode defines model for ProxiedNode.
type ProxiedNode struct {
	ActiveBlockHeight int    `json:"active_block_height"`
	Bond              string `json:"bond"`
	BondAddress       string `json:"bond_address"`
	CurrentAward      string `json:"current_award"`
	ForcedToLeave     bool   `json:"forced_to_leave"`
	IpAddress         string `json:"ip_address"`
	Jail              struct {
		NodeAddress *string `json:"node_address,omitempty"`
	} `json:"jail"`
	LeaveHeight     int             `json:"leave_height"`
	NodeAddress     string          `json:"node_address"`
	ObserveChains   []ObservedChain `json:"observe_chains"`
	PreflightStatus PreflightStatus `json:"preflight_status"`
	PubKeySet       struct {
		Ed25519   string `json:"ed25519"`
		Secp256k1 string `json:"secp256k1"`
	} `json:"pub_key_set"`
	RequestedToLeave    bool     `json:"requested_to_leave"`
	SignerMembership    []string `json:"signer_membership"`
	SlashPoints         int      `json:"slash_points"`
	Status              string   `json:"status"`
	StatusSince         int      `json:"status_since"`
	ValidatorConsPubKey string   `json:"validator_cons_pub_key"`
	Version             string   `json:"version"`
}

// ProxiedNodes defines model for ProxiedNodes.
type ProxiedNodes []ProxiedNode

// Queue defines model for Queue.
type Queue struct {
	Internal int `json:"internal"`
	Outbound int `json:"outbound"`
	Swap     int `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, unique users (addresses) initiating swaps in the last 24 hours.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, unique users (addresses) initiating swaps in the last 30 days.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Int64, unique users (addresses) initiating swaps since beginning.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip by swap.
	// Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps to asset denoted in rune
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps to rune
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64(e8), toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// Transaction defines model for Transaction.
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolLegacyResponse defines model for PoolLegacyResponse.
type PoolLegacyResponse PoolLegacyDetail

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ProxiedNodesResponse defines model for ProxiedNodesResponse.
type ProxiedNodesResponse ProxiedNodes

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *string `json:"period,omitempty"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *string `json:"status,omitempty"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"vwAAAP//UK1C88zdAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
