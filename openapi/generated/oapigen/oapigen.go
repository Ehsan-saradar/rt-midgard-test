// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64, Average bond of active nodes.
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64, Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64, Maxinum bond of active nodes.
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64, Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64, Median bond of active nodes.
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64, Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64, Minumum bond of active nodes.
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64, Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64, Total bond of active nodes.
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64, Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64, Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64, Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64, System income generated during the time interval. It is the sum of liquidity fees and block rewards.
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64, Total liquidity fees, converted to RUNE, collected during the time interval.
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistoryItemPool defines model for EarningsHistoryItemPool.
type EarningsHistoryItemPool struct {

	// Int64, Share of earnings sent to the pool during the time interval
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`
}

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string `json:"address"`
	Chain   string `json:"chain"`

	// indicate whether this chain has halted
	Halted bool   `json:"halted"`
	PubKey string `json:"pub_key"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                  int64 `json:"AsgardSize"`
	BadValidatorRate            int64 `json:"BadValidatorRate"`
	BlocksPerYear               int64 `json:"BlocksPerYear"`
	ChurnInterval               int64 `json:"ChurnInterval"`
	ChurnRetryInterval          int64 `json:"ChurnRetryInterval"`
	CliTxCost                   int64 `json:"CliTxCost"`
	DesiredValidatorSet         int64 `json:"DesiredValidatorSet"`
	DoubleSignMaxAge            int64 `json:"DoubleSignMaxAge"`
	EmissionCurve               int64 `json:"EmissionCurve"`
	FailKeygenSlashPoints       int64 `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints      int64 `json:"FailKeysignSlashPoints"`
	FundMigrationInterval       int64 `json:"FundMigrationInterval"`
	JailTimeKeygen              int64 `json:"JailTimeKeygen"`
	JailTimeKeysign             int64 `json:"JailTimeKeysign"`
	LackOfObservationPenalty    int64 `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks       int64 `json:"LiquidityLockUpBlocks"`
	MinimumBondInRune           int64 `json:"MinimumBondInRune"`
	MinimumNodesForBFT          int64 `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil    int64 `json:"MinimumNodesForYggdrasil"`
	NativeChainGasFee           int64 `json:"NativeChainGasFee"`
	NewPoolCycle                int64 `json:"NewPoolCycle"`
	ObservationDelayFlexibility int64 `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints          int64 `json:"ObserveSlashPoints"`
	OldValidatorRate            int64 `json:"OldValidatorRate"`
	OutboundTransactionFee      int64 `json:"OutboundTransactionFee"`
	SigningTransactionPeriod    int64 `json:"SigningTransactionPeriod"`
	YggFundLimit                int64 `json:"YggFundLimit"`
}

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn string `json:"last_observed_in"`
	LastSignedOut  string `json:"last_signed_out"`
	Thorchain      string `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64, total deposits (liquidity additions) during the time interval
	Deposits string `json:"deposits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, total withdrawals during the time interval
	Withdrawals string `json:"withdrawals"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// Liquidity provider data for all the pools of a given member
	Pools []MemberPoolDetails `json:"pools"`
}

// MemberPoolDetails defines model for MemberPoolDetails.
type MemberPoolDetails struct {

	// Int64, total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// Int64, total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Int64, total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`
	BondingROI string `json:"bondingROI"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks).
	PoolActivationCountdown string  `json:"poolActivationCountdown"`
	PoolShareFactor         string  `json:"poolShareFactor"`
	StakingROI              *string `json:"stakingROI,omitempty"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64, Total Rune pooled in all pools.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64, Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NodeKey defines model for NodeKey.
type NodeKey struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Daily active users (unique addresses interacting)
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Daily transactions
	DailyTx string `json:"dailyTx"`

	// Monthly active users
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Monthly transactions
	MonthlyTx string `json:"monthlyTx"`

	// Total buying transactions
	TotalAssetBuys string `json:"totalAssetBuys"`

	// Total selling transactions
	TotalAssetSells string `json:"totalAssetSells"`

	// Total RUNE balances
	TotalDepth string `json:"totalDepth"`

	// Total staking transactions
	TotalStakeTx string `json:"totalStakeTx"`

	// Total staked (in RUNE Value).
	TotalStaked string `json:"totalStaked"`

	// Total transactions
	TotalTx string `json:"totalTx"`

	// Total unique swappers & members
	TotalUsers string `json:"totalUsers"`

	// Total (in RUNE Value) of all assets swapped since start.
	TotalVolume string `json:"totalVolume"`

	// Total withdrawing transactions
	TotalWithdrawTx string `json:"totalWithdrawTx"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Int64, the average slip by swap. Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64, volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64, volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64, the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64, toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// TxDetails defines model for TxDetails.
type TxDetails struct {

	// Int64, Unix timestamp.
	Date   string `json:"date"`
	Events Event  `json:"events"`
	Height string `json:"height"`
	In     Tx     `json:"in"`
	Out    []Tx   `json:"out"`
	Pool   string `json:"pool"`
	Status string `json:"status"`
	Type   string `json:"type"`
}

// Coin defines model for coin.
type Coin struct {
	Amount string `json:"amount"`
	Asset  string `json:"asset"`
}

// Coins defines model for coins.
type Coins []Coin

// Event defines model for event.
type Event struct {
	Fee        string `json:"fee"`
	Slip       string `json:"slip"`
	StakeUnits string `json:"stakeUnits"`
}

// Option defines model for option.
type Option struct {
	Asymmetry           string `json:"asymmetry"`
	PriceTarget         string `json:"priceTarget"`
	WithdrawBasisPoints string `json:"withdrawBasisPoints"`
}

// Tx defines model for tx.
type Tx struct {
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`
	Memo    string `json:"memo"`
	Options Option `json:"options"`
	TxID    string `json:"txID"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse struct {
	Current []InboundAddressesItem `json:"current"`
}

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse struct {
	Current []LastblockItem `json:"current"`
}

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse []string

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodeKeyResponse defines model for NodeKeyResponse.
type NodeKeyResponse []NodeKey

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse []PoolDetail

// QueueResponse defines model for QueueResponse.
type QueueResponse struct {
	Outbound string `json:"outbound"`
	Swap     string `json:"swap"`
}

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// TxResponse defines model for TxResponse.
type TxResponse struct {

	// Int64, count of txs matching the filters.
	Count string      `json:"count"`
	Txs   []TxDetails `json:"txs"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval string `json:"interval"`

	// Start time of the query as unix timestamp
	From int64 `json:"from"`

	// End time of the query as unix timestamp
	To int64 `json:"to"`
}

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval string `json:"interval"`

	// Start time of the query as unix timestamp
	From int64 `json:"from"`

	// End time of the query as unix timestamp
	To int64 `json:"to"`
}

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing.
	Pool *int64 `json:"pool,omitempty"`

	// Interval of calculations
	Interval string `json:"interval"`

	// Start time of the query as unix timestamp
	From int64 `json:"from"`

	// End time of the query as unix timestamp
	To int64 `json:"to"`
}

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval string `json:"interval"`

	// Start time of the query as unix timestamp
	From int64 `json:"from"`

	// End time of the query as unix timestamp
	To int64 `json:"to"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Interval of calculations
	Status string `json:"status"`
}

// GetTxDetailsParams defines parameters for GetTxDetails.
type GetTxDetailsParams struct {

	// Address of sender or recipient of any in/out tx in event
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx in event
	Txid *string `json:"txid,omitempty"`

	// Any asset used in event (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of event
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"27dv/x0AAP//9jGUENN1AAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
