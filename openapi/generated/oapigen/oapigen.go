// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {

	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Represents a digital currency amount
type Coin struct {

	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {

	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string  `json:"address"`
	Chain   string  `json:"chain"`
	GasRate *string `json:"gas_rate,omitempty"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                    int64  `json:"AsgardSize"`
	BadValidatorRate              int64  `json:"BadValidatorRate"`
	BadValidatorRedline           int    `json:"BadValidatorRedline"`
	BlocksPerYear                 int64  `json:"BlocksPerYear"`
	ChurnInterval                 int64  `json:"ChurnInterval"`
	ChurnRetryInterval            int64  `json:"ChurnRetryInterval"`
	DesiredValidatorSet           int64  `json:"DesiredValidatorSet"`
	DoubleSignMaxAge              int64  `json:"DoubleSignMaxAge"`
	EmissionCurve                 int64  `json:"EmissionCurve"`
	FailKeygenSlashPoints         int64  `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints        int64  `json:"FailKeysignSlashPoints"`
	FullImpLossProtectionBlocks   int64  `json:"FullImpLossProtectionBlocks"`
	FundMigrationInterval         int64  `json:"FundMigrationInterval"`
	IncentiveCurve                int64  `json:"IncentiveCurve"`
	JailTimeKeygen                int64  `json:"JailTimeKeygen"`
	JailTimeKeysign               int64  `json:"JailTimeKeysign"`
	LackOfObservationPenalty      int64  `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks         int64  `json:"LiquidityLockUpBlocks"`
	MaxAvailablePools             int64  `json:"MaxAvailablePools"`
	MaxSwapsPerBlock              int64  `json:"MaxSwapsPerBlock"`
	MinRunePoolDepth              int64  `json:"MinRunePoolDepth"`
	MinSlashPointsForBadValidator int64  `json:"MinSlashPointsForBadValidator"`
	MinSwapsPerBlock              int64  `json:"MinSwapsPerBlock"`
	MinimumBondInRune             int64  `json:"MinimumBondInRune"`
	MinimumNodesForBFT            int64  `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil      int64  `json:"MinimumNodesForYggdrasil"`
	NativeTransactionFee          int64  `json:"NativeTransactionFee"`
	NewPoolCycle                  *int64 `json:"NewPoolCycle,omitempty"`
	ObservationDelayFlexibility   int64  `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints            int64  `json:"ObserveSlashPoints"`
	OldValidatorRate              int64  `json:"OldValidatorRate"`
	OutboundTransactionFee        int64  `json:"OutboundTransactionFee"`
	PoolCycle                     int64  `json:"PoolCycle"`
	SigningTransactionPeriod      int64  `json:"SigningTransactionPeriod"`
	VirtualMultSynths             int64  `json:"VirtualMultSynths"`
	YggFundLimit                  int64  `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock []LastblockItem

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn int64  `json:"last_observed_in"`
	LastSignedOut  int64  `json:"last_signed_out"`
	Thorchain      int64  `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {

	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// ObservedChain defines model for ObservedChain.
type ObservedChain struct {
	Chain  string `json:"chain"`
	Height int    `json:"height"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`
	Asset                  string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Int64, number of unique adresses that initiated swaps transactions in the period.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// PreflightStatus defines model for PreflightStatus.
type PreflightStatus struct {
	Code   int    `json:"code"`
	Reason string `json:"reason"`
	Status string `json:"status"`
}

// ProxiedNode defines model for ProxiedNode.
type ProxiedNode struct {
	ActiveBlockHeight int    `json:"active_block_height"`
	Bond              string `json:"bond"`
	BondAddress       string `json:"bond_address"`
	CurrentAward      string `json:"current_award"`
	ForcedToLeave     bool   `json:"forced_to_leave"`
	IpAddress         string `json:"ip_address"`
	Jail              struct {
		NodeAddress *string `json:"node_address,omitempty"`
	} `json:"jail"`
	LeaveHeight     int             `json:"leave_height"`
	NodeAddress     string          `json:"node_address"`
	ObserveChains   []ObservedChain `json:"observe_chains"`
	PreflightStatus PreflightStatus `json:"preflight_status"`
	PubKeySet       struct {
		Ed25519   string `json:"ed25519"`
		Secp256k1 string `json:"secp256k1"`
	} `json:"pub_key_set"`
	RequestedToLeave    bool     `json:"requested_to_leave"`
	SignerMembership    []string `json:"signer_membership"`
	SlashPoints         int      `json:"slash_points"`
	Status              string   `json:"status"`
	StatusSince         int      `json:"status_since"`
	ValidatorConsPubKey string   `json:"validator_cons_pub_key"`
	Version             string   `json:"version"`
}

// ProxiedNodes defines model for ProxiedNodes.
type ProxiedNodes []ProxiedNode

// Queue defines model for Queue.
type Queue struct {
	Internal int `json:"internal"`
	Outbound int `json:"outbound"`
	Swap     int `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, unique users (addresses) initiating swaps in the last 24 hours.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, unique users (addresses) initiating swaps in the last 30 days.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Int64, unique users (addresses) initiating swaps since beginning.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {

	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {

	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at the end of the interval
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ProxiedNodesResponse defines model for ProxiedNodesResponse.
type ProxiedNodesResponse ProxiedNodes

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {

	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x963LjNrPgq6C0e+qzE4aW5Ot4a+qsPZ45mT1z8Y4nOZWKsw5EQhLGJEAToGRNal5r",
	"X2BfbAsNgFeQomQ75+SLvx9fxiIujUZ3o7vR3fhjEPA44YwwKQanfwxSIhLOBIE/zgJJOROfzG/qp4Az",
	"SZhU/8RJEtEAqyZ7XwRn6jcRzEmM1b+SlCcklVSPhPVI6p9Ukhj+8d9TMh2cDv7bXgHBnu4v9vTMg2/e",
	"QK4SMjgd4DTFK/V3wDM9fUhEkNIE2p0O3jJ5dOAhlsUTkiI+RSkRWSQFirEM5pTNkJwTNKMLwtCURpKk",
	"wh/kowuZUjYbfPvmDVJyl9GUhIPTX81cXg79b3kHPvlCAjn4pnpUAflEZJYygTBDALOCxfRHU566wPjm",
	"DV5xJiRmcjtcd2EyH9kF7Oc5TxkPCcpbIUsAANYFSeT8RyokT1ePDll5cBdw8B1hFqIkpQFBc9vUG7zG",
	"KaNsJp4KtNr4LuiIaVIG60eCIzl/dGj0sF3ENocWSEgsM01m72k4w2mooHrLJjxj4VkYpkQI8vgkVp+g",
	"k9LeshBaozPTukpx77CQk4gHt48OZT5yJ3h5qxpY9C6jIZWrp6K4+gQuIP+DynmY4iWOBLBFSBIuqKyQ",
	"4HuiBOAFkZhGj7/TldFdIGq5iNRkmCr+QJFdGEpSvqAhSVGIJQYixUgkJKBTGqAYRi5W8FSwO6EuBHUU",
	"gYCObVtv8IHIJU8fnxzNuGuOkCY+TT9AIsDHwydgaRh1c9gUByXZJKIBuiWrHMZLzqNHB1ENqinRBefH",
	"BnChplogPM4ISjiPLHBXEj/B0ZuP3A4mfK6A5FuYxBNizLm1Z5YLFBgWXQBNyu8pCZ+G0sqDd0pmaFGV",
	"yv87Ixl5dIhg1E5QoEUVlE9kQVJBPv/48dMHHD8+ULXxewpfjCIqpNpT2xEx1bsufbE+utVCnoYVNBuA",
	"OOgD9yziExyh89eXV0uc5HJE/fFUB3BpbCejKjjAHvDQgkdZTDw0JQTOYRHRpHwGW1w/1SlcG78fSnMC",
	"cJ2+iigA8p/fPRV+i6GdrMUljqzgSeRceEjCTxPOQuEBmvUPCxxlBCkNjYQF0r95BoyS3do0ErUdlp8E",
	"OOZshpZUzlFKIixJiGSKmbDmnlczYkMsSbvliRlHksZESBwniuWUIqFVSSzRck6DOfxkgFhiJcxmVEii",
	"rM2GKeoN5oTO5u2mrv78GBNR5ppEa+llhBRY4qUJBl4/k/5zMZLLro+JxMDna9U40+6bN+CZAz0fM/kn",
	"g67IVjQBgUMcUbbg0YKEiLKWmRv7UR9fm3WuPQoVLxKB6LS841QgtYiIqAXzVH21y+dO5OCUICFpFKGE",
	"sJCymT/wBoRl8eD014HIgkCdDd7AfCy5Qeow1yH8vEpI4QApD7rEycAb4DDMDZ+BN1gaA2fgDULOFLd5",
	"g5RMM6bIViypDOaOyWtOG70bplWOPKByTTGeZuScwUq013TweIOzEozvS0RalQ25mfMTo1K0Mi2O1RGi",
	"UFLYRZnqgbAQdMYKCtUmCALmFVmUM3rRz5h/a71YNdBcazzXFvcSp6Form1SfHXSq5LRHZ8T0P5bPtdg",
	"LU9VGbgyjHMJnIXviUxp4FgBXpAUz4g6FxZEtWzZoB1ysuuhM90azh5LvQuCGKioDto3o19JzMLJauPh",
	"he7XPn6M72mcxT2hf4/vKcvi3tCb0ftC/1433wB6ElLM+gIPjfvDDs17g14dfD3klG2Cd4X1TfCuR+8N",
	"fG34tdCDutQT9s+5rtUHchi5L9zVoddAXZMG9SV4DkZ2EJhr51xc5FiJk5lddObcPyczuYUVjwrHfENc",
	"XSkxJlXv/OT5pHRu9Y3cY3W0D06nOBIkH3vCeUQwa6CwdSgXWK+4SxX8RJKUCKUQIYxCOqNqQ4MsTQkL",
	"VuZEa+jK5ucuysBCEInOoKHvlKuqQXOIM+hHGXr149nbD/7VL+/PP75TFk2M1x+GekzPwteGhf43VYAz",
	"h9LWsb1qr27Ajlk7epVQQFeXN0cHPXsDsivdNVZ6dr+CxuULpCouq7B4lXXVp3IhunIB1MASZZKkCxyJ",
	"Te6R3uadjEmxSWel3TUWCYN4JWjWreRtGe5eJFTpLUnsIqdGm6aOoygbmnVyHdgJuRaa85L6GcxvLOHf",
	"RMtr9U+79FYWvUxp4FD+30QcS89c3qljxc6VZoz46K1PfPinBWfPtMglSsdsP11dtE4IS2lM+tPVBdqZ",
	"YKGMIL3ckJCECAlf1NJ3nUKIsPAzjdvt/s8GWcr0VxNOsuBWz5gxel94BFxj9zQacsmNoN0Dtkuhe1MS",
	"+aS2aPsphcSpXIvBCZlRBn6qbfAoVkzOr7IkiVats1ypNkhAo4csRw3TvV16poduVdY5h9aq9Bw7BUzo",
	"e1Slqd2tIaiJwWIbC5bwyjKnTFwVuVBn2wbZV5Ba3UyLhnUy9z1x2eRPybpPT9Y9NsCFlnrowvbnam2k",
	"jY/Wen842bY5XVsB6XvAOiFpnrGuZg5XwuwDD8krt3o7VUeQ2n1r5BdytGxVoTBLbUwSUEaXJJjUnDPr",
	"TC0TvQDtEYmplCTcbEIOfj6Ljs45r+Y4BcLO42GUpYAk32KhpNeEKyFJjCgLeEzQjDCS4q4F+uitRFTA",
	"B5HFVdfblBAdSlFB2mOoAXb6DRWBB+IcfJ8b4Tyf+Q0hfairijsPBZwtSGo8659++vBa/RRFJNiU6Fqc",
	"6BYhxbUVwcFcH2c2nK4+9rYy4dJEBNTlgjrYNtM6QWfqVDY7zmL/mj3mibMJJfY69KskU5NPJS5uChIX",
	"oXtViVrDtqWLPseC3cEGegDfpEJIHZTpsKre9WaSmmgpWKGkhv1DIOuF2E4E6ovQfEGUAeOhHfi9Aiv6",
	"3sq03Taec9ySgslUjVWFli6DosexBMCZc9AKqh24uqALsovUPPiWMDRNeYx2GJlh/aFQW8U1w6VrkAmO",
	"MAvU/lH5D4GEFYeicjSAnADadPOTorPH2Vi1wFY/aWUKJRd6bG1tsh3YEbufGSPqn7sFDB4Sc75k7aA4",
	"bsisWv6uxsxNrLSuo9j9Et26GNXErzZUKcWJSkg67g3TjKCY4Dy0dQUnDdMolxzlXZsOUKVNXq1Y0GdU",
	"H73BkbA/mphZpS3o29DAxo5nib2WC+aYMuesIsCMkfTH7lt7GAN8p9IoHYHb21Hbs9KCqxPly3VhvhGZ",
	"21djrndsU5md7Zo6swkvKruvB5MglaO78eHx7Ggog/tFdhAuplEivs5ul3f7B+HhYnmUzI7HR7Ppvou7",
	"9E5Uhjz//MrVcobFTWpiN4rGh0fjw6Ez7gJHkjguNai5bkfLOZFzosQjFZog0BwLZPp5a1303iDJJje3",
	"ZFUFSMo5T5NsMsJhuGQJSe7CF+zuLp7h1VH8JRuu7o7HifySBfHtCyzxUpLFweKAHS1vCTlcjY/uToYk",
	"CGbD+9v9Y6fA45kkaXXO4f2L8ODF0QU5PjnZP54e4vHk7Ojg1eRg+PpoHIxevDkPzo+Op4eHeH2yhOEM",
	"uzYv3/YcpW4SrfioG7RzJhRPXtGv1e3bH3oD4/JXOyOPDgoA1WE+08HE5zj8GUc0xJKnn+okcLTFGCSM",
	"KKuB4uykeFtckvQXgqs4P9ofjfZf9Jv61TxLmbV3t4EdBvhEZGE1b4PFCyLULudYuNLXMvkwo3G/YXg2",
	"icgVnbH3+P5sVsXi+KDXGK9jKgTl7FWWLmq72av/G0yjfyerGWFXERbzS04N1eXjHI+Hm4wk6Kx1qH5o",
	"eZNF0ds4eceFuEy5JBAro+mniuWDg+Fw2BO4jIXv6SyFSL2HENBbFhCm9LEmwkc9YflfmEbKdNBorw2x",
	"6QgK3dsM8Q4Htx+nHydCYUIh5ZIwHMnVFvuVa0LveHD7U+LYqX4gKSZYYBrhSUQurfW76bre4/urJU6U",
	"pAFAthqDMqXQ6fBwczmwxRglLnjD07LU3HbAR1gYjbP4nLPwLbO6d5l+9f82GQui0NXy3nyuDHawzSC/",
	"zGZhigWNthBkH8BKKkUmviHu5fUbjSzV9r9aBVF1lMPRyUG/IUq8dUEivHoTkXs6oRGtMdnhBqORNsk6",
	"6jdI9PDT34aT9sB0vwHdeD7YH/fsr85PymYleC5JSnlYO9j7DfYzTWWGo/dZJOHaapvz65fZTB0372hM",
	"5cY7XVMiS9qeQ3lz62J1ZauuNjm1ILdS49BR6ipHmwrRqhB0H/BtR3Xj5G2co81jseOUazu1XKeQ41Bx",
	"nBHrRL5DgrsEslOwdgjKFsHXLX6c4sQhHlq5vcy1HRzo4qcaf7hMoCIzta95nvdos8urDRpGlct2/nDu",
	"vB/AQt5wjb3wptZpdNjTjoFRdHzzjQnaL0nPF73GUNZxE+7R4cHJ5mLG2qqN1TVBLU/s3Lx64u72F671",
	"oTa+cW0MsPWVazsovUnUCYuDUl3tXB6ks4q78mfIwerhSwUvp7DB8l0XhdfsgjBufboZIygTtqW+2cHS",
	"jgNdWy5qykkNr3pWq8hTuTugWzdXb5TwqYm7YqGJj7LTO3CwswYJu+2QfSr7kntDB7P22q4/O1yLxglJ",
	"Y6zovHqWX2LaHQSd4DRP4LBJLmqdGikmZ2uJBUrwioRoQgKcCX17V8yJIi7ENUvyaVtQwEh33C0jsnTD",
	"EMwxmxGBdpal6gI/5BSxu9El7l/7pnQTWrDYAqm0qTCyndkDhZEdp0sa2TZ9JVE+5oaM1yTrvrzeCxtd",
	"Uz5A8JWIvqfsq+DcLfz6hc61nGitktMp7F2njZs4nTu0TqY1cFynJy1taozvUiiqlUMa53tL9Mc7KmSe",
	"rluqz9EsKiIQDZW5NKUk1Cm9xeV1cQ/RS3PRoLqDQZy5hu3rtfEIjpiCszAkYV+RoZZQpAaCVJysbM2U",
	"tkDps+LWzXXBb7CCMiV7J6tS0mF76LVJAF2f1QH3/JNMIsYt8CsiPUQVA0URmhDz63JOtNgHxkwwTRFO",
	"U7ogokWtUMPbQjisN/4KGQNRBv2wGGJJ3tBUdO6Vh36qHBZ54MRU9dRyzORyFkoNZaWtbJta2XBbzaxM",
	"mG0n7hmSDsirp7DKOZZoQiJuZXgnRbmDTxTHoJSIXF2CcJ2UTBWLS96mdPTlJhDrGzKTGd/NS3bADVgJ",
	"ZGUPToKhN2ckTfDrOUmBsQkj1c7q3nzkDj4pI7UmrxwB4sUWe2XpWcVlTUjVV9iQHQ0Gr7Ndu1yvmsFV",
	"xL03idv5ako3/BM2GU2/jKO7LyfhIj1MsngazINjJqPpXTheHH0N7++WX8hyejjw1tcFaM9Gr+TVryu1",
	"6Mpv/5Yn3q+tS6NalftBan+PYivlPnni/5p+dvOKvt8ce2RLazmrUOrcT8e+5eWPSjlJAikOgOxVzdkQ",
	"VFaK5Nb6X/9SDrprRwC5ka8fcn18XTJuPTq8M5uw3NYEepdy5rsTEYumRYj42eUvrWbea3/mo6E/HKGX",
	"aPQvPnotJI2xJFawwySZRqwerQhprBiEJlzqmqUEHHVI0K/EQyQ2fnnVYEE8HU4lUEJStCI41ZUjlXDS",
	"AYJTHEieopfXbOc/CLmNVtoLHfCYwOp0Iir6Ho12/8/hGP2ARm65mQunR1q8q0JeFRHXrIoJ9MiIyNnf",
	"YEMHkqqTmIAl8t14dz1aGLmXcM/yY6+yNTs6+E3bnbsWLWoQFKhR/DaVAfK3wc0PHBTy1sNLexpSEpsK",
	"SNbM106FfBi0Q5lBWWuQLETcvwG8tWw5+nXo+6PfzJxqYOPVoUYtkByJJKKytLdELglhrv1XOwYc71+z",
	"d5d6W9DLPKnjO1QDCv2Pa1aQMzp9iUptd0boh3qH3VbPic1bf5CELKf5byoiTd9NZGSlqoCHBI8to8Uo",
	"BnKbEECMEabGo1SiNjc6anzQV0miDAxVMA59dG6cecbqYqFupOtY2cQUHOepQpRdM7Ig6UoT6s5khUIy",
	"pYyqOU12pjFtdIcEAISh6nzbta5PWoh0LuqVEThK0FgeNf3WV08uny6NLIHyUVyju+Yp6SCK5ubUltWU",
	"SO3yo8nklROuJvN/a1c53GHk70wNPmZKd+qsIyF4QG1NKsxMjSQffWSk3BLpGNN0RsIi/cVVxqmve6Ot",
	"YIHCrSOHMhwfHo5eNBdlPpTKfVZV3Xos6+x+GU73s5QMk9nhVP2W3e+v4hdseDQ+Oo5uUyIOD74uv8wP",
	"gpPhwQn5Ov9yOBwf3K2cNpTi9FabDGo05rd2bk18ztPRcLwaxvtZImfDxSILyWo+HKbjKft6PFzeHYcn",
	"q+M4G8+ccpIEyfjw6HbUnDz/9J+CmRoLltFUhtrL99VJzKBr9r3oA7px0JO5cg9f2Tvb9VfQ7vDtog5e",
	"EZhi42163vOaIVyLLZWRdTvqnIfW4xRb8P/ckgr+f5WaCg+ve9CuHnYo5TYn95KkAWFS/fMXSqLwFGHG",
	"MhyhFIobI2KU9dDcuYA/bUnIrTC5RR6S+FZ9sWq8vqlQCwcHGw6CVnw/RgkGv0V3c1YJ/Kz0C1myPdQI",
	"HiLKQskjfzx0pfAR+o9dXsF/3CIK/p9UKsE5j677Oj5Yv3WmVKm+3VUK6hIn+TqAnMYHc33uh9qTZm69",
	"K/dPfu9qRgVk29ZksLxTKpj4OGUaykWn+x4p5dLezYOlXlb7UYJFtAael9Lfyxd/Yy7IT9sv7B4QAdJr",
	"2sb93kPDQDabtXOdm8Z49Jraff3ZXh/siY7nv2fBI1sAL6JJy4xHB2jnHAsqUAKhlB4a/gAx0B5azklK",
	"EPzxcjQc/otjx0EWnpZn+euG2jxckflb6zFPpsY4B17iZDNhrCkVzvJWyavabCH2SkO3y7eH6F2Pq3a5",
	"nUggMM/+FHHhmKwdpO12udS1fei1dQI6R7f59C2DP4COqpE+jgkU6/1ZW1WfqxWg7Taq6Nk68NbblHdu",
	"HfoBm1QJvHI7ZbcG3PZ1m0d3GdHX0v0wHhG2YycwTyH9qxIDLy8/fny32z7H1RInybpJilBD3Qlh+xAY",
	"xI+AoxsOLW00VQrVW5EE6RYtZ/ITWIOPEQC6XvF1R+1tGdDZf7pWVtoworP/jN18sEFUZ/8p26Zrsadz",
	"G7jTZm61tDe3nOtnQE3aVPSM2jlXFaZlPcfJls6D23VCVC2B6glYkbNl0VV2JPyzRLg25afTz5GSaURn",
	"c3mVK7A1h7e5XylniTeznFKCzbM6hV/84793K8pFy08Eh6s+Acmaus1knobNvar8da62cJobuNm7cXjp",
	"R+P9g8Mj1yonpmp8Ablue3zyoq0g4Y2ziAzUTMGTwF0hRt9e3mD79kR9OlenKU8DEt5IfhMRrK9HHRWG",
	"Ejc4o6E/Hvr7Q//AWVnmi9NdxXhIuld34NzSxmYBwK6NcFLa+mlHrjWYbLkbuFrp79Kr3ga5HtGx/HNT",
	"EHb3u3FVfiuq6twYr1DrRaaj5M796ut47UWfu99oPb/1vHdTfYiQa6kPshPTG6OZzbU2v0GARYTF/CZp",
	"JtUfjF104pIz+hGFdql0IygLXEnyrgkWNgf3JuBM3LTXRsKTwLlJC5IKWheaQ3//0B/2uiG9KW6Ic9FY",
	"pqVWEI0g85ySsCa2aqhx7aKTApoSqcboFWlUIKO2z0b41IVig58djLjmXNjArV86TBx0qd9ddKfPslr1",
	"Gich2aiI9S1tjGpXqzoT6xer8jm8AjAXgmpxsU2hXw0Y6fFSLDStaAj1ZzrU73kSQP5u1hr6Lw2ej+1e",
	"UO0ByvYI6Mpbk5XYh3hlflorpIoHIzuDmzfOrwXuK3L//MdMqm2dxG2ohphGKy1JfxImpty5DGMnZ6oR",
	"2sG21t6utZUpmzlvGNGcZ85n7h/iX697yVHhJEcJpvDEXMuCY87k/CmXvD9EIV6JB/irbYRtNZrP+gHa",
	"R37spFd/Ow92QfAaOX2oPR913cV2ffDadXb34PvDsDfU1S0N/Qf43d0X8bV79p5oojKY9wgELa47GFQq",
	"0Vd+tru+7SdpMB4inuYv3Kbu6/6eLu06AouIAsnNtWafJfZxyjqn0lNI3h+bG/gL+4uCPhNvmw692eib",
	"nBrtM/TILS57nSoU2qijXXEgVXi+xqVVD1Knq6lxgjllfIsbyunraThj1nlvupxD7c6a+stWDR3jgkxx",
	"FkkbalK3f14zPInIeu2qOYwTmtLT09tXjymNsnHhmHLfrWvGOAHoaxs0IHCohLUmba98Ptr9FoQQgJFF",
	"QmQGh3h8uBXfvWZ8iprOVMXaNV+qh8Dn+54y2fz1EwkJiUu/+9fsnFqZNscLUqQIaGgQFkjEOIp0m/+E",
	"Sih/nzofro17NOKyNAUPyCvDDfbzmsGhmprzGyAgkgY6tGdT6mhBnV1W9zkYWFWmBRg9RecEa280IVe+",
	"WlMf1l/SL9pm3zGxVbtrFtnjOK6riJ3zlvTH1KSeOOdusPafQzl1cCXX+uXjUY5eWE/aaQFnDe3oKR6D",
	"etrm70M9Gopt6adt5h7080TRNb2lziPKml4mTEEtTfZrfS2lb1DOBiKmJlgeFq3TKVR6i5KnCd5ZSwlP",
	"IDv6GJguQqiA8oConx500CIiHhQP5CSDLSRCHofYmu9c4jT0PSqhG32Pqke+/aEsybcOSirxYT6t+aOi",
	"B1QnbY+zKqIiO2a9ZhVGzCfO/6wd/9XJzW87NcTvbl3Pqzsmo6puOU7Ryv6ujwapaTau06qKyM74jaqy",
	"1jyAqxEeveNHnLpzq2pUjzdZW1KsUkSkYQyWXynr/TyVTbRVwmyJk+pDTC21Fre8xlHju4U5wLZRHKYC",
	"FWR4kkeEt/lMP6sFdteHNA/bI57JJJP5y10JCXR1NXvDZG7ENrlfqmxKCQcV2Fx7ba+UWgvIESZTSnqW",
	"kNN3nZB8JeeE5sV6iIDFYVM3zk7aN7Patn/NZLpyeTDIfULTDmv1x4+fID7CvAxlSmVQZrIW8ns1PY5T",
	"ePIlI44aFfDzPwQM8fgJ0bU91zDky/XyzenaWY20rqejakXsTM0tbrBVe5jL8U5UtX9Xp5YsYguLcxk/",
	"v3u4C68YZGMPXqnr1g481/R9/Xf1+ZvEX2vxp77W/PfxV+kzH0cZ1NZYVxOvXkpETcZZKNDOhMu80JWS",
	"k6YAx+6Gr5gX4LzjwW2vEn26MEoEze1VoC7kUDLYP8+pQOQuw5FAv5cqgcBUoApKHGkMwE+/e+pMpxIF",
	"PJ5QRkS9jCg8nAsvAcP6bT0iU4One2l66o6lWe2yjHFTtUWv1qBbVwdWUMAybSGZUsKT6MD/NfvAJTnV",
	"z9JRgeRS0TLYebNZSmZYkry4tpzbs1Dfaz9A7a1hoYfiVno4wfVIY/4Raj82X2RtOxGuCAsrhfeaRwE3",
	"IYvr6qOA2JX3by+64aMhmmMx99EVj0k1U2FHZIHaUWepFoFiHOaRBeaaGHZ/F8V4pQ1sjL6SlGsCWZ8J",
	"DsCWn9zTa3Whv1FEz1H3YhXHxJzH1eVfkIDGOEI7P4z8IbrOhsP94CX8h6CRP9z1kH0mUaA5X6pVrWIo",
	"AoSjSk4mjtASCx8NzeObQEjRChXNnZHASiku3gN6oOJcqMvASzlfItBgxJwmRcHLjaJoWgU8DkOo42SD",
	"S3QSKs9kVyJqKcTmAUmohYiv121NScwX1hdS1C5V1Fs8ulvdu8e0hWqU3EieKKixuv9ezbho340mF3yD",
	"Z2KnXAfmM4kDHTEdQ4T2ICQL8T/zCkI+T3XAViMh1b4Ye6lL/ZxdvkV3GVG6bkmZh2rjbGWtjogydbIt",
	"KAacntNp+v/+r9CVwZKUJDglAinY0ljXp8MTRR+6YJkuCyU5mhCUEhzSaIWwzX4F48VUHYJwCR8UCgVV",
	"glPIsCoJL7JQ9KWfVVcbXwVYKWr6lIzhGAKt4weh12Yfo1WAxPhWV2v/ISSJksBM5jggWKz8HEkhJwLK",
	"2M55FKIgpRKEQmmpPvrM9XGGA12zOQ+QUTDpx6HIvWeCQcScZ1EIs61K4Ic0JYGMViA0qQTzprlRpVDZ",
	"08HYP/RPwHxKCMMJHZwO9v0hhA8n2LyKtbcY7xnxrf50WtFgbFoZj6EQsq1FTlOUkkjX+yqdBD46s6W/",
	"1Jk9I4yk0GiyQpwRxFMU85RcM8ocx0he6FwhDSrwmaFKlQzKex6TmGuisD/gleVxytSE18zM6D64fPQJ",
	"WguEUyW9ZpRZaEF34VN0OPTRGxpJtUNq+AlBOEkiSsJrJrnZLTsc6B3q6NGvX4WD08G/EXlm0Kywn+KY",
	"SAgV/LWO7Vc8jjESimUAiIgK6aMzaxhOkdAaAVeoD2hCiZZ/ihkp2wOuKiHHbM+1LZGNS5n/29bwVZbn",
	"AJasxBWOSWG5wkvOShw6gva/eQ0hflGH/L6gpzK8FWDHb47GB0f7xxevR8cvjo4Oz8/298fj85Ojg4vz",
	"F2/2h8Ph6M3F/vH5wevhxXh8Njw/ev3q9dHZ4fnw+OTi7PygZQXyHmJvNgD/jK2sxxuSPEWlToPZgJ1X",
	"P569/eBf/fL+XKeZVl6n8j9/fP/x/IfR61EbXm3yXn+wPhYcpiyDCjWZuDM1hrCFeDm7ZjtiiRM4yfPA",
	"Iy8/GT0UcsURnom/9kzg326NimCMSpXmFkyrFWy0JFapHKyEhK4GQUIPhTocSaEfnr52zRjBM2XlKRuP",
	"a8X4nsZZPDg9HHoD4y1sCaGvQ2ckhtptPp0KIitAtcGkm64BqguO35SKIRLOzBvo4+GwTUXJ2+0ZKfTJ",
	"/ACKisjiGCu9eGC+IiXy4ZM6H0IetJ4NV0s8m5F072NCmDqS9/2hdaoGGiOF8A95kMUKHN8lHi94oIP1",
	"myuq1SJsmbI6k6it7MJMjq3CiWdK+g6uysAOfrNrnuev+zuX/QmoT1m1SCtfCPQtU5J3TsxT/MiuxsoE",
	"fUQ31v6jnm2b/dRdW7ZTf0RvlU6Yr8ykFYO9LPb+UKbBt7ULLWrwW0NeG9zCaHg0IP41U2cwmHaKPxOe",
	"agVPFzipmvhQ8LPkWbpmxo2mGoCVA6/PyyVHMQ+JOL1m3yFl4yHrxUP5KYqoNOJAICXrQEtTCKcxMW4m",
	"4aM3cD/JQqWNhWDJLWkUXTMEWqcpW20OnXwO0BWwGtC3AKhjygEDRoKyWURgHt//zJEgONWlkhOSKs62",
	"b7iQe6UI5g4vActXw9thT1HChaBK+dXYPEWHMWUepD54KMRKNhNy6yEITPXQXYZTSVIPKmMDpHDhfIp+",
	"Hfn+wXD4m48uyBQ8RIUkzd2mPrrg7B/SFmpGdFoskAoEdbghcPc70Kn3JD9FPDEGH2XS0x48QQLOQljM",
	"pQU/E3hGjEZX2u3vdBj8SGc2nKLf/9V+fBnilTK8x0ewgpej4e/15mhCpupoU2B0ddR/Sf5ydDQ8ORkf",
	"Hg31WFAg2Y6Fp2rz1LL6DKbaqeGOjk+GJ2a4Cw2Srno9tUQmuaE4cxAIiLiSRj0Ao8lTP5U/M770FT1+",
	"ZNGq9NjKwXBY7BVoqPbsO1Wtf28CXQPTjYhrdlkcW+BaMHsGm6WGKGHA3iqx0oNdFgoUE4l94zxT5rWc",
	"k2sGiy/Yo1wKHc7BKp0EnE3pLNNSUdOL4jO7NOB+zTaGq5RRqCwJ4PGpmkXtX2XhL160UUC1I8qYpJHC",
	"vmOI3y3VG2+t3sJSD2aV/0Kpd6v/ENBub1PW2ABa6oLgFOZmkgorYGwmDdWqB5wbRqWwz5DkjgeZZmQz",
	"jdwyvqJSHAVZhK3VUuh5IW7T7Epe82JSwpQG8+tAybCBN1BCDMLsVT8lxmyA/cAbGEE28AZKkpVcHO0Q",
	"f2gKNAhAART66Eqb0xOS82guE8tr2h+6FxTY0IY6CjvUwdel+xxF9MY4FLWLDh+9nSKueF2zmDKU6YIw",
	"ryEUyoAWpNyiW/NujXI9+FdA4j0WUAPLSBs3WIqFNgRsK/W2zGUtShE0AYEG/nxkebKuINknDdbqRvnb",
	"B9rtZAMJ8tCCZzXnWc15VnOe1Zy/hZrz2gjDnprOs77xrG/8lfWNGrm3qBy2Vauu0ajxtlbpKD9sraRW",
	"XqZBiQwd6Vd/bfiteSWK6gurQkGxWgWECdroiWdl5VlZeVZWnpWVf2ZlJb+o2tYvowUteGSQlcwiiyth",
	"aIp3Db+2aDHGbfPspnGpTX8VrelZaeqtNNXZrkVrKh4YeKWVolb1SSfdrlOZIKMEdtFmr3mQOOfpNBMl",
	"SVw+m2e16VltelabntWmZ7XJqk3l0j79NCYjqDfVl/xnhenZz/SsMpFKJakWbekKsvDbNCS5iNbH+BSp",
	"Ajq2xyYvQfaQZw4DVzZTy12XfpZCZy/pTCn00rxVAY8io+/RGH1nfrlU88Ld3LMO9axBPWtQzxrUP7EG",
	"VUqsfr4ge1Zc/okVl4LSW/QWh5JQV2J05t7eHybH5FufsGzI0Id0GYklFZIGhaOmliWtT7pUICwED/Qz",
	"XSD3bMkMmzmop3dGr+uHdMzbvWtY2ubyQJ6ZDOYuWHz0mso5KBIQbK0gZzYC2/Q3eUgAY4UkBxM2GX25",
	"n87Hs5PDu/3FUIZ3h0dTRhb3R/fBvQzYXIo4yI4OYnccYZHM0z+UcCvqKKOtLSdBt0G2SEqVKER/WqhF",
	"6Neqoxjr0+y1UsLO8gbqmAW5IOZ8yRBnAQFZoTaI/EMgneduau6YzdH5kdUdu2a6EIuew9NjKlgqPZUe",
	"qvYVJmvJJdM4EWcGwp5WOMxnFoiSlAjCGi/3b2VuP2Dvu3e9loliUkW3S8sw6bk2/76BU/P9Qn/efD2m",
	"f8t67OwwfL4e+9JI92ogB1DJsg88JDYX9pasDJUZInDKJf2WyVbLUT3bFqO+VbdG0cjeH0Du6+VzqXKR",
	"pb3T3OaEZBIP3pK3Xvqzy1985FrepabMTuIHtm482uHMvatJQZN698QyUK2hNVS1qPAEBrIT3XtwH9me",
	"olUcgEXStXbBfYYKMHljux9TSqLQVEQE4xsOR9v3mgU81eCHiq8KLwOKeGBSnn+mguqZ5nVDXsnAMKVR",
	"FPJla7Js/hz+f6Hd9ZrkrL4FUuS1SBQSVTeLQuNAAItVv+8JQti/ZhdFguD+MKzn4+oK9k5ZDKM41fmR",
	"6qN7HqsWuu79C/j//aNDKCwfRS4dfmu6hS1qIV5w6BTEVyHd7Y5tKzb0KaoOVq7v5kQbCa0lH53TbSzI",
	"yJbMMRnoVKD86SzXXuQfm3uRly/QT2Tp17tFJqCYQPioe9CF/5qQ7hYUnafnLOITHJVCHwp/PRxCSq0u",
	"pdQ7rw0MP2/h/ewgs3/TgOnB84XqHFH/i3lUqnO98yzGuj5EjIM5ZboIBdSesLmmpoJCNbW15WpEdeiV",
	"yLr1vA3Hr2qL3lCgtjWJrXn9j72g/FCEE0H2KQmb05kJXRShqErhIcELs9Q0CzBT+itfkDSloe4S05im",
	"Ti7Vz6cVr1ZsQx957zZW0JOUAC/mayLGFKW4yS2EVgS9NeUrClsClHft6ijpbVa198DblJBUO5BM0Qpr",
	"zkFdRB3/iabwaB6T0QrRaQnuORYoziJJk4ggDKVD3IqfWbKBMLdltkJvfZDeWLb4KaZvYludjVC2sItP",
	"U0oW+hglQppCkpRNuS0mE6Rc2Vx5FcwulLzLJ9wqdsX27o2EYr7m4vsZALqGnx4XepSUKV3diKfq945F",
	"b28HlAfovWY9XXO9d/Y1xN7rhR6br1c/u7jNeqFn74XqecoLVbrBXsT5bZbs/aH+2Mxd1VHFte6eUmhq",
	"1HRtuporRWbX6UO4PFa1kKotGOrQpY3+/cSGUq1cbps/0daTrTuM8s1J7e5s5U/M34rs2I/Cf9a6HeJ8",
	"dZa32sxdWIJgpohF/kWdf7XHN9v0O7ogZR9IsfrJCqV6CKR3dPDt27dv/z8AAP//iG5CofzxAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
