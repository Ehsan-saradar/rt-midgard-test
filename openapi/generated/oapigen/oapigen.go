// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Action defines model for Action.
type Action struct {

	// Int64, Unix timestamp for when the action was registered
	Date string `json:"date"`

	// Int64, block height at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status string `json:"status"`

	// Type of action
	Type string `json:"type"`
}

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64, Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64, Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64, Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64, Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64, Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64, Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64, Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64, Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64, Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64, Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Coin defines model for Coin.
type Coin struct {

	// Int64 (10^8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64, Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64, Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64, System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64, Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistoryItemPool defines model for EarningsHistoryItemPool.
type EarningsHistoryItemPool struct {

	// Int64, Share of earnings sent to the pool during the time interval
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses struct {
	Current []InboundAddressesItem `json:"current"`
}

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string `json:"address"`
	Chain   string `json:"chain"`

	// indicate whether this chain has halted
	Halted bool   `json:"halted"`
	PubKey string `json:"pub_key"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                  int64 `json:"AsgardSize"`
	BadValidatorRate            int64 `json:"BadValidatorRate"`
	BlocksPerYear               int64 `json:"BlocksPerYear"`
	ChurnInterval               int64 `json:"ChurnInterval"`
	ChurnRetryInterval          int64 `json:"ChurnRetryInterval"`
	CliTxCost                   int64 `json:"CliTxCost"`
	DesiredValidatorSet         int64 `json:"DesiredValidatorSet"`
	DoubleSignMaxAge            int64 `json:"DoubleSignMaxAge"`
	EmissionCurve               int64 `json:"EmissionCurve"`
	FailKeygenSlashPoints       int64 `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints      int64 `json:"FailKeysignSlashPoints"`
	FundMigrationInterval       int64 `json:"FundMigrationInterval"`
	JailTimeKeygen              int64 `json:"JailTimeKeygen"`
	JailTimeKeysign             int64 `json:"JailTimeKeysign"`
	LackOfObservationPenalty    int64 `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks       int64 `json:"LiquidityLockUpBlocks"`
	MinimumBondInRune           int64 `json:"MinimumBondInRune"`
	MinimumNodesForBFT          int64 `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil    int64 `json:"MinimumNodesForYggdrasil"`
	NativeChainGasFee           int64 `json:"NativeChainGasFee"`
	NewPoolCycle                int64 `json:"NewPoolCycle"`
	ObservationDelayFlexibility int64 `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints          int64 `json:"ObserveSlashPoints"`
	OldValidatorRate            int64 `json:"OldValidatorRate"`
	OutboundTransactionFee      int64 `json:"OutboundTransactionFee"`
	SigningTransactionPeriod    int64 `json:"SigningTransactionPeriod"`
	YggFundLimit                int64 `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock struct {
	Current []LastblockItem `json:"current"`
}

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn string `json:"last_observed_in"`
	LastSignedOut  string `json:"last_signed_out"`
	Thorchain      string `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64 (10^8), total deposits (liquidity additions) in RUNE during the time interval. Accounts for both asset (using the price at deposit time) and RUNE deposited into pools
	Deposits string `json:"deposits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64 (10^8), total withdrawals in RUNE during the time interval. Accounts for both asset (using the price at withdrawal time) and RUNE withdrawn from pools
	Withdrawals string `json:"withdrawals"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// Liquidity provider data for all the pools of a given member
	Pools []MemberPoolDetails `json:"pools"`
}

// MemberPoolDetails defines model for MemberPoolDetails.
type MemberPoolDetails struct {

	// Int64, total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// Int64, total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Int64, total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`
	PoolShareFactor         string `json:"poolShareFactor"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64, Total Rune pooled in all pools
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64, Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NetworkFees defines model for NetworkFees.
type NetworkFees []Coin

// NodeKey defines model for NodeKey.
type NodeKey struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// NodeKeys defines model for NodeKeys.
type NodeKeys []NodeKey

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolLegacyDetail defines model for PoolLegacyDetail.
type PoolLegacyDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Int64, same as history/swaps:toAssetCount
	BuyAssetCount string `json:"buyAssetCount"`

	// Float, same as history/swaps:toRuneVolume/toRuneCount
	BuyTxAverage string `json:"buyTxAverage"`

	// Int64, same as history/swaps:toAssetVolume
	BuyVolume string `json:"buyVolume"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, same as assetDepth + runeDepth
	PoolDepth string `json:"poolDepth"`

	// Float, same as history/swaps:totalFees/totalCount
	PoolFeeAverage string `json:"poolFeeAverage"`

	// Int64, same as history/swaps:totalFees
	PoolFeesTotal string `json:"poolFeesTotal"`

	// Float, same as history/swaps:averageSlip
	PoolSlipAverage string `json:"poolSlipAverage"`

	// Float, same as history/swaps:totalVolume/totalCount
	PoolTxAverage string `json:"poolTxAverage"`

	// Int64, same as buyVolume + sellVolume
	PoolVolume string `json:"poolVolume"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// Int64, same as history/swaps:toRuneCount
	SellAssetCount string `json:"sellAssetCount"`

	// Float, same as history/swaps:toAssetVolume/toAssetCount
	SellTxAverage string `json:"sellTxAverage"`

	// Int64, same as history/swaps:toRuneVolume
	SellVolume string `json:"sellVolume"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64, Liquidity Units in the pool
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune
	Volume24h string `json:"volume24h"`
}

// Queue defines model for Queue.
type Queue struct {
	Outbound string `json:"outbound"`
	Swap     string `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Daily active users (unique addresses interacting)
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Daily transactions
	DailyTx string `json:"dailyTx"`

	// Monthly active users
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Monthly transactions
	MonthlyTx string `json:"monthlyTx"`

	// Total buying transactions
	TotalAssetBuys string `json:"totalAssetBuys"`

	// Total selling transactions
	TotalAssetSells string `json:"totalAssetSells"`

	// Total RUNE balances
	TotalDepth string `json:"totalDepth"`

	// Total staking transactions
	TotalStakeTx string `json:"totalStakeTx"`

	// Total staked (in RUNE Value)
	TotalStaked string `json:"totalStaked"`

	// Total transactions
	TotalTx string `json:"totalTx"`

	// Total unique swappers & members
	TotalUsers string `json:"totalUsers"`

	// Total (in RUNE Value) of all assets swapped since start
	TotalVolume string `json:"totalVolume"`

	// Total withdrawing transactions
	TotalWithdrawTx string `json:"totalWithdrawTx"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float, the average slip by swap. Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64, volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64, volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64, the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64, toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Int64 (10^8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), trade slip percentage
	TradeSlip string `json:"tradeSlip"`

	// Int64 (10^8), minimum output amount specified for the swap
	TradeTarget string `json:"tradeTarget"`
}

// Transaction defines model for Transaction.
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction memo
	Memo string `json:"memo"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodeKeyResponse defines model for NodeKeyResponse.
type NodeKeyResponse NodeKeys

// PoolLegacyResponse defines model for PoolLegacyResponse.
type PoolLegacyResponse PoolLegacyDetail

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Address of sender or recipient of any in/out transaction related to the action
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action (swap, addLiquidity, withdraw, donate, refund)
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *string `json:"status,omitempty"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"xOv1Hh4eHv47AAD//xmw4pcTpQAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
