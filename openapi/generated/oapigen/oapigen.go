// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {

	// False means healthy. If True Midgard is still catching up to the chain.
	CatchingUp bool `json:"catching_up"`

	// True means healthy, connected to database.
	Database bool `json:"database"`

	// Int64, the current block count.
	ScannerHeight string `json:"scannerHeight"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/3RUzXIbNxN8lSl833Gzy9gpH3iKHSeRDimrZN1SrtQQGO7CwgLwzCwVlouvlRfIi6Vm",
	"l5RE/ZxIYIHununGfHe+jLVkyipu/d0xSS1ZaF5cECYdro9btuNLVspqf7HWFD1qLLn7KiXbnviBRrR/",
	"lUsl1rgAeVQ/xNz/NVVbBhLPsdpVt3a/YRKCkTALDDPjvoXLLdzwRPBHDD1ygCggGlOCExRMFbSADgR+",
	"wJhb1zjdV3JrtyklEWZ3aFxAxQ0u2s9ZZ/Qz0gZ8yZm8UjDk09WXgcVjzsQXFPtBn6NfZn33U7Oom5gp",
	"K2xS8bfgy5T1EaQox9y7w6FxTN+myBTc+s8H3U+ZmrNefrnHKZuv5NUdDOhcyjXpxFkA87FQEEWdBMr2",
	"1N3lWszbcvIY/VwUjRiTW7tAO/lZh8JLqwv37hnPzfDg1tW0SdHD+6tL+DYRRxK4ufh0/YvdBswBMO8X",
	"2wRSzLcUYBdxbteHuOV//xGdj1WmikwCpo3HOWyAmzLpfDaT3hW+Nbc2BEwYYtoD7jAm3CSCbWGoi5RJ",
	"iKUFE2mqKrKQgDJmQT/D0s5cssbDlsv4RLBoMR060Ai2BRpH+kGW2k5umZARb2n5GKhSDgZ66gGh7Nv7",
	"JoVCArkoDCUF8Bw1ekyPS23hpkDMSoxe4S7qAB9+vfp8h3XW9F4Mh/5ulupAhjKlMLPtH8kPkclr2s+p",
	"i5osLs+Nco3bEcvi5ap9167M4lIpY41u7d62q3blGldRh/lNd7sfuyVQturphVfwKHpLPmHOVsz2fs3A",
	"YyBPQ8ciqYtDJtYmyNyHy+DW7nfSZR655nxKvVmt7Of/TFu3dv/rHgZad3+uezLKLO8yjSPyfoGGI7Z9",
	"6HZvulD8q2V9vsO+J+4+VcoWprftCqSSj9vjPISeskknM9lPo2l5saCPxcsr5ZxTyiuU50zyQl0fjwJm",
	"XksA9mIT5nz/y+FwOPwXAAD//zsORNYMBgAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
