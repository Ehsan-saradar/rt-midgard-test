// Package oapigen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Action defines model for Action.
type Action struct {

	// Int64, Unix timestamp for when the action was registered
	Date string `json:"date"`

	// Int64, block height at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status string `json:"status"`

	// Type of action
	Type string `json:"type"`
}

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64, Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64, Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64, Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64, Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64, Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64, Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64, Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64, Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64, Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64, Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Coin defines model for Coin.
type Coin struct {

	// Int64 (10^8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64, Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64, Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64, System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64, Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistoryItemPool defines model for EarningsHistoryItemPool.
type EarningsHistoryItemPool struct {

	// Int64, Share of earnings sent to the pool during the time interval
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses struct {
	Current []InboundAddressesItem `json:"current"`
}

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string `json:"address"`
	Chain   string `json:"chain"`

	// indicate whether this chain has halted
	Halted bool   `json:"halted"`
	PubKey string `json:"pub_key"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                  int64 `json:"AsgardSize"`
	BadValidatorRate            int64 `json:"BadValidatorRate"`
	BlocksPerYear               int64 `json:"BlocksPerYear"`
	ChurnInterval               int64 `json:"ChurnInterval"`
	ChurnRetryInterval          int64 `json:"ChurnRetryInterval"`
	CliTxCost                   int64 `json:"CliTxCost"`
	DesiredValidatorSet         int64 `json:"DesiredValidatorSet"`
	DoubleSignMaxAge            int64 `json:"DoubleSignMaxAge"`
	EmissionCurve               int64 `json:"EmissionCurve"`
	FailKeygenSlashPoints       int64 `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints      int64 `json:"FailKeysignSlashPoints"`
	FundMigrationInterval       int64 `json:"FundMigrationInterval"`
	JailTimeKeygen              int64 `json:"JailTimeKeygen"`
	JailTimeKeysign             int64 `json:"JailTimeKeysign"`
	LackOfObservationPenalty    int64 `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks       int64 `json:"LiquidityLockUpBlocks"`
	MinimumBondInRune           int64 `json:"MinimumBondInRune"`
	MinimumNodesForBFT          int64 `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil    int64 `json:"MinimumNodesForYggdrasil"`
	NativeChainGasFee           int64 `json:"NativeChainGasFee"`
	NewPoolCycle                int64 `json:"NewPoolCycle"`
	ObservationDelayFlexibility int64 `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints          int64 `json:"ObserveSlashPoints"`
	OldValidatorRate            int64 `json:"OldValidatorRate"`
	OutboundTransactionFee      int64 `json:"OutboundTransactionFee"`
	SigningTransactionPeriod    int64 `json:"SigningTransactionPeriod"`
	YggFundLimit                int64 `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock struct {
	Current []LastblockItem `json:"current"`
}

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn string `json:"last_observed_in"`
	LastSignedOut  string `json:"last_signed_out"`
	Thorchain      string `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64 (10^8), total deposits in RUNE during the time interval.
	// Accounts for both asset (using the price at deposit time) and RUNE deposited into pools
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64 (10^8), total withdrawals in RUNE during the time interval. Accounts for
	// both asset (using the price at withdrawal time) and RUNE withdrawn from pools
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64, total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64, total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64, total RUNE added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64, total RUNE withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of Active Nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1
	BondingAPY string `json:"bondingAPY"`

	// Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, next height of blocks
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`
	PoolShareFactor         string `json:"poolShareFactor"`

	// Array of Standby Bonds
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of Standby Nodes
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64, Total Rune pooled in all pools
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64, Total left in Reserve
	TotalReserve string `json:"totalReserve"`
}

// NetworkFees defines model for NetworkFees.
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64, the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Liquidity Units in the pool.
	Units string `json:"units"`

	// Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolLegacyDetail defines model for PoolLegacyDetail.
type PoolLegacyDetail struct {
	Asset string `json:"asset"`

	// same as assetDepth from pool/stats
	AssetDepth string `json:"assetDepth"`

	// same as toAssetCount from pool/stats
	BuyAssetCount string `json:"buyAssetCount"`

	// same as toAssetVolume / toAssetCount from pool/stats
	BuyTxAverage string `json:"buyTxAverage"`

	// same as toAssetVolume from pool/stats
	BuyVolume string `json:"buyVolume"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// same as 2*runeDepth from pool/stats
	PoolDepth string `json:"poolDepth"`

	// same as totalFees / swapCount from pool/stats
	PoolFeeAverage string `json:"poolFeeAverage"`

	// same as totalFees from pool/stats
	PoolFeesTotal string `json:"poolFeesTotal"`

	// same as averageSlip from pool/stats
	PoolSlipAverage string `json:"poolSlipAverage"`

	// same as addLiquidityVolume from pool/stats
	PoolStakedTotal string `json:"poolStakedTotal"`

	// same as swapVolume / swapCount from pool/stats
	PoolTxAverage string `json:"poolTxAverage"`

	// same as units from pool/stats
	PoolUnits string `json:"poolUnits"`

	// Int64, same as buyVolume + sellVolume
	PoolVolume string `json:"poolVolume"`

	// same as assetPrice from pool/stats
	Price string `json:"price"`

	// same as runeDepth from pool/stats
	RuneDepth string `json:"runeDepth"`

	// same as toRuneCount from pool/stats
	SellAssetCount string `json:"sellAssetCount"`

	// same as toRuneVolume / toRuneCount from pool/stats
	SellTxAverage string `json:"sellTxAverage"`

	// same as toRuneVolume from pool/stats
	SellVolume string `json:"sellVolume"`

	// same as addLiquidityCount from pool/stats
	StakeTxCount string `json:"stakeTxCount"`

	// same as uniqueMemberCount from pool/stats
	StakersCount string `json:"stakersCount"`

	// same as addLiquidityCount + withdrawCount from pool/stats
	StakingTxCount string `json:"stakingTxCount"`

	// same as status from pool/stats
	Status string `json:"status"`

	// Int64, same as history/swaps:uniqueSwapperCount
	SwappersCount string `json:"swappersCount"`

	// Int64, same as history/swaps:totalCount
	SwappingTxCount string `json:"swappingTxCount"`

	// Int64, same as swapVolume pool/stats?period=24h
	Volume24h string `json:"volume24h"`

	// same as withdrawCount from pool/stats
	WithdrawTxCount string `json:"withdrawTxCount"`
}

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64, same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`
	Asset              string `json:"asset"`

	// Int64, the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64, the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64, same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64, same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64, same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Int64, number of unique adresses that initiated swaps transactions in the period.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Liquidity Units in the pool
	Units string `json:"units"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64, same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// Queue defines model for Queue.
type Queue struct {
	Outbound string `json:"outbound"`
	Swap     string `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// StatsData defines model for StatsData.
type StatsData struct {

	// Daily active users (unique addresses interacting)
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Daily transactions
	DailyTx string `json:"dailyTx"`

	// Monthly active users
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Monthly transactions
	MonthlyTx string `json:"monthlyTx"`

	// Total buying transactions
	TotalAssetBuys string `json:"totalAssetBuys"`

	// Total selling transactions
	TotalAssetSells string `json:"totalAssetSells"`

	// Total RUNE balances
	TotalDepth string `json:"totalDepth"`

	// Total staking transactions
	TotalStakeTx string `json:"totalStakeTx"`

	// Total staked (in RUNE Value)
	TotalStaked string `json:"totalStaked"`

	// Total transactions
	TotalTx string `json:"totalTx"`

	// Total unique swappers & members
	TotalUsers string `json:"totalUsers"`

	// Total (in RUNE Value) of all assets swapped since start
	TotalVolume string `json:"totalVolume"`

	// Total withdrawing transactions
	TotalWithdrawTx string `json:"totalWithdrawTx"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float, the average slip by swap. Big swaps have the same weight as small swaps
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64, volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64, volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount
	TotalCount string `json:"totalCount"`

	// Int64, the sum of all fees collected denoted in rune
	TotalFees string `json:"totalFees"`

	// Int64, toAssetVolume + toRuneVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Int64 (10^8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), trade slip percentage
	TradeSlip string `json:"tradeSlip"`

	// Int64 (10^8), minimum output amount specified for the swap
	TradeTarget string `json:"tradeTarget"`
}

// Transaction defines model for Transaction.
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction memo
	Memo string `json:"memo"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolLegacyResponse defines model for PoolLegacyResponse.
type PoolLegacyResponse PoolLegacyDetail

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Address of sender or recipient of any in/out transaction related to the action
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action (swap, addLiquidity, withdraw, donate, refund)
	Type *string `json:"type,omitempty"`

	// pagination limit
	Limit int64 `json:"limit"`

	// pagination offset
	Offset int64 `json:"offset"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *string `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..100].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *string `json:"period,omitempty"`
}

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *string `json:"status,omitempty"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x97ZLbOJLgqyB0d7H2NFslqb7siuiYqw/XtO/8Ueeq7o2OcW8PREIiXCSgIkCp1B1+",
	"rXuBe7ELJAASJMEPyXbvzm7Njx6XCCQSicxEIpGZ+GMU8nTFGWFSjM7+GGVErDgTBP44DyXlTHwwv6mf",
	"Qs4kYVL9E69WCQ2xanLwSXCmfhNhTFKs/rXK+IpkkmpIWENS/6SSpPCP/56Rxehs9N8OSgwOdH9xoEce",
	"fQ5Gcrsio7MRzjK8VX+HPNfDR0SEGV1Bu7PRayZPjgLE8nROMsQXKCMiT6RAKZZhTNkSyZigJV0ThhY0",
	"kSQT41EBXciMsuXo8+dglJGHnGYkGp393YwVFNj/WnTg808klKPPqkcVkQ9E5hkTCDMEOCtcTH+04JkP",
	"jc/B6JIzITGT+9G6i5IFZB+ydzHPGI8IKlohywCA1hVZyfhHKiTPtl8dMxe4Dzn4jjCL0CqjIUGxbRqM",
	"XuGMUbYU3wq1GnwfdsQ0cdH6keBExl8dGw22i9liaIGExDLXbPaWRkucRQqr12zOcxadR1FGhCBfn8Xq",
	"A3Ry2msWQWt0blpXOe4NFnKe8PD+q2NZQO5Er2hVQ4s+5DSicvutOK4+gA/Jf6UyjjK8wYkAsYjIigsq",
	"Kyz4ligFeEUkpsnXX+kKdB+KWi8iNRimSj5QYieGVhlf04hkKMISA5NiJFYkpAsaohQglzP4Vrh7sS4V",
	"dZKAgk5t22D0jsgNz74+Oxq4PVtIk56mHxAR8OPRNxBpgLo7bkqCVvk8oSG6J9sCxxvOkzdkicOvLzcl",
	"aM2VPpxvJZZaK3JG0IrzBG2ojNHPU8RwStlybJH8Jui1I/a+QcFIi1YFWYscTOObYAiQd6FfQTDxDSnm",
	"5b9zK6qwjJFtGIz+T05y8tWxAaidGwa0qG4W32ah9CKBRA3Ru8uEz3GCLl7d3G7wqhBF9ce32sMc2F42",
	"UniASR2gNU/ylARoQQhsZSKhq3Ib+xyYEZ1TSNPk11Z1ITI45WypBTsjCZYkQjLDTFjjPagdSSIsSes5",
	"4idGH5GkKRESpyvg/U1MGGwOZtwNVqbLkgpJ1HGhcZYIRjGhy7j9rKLNDN0IYYk2MQ3j3UagzAdd21fu",
	"5EuKcGeAUTDsMHZXQvKdyFIiMbBX7wZs2n0ORjz30OV9Lv9k1JUSEU1EQLMhytY8WZMIUdYycmM96vC1",
	"Qe5bo0iJGBGILtwVpwKpSSRETZhn6qudPvcSB2cECUmTBK0Ii2ArC0aE5ak6voo8DIkAztcfnQNsHec6",
	"hnfbFSmPri7QDV6pI3EUFSbrKBhtjGk6CkYRZ0qy1El6kbPIM2btlK0XwbQqaAbMrRkl0LJaCJTDcs0T",
	"eTA6d1B76/BmVfwLu/QnRqVoFVKcKoWlKFEasrnqgbAQdMlKxtQ2IwKZFXkCfdTvZT9jr/e6HWqo+eZ4",
	"oY9IG5xFojm3efnVy6ZzzqKOzyuwhFo+13B1h6oAroDxToGz6C2RGQ09M8BrkuElUap/TVTL1gU61y2R",
	"Gtoy7JogBgash90N5FuJWTTf7gRa6D7tsFP8SNM8HYD1W/xIWZ4OxtpAHoL1W910B6xJRDEbgjQ0HI4z",
	"NB+EchVwP8aUDaWzovIudNaQByFdA92LteQSJwNwvlPtBmMMUIfgWwXbg21NyuuoBx4B9TCSb6V8UuKZ",
	"hVdQfTzlXTOvwPiVEE9KD2lDDd0q9SRV72JH+aAsY/WNPGK1U4/OFjgRpIA95zwhmDVI2ArKh9Yl91l2",
	"H8gqI0LZNwijiC6pWtAwzzLCwq3ZqRpmrvnZzxXo2XTyby+eB2ozIxKdQ9uxV22qBk0o59CPMnT54/nr",
	"d+PbX95evH+jzOUU9+9zGmZgUWwjxPBbAyCbxwzrWGG1XL+tcZKTXuhVXgHrW/52cjSwN9C70l1TZWD3",
	"W2jsOvOrtKziElTmVR/KR+iKM75BJcokydY4Ebv49F8XncwhYZfOynBrTBKABA42fTN57eI9iIUqvSVJ",
	"fezUaNM0XxRnQ7NWdQxWf2FcFnKkfganT5sM3mQ09Njr1wnHMjA3JWrbsACznJExej0mY/inHfPAtCi0",
	"RmM0wqI7mrYfke9igog6j9AURpzn4b0eMq8cnn2wFSa7kOeDwryHOkLiTPZiPCdLysBBsjveNW4sByyJ",
	"FbhL786zsnp9bPuW+E4s33JB/kMQz0eW+k3c/qqpBmln7VTvD8phHwXVishQHeXFpKmmfM08B63lOx6R",
	"S7+RsFBaxT0KlSLp2qUoyjN7xQ6cYQngY7V57ejaZayaizhoi0hKpSTRboNxcHxYUrSOdxvjDBi6uNZV",
	"dpY62u8+QdI72FZIkiLKQp4StCSMZLhrYmP0WiIq4IPI06ozYkGIvg2sEOtrKHQ7/DANUmD0BbQGT9BO",
	"tC5GvSakj5uqNAtQyNmaZMa1+OGnd6/UT0lCwl2ZrMWLaAlR3ncSHMb64sJGgtRh7yv/N+aeyOOA3Euv",
	"77L2g7bF6kLVtIAjM02R9bFWUNVbdgmGaFtLrAY9YF1IZc06mKC2Ne/P89ak2ZnjPBciYNFVg4z81pLH",
	"A+sugo+OJgilsYEoQs2x8LmQs5yglOAiPmULMse0gEmOiq7Nw7PaQ2+3LBwCdYyu1Qnc/GgCX5S+1I7x",
	"0AaA5StL7zDG4FxujipCzBjJfuy+uQEYcO6WRu2Gfiu6RmdnwtWBiun6KN8Ir2msgcFlsAFRh+i3IOrB",
	"cGaQISi22Br6c8V5MpqHmZw+zI5PlycTGT6u86NovUhW4vfl/ebh8Cg6Xm9OVsvT2clycegTBb2WFZAX",
	"d5fe6zicSOLxj1FzGYM2MZExUdJDheYRFGOBTL+g1+MTjFb5/Ld7sq2iI2XMs1U+n+Io2rAVWT1EL9nD",
	"Q7rE25P0Uz7ZPpzOVvJTHqb3L7HEG0nWR+sjdrK5J+R4Ozt5eDEhYbicPN4fnvaHLBrWtpgEBdULAvgX",
	"sOKdaCzduVBCdUt/J5W5HU6CkXH2KDrKk6MSQaW/ljqk5wJHP+OERljy7IO5di1gnAyEoeRM3JDsF4Kz",
	"KoDD6fTw5TAol3GeMWtx74MGAPhAZGm370OQy4TePV5yISudh/W9IkItdkHQW1KFMp0NA8PzeUJu6ZK9",
	"xY/ny+qazI4GwXiVUiEoZ5d5tq4t6qD+15gm/5tsl4TdJljEN5wa5ivgnM4mu0ASdNkKahhZrnMWvaXL",
	"DOIfvoRR/hemibJ99PyqK7QzBDWvfUC8weH9+8X7uVDTUDO6IQwncrsHYQqv9Rse3v+00uK4B/u+1d76",
	"C86i1+xDzkhtXuZ/u8CCYLVrnl1c31WAHe0D5JflMsqwoMke/PwOqzPxpVLBf8PimvjnNgwU2Sgz9XIb",
	"JlUox9MXR8NAOMt+RRK8vU7II53ThNbW/3gHaKRNuqbDgCRfvhHYKBEntKON0sMAKh1I2dKBd0MyyqOa",
	"Yh8G7JflUqmQNzSlcmcq1/ZyZ9P17KH1LbG+uXn3Knfr8W8lnp2hrujbFHerGm5Tqw0t2VR6HTqsTSf5",
	"dIxXV3TIvk+Wa0LZLWBegfEIQCs/d/Bljct89lwZ7P7Fh4UC1BefEqqQmoh5LPl3F16vDxbyN67pG/1W",
	"7zQ9fjlp7aVjdn4z8WdOp8lL7+16zDMPXtPjoxeDTfEGtk1U3IG8lKtnB+zvBq+D2tkP3gCwtyO8HZXB",
	"vOnFpekG87bznU+LhpcD08yKHIxW5+1H5r3Lc8b6GYJh+67oIUSiHI8y8Fl2jXsegltCh27PuYzNnd+z",
	"XNgu+r4QSwsXYDwHf7KGrn+GIEjroPVP6FveTjHSsRREOp7dMMZsSQR6tnFyZb4vqPZ8Jy/bt78UKwMn",
	"h/Kbbb8rv9l+u/CaS8NedkMut31kPexWgq5znP3C0CLjaTvHDbuMbUpZ4BHzBnnq66JZ0KfDqhlRDZXS",
	"cjXwhgpZBK47eUfNZCmBaESYpAtKIh3cXvp2S8/OIGWpUfXfFHhDctvnaz3onqiH8ygi7UFomrFM6IFq",
	"WXGBz7c2D6wt+uG8dCH6fN+GIigXJFLQyrjcVog2qY4NwrnGncMwj7Ak1zQTPbTx5Bwo+AvVUwubCTGu",
	"KeWuoAg1tDK79hpZWSn7DjwwvBqIV4+sljGWaE4SbhVN5yr670IUh6KMiCIMGy50MrJQIiV5W1DKEO4F",
	"NbUj8xrYft7VcTk7sa7qMpRzfWp1CNb+SyJ3JjWhbKy6S9PAVQ/1CTRksSE0dVZu101V67FKl7cmRr9A",
	"2PHSz9l8uvg0Sx4+vYjW2fEqTxdhHJ4ymSweotn65Pfo8WHziWwWx6OgP/OjPfGgkjnRVwbBl8rwuUit",
	"6On9AVq5/SB5Y0AWl9unSO3o6WcXr+z72bNGNu3VWyFChwNXF7CX0rpjRxCLEYZ3hQ2lI4/Ru7aQ6nqE",
	"SmdQqNvWBJw4WQ3d8aRl0zJU5fzml9bovmdT9B16ViZZoL/o60dxQ7K3nMn4oBao/fw5+jc0naHvp506",
	"un9MIfE96RxUV2soA4PAhOgen5FHCT6qnutW1c7mySnz2rp5vFsBTB58MsAOEe/SjzFBGUlNxqQ130Ev",
	"4gIMekaZGfN526BwvX+NQ8kzL8+KMgzdo5WKnFYTrY50ux0TzVTPXaTADvauM7NA7aMksn76jugaCNFc",
	"QWt1WFAWbSWxqwH5AwGPSF/QDlnAScq27tulXPlrRJm4Oqa2KE094iFqkya1uTR5up0pm5xT0QE18fy1",
	"XZf6Q5/giMEX6nwM9QJ0nJgQPKQ2nRIzk943Ru8ZcVsifQGeLUlUBi75MhCHnj3aIvMVbT2RrtHs+Hj6",
	"sjkp88GpMVDdw+sX7cvHTbQ4zDMyWS2PF+q3/PFwm75kk5PZyWlynxFxfPT75lN8FL6YHL0gv8efjiez",
	"o4et1+hiPGo34iAZvPDi+U2MmGfTyWw7SQ/zlVxO1us8Itt4MslmC/b76WTzcBq92J6m+WzpdUeQcDU7",
	"PrmfNgcvPv27UKYmgi6ZXKyDYl29zAxqaKjjD/jGw09OvQX/8dSrTb88XH/858brj1t3v46d3Mbw3pAs",
	"JEyqf/5CSRKdIcxYjtVxSeYZQ0RImoKO0I4bOAZuCLkXJmQ1QBLfqy+wMEojgBdIHbbgXIi1J2j8LSL/",
	"xy2OOm+a9V1MoCYSsYdABSFAZLwco/M1pgmeJyRQO+GSRF7IeefptbDNEZx3evHUVQ9mR92T16c23RZS",
	"9TZ4VcCGxZgdxVp/R/o0B0SKCOP6aA5/jwenX5VYDcteKDnNSdbOW1OV3YIeQ8XbLZviF/JKzZevJOoC",
	"pwRhgco2pQ/yQM3Uf1rIt6AOWuwuC1TystVAsHePRmR7oWq3JTrYZ5Q2j7B/iAEw/yn00Ao4rJMNZn8p",
	"BGDotK8JGbBkEquGAh2AaA9eKzOAAMN4CPyBMG8TuurF2mbjJnQ1GK46M0Y92DY99EPBD5AORd5CNHam",
	"dYvn0gLXvsqBsDqvXQJkYRbiiL5DgiRJcR3RBOo3KyoqDNT1EAw7NmULcCdRUKgP04lqpxq8KArsIJ2o",
	"oDoqcedB+lWiM8IQmEoS7h57qNG4lxoMOhM9oHNGH3KivZ87gaZsuQfe36HK9dnAwbwmXCHKprTlAEgb",
	"vFq1k6Qmcabm1AEYWWeaTrcawmVbZiyM0EWZzjFAP7fC7jcRPcqtJMhfVxAi9IO25lpvgXvXdMf1a7Es",
	"C+twZQzHVvOy3I5d3evaJxXJrCjVqgVbNccauqi5enWOqZledbVT33yae2h9p26YBq4BXd8oa8qiuWQN",
	"uazpgDYT3K3x9wWRL3WeLpxUv5nQizPf9fr+4S+7jti+Y37L4/+/f7a+Y5+1DufXR27P/6pehW/mVGjb",
	"Pr7+xlFuB/uAbRcb90S5M+SK4m0DvSfWbl8v8MLs2xl02bMV8J5IO13b7kU6M5k7ltAk1vpcWFXbrxd4",
	"QtgzO4CphPxXxeQ/3Lx//+Z5+xgVu6k/lE13QtjWAYewD8qo1BcU2u1VqXZoJRZsnJZAt709dvtH5/Xv",
	"UPVosv3C83YZqY3J+iy1ip+v1VzLjXnWkMIqgzs6qaZIqvLp6kQvM1X3N1dQXFvq60X7NWXGZ1bp4sAN",
	"Y8rek1VDxidtSru3WT3SURfgLEbxYVaL/GigyKo3hwPqlENTwAQL7q1Npn4vQsdMgErvVZEDvIDtm1BZ",
	"/NiTgE6TrQ55+EmY8J/aQxKqhY1LyFUb9KxQPlb7gLGh2rDlc38kHU22d49t0GulhpuFBTmTcQ+eb3Wb",
	"CqYdsHzIWBB96Og4ESWPF/nWZ+To+iv5FgIjBgO7JUnSCk2dowaDa7Hm7sqItjlOMAu7iyKqg1QrOsbc",
	"HISOPqJ1gSIRBIoAaj/jJCfPW4G14zQIlxbu0RAMX9sjLfqYTyazk+JBgzaYbfuOBlqbmI1Yhu1BmLEi",
	"JCgLwTTOZOs4/1qcZtvGsqq4f2kaxRVqeqCUWa/4uXJUoWy5SlXiVFmhwqcNgWoKRY0pm/Twq71q1b+G",
	"8rsiC5wn0h7w81pxhVdMHUb69XATjBcbp777/glIDpSdc4/cvnunHXkRGHoz2cCgeT1Zb9JW3LjzrA7n",
	"VXO0huL48y0I2hhd0KWxjWO81sHRYBZuTCF5gUSqpBPa/NmZOn9GysygE2loj/qaVODBBI+K5MgavXse",
	"SOs3803Y7l18ZsLE9jmf+iahB5C8B/A+c6iAHjaHwiPRHoLuXEh/h3rP1n0HYKcGmmJyiGpzqnYNxLmH",
	"OtUr7++q9z3PaoM83zM3qfM8VPX1dJ+yPHuUMahdRdOmCQdUyDfp9V0JYzonQvvXbOCguaOo1l1rSe/b",
	"8zQiMxy16FGD3wUWVKAV5F8HaPI9lAYI0CYmGUHwxw/TyeR/PA8QwNK6dlX4Mr0cpBreqTn2llU2pakR",
	"z+Uqt+5b++iVia0EjtZnul0OS5XVcSlRRdC37O6jGJ76WsVH/WhM0F7Fqfa+C2FRJbmiWavJVnPuCxU1",
	"BkHKu/GDFr4Venx91d2TRijGIh6jW56SqpPpmcjDWDGv/8WNVHGJcRsxqBGg9eZzlOKt3pIx+p1kHEG1",
	"5f4wLEDWzNat1qSJ5Vu/RqaFJ/5pm6ZEajut/qpiSFNl038/HU/geHAY/gD/R9B0PHkeIFo8ThLzjZrc",
	"NoWAaqxzFJ3UzQ0WYzQxhddA8SRbVDb3BhwpeSzrh3yhzJaCCs54OEBA+D7fMJKJmK7KxKcvyFJrfwQk",
	"Iylfk6hMqmp7BaSk2tfUgN0PhwQOH1QpXx3R/6wpZQtun4bCoS6XkMLt4Sgia/E/i1jnMc+0h6RxTWJr",
	"8d3ooOTzm9foIScZJQLd/fj+w6WOlGYRwmyrC64JlFCmztJrioFuF3SR/b//K6R5B5SscAbOGl1LRYky",
	"nvNcanE0AeySozlBGcER+H3snQxoWxMfDb6VMRijCqsVzsAD7WgIsiZMmtKdanGrCCvrHlzWUMcVYbBY",
	"vxd6brbMn0Ikxfc6U/r7iKyUgmSyoAHBYjsuiBRxIhDjEsU8iVCYUQki50x1jO544afSycD2eS+Fky4X",
	"Qx4D4+MSMc+TCEbbOuhHNCOhTLagmaiEc2JzoUbBaE0yoddyNp6MJ9/jZBXj8Qyeb1oRhld0dDY6VJ/U",
	"HoFlDLx7sJ4dOK/9ejdJyE0onjBKine7ZExo5n29a4zOmfNIUlkzd76FR+l4hlKekY+M+l6/KvKmFfFY",
	"pGwTDcq5xlX6VzOE3Vzw1sowZWqQj8yM4t8ZxuiDeXIYZwSt8JIyiyG4SfgCHU/G6Fq/+gvg5wTBa2sk",
	"+sgkNytlwcH1hlLqumZONDob/Y3I8/I1M5zhlEjwBf29kVJkskmVga+3Za4IG9IVJaZ+M9siyg5Adhy2",
	"b3tta99ESaqwgYkppYNTOCmXyQHFu3KNPbKhiq/qWD8OQHZ2fTI7Ojk8vXo1PX15cnJ8cX54OJtdvDg5",
	"urp4eX04mUym11eHpxdHryZXs9n55OLk1eWrk/Pji8npi6vzi6OWGchHGu2G/jnb2vMVXHMJpXOK3cEQ",
	"/5n7isbzykQu3l2M796/fX/x/fTVtI2u9jJnOFrvS9lBIU9TjIRSsfqeXrsSFQxRPgWGniljNahEfQXF",
	"9hYg/fxXYG4AqpOAnrWXw7zkNS+BDZ+HETeFXwJFkfyA7bdy05RZTtyRGjW6zEMyo7PjSfHUDNS6axbv",
	"6kCKLxZ6bXxYFR93QasLk1+D6jvus8mkzawo2h3UH3uHVxjzNMXKirRPwSOluuGT0vMRD1t1/O0GL5ck",
	"O3i/IkxtsYfjSfHar6aJU/ich3mq0Bn7VN4VD/XtUHNGteC1liGrI4nazK7M4NgoD4mXAh7scZEd/Wrn",
	"HBd1kL3T7nwfV4m6earbzsZqAL3lNuZuqi7vs561x8irk9Yf0Wtl4xUzM5fKEVnJWBz8oQzpz70TBfWl",
	"g5NYZD1HCkD5cvv4I1P7qn59BmVkxTNtsOkwGqz/IPphKkg1dIrZfGTGl6oawJkAivLKDUcpj4g4+8j+",
	"gtSJCFlnLip2RkSlCT8SSGk2sLoUwWlKjMtRjNE1+L5YpKyrCM49G5okHxkCK1Lt8+UWU4wB+z9WAMcW",
	"AbUpeXDASFC2TAiMMx7fcSQIztQkhTq/KMm2pV3IozLsCuengOkr8BbsGVpxIagyZjU1z9BxSlmAYp5n",
	"AYqwUsWE3AcI7jYC9JDjTJIsQFuCM8AUfIpn6O/T8Xg6mfw6RldkQZkyPYvAjMJ9PkZXnP2LtMVoEF2U",
	"E6QCQVFAtgSwykY+kPwMcWAQMFxloL25goScRTCZG4t+LvCSGMvMWe2/6Liw6UTNRZyhf/zVfvwhwlt9",
	"mQUz+GE6+Ue9OZqThdrIFBpdHfVfkv8wPZm8eDE7PploWJBnbmHhhVo8Na0hwFQ7Be7k9MXkhQF3pVGS",
	"G0JM1Q3FZJIbjov0nYs6OOtLM0V6OAQFUBzd+cz4Zqz48T1Ltk5NmOlkUq4VWJ2a2Ul0plr/o4l0DU0/",
	"IT6ym3LjgoO4WTNYLAXCoYCeU0wYKqs8WSxQSiQeG48nxM3H5CODyZfiYfQf0B72xSqfhJwt6DLXWlHz",
	"i5IzOzWQfi02RqrsM9Ug4ws1ilq/ysRfvmzjgGpHlDNJE0V9D4h/WK43lcL1Ejo9mDXoS0Pdb9JXnt7q",
	"seu11gXFKYz3kAqrYGzeIdXGB+wbxsSwxVtaDYx++9sKvuJSnIR5gu1JpDTwItxm0jl11spB7ZuySoeN",
	"gpFSYnBrCy/KEnJv72hHwcgoslEwUprM+6hsHeN3TYUGlxtAwjG61cfjOSlktNCJ7pwOJ/4J2Yr/DRJ2",
	"GISvnFs1xfTmwCdql15j9HqBuJJ1LWLqwEvXhAUNpeAiWrJyi1HNR50WZT/6t8DiAyZQQ8toGz9aSoR2",
	"RGwv89aVshajSOc3KYWmM6d+dN4jdw0k97WPTtuINF6AAauncP8/mTlPZs6TmfNk5vyXMHPqL/n1WDpP",
	"9saTvfHPbG/U2L3F5CjeiGuzNRoR/r1Gh1u1V2mtomK0Uhm6cGy9YPBrU/SM6guo0kCxVoXqWlT0ejJW",
	"noyVJ2PlyVj5z2ysNB5c2NUvU76+OEZWMztxi/qlU7qw8tpixRi3zZObxmc2/bNYTU9G02CjqS52LVZT",
	"mcV5ad57aDOfdBB8n8kEYaqwijYyOjBvBEM4qNIkPp/Nk9n0ZDY9mU1PZtOT2WTNJjdDbJjFZBT1rvbS",
	"+MlgevIzPZlMpJKQ2GIt3UKGV91C0oHqB3+YYMzPQyKasC1Ur845VEgaljZO2/NFTslxULrYiHpaeYrD",
	"G/jlvq00NOAVQq5lGPtwGaNXFB74xjpOSWHOUPXlIBOWCzhW2HA0Z/Ppp8dFPFu+OH44XE9k9HB8smBk",
	"/XjyGD7KkMVSpGF+cpT6r+DLqNfht/B7cUTlSaoWnjAPodi6vFWmEMN5oRbcVpZTcE1fm30+RsUD8bDF",
	"gyoQMd8wxFlIQD2o9SH/IsxzdcVbO7A2OlOgtmAwkBkh0CAVJpWOyghWqwpjdbCaOLdP7O9P926K1wIo",
	"Wfkayu7RhCYTxGZpNeZkvl/pz7vPx/RvmY8d/co+9QLzsUXcu2eDEvM4wTseEadkvVliswjehbKvVewx",
	"HdWzbTLqW3VpoNzhH8Br/brRecrNlhM6M2GQpspbAEW77eHy/OaXMfJN70bbL52qDkQKlEpvgHhNA4m+",
	"MOOvon/UHFojLMon75B+ic5DblNlsjWyuNx8ytwfbTnexQQ5je16LChJIpMvD+du2Jhs348s5JlGP1Jy",
	"VboPUMJDk3nzM4XXMWNSWKzFGV5poCijSRLxTWveRlGC8T/Q6gZNdlbfQikQXi4zstTnJtXNktD4DuCo",
	"qstwgcodf2SmhIQy6g4npjiXk4cBtTm9Frt907hpPk9VH93zVLU4nKj/voT/Hp4cw5tiSeKzmffmW1ii",
	"FuaFJ+VK5utg3YMEqtO35z/B5wD9PEVCbhMC622eacXhPbyypFDE0jwnPUY3CcGCoBTe0IbMMpepAhTG",
	"JLz/yBxuj9y4ds2kWvr6OFRj959BC+mZDFtO9Gw9VfOB+k/u0u5nDdkdQZsnymAxL0uJNtr3agadOWa8",
	"AsnWnIlNbhu1JZJbxKz42BSzIkFS14HTVStFLiBdMfqq4tUlWrX9t3sP6DSMlgmf66pMsuaD1fZF0ii0",
	"1HRkGFW9x3msQ4P8TSOmgRcT1Vkr40+mrlrnfOM8xToDNcVhTJlOc4XsVpv9YnIzq8k2Lc4a1WFQas3e",
	"4zaOoqotuqbAbT2pNkWG8UHoVkDyEsjWSLJZJvYZzTLvNUCClyd80yzETB0M+JpkGY10l5SmNPNKacYf",
	"KYnKckz78EfRu00U9CAO4uV4TcKYdNffioNXK4Fem8TY8ogGpyJTnbc0ye2ZKQAP4opk2iloUmPtKRlK",
	"DemIFLRQmpwwmWwRXTh4x1igNE8kXSUEYUhO9tv0ZsoGw+KMuBd560AGU9nSpxy+SW1l9sCTcl1ymlGy",
	"1hYSEVI/HAhJ3DZdPcy4Ossmicl47yLJm2LAvW7TbO/BRCjHa07+wVa77E0HWxm40MOxk+HeAGzqBF5K",
	"U6fFjsnr8pr7TBx6Dp60Hufz58+f/38AAAD//yLk7tQNtwAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
