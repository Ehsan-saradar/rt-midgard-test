// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {

	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Represents a digital currency amount
type Coin struct {

	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {

	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync bool `json:"inSync"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string  `json:"address"`
	Chain   string  `json:"chain"`
	GasRate *string `json:"gas_rate,omitempty"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                    int64  `json:"AsgardSize"`
	BadValidatorRate              int64  `json:"BadValidatorRate"`
	BadValidatorRedline           int    `json:"BadValidatorRedline"`
	BlocksPerYear                 int64  `json:"BlocksPerYear"`
	ChurnInterval                 int64  `json:"ChurnInterval"`
	ChurnRetryInterval            int64  `json:"ChurnRetryInterval"`
	DesiredValidatorSet           int64  `json:"DesiredValidatorSet"`
	DoubleSignMaxAge              int64  `json:"DoubleSignMaxAge"`
	EmissionCurve                 int64  `json:"EmissionCurve"`
	FailKeygenSlashPoints         int64  `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints        int64  `json:"FailKeysignSlashPoints"`
	FullImpLossProtectionBlocks   int64  `json:"FullImpLossProtectionBlocks"`
	FundMigrationInterval         int64  `json:"FundMigrationInterval"`
	IncentiveCurve                int64  `json:"IncentiveCurve"`
	JailTimeKeygen                int64  `json:"JailTimeKeygen"`
	JailTimeKeysign               int64  `json:"JailTimeKeysign"`
	LackOfObservationPenalty      int64  `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks         int64  `json:"LiquidityLockUpBlocks"`
	MaxAvailablePools             int64  `json:"MaxAvailablePools"`
	MaxSwapsPerBlock              int64  `json:"MaxSwapsPerBlock"`
	MinRunePoolDepth              int64  `json:"MinRunePoolDepth"`
	MinSlashPointsForBadValidator int64  `json:"MinSlashPointsForBadValidator"`
	MinSwapsPerBlock              int64  `json:"MinSwapsPerBlock"`
	MinimumBondInRune             int64  `json:"MinimumBondInRune"`
	MinimumNodesForBFT            int64  `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil      int64  `json:"MinimumNodesForYggdrasil"`
	NativeTransactionFee          int64  `json:"NativeTransactionFee"`
	NewPoolCycle                  *int64 `json:"NewPoolCycle,omitempty"`
	ObservationDelayFlexibility   int64  `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints            int64  `json:"ObserveSlashPoints"`
	OldValidatorRate              int64  `json:"OldValidatorRate"`
	OutboundTransactionFee        int64  `json:"OutboundTransactionFee"`
	PoolCycle                     int64  `json:"PoolCycle"`
	SigningTransactionPeriod      int64  `json:"SigningTransactionPeriod"`
	VirtualMultSynths             int64  `json:"VirtualMultSynths"`
	YggFundLimit                  int64  `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock []LastblockItem

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn int64  `json:"last_observed_in"`
	LastSignedOut  int64  `json:"last_signed_out"`
	Thorchain      int64  `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {

	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// ObservedChain defines model for ObservedChain.
type ObservedChain struct {
	Chain  string `json:"chain"`
	Height int    `json:"height"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`
	Asset                  string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Int64, number of unique adresses that initiated swaps transactions in the period.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// PreflightStatus defines model for PreflightStatus.
type PreflightStatus struct {
	Code   int    `json:"code"`
	Reason string `json:"reason"`
	Status string `json:"status"`
}

// ProxiedNode defines model for ProxiedNode.
type ProxiedNode struct {
	ActiveBlockHeight int    `json:"active_block_height"`
	Bond              string `json:"bond"`
	BondAddress       string `json:"bond_address"`
	CurrentAward      string `json:"current_award"`
	ForcedToLeave     bool   `json:"forced_to_leave"`
	IpAddress         string `json:"ip_address"`
	Jail              struct {
		NodeAddress *string `json:"node_address,omitempty"`
	} `json:"jail"`
	LeaveHeight     int             `json:"leave_height"`
	NodeAddress     string          `json:"node_address"`
	ObserveChains   []ObservedChain `json:"observe_chains"`
	PreflightStatus PreflightStatus `json:"preflight_status"`
	PubKeySet       struct {
		Ed25519   string `json:"ed25519"`
		Secp256k1 string `json:"secp256k1"`
	} `json:"pub_key_set"`
	RequestedToLeave    bool     `json:"requested_to_leave"`
	SignerMembership    []string `json:"signer_membership"`
	SlashPoints         int      `json:"slash_points"`
	Status              string   `json:"status"`
	StatusSince         int      `json:"status_since"`
	ValidatorConsPubKey string   `json:"validator_cons_pub_key"`
	Version             string   `json:"version"`
}

// ProxiedNodes defines model for ProxiedNodes.
type ProxiedNodes []ProxiedNode

// Queue defines model for Queue.
type Queue struct {
	Internal int `json:"internal"`
	Outbound int `json:"outbound"`
	Swap     int `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64, unique users (addresses) initiating swaps in the last 24 hours.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, unique users (addresses) initiating swaps in the last 30 days.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Int64, unique users (addresses) initiating swaps since beginning.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {

	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {

	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at the end of the interval
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ProxiedNodesResponse defines model for ProxiedNodesResponse.
type ProxiedNodesResponse ProxiedNodes

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {

	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
